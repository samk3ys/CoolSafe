
a:/Documents/Programming/Particle/BLE-PowerSource/target/1.4.4/xenon/BLE-PowerSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004484  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018544  2**0
                  CONTENTS
  4 .data         00000078  2003e2cc  000d84a0  0000e2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004ac  2003e344  2003e344  0001e344  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8518  000d8518  00018518  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8540  000d8540  00018540  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c0a70  00000000  00000000  00018544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e9d5  00000000  00000000  000d8fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cf8f  00000000  00000000  000e7989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025a0  00000000  00000000  00104918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004520  00000000  00000000  00106eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000318db  00000000  00000000  0010b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000226c5  00000000  00000000  0013ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fdac3  00000000  00000000  0015f378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce88  00000000  00000000  0025ce3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd3e 	bl	d7aae <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fd5e 	bl	d7afa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2cc 	.word	0x2003e2cc
   d4048:	000d84a0 	.word	0x000d84a0
   d404c:	2003e344 	.word	0x2003e344
   d4050:	2003e344 	.word	0x2003e344
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fec5 	bl	d6de8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d84a0 	.word	0x000d84a0
   d4080:	000d8464 	.word	0x000d8464

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b84a 	b.w	d411c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f89b 	bl	d41c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 be77 	b.w	d6d84 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc3f 	b.w	d4918 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc45 	b.w	d4928 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc43 	b.w	d4928 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fba0 	bl	d47f0 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d454d 	.word	0x000d454d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f001 ff88 	bl	d5ff0 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f002 f975 	bl	d63d0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f002 ff71 	bl	d6fcc <_Z16_fetch_usbserialv>
   d40ea:	f002 ff63 	bl	d6fb4 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f002 f871 	bl	d61dc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d7d6c 	.word	0x000d7d6c
   d4104:	000d7d54 	.word	0x000d7d54

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f003 fb54 	bl	d77c0 <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <setup>:
// We don't actually have a thermometer here, we just randomly adjust this value
float lastValue = 37.0; // 98.6 deg F;

uint8_t lastBattery = 100;

void setup() {
   d411c:	b510      	push	{r4, lr}
   d411e:	b096      	sub	sp, #88	; 0x58
	(void)logHandler; // Does nothing, just to eliminate the unused variable warning

	BLE.addCharacteristic(batStateCharacteristic);
   d4120:	f001 f80a 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4124:	4a23      	ldr	r2, [pc, #140]	; (d41b4 <setup+0x98>)
   d4126:	4601      	mov	r1, r0
   d4128:	a80d      	add	r0, sp, #52	; 0x34
   d412a:	f001 fc63 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d412e:	a80d      	add	r0, sp, #52	; 0x34
   d4130:	f001 f8be 	bl	d52b0 <_ZN8particle17BleCharacteristicD1Ev>
	BLE.addCharacteristic(powerSourceCharacteristic);
   d4134:	f001 f800 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4138:	4a1f      	ldr	r2, [pc, #124]	; (d41b8 <setup+0x9c>)
   d413a:	4601      	mov	r1, r0
   d413c:	a80d      	add	r0, sp, #52	; 0x34
   d413e:	f001 fc59 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4142:	a80d      	add	r0, sp, #52	; 0x34
   d4144:	f001 f8b4 	bl	d52b0 <_ZN8particle17BleCharacteristicD1Ev>
	BLE.addCharacteristic(batLevelCharacteristic);
   d4148:	f000 fff6 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d414c:	4a1b      	ldr	r2, [pc, #108]	; (d41bc <setup+0xa0>)
   d414e:	4601      	mov	r1, r0
   d4150:	a80d      	add	r0, sp, #52	; 0x34
   d4152:	f001 fc4f 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4156:	a80d      	add	r0, sp, #52	; 0x34
   d4158:	f001 f8aa 	bl	d52b0 <_ZN8particle17BleCharacteristicD1Ev>

	BleAdvertisingData advData;
   d415c:	a80d      	add	r0, sp, #52	; 0x34
   d415e:	f000 fed0 	bl	d4f02 <_ZN8particle18BleAdvertisingDataC1Ev>
	// Advertise our private service only
	advData.appendServiceUUID(serviceUuid);
   d4162:	4917      	ldr	r1, [pc, #92]	; (d41c0 <setup+0xa4>)
   d4164:	a803      	add	r0, sp, #12
   d4166:	f000 fd77 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d416a:	a903      	add	r1, sp, #12
   d416c:	a808      	add	r0, sp, #32
   d416e:	f000 fd73 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4172:	a808      	add	r0, sp, #32
   d4174:	f000 fdae 	bl	d4cd4 <_ZNK8particle7BleUuid4typeEv>
   d4178:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d417a:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d417c:	b944      	cbnz	r4, d4190 <setup+0x74>
            uint16_t uuid16 = tempUUID.shorted();
   d417e:	f000 fdc6 	bl	d4d0e <_ZNK8particle7BleUuid7shortedEv>
   d4182:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4184:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4186:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d418a:	2103      	movs	r1, #3
   d418c:	9400      	str	r4, [sp, #0]
   d418e:	e006      	b.n	d419e <setup+0x82>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4190:	f000 fdbf 	bl	d4d12 <_ZNK8particle7BleUuid8rawBytesEv>
   d4194:	2300      	movs	r3, #0
   d4196:	9300      	str	r3, [sp, #0]
   d4198:	4602      	mov	r2, r0
   d419a:	2310      	movs	r3, #16
   d419c:	2107      	movs	r1, #7
   d419e:	a80d      	add	r0, sp, #52	; 0x34
   d41a0:	f000 fe68 	bl	d4e74 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
	// Continuously advertise when not connected
	BLE.advertise(&advData);
   d41a4:	f000 ffc8 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41a8:	2200      	movs	r2, #0
   d41aa:	a90d      	add	r1, sp, #52	; 0x34
   d41ac:	f001 f831 	bl	d5212 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d41b0:	b016      	add	sp, #88	; 0x58
   d41b2:	bd10      	pop	{r4, pc}
   d41b4:	2003e390 	.word	0x2003e390
   d41b8:	2003e36c 	.word	0x2003e36c
   d41bc:	2003e388 	.word	0x2003e388
   d41c0:	2003e374 	.word	0x2003e374

000d41c4 <loop>:

void loop() {
   d41c4:	b513      	push	{r0, r1, r4, lr}
	if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
   d41c6:	4c1a      	ldr	r4, [pc, #104]	; (d4230 <loop+0x6c>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41c8:	f000 f9c8 	bl	d455c <HAL_Timer_Get_Milli_Seconds>
   d41cc:	6823      	ldr	r3, [r4, #0]
   d41ce:	1ac0      	subs	r0, r0, r3
   d41d0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d41d4:	d329      	bcc.n	d422a <loop+0x66>
   d41d6:	f000 f9c1 	bl	d455c <HAL_Timer_Get_Milli_Seconds>
		lastUpdate = millis();
   d41da:	6020      	str	r0, [r4, #0]

		if (BLE.connected()) {
   d41dc:	f000 ffac 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41e0:	f001 f834 	bl	d524c <_ZNK8particle14BleLocalDevice9connectedEv>
   d41e4:	b308      	cbz	r0, d422a <loop+0x66>
			// POWER_SOURCE_USB_HOST = 2,
			// POWER_SOURCE_USB_ADAPTER = 3,
			// POWER_SOURCE_USB_OTG = 4,
			// POWER_SOURCE_BATTERY = 5
			//uint8_t powerSource = (uint8_t) DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_POWER_SOURCE);
			uint8_t powerSource = (uint8_t) 2;
   d41e6:	a902      	add	r1, sp, #8
   d41e8:	2302      	movs	r3, #2
   d41ea:	f801 3d03 	strb.w	r3, [r1, #-3]!
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d41ee:	2201      	movs	r2, #1
   d41f0:	2300      	movs	r3, #0
   d41f2:	4810      	ldr	r0, [pc, #64]	; (d4234 <loop+0x70>)
			uint8_t batState = (uint8_t) 6;
			batStateCharacteristic.setValue(batState);

			// Diagnostics data is a fixed point number, convert to integer 0-100 %
			//uint8_t batLevel = (uint8_t) (DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_BATTERY_CHARGE) >> 8);
			uint8_t batLevel = (uint8_t) lastBattery--;
   d41f4:	4c10      	ldr	r4, [pc, #64]	; (d4238 <loop+0x74>)
   d41f6:	f000 feed 	bl	d4fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
			// BATTERY_STATE_CHARGED = 3,
			// BATTERY_STATE_DISCHARGING = 4,
			// BATTERY_STATE_FAULT = 5,
			// BATTERY_STATE_DISCONNECTED = 6
			//uint8_t batState = (uint8_t) DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_BATTERY_STATE);
			uint8_t batState = (uint8_t) 6;
   d41fa:	a902      	add	r1, sp, #8
   d41fc:	2306      	movs	r3, #6
   d41fe:	f801 3d02 	strb.w	r3, [r1, #-2]!
   d4202:	2201      	movs	r2, #1
   d4204:	2300      	movs	r3, #0
   d4206:	480d      	ldr	r0, [pc, #52]	; (d423c <loop+0x78>)
   d4208:	f000 fee4 	bl	d4fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
			batStateCharacteristic.setValue(batState);

			// Diagnostics data is a fixed point number, convert to integer 0-100 %
			//uint8_t batLevel = (uint8_t) (DiagnosticsHelper::getValue(DIAG_ID_SYSTEM_BATTERY_CHARGE) >> 8);
			uint8_t batLevel = (uint8_t) lastBattery--;
   d420c:	7823      	ldrb	r3, [r4, #0]
   d420e:	480c      	ldr	r0, [pc, #48]	; (d4240 <loop+0x7c>)
   d4210:	a902      	add	r1, sp, #8
   d4212:	1e5a      	subs	r2, r3, #1
   d4214:	7022      	strb	r2, [r4, #0]
   d4216:	f801 3d01 	strb.w	r3, [r1, #-1]!
   d421a:	2201      	movs	r2, #1
   d421c:	2300      	movs	r3, #0
   d421e:	f000 fed9 	bl	d4fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
			batLevelCharacteristic.setValue(batLevel);
			if (lastBattery <= 0) {
   d4222:	7823      	ldrb	r3, [r4, #0]
   d4224:	b90b      	cbnz	r3, d422a <loop+0x66>
				lastBattery = 100;
   d4226:	2364      	movs	r3, #100	; 0x64
   d4228:	7023      	strb	r3, [r4, #0]
			}				
		}
	}
   d422a:	b002      	add	sp, #8
   d422c:	bd10      	pop	{r4, pc}
   d422e:	bf00      	nop
   d4230:	2003e398 	.word	0x2003e398
   d4234:	2003e36c 	.word	0x2003e36c
   d4238:	2003e2cc 	.word	0x2003e2cc
   d423c:	2003e390 	.word	0x2003e390
   d4240:	2003e388 	.word	0x2003e388

000d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4244:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4246:	6804      	ldr	r4, [r0, #0]
   d4248:	6843      	ldr	r3, [r0, #4]
   d424a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d424c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d424e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4252:	42a6      	cmp	r6, r4
   d4254:	d004      	beq.n	d4260 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4256:	4620      	mov	r0, r4
   d4258:	f000 fbf4 	bl	d4a44 <_ZN6StringD1Ev>
   d425c:	3414      	adds	r4, #20
   d425e:	e7f8      	b.n	d4252 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4260:	6828      	ldr	r0, [r5, #0]
   d4262:	f000 fb61 	bl	d4928 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4266:	4628      	mov	r0, r5
   d4268:	bd70      	pop	{r4, r5, r6, pc}

000d426a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d426a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d426c:	460e      	mov	r6, r1
   d426e:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4270:	2100      	movs	r1, #0
   d4272:	4604      	mov	r4, r0
   d4274:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4276:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4278:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d427a:	4619      	mov	r1, r3
   d427c:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d427e:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4280:	f000 fcea 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4284:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4286:	4628      	mov	r0, r5
   d4288:	f000 fce6 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d428c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d428e:	9302      	str	r3, [sp, #8]
   d4290:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d4292:	9301      	str	r3, [sp, #4]
   d4294:	4620      	mov	r0, r4
   d4296:	9500      	str	r5, [sp, #0]
   d4298:	ab04      	add	r3, sp, #16
   d429a:	463a      	mov	r2, r7
   d429c:	4631      	mov	r1, r6
   d429e:	f001 faf7 	bl	d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d42a2:	4620      	mov	r0, r4
   d42a4:	b00f      	add	sp, #60	; 0x3c
   d42a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d42a8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d42aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d42ac:	4606      	mov	r6, r0
   d42ae:	460c      	mov	r4, r1
   d42b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d42b2:	d916      	bls.n	d42e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d42b4:	4290      	cmp	r0, r2
   d42b6:	d215      	bcs.n	d42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d42b8:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d42bc:	1a6c      	subs	r4, r5, r1
   d42be:	f1a1 0714 	sub.w	r7, r1, #20
   d42c2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d42c4:	42af      	cmp	r7, r5
   d42c6:	d01c      	beq.n	d4302 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d42c8:	b12c      	cbz	r4, d42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d42ca:	4629      	mov	r1, r5
   d42cc:	4620      	mov	r0, r4
   d42ce:	f000 fba9 	bl	d4a24 <_ZN6StringC1EOS_>
   d42d2:	7c2b      	ldrb	r3, [r5, #16]
   d42d4:	7423      	strb	r3, [r4, #16]
   d42d6:	4628      	mov	r0, r5
   d42d8:	f000 fbb4 	bl	d4a44 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d42dc:	3d14      	subs	r5, #20
   d42de:	3c14      	subs	r4, #20
   d42e0:	e7f0      	b.n	d42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d42e2:	d00e      	beq.n	d4302 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d42e4:	42ac      	cmp	r4, r5
   d42e6:	d00c      	beq.n	d4302 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d42e8:	b12e      	cbz	r6, d42f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d42ea:	4621      	mov	r1, r4
   d42ec:	4630      	mov	r0, r6
   d42ee:	f000 fb99 	bl	d4a24 <_ZN6StringC1EOS_>
   d42f2:	7c23      	ldrb	r3, [r4, #16]
   d42f4:	7433      	strb	r3, [r6, #16]
   d42f6:	4620      	mov	r0, r4
   d42f8:	f000 fba4 	bl	d4a44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d42fc:	3414      	adds	r4, #20
   d42fe:	3614      	adds	r6, #20
   d4300:	e7f0      	b.n	d42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4308:	2300      	movs	r3, #0
   d430a:	6003      	str	r3, [r0, #0]
   d430c:	6043      	str	r3, [r0, #4]
   d430e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4310:	684e      	ldr	r6, [r1, #4]
   d4312:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4314:	4604      	mov	r4, r0
   d4316:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4318:	dd24      	ble.n	d4364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d431a:	f04f 0814 	mov.w	r8, #20
   d431e:	fb08 f006 	mul.w	r0, r8, r6
   d4322:	f000 faf9 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4326:	4605      	mov	r5, r0
   d4328:	b1e0      	cbz	r0, d4364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d432a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d432e:	fb08 1202 	mla	r2, r8, r2, r1
   d4332:	f7ff ffb9 	bl	d42a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4336:	6820      	ldr	r0, [r4, #0]
   d4338:	f000 faf6 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d433c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d433e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4340:	683e      	ldr	r6, [r7, #0]
   d4342:	687b      	ldr	r3, [r7, #4]
   d4344:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4348:	4546      	cmp	r6, r8
   d434a:	d009      	beq.n	d4360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d434c:	b12d      	cbz	r5, d435a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d434e:	4631      	mov	r1, r6
   d4350:	4628      	mov	r0, r5
   d4352:	f000 fbe0 	bl	d4b16 <_ZN6StringC1ERKS_>
   d4356:	7c33      	ldrb	r3, [r6, #16]
   d4358:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d435a:	3614      	adds	r6, #20
   d435c:	3514      	adds	r5, #20
   d435e:	e7f3      	b.n	d4348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4360:	687b      	ldr	r3, [r7, #4]
   d4362:	6063      	str	r3, [r4, #4]
    }
}
   d4364:	4620      	mov	r0, r4
   d4366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d436c <_GLOBAL__sub_I_SystemMode>:
   d436c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4370:	b095      	sub	sp, #84	; 0x54

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4372:	f000 f8d3 	bl	d451c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4376:	4b4d      	ldr	r3, [pc, #308]	; (d44ac <_GLOBAL__sub_I_SystemMode+0x140>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4378:	4e4d      	ldr	r6, [pc, #308]	; (d44b0 <_GLOBAL__sub_I_SystemMode+0x144>)
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d437a:	f8df 9170 	ldr.w	r9, [pc, #368]	; d44ec <_GLOBAL__sub_I_SystemMode+0x180>
   d437e:	2400      	movs	r4, #0
   d4380:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4384:	809a      	strh	r2, [r3, #4]
   d4386:	701c      	strb	r4, [r3, #0]
   d4388:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d438a:	2003      	movs	r0, #3
   d438c:	f000 fa50 	bl	d4830 <set_system_mode>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4390:	9404      	str	r4, [sp, #16]
   d4392:	9405      	str	r4, [sp, #20]
   d4394:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4396:	f002 fe19 	bl	d6fcc <_Z16_fetch_usbserialv>
   d439a:	a904      	add	r1, sp, #16
   d439c:	4680      	mov	r8, r0
   d439e:	a807      	add	r0, sp, #28
   d43a0:	f7ff ffb0 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d43a4:	4637      	mov	r7, r6
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d43a6:	a907      	add	r1, sp, #28
   d43a8:	a80a      	add	r0, sp, #40	; 0x28
   d43aa:	f7ff ffab 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d43ae:	4b41      	ldr	r3, [pc, #260]	; (d44b4 <_GLOBAL__sub_I_SystemMode+0x148>)
   d43b0:	f847 3b04 	str.w	r3, [r7], #4
   d43b4:	ad0f      	add	r5, sp, #60	; 0x3c
   d43b6:	a90a      	add	r1, sp, #40	; 0x28
   d43b8:	4628      	mov	r0, r5
   d43ba:	f7ff ffa3 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d43be:	462a      	mov	r2, r5
   d43c0:	2101      	movs	r1, #1
   d43c2:	4638      	mov	r0, r7
   d43c4:	f002 f967 	bl	d6696 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d43c8:	4628      	mov	r0, r5
   d43ca:	f7ff ff3b 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d43ce:	a80a      	add	r0, sp, #40	; 0x28
   d43d0:	f7ff ff38 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43d4:	4b38      	ldr	r3, [pc, #224]	; (d44b8 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d43d6:	6033      	str	r3, [r6, #0]
   d43d8:	f8c6 8020 	str.w	r8, [r6, #32]
   d43dc:	a807      	add	r0, sp, #28
   d43de:	f7ff ff31 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43e2:	4b36      	ldr	r3, [pc, #216]	; (d44bc <_GLOBAL__sub_I_SystemMode+0x150>)
   d43e4:	6033      	str	r3, [r6, #0]
        Serial.begin();
   d43e6:	f002 fdf1 	bl	d6fcc <_Z16_fetch_usbserialv>
   d43ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ee:	f002 fddd 	bl	d6fac <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d43f2:	f001 fdfd 	bl	d5ff0 <_ZN5spark10LogManager8instanceEv>
   d43f6:	4631      	mov	r1, r6
   d43f8:	f002 f8e0 	bl	d65bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d43fc:	4f30      	ldr	r7, [pc, #192]	; (d44c0 <_GLOBAL__sub_I_SystemMode+0x154>)
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d43fe:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d44f0 <_GLOBAL__sub_I_SystemMode+0x184>

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4402:	a804      	add	r0, sp, #16
   d4404:	f7ff ff1e 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4408:	4630      	mov	r0, r6

const unsigned long UPDATE_INTERVAL_MS = 2000;
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d440a:	4e2e      	ldr	r6, [pc, #184]	; (d44c4 <_GLOBAL__sub_I_SystemMode+0x158>)

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d440c:	492e      	ldr	r1, [pc, #184]	; (d44c8 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d440e:	463a      	mov	r2, r7
   d4410:	f003 f9c8 	bl	d77a4 <__aeabi_atexit>

const unsigned long UPDATE_INTERVAL_MS = 2000;
unsigned long lastUpdate = 0;

// Private battery and power service UUID
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d4414:	492d      	ldr	r1, [pc, #180]	; (d44cc <_GLOBAL__sub_I_SystemMode+0x160>)
   d4416:	4630      	mov	r0, r6
   d4418:	f000 fd09 	bl	d4e2e <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic batStateCharacteristic("batState", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d441c:	492c      	ldr	r1, [pc, #176]	; (d44d0 <_GLOBAL__sub_I_SystemMode+0x164>)
   d441e:	a80a      	add	r0, sp, #40	; 0x28
   d4420:	f000 fd05 	bl	d4e2e <_ZN8particle7BleUuidC1EPKc>
   d4424:	4631      	mov	r1, r6
   d4426:	4628      	mov	r0, r5
   d4428:	f000 fc16 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
   d442c:	ab0a      	add	r3, sp, #40	; 0x28
   d442e:	9402      	str	r4, [sp, #8]
   d4430:	9401      	str	r4, [sp, #4]
   d4432:	9500      	str	r5, [sp, #0]
   d4434:	2210      	movs	r2, #16
   d4436:	4927      	ldr	r1, [pc, #156]	; (d44d4 <_GLOBAL__sub_I_SystemMode+0x168>)
   d4438:	4648      	mov	r0, r9
   d443a:	f7ff ff16 	bl	d426a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d443e:	463a      	mov	r2, r7
   d4440:	4641      	mov	r1, r8
   d4442:	4648      	mov	r0, r9
   d4444:	f003 f9ae 	bl	d77a4 <__aeabi_atexit>
BleCharacteristic powerSourceCharacteristic("powerSource", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
   d4448:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d44f4 <_GLOBAL__sub_I_SystemMode+0x188>
   d444c:	4922      	ldr	r1, [pc, #136]	; (d44d8 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d444e:	a80a      	add	r0, sp, #40	; 0x28
   d4450:	f000 fced 	bl	d4e2e <_ZN8particle7BleUuidC1EPKc>
   d4454:	4631      	mov	r1, r6
   d4456:	4628      	mov	r0, r5
   d4458:	f000 fbfe 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
   d445c:	ab0a      	add	r3, sp, #40	; 0x28
   d445e:	9402      	str	r4, [sp, #8]
   d4460:	9401      	str	r4, [sp, #4]
   d4462:	9500      	str	r5, [sp, #0]
   d4464:	2210      	movs	r2, #16
   d4466:	491d      	ldr	r1, [pc, #116]	; (d44dc <_GLOBAL__sub_I_SystemMode+0x170>)
   d4468:	4648      	mov	r0, r9
   d446a:	f7ff fefe 	bl	d426a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d446e:	463a      	mov	r2, r7
   d4470:	4641      	mov	r1, r8
   d4472:	4648      	mov	r0, r9
   d4474:	f003 f996 	bl	d77a4 <__aeabi_atexit>
BleCharacteristic batLevelCharacteristic("batLevel", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   d4478:	4919      	ldr	r1, [pc, #100]	; (d44e0 <_GLOBAL__sub_I_SystemMode+0x174>)
   d447a:	a80a      	add	r0, sp, #40	; 0x28
   d447c:	f000 fcd7 	bl	d4e2e <_ZN8particle7BleUuidC1EPKc>
   d4480:	4631      	mov	r1, r6
   d4482:	4e18      	ldr	r6, [pc, #96]	; (d44e4 <_GLOBAL__sub_I_SystemMode+0x178>)
   d4484:	4628      	mov	r0, r5
   d4486:	f000 fbe7 	bl	d4c58 <_ZN8particle7BleUuidC1ERKS0_>
   d448a:	ab0a      	add	r3, sp, #40	; 0x28
   d448c:	9402      	str	r4, [sp, #8]
   d448e:	9401      	str	r4, [sp, #4]
   d4490:	9500      	str	r5, [sp, #0]
   d4492:	2210      	movs	r2, #16
   d4494:	4914      	ldr	r1, [pc, #80]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0x17c>)
   d4496:	4630      	mov	r0, r6
   d4498:	f7ff fee7 	bl	d426a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d449c:	463a      	mov	r2, r7
   d449e:	4641      	mov	r1, r8
   d44a0:	4630      	mov	r0, r6
   d44a2:	f003 f97f 	bl	d77a4 <__aeabi_atexit>
			if (lastBattery <= 0) {
				lastBattery = 100;
			}				
		}
	}
   d44a6:	b015      	add	sp, #84	; 0x54
   d44a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44ac:	2003e39c 	.word	0x2003e39c
   d44b0:	2003e348 	.word	0x2003e348
   d44b4:	000d7d54 	.word	0x000d7d54
   d44b8:	000d81ac 	.word	0x000d81ac
   d44bc:	000d7d6c 	.word	0x000d7d6c
   d44c0:	2003e344 	.word	0x2003e344
   d44c4:	2003e374 	.word	0x2003e374
   d44c8:	000d40d5 	.word	0x000d40d5
   d44cc:	000d7d7c 	.word	0x000d7d7c
   d44d0:	000d7da1 	.word	0x000d7da1
   d44d4:	000d7dc6 	.word	0x000d7dc6
   d44d8:	000d7dcf 	.word	0x000d7dcf
   d44dc:	000d7df4 	.word	0x000d7df4
   d44e0:	000d7e00 	.word	0x000d7e00
   d44e4:	2003e388 	.word	0x2003e388
   d44e8:	000d7e25 	.word	0x000d7e25
   d44ec:	2003e390 	.word	0x2003e390
   d44f0:	000d52b1 	.word	0x000d52b1
   d44f4:	2003e36c 	.word	0x2003e36c

000d44f8 <_GLOBAL__sub_I__ZN17DiagnosticsHelper8getValueEt>:
   d44f8:	f000 b810 	b.w	d451c <HAL_Pin_Map>

000d44fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <netdb_freeaddrinfo+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	689b      	ldr	r3, [r3, #8]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030268 	.word	0x00030268

000d450c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <netdb_getaddrinfo+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	68db      	ldr	r3, [r3, #12]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030268 	.word	0x00030268

000d451c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_Pin_Map+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	681b      	ldr	r3, [r3, #0]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003022c 	.word	0x0003022c

000d452c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_SPI_Init+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	69db      	ldr	r3, [r3, #28]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030230 	.word	0x00030230

000d453c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_RNG_GetRandomNumber+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	685b      	ldr	r3, [r3, #4]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030218 	.word	0x00030218

000d454c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_Delay_Microseconds+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	68db      	ldr	r3, [r3, #12]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030218 	.word	0x00030218

000d455c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030218 	.word	0x00030218

000d456c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <hal_ble_stack_init+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	689b      	ldr	r3, [r3, #8]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030274 	.word	0x00030274

000d457c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <hal_ble_gap_set_advertising_data+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030274 	.word	0x00030274

000d458c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <hal_ble_gap_set_scan_response_data+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030274 	.word	0x00030274

000d459c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <hal_ble_gap_start_advertising+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030274 	.word	0x00030274

000d45ac <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b03      	ldr	r3, [pc, #12]	; (d45bc <hal_ble_gap_disconnect+0x10>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d45b6:	9301      	str	r3, [sp, #4]
   d45b8:	bd08      	pop	{r3, pc}
   d45ba:	0000      	.short	0x0000
   d45bc:	00030274 	.word	0x00030274

000d45c0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b03      	ldr	r3, [pc, #12]	; (d45d0 <hal_ble_gatt_server_add_service+0x10>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d45ca:	9301      	str	r3, [sp, #4]
   d45cc:	bd08      	pop	{r3, pc}
   d45ce:	0000      	.short	0x0000
   d45d0:	00030274 	.word	0x00030274

000d45d4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b03      	ldr	r3, [pc, #12]	; (d45e4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d45de:	9301      	str	r3, [sp, #4]
   d45e0:	bd08      	pop	{r3, pc}
   d45e2:	0000      	.short	0x0000
   d45e4:	00030274 	.word	0x00030274

000d45e8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b03      	ldr	r3, [pc, #12]	; (d45f8 <hal_ble_gatt_client_write_with_response+0x10>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d45f2:	9301      	str	r3, [sp, #4]
   d45f4:	bd08      	pop	{r3, pc}
   d45f6:	0000      	.short	0x0000
   d45f8:	00030274 	.word	0x00030274

000d45fc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b03      	ldr	r3, [pc, #12]	; (d460c <hal_ble_gatt_client_write_without_response+0x10>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4606:	9301      	str	r3, [sp, #4]
   d4608:	bd08      	pop	{r3, pc}
   d460a:	0000      	.short	0x0000
   d460c:	00030274 	.word	0x00030274

000d4610 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b03      	ldr	r3, [pc, #12]	; (d4620 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d461a:	9301      	str	r3, [sp, #4]
   d461c:	bd08      	pop	{r3, pc}
   d461e:	0000      	.short	0x0000
   d4620:	00030274 	.word	0x00030274

000d4624 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b03      	ldr	r3, [pc, #12]	; (d4634 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d462e:	9301      	str	r3, [sp, #4]
   d4630:	bd08      	pop	{r3, pc}
   d4632:	0000      	.short	0x0000
   d4634:	00030274 	.word	0x00030274

000d4638 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b03      	ldr	r3, [pc, #12]	; (d4648 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4642:	9301      	str	r3, [sp, #4]
   d4644:	bd08      	pop	{r3, pc}
   d4646:	0000      	.short	0x0000
   d4648:	00030274 	.word	0x00030274

000d464c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b03      	ldr	r3, [pc, #12]	; (d465c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4656:	9301      	str	r3, [sp, #4]
   d4658:	bd08      	pop	{r3, pc}
   d465a:	0000      	.short	0x0000
   d465c:	00030274 	.word	0x00030274

000d4660 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_thread_is_current+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	689b      	ldr	r3, [r3, #8]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_thread_join+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	691b      	ldr	r3, [r3, #16]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <os_thread_cleanup+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	695b      	ldr	r3, [r3, #20]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030248 	.word	0x00030248

000d4690 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <os_mutex_create+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030248 	.word	0x00030248

000d46a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <os_mutex_recursive_create+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030248 	.word	0x00030248

000d46b0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <os_mutex_recursive_lock+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030248 	.word	0x00030248

000d46c0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <os_mutex_recursive_unlock+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030248 	.word	0x00030248

000d46d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <inet_inet_ntop+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	695b      	ldr	r3, [r3, #20]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030264 	.word	0x00030264

000d46e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USART_Init+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	681b      	ldr	r3, [r3, #0]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003023c 	.word	0x0003023c

000d46f0 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USART_End+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	689b      	ldr	r3, [r3, #8]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003023c 	.word	0x0003023c

000d4700 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USART_Write_Data+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	68db      	ldr	r3, [r3, #12]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003023c 	.word	0x0003023c

000d4710 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USART_Available_Data+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	691b      	ldr	r3, [r3, #16]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003023c 	.word	0x0003023c

000d4720 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USART_Read_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	695b      	ldr	r3, [r3, #20]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USART_Peek_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	699b      	ldr	r3, [r3, #24]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003023c 	.word	0x0003023c

000d4740 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USART_Flush_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	69db      	ldr	r3, [r3, #28]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003023c 	.word	0x0003023c

000d4750 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_USART_Available_Data_For_Write+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003023c 	.word	0x0003023c

000d4760 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USART_BeginConfig+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003023c 	.word	0x0003023c

000d4770 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_USB_USART_Init+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	681b      	ldr	r3, [r3, #0]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003024c 	.word	0x0003024c

000d4780 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USB_USART_Begin+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	685b      	ldr	r3, [r3, #4]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003024c 	.word	0x0003024c

000d4790 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USB_USART_End+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	689b      	ldr	r3, [r3, #8]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003024c 	.word	0x0003024c

000d47a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USB_USART_Available_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	691b      	ldr	r3, [r3, #16]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003024c 	.word	0x0003024c

000d47b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	695b      	ldr	r3, [r3, #20]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003024c 	.word	0x0003024c

000d47c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USB_USART_Receive_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003024c 	.word	0x0003024c

000d47d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USB_USART_Send_Data+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003024c 	.word	0x0003024c

000d47e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USB_USART_Flush_Data+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a1b      	ldr	r3, [r3, #32]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003024c 	.word	0x0003024c

000d47f0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <panic_+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030260 	.word	0x00030260

000d4800 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <log_message+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030260 	.word	0x00030260

000d4810 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <log_level_name+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030260 	.word	0x00030260

000d4820 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <log_set_callbacks+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030260 	.word	0x00030260

000d4830 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <set_system_mode+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	685b      	ldr	r3, [r3, #4]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030220 	.word	0x00030220

000d4840 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b03      	ldr	r3, [pc, #12]	; (d4850 <system_ctrl_set_app_request_handler+0x10>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d484a:	9301      	str	r3, [sp, #4]
   d484c:	bd08      	pop	{r3, pc}
   d484e:	0000      	.short	0x0000
   d4850:	00030220 	.word	0x00030220

000d4854 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b03      	ldr	r3, [pc, #12]	; (d4864 <system_ctrl_set_result+0x10>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d485e:	9301      	str	r3, [sp, #4]
   d4860:	bd08      	pop	{r3, pc}
   d4862:	0000      	.short	0x0000
   d4864:	00030220 	.word	0x00030220

000d4868 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <network_connect+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	685b      	ldr	r3, [r3, #4]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030240 	.word	0x00030240

000d4878 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <network_connecting+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	689b      	ldr	r3, [r3, #8]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030240 	.word	0x00030240

000d4888 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <network_disconnect+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	68db      	ldr	r3, [r3, #12]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030240 	.word	0x00030240

000d4898 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <network_ready+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	691b      	ldr	r3, [r3, #16]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030240 	.word	0x00030240

000d48a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <network_on+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	695b      	ldr	r3, [r3, #20]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030240 	.word	0x00030240

000d48b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <network_off+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	699b      	ldr	r3, [r3, #24]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030240 	.word	0x00030240

000d48c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <network_listen+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	69db      	ldr	r3, [r3, #28]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030240 	.word	0x00030240

000d48d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <network_listening+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6a1b      	ldr	r3, [r3, #32]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030240 	.word	0x00030240

000d48e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <network_set_listen_timeout+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030240 	.word	0x00030240

000d48f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <network_get_listen_timeout+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030240 	.word	0x00030240

000d4908 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <spark_set_random_seed_from_cloud_handler+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030244 	.word	0x00030244

000d4918 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <malloc+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	681b      	ldr	r3, [r3, #0]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003021c 	.word	0x0003021c

000d4928 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <free+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	685b      	ldr	r3, [r3, #4]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003021c 	.word	0x0003021c

000d4938 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <realloc+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	689b      	ldr	r3, [r3, #8]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003021c 	.word	0x0003021c

000d4948 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <vsnprintf+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003021c 	.word	0x0003021c

000d4958 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4958:	2200      	movs	r2, #0
   d495a:	4611      	mov	r1, r2
   d495c:	6840      	ldr	r0, [r0, #4]
   d495e:	f7ff bfbb 	b.w	d48d8 <network_listening>

000d4962 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4962:	2200      	movs	r2, #0
   d4964:	4611      	mov	r1, r2
   d4966:	6840      	ldr	r0, [r0, #4]
   d4968:	f7ff bfc6 	b.w	d48f8 <network_get_listen_timeout>

000d496c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d496c:	2200      	movs	r2, #0
   d496e:	6840      	ldr	r0, [r0, #4]
   d4970:	f7ff bfba 	b.w	d48e8 <network_set_listen_timeout>

000d4974 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4974:	2200      	movs	r2, #0
   d4976:	f081 0101 	eor.w	r1, r1, #1
   d497a:	6840      	ldr	r0, [r0, #4]
   d497c:	f7ff bfa4 	b.w	d48c8 <network_listen>

000d4980 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4980:	2300      	movs	r3, #0
   d4982:	461a      	mov	r2, r3
   d4984:	4619      	mov	r1, r3
   d4986:	6840      	ldr	r0, [r0, #4]
   d4988:	f7ff bf96 	b.w	d48b8 <network_off>

000d498c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d498c:	2300      	movs	r3, #0
   d498e:	461a      	mov	r2, r3
   d4990:	4619      	mov	r1, r3
   d4992:	6840      	ldr	r0, [r0, #4]
   d4994:	f7ff bf88 	b.w	d48a8 <network_on>

000d4998 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4998:	2200      	movs	r2, #0
   d499a:	4611      	mov	r1, r2
   d499c:	6840      	ldr	r0, [r0, #4]
   d499e:	f7ff bf7b 	b.w	d4898 <network_ready>

000d49a2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d49a2:	2200      	movs	r2, #0
   d49a4:	4611      	mov	r1, r2
   d49a6:	6840      	ldr	r0, [r0, #4]
   d49a8:	f7ff bf66 	b.w	d4878 <network_connecting>

000d49ac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49ac:	2200      	movs	r2, #0
   d49ae:	2102      	movs	r1, #2
   d49b0:	6840      	ldr	r0, [r0, #4]
   d49b2:	f7ff bf69 	b.w	d4888 <network_disconnect>

000d49b6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49b6:	2300      	movs	r3, #0
   d49b8:	461a      	mov	r2, r3
   d49ba:	6840      	ldr	r0, [r0, #4]
   d49bc:	f7ff bf54 	b.w	d4868 <network_connect>

000d49c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49c0:	4b02      	ldr	r3, [pc, #8]	; (d49cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d49c2:	2203      	movs	r2, #3
   d49c4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d49c6:	4a02      	ldr	r2, [pc, #8]	; (d49d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d49c8:	601a      	str	r2, [r3, #0]
   d49ca:	4770      	bx	lr
   d49cc:	2003e3a4 	.word	0x2003e3a4
   d49d0:	000d7e38 	.word	0x000d7e38

000d49d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d49d4:	4770      	bx	lr

000d49d6 <_ZN8SPIClassD0Ev>:
   d49d6:	b510      	push	{r4, lr}
   d49d8:	2110      	movs	r1, #16
   d49da:	4604      	mov	r4, r0
   d49dc:	f002 fef0 	bl	d77c0 <_ZdlPvj>
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd10      	pop	{r4, pc}

000d49e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d49e4:	b570      	push	{r4, r5, r6, lr}
   d49e6:	4b08      	ldr	r3, [pc, #32]	; (d4a08 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d49e8:	6003      	str	r3, [r0, #0]
   d49ea:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d49ec:	2500      	movs	r5, #0
   d49ee:	460e      	mov	r6, r1
   d49f0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d49f4:	f7ff fe4c 	bl	d4690 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d49f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d49fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d49fc:	f7ff fd96 	bl	d452c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4a00:	60a5      	str	r5, [r4, #8]
}
   d4a02:	4620      	mov	r0, r4
   d4a04:	bd70      	pop	{r4, r5, r6, pc}
   d4a06:	bf00      	nop
   d4a08:	000d7e6c 	.word	0x000d7e6c

000d4a0c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4a0c:	4b04      	ldr	r3, [pc, #16]	; (d4a20 <_GLOBAL__sub_I_System+0x14>)
   d4a0e:	2000      	movs	r0, #0
   d4a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4a14:	7018      	strb	r0, [r3, #0]
   d4a16:	8058      	strh	r0, [r3, #2]
   d4a18:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a1a:	f7ff bf09 	b.w	d4830 <set_system_mode>
   d4a1e:	bf00      	nop
   d4a20:	2003e3ac 	.word	0x2003e3ac

000d4a24 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a24:	2300      	movs	r3, #0
   d4a26:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4a28:	6043      	str	r3, [r0, #4]
	len = 0;
   d4a2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a2c:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4a2e:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4a30:	680c      	ldr	r4, [r1, #0]
   d4a32:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4a34:	684c      	ldr	r4, [r1, #4]
   d4a36:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d4a38:	688c      	ldr	r4, [r1, #8]
   d4a3a:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d4a3c:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d4a3e:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d4a40:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d4a42:	bd10      	pop	{r4, pc}

000d4a44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a44:	b510      	push	{r4, lr}
   d4a46:	4604      	mov	r4, r0
{
	free(buffer);
   d4a48:	6800      	ldr	r0, [r0, #0]
   d4a4a:	f7ff ff6d 	bl	d4928 <free>
}
   d4a4e:	4620      	mov	r0, r4
   d4a50:	bd10      	pop	{r4, pc}

000d4a52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a52:	b510      	push	{r4, lr}
   d4a54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a56:	6800      	ldr	r0, [r0, #0]
   d4a58:	b108      	cbz	r0, d4a5e <_ZN6String10invalidateEv+0xc>
   d4a5a:	f7ff ff65 	bl	d4928 <free>
	buffer = NULL;
   d4a5e:	2300      	movs	r3, #0
   d4a60:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a62:	60a3      	str	r3, [r4, #8]
   d4a64:	6063      	str	r3, [r4, #4]
   d4a66:	bd10      	pop	{r4, pc}

000d4a68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a68:	b538      	push	{r3, r4, r5, lr}
   d4a6a:	4604      	mov	r4, r0
   d4a6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a6e:	6800      	ldr	r0, [r0, #0]
   d4a70:	3101      	adds	r1, #1
   d4a72:	f7ff ff61 	bl	d4938 <realloc>
	if (newbuffer) {
   d4a76:	b110      	cbz	r0, d4a7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a78:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4a7c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a7e:	bd38      	pop	{r3, r4, r5, pc}

000d4a80 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a82:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a86:	b113      	cbz	r3, d4a8e <_ZN6String7reserveEj+0xe>
   d4a88:	6843      	ldr	r3, [r0, #4]
   d4a8a:	428b      	cmp	r3, r1
   d4a8c:	d207      	bcs.n	d4a9e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4a8e:	4620      	mov	r0, r4
   d4a90:	f7ff ffea 	bl	d4a68 <_ZN6String12changeBufferEj>
   d4a94:	b120      	cbz	r0, d4aa0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4a96:	68a3      	ldr	r3, [r4, #8]
   d4a98:	b90b      	cbnz	r3, d4a9e <_ZN6String7reserveEj+0x1e>
   d4a9a:	6822      	ldr	r2, [r4, #0]
   d4a9c:	7013      	strb	r3, [r2, #0]
   d4a9e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4aa0:	bd10      	pop	{r4, pc}

000d4aa2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4aa2:	b570      	push	{r4, r5, r6, lr}
   d4aa4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4aa6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4aa8:	4604      	mov	r4, r0
   d4aaa:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4aac:	f7ff ffe8 	bl	d4a80 <_ZN6String7reserveEj>
   d4ab0:	b918      	cbnz	r0, d4aba <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff ffcd 	bl	d4a52 <_ZN6String10invalidateEv>
		return *this;
   d4ab8:	e009      	b.n	d4ace <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4aba:	462a      	mov	r2, r5
   d4abc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4abe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4ac0:	6820      	ldr	r0, [r4, #0]
   d4ac2:	f002 fff4 	bl	d7aae <memcpy>
	buffer[len] = 0;
   d4ac6:	6822      	ldr	r2, [r4, #0]
   d4ac8:	68a3      	ldr	r3, [r4, #8]
   d4aca:	2100      	movs	r1, #0
   d4acc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd70      	pop	{r4, r5, r6, pc}

000d4ad2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4ad2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ad4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4ad6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ad8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4ada:	6043      	str	r3, [r0, #4]
	len = 0;
   d4adc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ade:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4ae0:	460d      	mov	r5, r1
   d4ae2:	b139      	cbz	r1, d4af4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4ae4:	4608      	mov	r0, r1
   d4ae6:	f003 f85b 	bl	d7ba0 <strlen>
   d4aea:	4629      	mov	r1, r5
   d4aec:	4602      	mov	r2, r0
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff ffd7 	bl	d4aa2 <_ZN6String4copyEPKcj>
}
   d4af4:	4620      	mov	r0, r4
   d4af6:	bd38      	pop	{r3, r4, r5, pc}

000d4af8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4af8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4afa:	b510      	push	{r4, lr}
   d4afc:	460b      	mov	r3, r1
   d4afe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4b00:	d007      	beq.n	d4b12 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4b02:	6809      	ldr	r1, [r1, #0]
   d4b04:	b119      	cbz	r1, d4b0e <_ZN6StringaSERKS_+0x16>
   d4b06:	689a      	ldr	r2, [r3, #8]
   d4b08:	f7ff ffcb 	bl	d4aa2 <_ZN6String4copyEPKcj>
   d4b0c:	e001      	b.n	d4b12 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4b0e:	f7ff ffa0 	bl	d4a52 <_ZN6String10invalidateEv>

	return *this;
}
   d4b12:	4620      	mov	r0, r4
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4b16:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b18:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4b1a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b1c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b1e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b20:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b22:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4b24:	f7ff ffe8 	bl	d4af8 <_ZN6StringaSERKS_>
}
   d4b28:	4620      	mov	r0, r4
   d4b2a:	bd10      	pop	{r4, pc}

000d4b2c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4b2c:	b538      	push	{r3, r4, r5, lr}
   d4b2e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b30:	460c      	mov	r4, r1
   d4b32:	b141      	cbz	r1, d4b46 <_ZN6StringaSEPKc+0x1a>
   d4b34:	4608      	mov	r0, r1
   d4b36:	f003 f833 	bl	d7ba0 <strlen>
   d4b3a:	4621      	mov	r1, r4
   d4b3c:	4602      	mov	r2, r0
   d4b3e:	4628      	mov	r0, r5
   d4b40:	f7ff ffaf 	bl	d4aa2 <_ZN6String4copyEPKcj>
   d4b44:	e001      	b.n	d4b4a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4b46:	f7ff ff84 	bl	d4a52 <_ZN6String10invalidateEv>

	return *this;
}
   d4b4a:	4628      	mov	r0, r5
   d4b4c:	bd38      	pop	{r3, r4, r5, pc}

000d4b4e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b4e:	4770      	bx	lr

000d4b50 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b50:	2000      	movs	r0, #0
   d4b52:	4770      	bx	lr

000d4b54 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b54:	4770      	bx	lr

000d4b56 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b56:	2000      	movs	r0, #0
   d4b58:	4770      	bx	lr

000d4b5a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b5a:	4770      	bx	lr

000d4b5c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b5c:	2000      	movs	r0, #0
   d4b5e:	4770      	bx	lr

000d4b60 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b60:	b510      	push	{r4, lr}
   d4b62:	2114      	movs	r1, #20
   d4b64:	4604      	mov	r4, r0
   d4b66:	f002 fe2b 	bl	d77c0 <_ZdlPvj>
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4b6e:	b510      	push	{r4, lr}
   d4b70:	2114      	movs	r1, #20
   d4b72:	4604      	mov	r4, r0
   d4b74:	f002 fe24 	bl	d77c0 <_ZdlPvj>
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	2114      	movs	r1, #20
   d4b80:	4604      	mov	r4, r0
   d4b82:	f002 fe1d 	bl	d77c0 <_ZdlPvj>
   d4b86:	4620      	mov	r0, r4
   d4b88:	bd10      	pop	{r4, pc}

000d4b8a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4b8a:	f7ff ba86 	b.w	d409a <_ZdlPv>

000d4b8e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4b8e:	f7ff ba84 	b.w	d409a <_ZdlPv>

000d4b92 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4b92:	f7ff ba82 	b.w	d409a <_ZdlPv>
	...

000d4b98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4b98:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4b9a:	200a      	movs	r0, #10
   d4b9c:	4a02      	ldr	r2, [pc, #8]	; (d4ba8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d4b9e:	2100      	movs	r1, #0
   d4ba0:	f7ff fe26 	bl	d47f0 <panic_>
    }
}
   d4ba4:	bd08      	pop	{r3, pc}
   d4ba6:	bf00      	nop
   d4ba8:	000d454d 	.word	0x000d454d

000d4bac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bac:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bb0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bb2:	689b      	ldr	r3, [r3, #8]
   d4bb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bb6:	68a3      	ldr	r3, [r4, #8]
   d4bb8:	3b01      	subs	r3, #1
   d4bba:	60a3      	str	r3, [r4, #8]
   d4bbc:	b92b      	cbnz	r3, d4bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4bbe:	6823      	ldr	r3, [r4, #0]
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4bc8:	4718      	bx	r3
   d4bca:	bd10      	pop	{r4, pc}

000d4bcc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4bcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4bd0:	b2da      	uxtb	r2, r3
   d4bd2:	2a09      	cmp	r2, #9
   d4bd4:	d801      	bhi.n	d4bda <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4bd6:	4618      	mov	r0, r3
   d4bd8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4bda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4bde:	2b05      	cmp	r3, #5
   d4be0:	d801      	bhi.n	d4be6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4be2:	3857      	subs	r0, #87	; 0x57
   d4be4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4be6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4bea:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4bec:	bf94      	ite	ls
   d4bee:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4bf0:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4bf4:	4770      	bx	lr
	...

000d4bf8 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4bf8:	b510      	push	{r4, lr}
            locked_(false) {
   d4bfa:	2300      	movs	r3, #0
   d4bfc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4bfe:	4b04      	ldr	r3, [pc, #16]	; (d4c10 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4c00:	4604      	mov	r4, r0
   d4c02:	6818      	ldr	r0, [r3, #0]
   d4c04:	f7ff fd54 	bl	d46b0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4c08:	2301      	movs	r3, #1
   d4c0a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}
   d4c10:	2003e3c0 	.word	0x2003e3c0

000d4c14 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4c14:	b510      	push	{r4, lr}
        if (locked_) {
   d4c16:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4c18:	4604      	mov	r4, r0
        if (locked_) {
   d4c1a:	b11b      	cbz	r3, d4c24 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4c1c:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4c1e:	6818      	ldr	r0, [r3, #0]
   d4c20:	f7ff fd4e 	bl	d46c0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4c24:	4620      	mov	r0, r4
   d4c26:	bd10      	pop	{r4, pc}
   d4c28:	2003e3c0 	.word	0x2003e3c0

000d4c2c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4c2c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4c2e:	7982      	ldrb	r2, [r0, #6]
   d4c30:	798b      	ldrb	r3, [r1, #6]
   d4c32:	429a      	cmp	r2, r3
   d4c34:	d106      	bne.n	d4c44 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4c36:	2206      	movs	r2, #6
   d4c38:	f002 ff2a 	bl	d7a90 <memcmp>
   d4c3c:	fab0 f080 	clz	r0, r0
   d4c40:	0940      	lsrs	r0, r0, #5
   d4c42:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4c44:	2000      	movs	r0, #0
}
   d4c46:	bd08      	pop	{r3, pc}

000d4c48 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4c48:	b510      	push	{r4, lr}
        : uuid_() {
   d4c4a:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4c4c:	4604      	mov	r4, r0
        : uuid_() {
   d4c4e:	2100      	movs	r1, #0
   d4c50:	f002 ff53 	bl	d7afa <memset>
}
   d4c54:	4620      	mov	r0, r4
   d4c56:	bd10      	pop	{r4, pc}

000d4c58 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4c58:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d4c5a:	4603      	mov	r3, r0
   d4c5c:	f101 0214 	add.w	r2, r1, #20
   d4c60:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c64:	f843 4b04 	str.w	r4, [r3], #4
   d4c68:	4291      	cmp	r1, r2
   d4c6a:	d1f9      	bne.n	d4c60 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d4c6c:	bd10      	pop	{r4, pc}

000d4c6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d4c6e:	b570      	push	{r4, r5, r6, lr}
   d4c70:	460c      	mov	r4, r1
   d4c72:	4605      	mov	r5, r0
   d4c74:	4616      	mov	r6, r2
        : BleUuid() {
   d4c76:	f7ff ffe7 	bl	d4c48 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d4c7a:	b92c      	cbnz	r4, d4c88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4c7c:	2210      	movs	r2, #16
   d4c7e:	4621      	mov	r1, r4
   d4c80:	4628      	mov	r0, r5
   d4c82:	f002 ff3a 	bl	d7afa <memset>
   d4c86:	e016      	b.n	d4cb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d4c88:	2e01      	cmp	r6, #1
   d4c8a:	d109      	bne.n	d4ca0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4c8c:	462b      	mov	r3, r5
   d4c8e:	f104 0210 	add.w	r2, r4, #16
   d4c92:	f854 1b04 	ldr.w	r1, [r4], #4
   d4c96:	f843 1b04 	str.w	r1, [r3], #4
   d4c9a:	4294      	cmp	r4, r2
   d4c9c:	d1f9      	bne.n	d4c92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4c9e:	e008      	b.n	d4cb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4ca0:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4ca2:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4ca4:	5ce1      	ldrb	r1, [r4, r3]
   d4ca6:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4caa:	3b01      	subs	r3, #1
   d4cac:	b2db      	uxtb	r3, r3
   d4cae:	2bff      	cmp	r3, #255	; 0xff
   d4cb0:	d1f8      	bne.n	d4ca4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4cb2:	2301      	movs	r3, #1
   d4cb4:	742b      	strb	r3, [r5, #16]
    }
}
   d4cb6:	4628      	mov	r0, r5
   d4cb8:	bd70      	pop	{r4, r5, r6, pc}

000d4cba <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4cba:	b538      	push	{r3, r4, r5, lr}
   d4cbc:	4604      	mov	r4, r0
   d4cbe:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4cc0:	461a      	mov	r2, r3
   d4cc2:	f7ff ffd4 	bl	d4c6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d4cc6:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4cc8:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4cca:	0a2d      	lsrs	r5, r5, #8
   d4ccc:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4cce:	7423      	strb	r3, [r4, #16]
}
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	bd38      	pop	{r3, r4, r5, pc}

000d4cd4 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d4cd4:	7c03      	ldrb	r3, [r0, #16]
   d4cd6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d4cda:	bf14      	ite	ne
   d4cdc:	2001      	movne	r0, #1
   d4cde:	2000      	moveq	r0, #0
   d4ce0:	4770      	bx	lr

000d4ce2 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4ce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4ce4:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4ce6:	f7ff fff5 	bl	d4cd4 <_ZNK8particle7BleUuid4typeEv>
   d4cea:	b908      	cbnz	r0, d4cf0 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d4cec:	8820      	ldrh	r0, [r4, #0]
   d4cee:	e009      	b.n	d4d04 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4cf0:	2210      	movs	r2, #16
   d4cf2:	2100      	movs	r1, #0
   d4cf4:	4668      	mov	r0, sp
   d4cf6:	f002 ff00 	bl	d7afa <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4cfa:	2210      	movs	r2, #16
   d4cfc:	4669      	mov	r1, sp
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f002 fec6 	bl	d7a90 <memcmp>
   d4d04:	3000      	adds	r0, #0
   d4d06:	bf18      	it	ne
   d4d08:	2001      	movne	r0, #1
    }
}
   d4d0a:	b004      	add	sp, #16
   d4d0c:	bd10      	pop	{r4, pc}

000d4d0e <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d4d0e:	8800      	ldrh	r0, [r0, #0]
   d4d10:	4770      	bx	lr

000d4d12 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d4d12:	4770      	bx	lr

000d4d14 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4d14:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d4d16:	4603      	mov	r3, r0
   d4d18:	f101 0214 	add.w	r2, r1, #20
   d4d1c:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d20:	f843 4b04 	str.w	r4, [r3], #4
   d4d24:	4291      	cmp	r1, r2
   d4d26:	d1f9      	bne.n	d4d1c <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d4d28:	bd10      	pop	{r4, pc}

000d4d2a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4d2a:	b510      	push	{r4, lr}
    if (uuid128) {
   d4d2c:	b151      	cbz	r1, d4d44 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d2e:	4603      	mov	r3, r0
   d4d30:	f101 0210 	add.w	r2, r1, #16
   d4d34:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d38:	f843 4b04 	str.w	r4, [r3], #4
   d4d3c:	4291      	cmp	r1, r2
   d4d3e:	d1f9      	bne.n	d4d34 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4d40:	2301      	movs	r3, #1
   d4d42:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d4d44:	bd10      	pop	{r4, pc}

000d4d46 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4d46:	b510      	push	{r4, lr}
   d4d48:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4d4a:	f7ff ffc3 	bl	d4cd4 <_ZNK8particle7BleUuid4typeEv>
   d4d4e:	b928      	cbnz	r0, d4d5c <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4d50:	8808      	ldrh	r0, [r1, #0]
   d4d52:	8823      	ldrh	r3, [r4, #0]
   d4d54:	1a1b      	subs	r3, r3, r0
   d4d56:	4258      	negs	r0, r3
   d4d58:	4158      	adcs	r0, r3
   d4d5a:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d5c:	2210      	movs	r2, #16
   d4d5e:	4620      	mov	r0, r4
   d4d60:	f002 fe96 	bl	d7a90 <memcmp>
   d4d64:	fab0 f080 	clz	r0, r0
   d4d68:	0940      	lsrs	r0, r0, #5
    }
}
   d4d6a:	bd10      	pop	{r4, pc}

000d4d6c <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d4d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4d6e:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d4d70:	460e      	mov	r6, r1
   d4d72:	b919      	cbnz	r1, d4d7c <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4d74:	2210      	movs	r2, #16
   d4d76:	f002 fec0 	bl	d7afa <memset>
   d4d7a:	e051      	b.n	d4e20 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4d7c:	2124      	movs	r1, #36	; 0x24
   d4d7e:	4630      	mov	r0, r6
   d4d80:	f002 ff2b 	bl	d7bda <strnlen>
   d4d84:	2804      	cmp	r0, #4
   d4d86:	d002      	beq.n	d4d8e <_ZN8particle7BleUuid9constructEPKc+0x22>
   d4d88:	2700      	movs	r7, #0
   d4d8a:	2410      	movs	r4, #16
   d4d8c:	e03b      	b.n	d4e06 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4d8e:	7830      	ldrb	r0, [r6, #0]
   d4d90:	f7ff ff1c 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4d94:	1e04      	subs	r4, r0, #0
   d4d96:	db47      	blt.n	d4e28 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4d98:	7870      	ldrb	r0, [r6, #1]
   d4d9a:	f7ff ff17 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4d9e:	2800      	cmp	r0, #0
   d4da0:	db42      	blt.n	d4e28 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4da2:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4da6:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4daa:	78b0      	ldrb	r0, [r6, #2]
   d4dac:	f7ff ff0e 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4db0:	1e04      	subs	r4, r0, #0
   d4db2:	db39      	blt.n	d4e28 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4db4:	78f0      	ldrb	r0, [r6, #3]
   d4db6:	f7ff ff09 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4dba:	2800      	cmp	r0, #0
   d4dbc:	db34      	blt.n	d4e28 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4dbe:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d4dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4dc6:	b2c0      	uxtb	r0, r0
   d4dc8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d4dcc:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d4dce:	2300      	movs	r3, #0
   d4dd0:	e027      	b.n	d4e22 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4dd2:	b32c      	cbz	r4, d4e20 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d4dd4:	5df0      	ldrb	r0, [r6, r7]
   d4dd6:	f7ff fef9 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4dda:	0603      	lsls	r3, r0, #24
   d4ddc:	d412      	bmi.n	d4e04 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d4dde:	3c01      	subs	r4, #1
   d4de0:	0100      	lsls	r0, r0, #4
   d4de2:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4de4:	2124      	movs	r1, #36	; 0x24
   d4de6:	4630      	mov	r0, r6
   d4de8:	f002 fef7 	bl	d7bda <strnlen>
   d4dec:	3701      	adds	r7, #1
   d4dee:	4287      	cmp	r7, r0
   d4df0:	d208      	bcs.n	d4e04 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d4df2:	5df0      	ldrb	r0, [r6, r7]
   d4df4:	f7ff feea 	bl	d4bcc <_ZN8particle11hexToNibbleEc>
   d4df8:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4dfa:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d4dfc:	bfa2      	ittt	ge
   d4dfe:	5d2b      	ldrbge	r3, [r5, r4]
   d4e00:	4318      	orrge	r0, r3
   d4e02:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4e04:	3701      	adds	r7, #1
   d4e06:	2124      	movs	r1, #36	; 0x24
   d4e08:	4630      	mov	r0, r6
   d4e0a:	f002 fee6 	bl	d7bda <strnlen>
   d4e0e:	4287      	cmp	r7, r0
   d4e10:	d3df      	bcc.n	d4dd2 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d4e12:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d4e14:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4e16:	42a5      	cmp	r5, r4
   d4e18:	d002      	beq.n	d4e20 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d4e1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4e1e:	e7fa      	b.n	d4e16 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4e20:	2301      	movs	r3, #1
   d4e22:	742b      	strb	r3, [r5, #16]
}
   d4e24:	b003      	add	sp, #12
   d4e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d4e28:	2300      	movs	r3, #0
   d4e2a:	802b      	strh	r3, [r5, #0]
   d4e2c:	e7cf      	b.n	d4dce <_ZN8particle7BleUuid9constructEPKc+0x62>

000d4e2e <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d4e2e:	b538      	push	{r3, r4, r5, lr}
   d4e30:	4604      	mov	r4, r0
   d4e32:	460d      	mov	r5, r1
        : BleUuid() {
   d4e34:	f7ff ff08 	bl	d4c48 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4e38:	4620      	mov	r0, r4
   d4e3a:	4629      	mov	r1, r5
   d4e3c:	f7ff ff96 	bl	d4d6c <_ZN8particle7BleUuid9constructEPKc>
}
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd38      	pop	{r3, r4, r5, pc}

000d4e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4e46:	b18b      	cbz	r3, d4e6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4e48:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4e4a:	1ce5      	adds	r5, r4, #3
   d4e4c:	428d      	cmp	r5, r1
   d4e4e:	d80f      	bhi.n	d4e70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4e50:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4e52:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4e54:	5d87      	ldrb	r7, [r0, r6]
   d4e56:	4297      	cmp	r7, r2
   d4e58:	d105      	bne.n	d4e66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4e5a:	442e      	add	r6, r5
   d4e5c:	42b1      	cmp	r1, r6
   d4e5e:	d307      	bcc.n	d4e70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4e60:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4e62:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4e66:	3501      	adds	r5, #1
   d4e68:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4e6a:	e7ee      	b.n	d4e4a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4e6c:	4618      	mov	r0, r3
   d4e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e70:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e74 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4e78:	4604      	mov	r4, r0
   d4e7a:	460e      	mov	r6, r1
   d4e7c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4e7e:	4617      	mov	r7, r2
   d4e80:	2a00      	cmp	r2, #0
   d4e82:	d03a      	beq.n	d4efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4e84:	460a      	mov	r2, r1
   d4e86:	ab01      	add	r3, sp, #4
   d4e88:	6a01      	ldr	r1, [r0, #32]
   d4e8a:	f7ff ffdb 	bl	d4e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4e8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4e92:	6a22      	ldr	r2, [r4, #32]
   d4e94:	bb03      	cbnz	r3, d4ed8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4e96:	b1f8      	cbz	r0, d4ed8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4e98:	1c96      	adds	r6, r2, #2
   d4e9a:	442e      	add	r6, r5
   d4e9c:	1a36      	subs	r6, r6, r0
   d4e9e:	2e1f      	cmp	r6, #31
   d4ea0:	d82b      	bhi.n	d4efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4ea2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4ea6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4eaa:	ebc8 0202 	rsb	r2, r8, r2
   d4eae:	1a12      	subs	r2, r2, r0
   d4eb0:	eb00 0108 	add.w	r1, r0, r8
   d4eb4:	eb05 0009 	add.w	r0, r5, r9
   d4eb8:	b292      	uxth	r2, r2
   d4eba:	4421      	add	r1, r4
   d4ebc:	4420      	add	r0, r4
   d4ebe:	f002 fe01 	bl	d7ac4 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4ec2:	1c6b      	adds	r3, r5, #1
   d4ec4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4ec8:	462a      	mov	r2, r5
   d4eca:	4639      	mov	r1, r7
   d4ecc:	eb04 0009 	add.w	r0, r4, r9
   d4ed0:	f002 fded 	bl	d7aae <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4ed4:	6226      	str	r6, [r4, #32]
   d4ed6:	e010      	b.n	d4efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4ed8:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4eda:	182b      	adds	r3, r5, r0
   d4edc:	2b1f      	cmp	r3, #31
   d4ede:	d80c      	bhi.n	d4efa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4ee0:	1c6b      	adds	r3, r5, #1
   d4ee2:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4ee4:	4422      	add	r2, r4
   d4ee6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4ee8:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4eea:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4eec:	4420      	add	r0, r4
   d4eee:	462a      	mov	r2, r5
   d4ef0:	f002 fddd 	bl	d7aae <memcpy>
        selfLen_ += len;
   d4ef4:	6a22      	ldr	r2, [r4, #32]
   d4ef6:	442a      	add	r2, r5
   d4ef8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4efa:	6a20      	ldr	r0, [r4, #32]
}
   d4efc:	b003      	add	sp, #12
   d4efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f02 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4f02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4f04:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4f06:	4603      	mov	r3, r0
   d4f08:	f100 021f 	add.w	r2, r0, #31
   d4f0c:	2000      	movs	r0, #0
   d4f0e:	f803 0b01 	strb.w	r0, [r3], #1
   d4f12:	4293      	cmp	r3, r2
   d4f14:	f04f 0100 	mov.w	r1, #0
   d4f18:	d1f9      	bne.n	d4f0e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4f1a:	aa04      	add	r2, sp, #16
   d4f1c:	2306      	movs	r3, #6
   d4f1e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4f22:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4f24:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4f26:	9100      	str	r1, [sp, #0]
   d4f28:	4620      	mov	r0, r4
   d4f2a:	4619      	mov	r1, r3
   d4f2c:	f7ff ffa2 	bl	d4e74 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4f30:	4620      	mov	r0, r4
   d4f32:	b004      	add	sp, #16
   d4f34:	bd10      	pop	{r4, pc}

000d4f36 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f38:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f3a:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f3c:	ab01      	add	r3, sp, #4
   d4f3e:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f40:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f42:	f7ff ff7f 	bl	d4e44 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4f46:	4605      	mov	r5, r0
   d4f48:	b178      	cbz	r0, d4f6a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4f4a:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4f4c:	6a22      	ldr	r2, [r4, #32]
   d4f4e:	1829      	adds	r1, r5, r0
   d4f50:	1a12      	subs	r2, r2, r0
   d4f52:	1b52      	subs	r2, r2, r5
   d4f54:	4421      	add	r1, r4
   d4f56:	4420      	add	r0, r4
   d4f58:	f002 fda9 	bl	d7aae <memcpy>
        selfLen_ -= len;
   d4f5c:	6a23      	ldr	r3, [r4, #32]
   d4f5e:	1b5d      	subs	r5, r3, r5
   d4f60:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4f62:	4631      	mov	r1, r6
   d4f64:	4620      	mov	r0, r4
   d4f66:	f7ff ffe6 	bl	d4f36 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4f6a:	b002      	add	sp, #8
   d4f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f70 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4f70:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4f72:	2500      	movs	r5, #0
   d4f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4f78:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4f7a:	8043      	strh	r3, [r0, #2]
   d4f7c:	220e      	movs	r2, #14
   d4f7e:	4629      	mov	r1, r5
   d4f80:	7005      	strb	r5, [r0, #0]
   d4f82:	7105      	strb	r5, [r0, #4]
   d4f84:	3006      	adds	r0, #6
   d4f86:	f002 fdb8 	bl	d7afa <memset>
   d4f8a:	f104 0014 	add.w	r0, r4, #20
   d4f8e:	f7ff fe5b 	bl	d4c48 <_ZN8particle7BleUuidC1Ev>
   d4f92:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4f96:	f7ff fe57 	bl	d4c48 <_ZN8particle7BleUuidC1Ev>
   d4f9a:	4904      	ldr	r1, [pc, #16]	; (d4fac <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4f9c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4fa0:	f7ff fd97 	bl	d4ad2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fa4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4fa6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d4fa8:	4620      	mov	r0, r4
   d4faa:	bd38      	pop	{r3, r4, r5, pc}
   d4fac:	000d8167 	.word	0x000d8167

000d4fb0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4fb0:	b510      	push	{r4, lr}
   d4fb2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4fb4:	69c2      	ldr	r2, [r0, #28]
   d4fb6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4fba:	4293      	cmp	r3, r2
   d4fbc:	4618      	mov	r0, r3
   d4fbe:	d006      	beq.n	d4fce <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4fc0:	6804      	ldr	r4, [r0, #0]
   d4fc2:	8824      	ldrh	r4, [r4, #0]
   d4fc4:	428c      	cmp	r4, r1
   d4fc6:	f103 0308 	add.w	r3, r3, #8
   d4fca:	d1f6      	bne.n	d4fba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4fcc:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4fce:	2000      	movs	r0, #0
    }
   d4fd0:	bd10      	pop	{r4, pc}
	...

000d4fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d4fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4fd8:	4680      	mov	r8, r0
   d4fda:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d4fdc:	460e      	mov	r6, r1
   d4fde:	b369      	cbz	r1, d503c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4fe0:	b362      	cbz	r2, d503c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4fe2:	2af4      	cmp	r2, #244	; 0xf4
   d4fe4:	6805      	ldr	r5, [r0, #0]
   d4fe6:	bf28      	it	cs
   d4fe8:	22f4      	movcs	r2, #244	; 0xf4
   d4fea:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d4fec:	782a      	ldrb	r2, [r5, #0]
   d4fee:	b1a2      	cbz	r2, d501a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d4ff0:	792b      	ldrb	r3, [r5, #4]
   d4ff2:	0798      	lsls	r0, r3, #30
   d4ff4:	d507      	bpl.n	d5006 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d4ff6:	2300      	movs	r3, #0
   d4ff8:	4622      	mov	r2, r4
   d4ffa:	89a8      	ldrh	r0, [r5, #12]
   d4ffc:	f7ff faea 	bl	d45d4 <hal_ble_gatt_server_set_characteristic_value>
   d5000:	2800      	cmp	r0, #0
   d5002:	da02      	bge.n	d500a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5004:	e043      	b.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5006:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d500a:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d500e:	792b      	ldrb	r3, [r5, #4]
   d5010:	06da      	lsls	r2, r3, #27
   d5012:	d518      	bpl.n	d5046 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5014:	2f01      	cmp	r7, #1
   d5016:	d123      	bne.n	d5060 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5018:	e015      	b.n	d5046 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d501a:	8868      	ldrh	r0, [r5, #2]
   d501c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5020:	4298      	cmp	r0, r3
   d5022:	d00d      	beq.n	d5040 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d5024:	792b      	ldrb	r3, [r5, #4]
   d5026:	0759      	lsls	r1, r3, #29
   d5028:	d523      	bpl.n	d5072 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d502a:	2f01      	cmp	r7, #1
   d502c:	d021      	beq.n	d5072 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d502e:	89a9      	ldrh	r1, [r5, #12]
   d5030:	9200      	str	r2, [sp, #0]
   d5032:	4623      	mov	r3, r4
   d5034:	4632      	mov	r2, r6
   d5036:	f7ff fae1 	bl	d45fc <hal_ble_gatt_client_write_without_response>
   d503a:	e028      	b.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d503c:	4815      	ldr	r0, [pc, #84]	; (d5094 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d503e:	e026      	b.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5040:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5044:	e023      	b.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d5046:	069a      	lsls	r2, r3, #26
   d5048:	d521      	bpl.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d504a:	2f02      	cmp	r7, #2
   d504c:	d01f      	beq.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d504e:	89a8      	ldrh	r0, [r5, #12]
   d5050:	2300      	movs	r3, #0
   d5052:	4622      	mov	r2, r4
   d5054:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5056:	b002      	add	sp, #8
   d5058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d505c:	f7ff baf6 	b.w	d464c <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5060:	89a8      	ldrh	r0, [r5, #12]
   d5062:	2300      	movs	r3, #0
   d5064:	4622      	mov	r2, r4
   d5066:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5068:	b002      	add	sp, #8
   d506a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d506e:	f7ff bae3 	b.w	d4638 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d5072:	071b      	lsls	r3, r3, #28
   d5074:	d501      	bpl.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5076:	2f02      	cmp	r7, #2
   d5078:	d102      	bne.n	d5080 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d507a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d507e:	e006      	b.n	d508e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5080:	2300      	movs	r3, #0
   d5082:	89a9      	ldrh	r1, [r5, #12]
   d5084:	9300      	str	r3, [sp, #0]
   d5086:	4632      	mov	r2, r6
   d5088:	4623      	mov	r3, r4
   d508a:	f7ff faad 	bl	d45e8 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d508e:	b002      	add	sp, #8
   d5090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5094:	fffffef2 	.word	0xfffffef2

000d5098 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5098:	b510      	push	{r4, lr}
    return impl()->address();
   d509a:	680a      	ldr	r2, [r1, #0]
   d509c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d50a0:	6003      	str	r3, [r0, #0]
   d50a2:	6853      	ldr	r3, [r2, #4]
   d50a4:	6043      	str	r3, [r0, #4]
}
   d50a6:	bd10      	pop	{r4, pc}

000d50a8 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d50a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d50aa:	6802      	ldr	r2, [r0, #0]
   d50ac:	680b      	ldr	r3, [r1, #0]
   d50ae:	8812      	ldrh	r2, [r2, #0]
   d50b0:	881b      	ldrh	r3, [r3, #0]
   d50b2:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d50b4:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d50b6:	d10c      	bne.n	d50d2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d50b8:	4601      	mov	r1, r0
   d50ba:	4668      	mov	r0, sp
   d50bc:	f7ff ffec 	bl	d5098 <_ZNK8particle13BlePeerDevice7addressEv>
   d50c0:	4621      	mov	r1, r4
   d50c2:	a802      	add	r0, sp, #8
   d50c4:	f7ff ffe8 	bl	d5098 <_ZNK8particle13BlePeerDevice7addressEv>
   d50c8:	a902      	add	r1, sp, #8
   d50ca:	4668      	mov	r0, sp
   d50cc:	f7ff fdae 	bl	d4c2c <_ZNK8particle10BleAddresseqERKS0_>
   d50d0:	b900      	cbnz	r0, d50d4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d50d2:	2000      	movs	r0, #0
}
   d50d4:	b004      	add	sp, #16
   d50d6:	bd10      	pop	{r4, pc}

000d50d8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d50d8:	b510      	push	{r4, lr}
   d50da:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d50dc:	2034      	movs	r0, #52	; 0x34
   d50de:	f7fe ffda 	bl	d4096 <_Znwj>
   d50e2:	4601      	mov	r1, r0
   d50e4:	b168      	cbz	r0, d5102 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d50e6:	2300      	movs	r3, #0
   d50e8:	6003      	str	r3, [r0, #0]
   d50ea:	6043      	str	r3, [r0, #4]
   d50ec:	6083      	str	r3, [r0, #8]
   d50ee:	60c3      	str	r3, [r0, #12]
   d50f0:	6103      	str	r3, [r0, #16]
   d50f2:	6143      	str	r3, [r0, #20]
   d50f4:	6183      	str	r3, [r0, #24]
   d50f6:	61c3      	str	r3, [r0, #28]
   d50f8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d50fa:	6243      	str	r3, [r0, #36]	; 0x24
   d50fc:	6283      	str	r3, [r0, #40]	; 0x28
   d50fe:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5100:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5102:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5104:	b919      	cbnz	r1, d510e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5106:	4a0a      	ldr	r2, [pc, #40]	; (d5130 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5108:	200a      	movs	r0, #10
   d510a:	f7ff fb71 	bl	d47f0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d510e:	2000      	movs	r0, #0
   d5110:	f7ff fa2c 	bl	d456c <hal_ble_stack_init>
   d5114:	b120      	cbz	r0, d5120 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5116:	4a06      	ldr	r2, [pc, #24]	; (d5130 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5118:	2100      	movs	r1, #0
   d511a:	200a      	movs	r0, #10
   d511c:	f7ff fb68 	bl	d47f0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5120:	2200      	movs	r2, #0
   d5122:	6821      	ldr	r1, [r4, #0]
   d5124:	4803      	ldr	r0, [pc, #12]	; (d5134 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5126:	f7ff fa7d 	bl	d4624 <hal_ble_set_callback_on_periph_link_events>
}
   d512a:	4620      	mov	r0, r4
   d512c:	bd10      	pop	{r4, pc}
   d512e:	bf00      	nop
   d5130:	000d454d 	.word	0x000d454d
   d5134:	000d553d 	.word	0x000d553d

000d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5138:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d513a:	4c0a      	ldr	r4, [pc, #40]	; (d5164 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d513c:	6823      	ldr	r3, [r4, #0]
   d513e:	07db      	lsls	r3, r3, #31
   d5140:	d40e      	bmi.n	d5160 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5142:	4620      	mov	r0, r4
   d5144:	f7fe ffb8 	bl	d40b8 <__cxa_guard_acquire>
   d5148:	b150      	cbz	r0, d5160 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d514a:	4807      	ldr	r0, [pc, #28]	; (d5168 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d514c:	f7ff ffc4 	bl	d50d8 <_ZN8particle14BleLocalDeviceC1Ev>
   d5150:	4620      	mov	r0, r4
   d5152:	f7fe ffb6 	bl	d40c2 <__cxa_guard_release>
   d5156:	4a05      	ldr	r2, [pc, #20]	; (d516c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5158:	4905      	ldr	r1, [pc, #20]	; (d5170 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d515a:	4803      	ldr	r0, [pc, #12]	; (d5168 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d515c:	f002 fb22 	bl	d77a4 <__aeabi_atexit>
    return instance;
}
   d5160:	4801      	ldr	r0, [pc, #4]	; (d5168 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5162:	bd10      	pop	{r4, pc}
   d5164:	2003e3b8 	.word	0x2003e3b8
   d5168:	2003e3b4 	.word	0x2003e3b4
   d516c:	2003e344 	.word	0x2003e344
   d5170:	000d5325 	.word	0x000d5325

000d5174 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5174:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5176:	6803      	ldr	r3, [r0, #0]
   d5178:	3b09      	subs	r3, #9
   d517a:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d517c:	b08a      	sub	sp, #40	; 0x28
   d517e:	4604      	mov	r4, r0
   d5180:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5182:	d819      	bhi.n	d51b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5184:	f7ff ffd8 	bl	d5138 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5188:	88a1      	ldrh	r1, [r4, #4]
   d518a:	6800      	ldr	r0, [r0, #0]
   d518c:	f7ff ff10 	bl	d4fb0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5190:	4602      	mov	r2, r0
   d5192:	b958      	cbnz	r0, d51ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5194:	2320      	movs	r3, #32
   d5196:	9302      	str	r3, [sp, #8]
   d5198:	4b08      	ldr	r3, [pc, #32]	; (d51bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d519a:	9003      	str	r0, [sp, #12]
   d519c:	9300      	str	r3, [sp, #0]
   d519e:	aa02      	add	r2, sp, #8
   d51a0:	4603      	mov	r3, r0
   d51a2:	4907      	ldr	r1, [pc, #28]	; (d51c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d51a4:	2032      	movs	r0, #50	; 0x32
   d51a6:	f7ff fb2b 	bl	d4800 <log_message>
   d51aa:	e005      	b.n	d51b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d51ac:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d51ae:	b11d      	cbz	r5, d51b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d51b0:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d51b2:	68e1      	ldr	r1, [r4, #12]
   d51b4:	6920      	ldr	r0, [r4, #16]
   d51b6:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d51b8:	b00a      	add	sp, #40	; 0x28
   d51ba:	bd70      	pop	{r4, r5, r6, pc}
   d51bc:	000d7f22 	.word	0x000d7f22
   d51c0:	000d7ed8 	.word	0x000d7ed8

000d51c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d51c4:	4608      	mov	r0, r1
   d51c6:	b909      	cbnz	r1, d51cc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d51c8:	460a      	mov	r2, r1
   d51ca:	e001      	b.n	d51d0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d51cc:	6a09      	ldr	r1, [r1, #32]
   d51ce:	2200      	movs	r2, #0
   d51d0:	f7ff b9d4 	b.w	d457c <hal_ble_gap_set_advertising_data>

000d51d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d51d4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d51d6:	460c      	mov	r4, r1
   d51d8:	b911      	cbnz	r1, d51e0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d51da:	460a      	mov	r2, r1
   d51dc:	4608      	mov	r0, r1
   d51de:	e006      	b.n	d51ee <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d51e0:	2101      	movs	r1, #1
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff fea7 	bl	d4f36 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d51e8:	6a21      	ldr	r1, [r4, #32]
   d51ea:	2200      	movs	r2, #0
   d51ec:	4620      	mov	r0, r4
    }
}
   d51ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d51f2:	f7ff b9cb 	b.w	d458c <hal_ble_gap_set_scan_response_data>

000d51f6 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d51f6:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d51f8:	a801      	add	r0, sp, #4
   d51fa:	f7ff fcfd 	bl	d4bf8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d51fe:	2000      	movs	r0, #0
   d5200:	f7ff f9cc 	bl	d459c <hal_ble_gap_start_advertising>
   d5204:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5206:	a801      	add	r0, sp, #4
   d5208:	f7ff fd04 	bl	d4c14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d520c:	4620      	mov	r0, r4
   d520e:	b002      	add	sp, #8
   d5210:	bd10      	pop	{r4, pc}

000d5212 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5212:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5214:	4605      	mov	r5, r0
   d5216:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5218:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d521a:	4616      	mov	r6, r2
    WiringBleLock lk;
   d521c:	f7ff fcec 	bl	d4bf8 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5220:	4621      	mov	r1, r4
   d5222:	4628      	mov	r0, r5
   d5224:	f7ff ffce 	bl	d51c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5228:	2800      	cmp	r0, #0
   d522a:	db08      	blt.n	d523e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d522c:	4631      	mov	r1, r6
   d522e:	4628      	mov	r0, r5
   d5230:	f7ff ffd0 	bl	d51d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5234:	2800      	cmp	r0, #0
   d5236:	db02      	blt.n	d523e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5238:	4628      	mov	r0, r5
   d523a:	f7ff ffdc 	bl	d51f6 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d523e:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5240:	a801      	add	r0, sp, #4
   d5242:	f7ff fce7 	bl	d4c14 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5246:	4620      	mov	r0, r4
   d5248:	b002      	add	sp, #8
   d524a:	bd70      	pop	{r4, r5, r6, pc}

000d524c <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d524c:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d524e:	69d8      	ldr	r0, [r3, #28]
}
   d5250:	2800      	cmp	r0, #0
   d5252:	bfd4      	ite	le
   d5254:	2000      	movle	r0, #0
   d5256:	2001      	movgt	r0, #1
   d5258:	4770      	bx	lr

000d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d525a:	680b      	ldr	r3, [r1, #0]
   d525c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d525e:	b113      	cbz	r3, d5266 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5260:	685a      	ldr	r2, [r3, #4]
   d5262:	3201      	adds	r2, #1
   d5264:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5266:	4770      	bx	lr

000d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5268:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d526a:	f851 3b04 	ldr.w	r3, [r1], #4
   d526e:	4604      	mov	r4, r0
   d5270:	f840 3b04 	str.w	r3, [r0], #4
   d5274:	f7ff fff1 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5278:	6823      	ldr	r3, [r4, #0]
   d527a:	b90b      	cbnz	r3, d5280 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d527c:	f7ff fc8c 	bl	d4b98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5280:	4620      	mov	r0, r4
   d5282:	bd10      	pop	{r4, pc}

000d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5284:	b510      	push	{r4, lr}
   d5286:	f851 3b04 	ldr.w	r3, [r1], #4
   d528a:	4604      	mov	r4, r0
   d528c:	f840 3b04 	str.w	r3, [r0], #4
   d5290:	f7ff ffe3 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5294:	4620      	mov	r0, r4
   d5296:	bd10      	pop	{r4, pc}

000d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5298:	b510      	push	{r4, lr}
   d529a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d529c:	6800      	ldr	r0, [r0, #0]
   d529e:	b128      	cbz	r0, d52ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d52a0:	6843      	ldr	r3, [r0, #4]
   d52a2:	3b01      	subs	r3, #1
   d52a4:	6043      	str	r3, [r0, #4]
   d52a6:	b90b      	cbnz	r3, d52ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d52a8:	f7ff fc80 	bl	d4bac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d52ac:	4620      	mov	r0, r4
   d52ae:	bd10      	pop	{r4, pc}

000d52b0 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d52b0:	b510      	push	{r4, lr}
   d52b2:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52b4:	3004      	adds	r0, #4
   d52b6:	f7ff ffef 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d52ba:	4620      	mov	r0, r4
   d52bc:	bd10      	pop	{r4, pc}

000d52be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52be:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52c0:	6804      	ldr	r4, [r0, #0]
   d52c2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52c4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52c6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52ca:	42a6      	cmp	r6, r4
   d52cc:	d004      	beq.n	d52d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d52ce:	1d20      	adds	r0, r4, #4
   d52d0:	f7ff ffe2 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d4:	3408      	adds	r4, #8
   d52d6:	e7f8      	b.n	d52ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d52d8:	6828      	ldr	r0, [r5, #0]
   d52da:	f7ff fb25 	bl	d4928 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d52de:	4628      	mov	r0, r5
   d52e0:	bd70      	pop	{r4, r5, r6, pc}

000d52e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52e2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52e4:	6804      	ldr	r4, [r0, #0]
   d52e6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52e8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52ea:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52ee:	42a6      	cmp	r6, r4
   d52f0:	d004      	beq.n	d52fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d52f2:	1d20      	adds	r0, r4, #4
   d52f4:	f7ff ffd0 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52f8:	3408      	adds	r4, #8
   d52fa:	e7f8      	b.n	d52ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d52fc:	6828      	ldr	r0, [r5, #0]
   d52fe:	f7ff fb13 	bl	d4928 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5302:	4628      	mov	r0, r5
   d5304:	bd70      	pop	{r4, r5, r6, pc}

000d5306 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5306:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5308:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d530a:	f104 0018 	add.w	r0, r4, #24
   d530e:	f7ff ffe8 	bl	d52e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5312:	f104 000c 	add.w	r0, r4, #12
   d5316:	f7ff ffd2 	bl	d52be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d531a:	4620      	mov	r0, r4
   d531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5320:	f7fe bebb 	b.w	d409a <_ZdlPv>

000d5324 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5326:	6804      	ldr	r4, [r0, #0]
   d5328:	4607      	mov	r7, r0
   d532a:	b1c4      	cbz	r4, d535e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d532c:	69a5      	ldr	r5, [r4, #24]
   d532e:	69e3      	ldr	r3, [r4, #28]
   d5330:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5334:	42ae      	cmp	r6, r5
   d5336:	d004      	beq.n	d5342 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5338:	1d28      	adds	r0, r5, #4
   d533a:	f7ff ffad 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d533e:	3508      	adds	r5, #8
   d5340:	e7f8      	b.n	d5334 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5342:	69a0      	ldr	r0, [r4, #24]
   d5344:	f7ff faf0 	bl	d4928 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5348:	f104 000c 	add.w	r0, r4, #12
   d534c:	f7ff ffc9 	bl	d52e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5350:	4620      	mov	r0, r4
   d5352:	f7ff ffb4 	bl	d52be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5356:	2134      	movs	r1, #52	; 0x34
   d5358:	4620      	mov	r0, r4
   d535a:	f002 fa31 	bl	d77c0 <_ZdlPvj>
   d535e:	4638      	mov	r0, r7
   d5360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5364 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5364:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5366:	2500      	movs	r5, #0
   d5368:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d536a:	6045      	str	r5, [r0, #4]
   d536c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d536e:	2024      	movs	r0, #36	; 0x24
   d5370:	f7fe fe91 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5374:	4604      	mov	r4, r0
   d5376:	b178      	cbz	r0, d5398 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5378:	4603      	mov	r3, r0
   d537a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d537e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5382:	f8c0 5002 	str.w	r5, [r0, #2]
   d5386:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5388:	7285      	strb	r5, [r0, #10]
   d538a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d538c:	60c5      	str	r5, [r0, #12]
   d538e:	6105      	str	r5, [r0, #16]
   d5390:	6145      	str	r5, [r0, #20]
   d5392:	6185      	str	r5, [r0, #24]
   d5394:	61c5      	str	r5, [r0, #28]
   d5396:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5398:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d539a:	2014      	movs	r0, #20
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	f7fe fe7a 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d53a2:	4603      	mov	r3, r0
   d53a4:	b128      	cbz	r0, d53b2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d53a6:	2201      	movs	r2, #1
   d53a8:	6042      	str	r2, [r0, #4]
   d53aa:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d53ac:	4a08      	ldr	r2, [pc, #32]	; (d53d0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d53ae:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d53b0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d53b2:	a802      	add	r0, sp, #8
   d53b4:	6872      	ldr	r2, [r6, #4]
   d53b6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d53ba:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d53bc:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d53be:	f7ff ff6b 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d53c2:	6833      	ldr	r3, [r6, #0]
   d53c4:	b90b      	cbnz	r3, d53ca <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d53c6:	f7ff fbe7 	bl	d4b98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d53ca:	4630      	mov	r0, r6
   d53cc:	b002      	add	sp, #8
   d53ce:	bd70      	pop	{r4, r5, r6, pc}
   d53d0:	000d7eb4 	.word	0x000d7eb4

000d53d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d53d4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53d6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d53d8:	6803      	ldr	r3, [r0, #0]
   d53da:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d53dc:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d53de:	d00c      	beq.n	d53fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d53e0:	b114      	cbz	r4, d53e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d53e2:	6863      	ldr	r3, [r4, #4]
   d53e4:	3301      	adds	r3, #1
   d53e6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d53e8:	6828      	ldr	r0, [r5, #0]
   d53ea:	b128      	cbz	r0, d53f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d53ec:	6843      	ldr	r3, [r0, #4]
   d53ee:	3b01      	subs	r3, #1
   d53f0:	6043      	str	r3, [r0, #4]
   d53f2:	b90b      	cbnz	r3, d53f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d53f4:	f7ff fbda 	bl	d4bac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d53f8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d53fa:	4628      	mov	r0, r5
   d53fc:	bd38      	pop	{r3, r4, r5, pc}

000d53fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d53fe:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5400:	b570      	push	{r4, r5, r6, lr}
   d5402:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5404:	d91a      	bls.n	d543c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5406:	4290      	cmp	r0, r2
   d5408:	d219      	bcs.n	d543e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d540a:	f1a1 0608 	sub.w	r6, r1, #8
   d540e:	1a51      	subs	r1, r2, r1
   d5410:	3904      	subs	r1, #4
   d5412:	1f15      	subs	r5, r2, #4
   d5414:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5416:	1f2b      	subs	r3, r5, #4
   d5418:	429e      	cmp	r6, r3
   d541a:	d025      	beq.n	d5468 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d541c:	2c04      	cmp	r4, #4
   d541e:	d007      	beq.n	d5430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5420:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5424:	f844 3c04 	str.w	r3, [r4, #-4]
   d5428:	4629      	mov	r1, r5
   d542a:	4620      	mov	r0, r4
   d542c:	f7ff ff15 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5430:	4628      	mov	r0, r5
   d5432:	f7ff ff31 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5436:	3d08      	subs	r5, #8
   d5438:	3c08      	subs	r4, #8
   d543a:	e7ec      	b.n	d5416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d543c:	d014      	beq.n	d5468 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d543e:	1d0c      	adds	r4, r1, #4
   d5440:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5442:	1f23      	subs	r3, r4, #4
   d5444:	429d      	cmp	r5, r3
   d5446:	d00f      	beq.n	d5468 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5448:	2e04      	cmp	r6, #4
   d544a:	d007      	beq.n	d545c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d544c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5450:	f846 3c04 	str.w	r3, [r6, #-4]
   d5454:	4621      	mov	r1, r4
   d5456:	4630      	mov	r0, r6
   d5458:	f7ff feff 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d545c:	4620      	mov	r0, r4
   d545e:	f7ff ff1b 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5462:	3408      	adds	r4, #8
   d5464:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5466:	e7ec      	b.n	d5442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5468:	bd70      	pop	{r4, r5, r6, pc}

000d546a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d546e:	6804      	ldr	r4, [r0, #0]
   d5470:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5472:	4605      	mov	r5, r0
   d5474:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5476:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d547a:	42a7      	cmp	r7, r4
   d547c:	d018      	beq.n	d54b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d547e:	4641      	mov	r1, r8
   d5480:	4620      	mov	r0, r4
   d5482:	f7ff fe11 	bl	d50a8 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5486:	4606      	mov	r6, r0
   d5488:	b908      	cbnz	r0, d548e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d548a:	3408      	adds	r4, #8
   d548c:	e7f5      	b.n	d547a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d548e:	b18c      	cbz	r4, d54b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5490:	1d20      	adds	r0, r4, #4
   d5492:	f7ff ff01 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5496:	682b      	ldr	r3, [r5, #0]
   d5498:	686a      	ldr	r2, [r5, #4]
   d549a:	f104 0108 	add.w	r1, r4, #8
   d549e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d54a2:	4620      	mov	r0, r4
   d54a4:	f7ff ffab 	bl	d53fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d54a8:	686b      	ldr	r3, [r5, #4]
   d54aa:	3b01      	subs	r3, #1
   d54ac:	606b      	str	r3, [r5, #4]
    return true;
   d54ae:	e002      	b.n	d54b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d54b0:	2600      	movs	r6, #0
   d54b2:	e000      	b.n	d54b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d54b4:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d54b6:	4630      	mov	r0, r6
   d54b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d54bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d54be:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54c0:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d54c4:	6847      	ldr	r7, [r0, #4]
   d54c6:	9300      	str	r3, [sp, #0]
   d54c8:	a801      	add	r0, sp, #4
   d54ca:	f7ff fec6 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54ce:	6866      	ldr	r6, [r4, #4]
   d54d0:	68a3      	ldr	r3, [r4, #8]
   d54d2:	429e      	cmp	r6, r3
   d54d4:	db14      	blt.n	d5500 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d54d6:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d54d8:	2e00      	cmp	r6, #0
   d54da:	dd0b      	ble.n	d54f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d54dc:	00f0      	lsls	r0, r6, #3
   d54de:	f7ff fa1b 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d54e2:	4605      	mov	r5, r0
   d54e4:	b318      	cbz	r0, d552e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d54e6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d54ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d54ee:	f7ff ff86 	bl	d53fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d54f2:	e000      	b.n	d54f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d54f4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54f6:	6820      	ldr	r0, [r4, #0]
   d54f8:	f7ff fa16 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d54fc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d54fe:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5500:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5502:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5504:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5508:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d550c:	4629      	mov	r1, r5
   d550e:	f105 0008 	add.w	r0, r5, #8
   d5512:	f7ff ff74 	bl	d53fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5516:	b135      	cbz	r5, d5526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5518:	9b00      	ldr	r3, [sp, #0]
   d551a:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d551e:	a901      	add	r1, sp, #4
   d5520:	1d28      	adds	r0, r5, #4
   d5522:	f7ff fe9a 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5526:	6863      	ldr	r3, [r4, #4]
   d5528:	3301      	adds	r3, #1
   d552a:	6063      	str	r3, [r4, #4]
   d552c:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d552e:	a801      	add	r0, sp, #4
   d5530:	f7ff feb2 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5534:	4628      	mov	r0, r5
   d5536:	b003      	add	sp, #12
   d5538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d553c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5540:	4604      	mov	r4, r0
   d5542:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5544:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5546:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5548:	f7ff fb56 	bl	d4bf8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d554c:	6823      	ldr	r3, [r4, #0]
   d554e:	2b03      	cmp	r3, #3
   d5550:	d002      	beq.n	d5558 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5552:	2b04      	cmp	r3, #4
   d5554:	d042      	beq.n	d55dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5556:	e087      	b.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5558:	a804      	add	r0, sp, #16
   d555a:	f7ff ff03 	bl	d5364 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d555e:	9b04      	ldr	r3, [sp, #16]
   d5560:	8922      	ldrh	r2, [r4, #8]
   d5562:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5564:	6862      	ldr	r2, [r4, #4]
   d5566:	9904      	ldr	r1, [sp, #16]
   d5568:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d556c:	f8c1 3002 	str.w	r3, [r1, #2]
   d5570:	6853      	ldr	r3, [r2, #4]
   d5572:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5576:	a807      	add	r0, sp, #28
   d5578:	9b04      	ldr	r3, [sp, #16]
   d557a:	9306      	str	r3, [sp, #24]
   d557c:	a905      	add	r1, sp, #20
   d557e:	f7ff fe6c 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5582:	a906      	add	r1, sp, #24
   d5584:	f105 0018 	add.w	r0, r5, #24
   d5588:	f7ff ff98 	bl	d54bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d558c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d558e:	a807      	add	r0, sp, #28
   d5590:	f7ff fe82 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5594:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5596:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5598:	b974      	cbnz	r4, d55b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d559a:	4b36      	ldr	r3, [pc, #216]	; (d5674 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d559c:	9300      	str	r3, [sp, #0]
   d559e:	aa06      	add	r2, sp, #24
   d55a0:	4623      	mov	r3, r4
   d55a2:	4935      	ldr	r1, [pc, #212]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d55a4:	9407      	str	r4, [sp, #28]
   d55a6:	2032      	movs	r0, #50	; 0x32
   d55a8:	f7ff f92a 	bl	d4800 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d55ac:	9b04      	ldr	r3, [sp, #16]
   d55ae:	4621      	mov	r1, r4
   d55b0:	8818      	ldrh	r0, [r3, #0]
   d55b2:	f7fe fffb 	bl	d45ac <hal_ble_gap_disconnect>
   d55b6:	e00d      	b.n	d55d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d55b8:	4a30      	ldr	r2, [pc, #192]	; (d567c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d55ba:	9200      	str	r2, [sp, #0]
   d55bc:	2300      	movs	r3, #0
   d55be:	aa06      	add	r2, sp, #24
   d55c0:	492d      	ldr	r1, [pc, #180]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d55c2:	9307      	str	r3, [sp, #28]
   d55c4:	2001      	movs	r0, #1
   d55c6:	f7ff f91b 	bl	d4800 <log_message>
                if (impl->connectedCb_) {
   d55ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d55cc:	b113      	cbz	r3, d55d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d55ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d55d0:	a804      	add	r0, sp, #16
   d55d2:	4798      	blx	r3
   d55d4:	a805      	add	r0, sp, #20
   d55d6:	f7ff fe5f 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55da:	e045      	b.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d55dc:	8921      	ldrh	r1, [r4, #8]
   d55de:	4628      	mov	r0, r5
   d55e0:	f7ff fce6 	bl	d4fb0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d55e4:	4607      	mov	r7, r0
   d55e6:	2800      	cmp	r0, #0
   d55e8:	d03e      	beq.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d55ea:	6804      	ldr	r4, [r0, #0]
   d55ec:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d55ee:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d55f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55f4:	8022      	strh	r2, [r4, #0]
   d55f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d55fa:	4299      	cmp	r1, r3
   d55fc:	d003      	beq.n	d5606 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d55fe:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5602:	8042      	strh	r2, [r0, #2]
   d5604:	e7f9      	b.n	d55fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5606:	68e6      	ldr	r6, [r4, #12]
   d5608:	6923      	ldr	r3, [r4, #16]
   d560a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d560e:	45b0      	cmp	r8, r6
   d5610:	d004      	beq.n	d561c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5612:	1d30      	adds	r0, r6, #4
   d5614:	f7ff fe40 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5618:	3608      	adds	r6, #8
   d561a:	e7f8      	b.n	d560e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d561c:	2300      	movs	r3, #0
   d561e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5620:	69a6      	ldr	r6, [r4, #24]
   d5622:	69e3      	ldr	r3, [r4, #28]
   d5624:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5628:	45b0      	cmp	r8, r6
   d562a:	d004      	beq.n	d5636 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d562c:	1d30      	adds	r0, r6, #4
   d562e:	f7ff fe33 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5632:	3608      	adds	r6, #8
   d5634:	e7f8      	b.n	d5628 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5636:	2300      	movs	r3, #0
   d5638:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d563a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d563c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d563e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5640:	b113      	cbz	r3, d5648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5642:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5644:	4638      	mov	r0, r7
   d5646:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5648:	2320      	movs	r3, #32
   d564a:	4a0d      	ldr	r2, [pc, #52]	; (d5680 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d564c:	9306      	str	r3, [sp, #24]
   d564e:	9200      	str	r2, [sp, #0]
   d5650:	2300      	movs	r3, #0
   d5652:	4909      	ldr	r1, [pc, #36]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5654:	9307      	str	r3, [sp, #28]
   d5656:	2001      	movs	r0, #1
   d5658:	aa06      	add	r2, sp, #24
   d565a:	f7ff f8d1 	bl	d4800 <log_message>
                    impl->peers_.removeOne(*peer);
   d565e:	4639      	mov	r1, r7
   d5660:	f105 0018 	add.w	r0, r5, #24
   d5664:	f7ff ff01 	bl	d546a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5668:	a803      	add	r0, sp, #12
   d566a:	f7ff fad3 	bl	d4c14 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d566e:	b00e      	add	sp, #56	; 0x38
   d5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5674:	000d7f3a 	.word	0x000d7f3a
   d5678:	000d7ed8 	.word	0x000d7ed8
   d567c:	000d7f60 	.word	0x000d7f60
   d5680:	000d7f7d 	.word	0x000d7f7d

000d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5684:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5688:	4606      	mov	r6, r0
   d568a:	460c      	mov	r4, r1
   d568c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d568e:	d914      	bls.n	d56ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5690:	4290      	cmp	r0, r2
   d5692:	d213      	bcs.n	d56bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5694:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5698:	1a6c      	subs	r4, r5, r1
   d569a:	f1a1 0708 	sub.w	r7, r1, #8
   d569e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d56a0:	42af      	cmp	r7, r5
   d56a2:	d018      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d56a4:	b11c      	cbz	r4, d56ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d56a6:	4629      	mov	r1, r5
   d56a8:	4620      	mov	r0, r4
   d56aa:	f7ff fdeb 	bl	d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d56ae:	1d28      	adds	r0, r5, #4
   d56b0:	f7ff fdf2 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d56b4:	3d08      	subs	r5, #8
   d56b6:	3c08      	subs	r4, #8
   d56b8:	e7f2      	b.n	d56a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d56ba:	d00c      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d56bc:	42ac      	cmp	r4, r5
   d56be:	d00a      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d56c0:	b11e      	cbz	r6, d56ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d56c2:	4621      	mov	r1, r4
   d56c4:	4630      	mov	r0, r6
   d56c6:	f7ff fddd 	bl	d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d56ca:	1d20      	adds	r0, r4, #4
   d56cc:	f7ff fde4 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d56d0:	3408      	adds	r4, #8
   d56d2:	3608      	adds	r6, #8
   d56d4:	e7f2      	b.n	d56bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d56d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56d8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d56da:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56dc:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d56de:	dd0b      	ble.n	d56f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d56e0:	00f0      	lsls	r0, r6, #3
   d56e2:	f7ff f919 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d56e6:	4604      	mov	r4, r0
   d56e8:	b170      	cbz	r0, d5708 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d56ea:	e895 0006 	ldmia.w	r5, {r1, r2}
   d56ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d56f2:	f7ff ffc7 	bl	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d56f6:	e000      	b.n	d56fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d56f8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d56fa:	6828      	ldr	r0, [r5, #0]
   d56fc:	f7ff f914 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5700:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5702:	60ae      	str	r6, [r5, #8]
        return true;
   d5704:	2001      	movs	r0, #1
   d5706:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5708:	bd70      	pop	{r4, r5, r6, pc}

000d570a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d570a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d570c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d570e:	6845      	ldr	r5, [r0, #4]
   d5710:	4668      	mov	r0, sp
   d5712:	f7ff fdb7 	bl	d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5716:	6861      	ldr	r1, [r4, #4]
   d5718:	68a3      	ldr	r3, [r4, #8]
   d571a:	4299      	cmp	r1, r3
   d571c:	db05      	blt.n	d572a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d571e:	3101      	adds	r1, #1
   d5720:	4620      	mov	r0, r4
   d5722:	f7ff ffd9 	bl	d56d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5726:	4606      	mov	r6, r0
   d5728:	b198      	cbz	r0, d5752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d572a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d572c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d572e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5732:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5736:	4629      	mov	r1, r5
   d5738:	f105 0008 	add.w	r0, r5, #8
   d573c:	f7ff ffa2 	bl	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5740:	b11d      	cbz	r5, d574a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5742:	4669      	mov	r1, sp
   d5744:	4628      	mov	r0, r5
   d5746:	f7ff fd9d 	bl	d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d574a:	6863      	ldr	r3, [r4, #4]
   d574c:	3301      	adds	r3, #1
   d574e:	6063      	str	r3, [r4, #4]
   d5750:	2601      	movs	r6, #1
   d5752:	a801      	add	r0, sp, #4
   d5754:	f7ff fda0 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5758:	4630      	mov	r0, r6
   d575a:	b002      	add	sp, #8
   d575c:	bd70      	pop	{r4, r5, r6, pc}

000d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d575e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5762:	4606      	mov	r6, r0
   d5764:	460c      	mov	r4, r1
   d5766:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5768:	d914      	bls.n	d5794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d576a:	4290      	cmp	r0, r2
   d576c:	d213      	bcs.n	d5796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d576e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5772:	1a6c      	subs	r4, r5, r1
   d5774:	f1a1 0708 	sub.w	r7, r1, #8
   d5778:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d577a:	42af      	cmp	r7, r5
   d577c:	d018      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d577e:	b11c      	cbz	r4, d5788 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5780:	4629      	mov	r1, r5
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff fd70 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5788:	1d28      	adds	r0, r5, #4
   d578a:	f7ff fd85 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d578e:	3d08      	subs	r5, #8
   d5790:	3c08      	subs	r4, #8
   d5792:	e7f2      	b.n	d577a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5794:	d00c      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5796:	42ac      	cmp	r4, r5
   d5798:	d00a      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d579a:	b11e      	cbz	r6, d57a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d579c:	4621      	mov	r1, r4
   d579e:	4630      	mov	r0, r6
   d57a0:	f7ff fd62 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d57a4:	1d20      	adds	r0, r4, #4
   d57a6:	f7ff fd77 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d57aa:	3408      	adds	r4, #8
   d57ac:	3608      	adds	r6, #8
   d57ae:	e7f2      	b.n	d5796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d57b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57b2:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d57b4:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57b6:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d57b8:	dd0b      	ble.n	d57d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d57ba:	00f0      	lsls	r0, r6, #3
   d57bc:	f7ff f8ac 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d57c0:	4604      	mov	r4, r0
   d57c2:	b170      	cbz	r0, d57e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d57c4:	e895 0006 	ldmia.w	r5, {r1, r2}
   d57c8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d57cc:	f7ff ffc7 	bl	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d57d0:	e000      	b.n	d57d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d57d2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d57d4:	6828      	ldr	r0, [r5, #0]
   d57d6:	f7ff f8a7 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d57da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d57dc:	60ae      	str	r6, [r5, #8]
        return true;
   d57de:	2001      	movs	r0, #1
   d57e0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d57e2:	bd70      	pop	{r4, r5, r6, pc}

000d57e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d57e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57e6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d57e8:	6845      	ldr	r5, [r0, #4]
   d57ea:	4668      	mov	r0, sp
   d57ec:	f7ff fd3c 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57f0:	6861      	ldr	r1, [r4, #4]
   d57f2:	68a3      	ldr	r3, [r4, #8]
   d57f4:	4299      	cmp	r1, r3
   d57f6:	db05      	blt.n	d5804 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d57f8:	3101      	adds	r1, #1
   d57fa:	4620      	mov	r0, r4
   d57fc:	f7ff ffd9 	bl	d57b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5800:	4606      	mov	r6, r0
   d5802:	b198      	cbz	r0, d582c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5804:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5806:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5808:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d580c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5810:	4629      	mov	r1, r5
   d5812:	f105 0008 	add.w	r0, r5, #8
   d5816:	f7ff ffa2 	bl	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d581a:	b11d      	cbz	r5, d5824 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d581c:	4669      	mov	r1, sp
   d581e:	4628      	mov	r0, r5
   d5820:	f7ff fd22 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5824:	6863      	ldr	r3, [r4, #4]
   d5826:	3301      	adds	r3, #1
   d5828:	6063      	str	r3, [r4, #4]
   d582a:	2601      	movs	r6, #1
   d582c:	a801      	add	r0, sp, #4
   d582e:	f7ff fd33 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5832:	4630      	mov	r0, r6
   d5834:	b002      	add	sp, #8
   d5836:	bd70      	pop	{r4, r5, r6, pc}

000d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5838:	b510      	push	{r4, lr}
   d583a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	b108      	cbz	r0, d5844 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5840:	f7fe fc2b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5844:	4620      	mov	r0, r4
   d5846:	bd10      	pop	{r4, pc}

000d5848 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5848:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d584a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d584c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d584e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5852:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5856:	f7ff f8f5 	bl	d4a44 <_ZN6StringD1Ev>
   d585a:	4668      	mov	r0, sp
   d585c:	f7ff ffec 	bl	d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5860:	b003      	add	sp, #12
   d5862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5868:	b538      	push	{r3, r4, r5, lr}
   d586a:	2300      	movs	r3, #0
   d586c:	4604      	mov	r4, r0
   d586e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5870:	2014      	movs	r0, #20
   d5872:	460d      	mov	r5, r1
   d5874:	f7fe fc0f 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5878:	b128      	cbz	r0, d5886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d587a:	2301      	movs	r3, #1
   d587c:	6043      	str	r3, [r0, #4]
   d587e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5880:	4b02      	ldr	r3, [pc, #8]	; (d588c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5882:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5884:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5886:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5888:	4620      	mov	r0, r4
   d588a:	bd38      	pop	{r3, r4, r5, pc}
   d588c:	000d7e7c 	.word	0x000d7e7c

000d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5894:	b088      	sub	sp, #32
   d5896:	4605      	mov	r5, r0
   d5898:	461e      	mov	r6, r3
   d589a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d589c:	2300      	movs	r3, #0
   d589e:	460f      	mov	r7, r1
   d58a0:	4690      	mov	r8, r2
   d58a2:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d58a4:	9305      	str	r3, [sp, #20]
   d58a6:	f7fe fbf6 	bl	d4096 <_Znwj>
   d58aa:	f8cd d018 	str.w	sp, [sp, #24]
   d58ae:	4604      	mov	r4, r0
   d58b0:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d58b2:	b1b0      	cbz	r0, d58e2 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d58b4:	f7ff fb5c 	bl	d4f70 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d58b8:	4639      	mov	r1, r7
   d58ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d58be:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d58c2:	f7ff f933 	bl	d4b2c <_ZN6StringaSEPKc>
        callback_ = callback;
   d58c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d58c8:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d58ca:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d58cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d58ce:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d58d0:	f104 0014 	add.w	r0, r4, #20
   d58d4:	f7ff fa1e 	bl	d4d14 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d58d8:	990e      	ldr	r1, [sp, #56]	; 0x38
   d58da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d58de:	f7ff fa19 	bl	d4d14 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58e2:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d58e4:	2600      	movs	r6, #0
   d58e6:	ab01      	add	r3, sp, #4
   d58e8:	aa02      	add	r2, sp, #8
   d58ea:	a803      	add	r0, sp, #12
   d58ec:	9607      	str	r6, [sp, #28]
   d58ee:	f7ff ffbb 	bl	d5868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58f2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d58f4:	9a05      	ldr	r2, [sp, #20]
   d58f6:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58f8:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58fa:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d58fc:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58fe:	f7ff fccb 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5902:	a806      	add	r0, sp, #24
   d5904:	f7ff ff98 	bl	d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5908:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d590a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d590c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d590e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5910:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5912:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5914:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5916:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5918:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d591c:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d591e:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5920:	f7ff fcba 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5924:	a805      	add	r0, sp, #20
   d5926:	f7ff fcb7 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d592a:	6829      	ldr	r1, [r5, #0]
   d592c:	b919      	cbnz	r1, d5936 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d592e:	4a03      	ldr	r2, [pc, #12]	; (d593c <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d5930:	200a      	movs	r0, #10
   d5932:	f7fe ff5d 	bl	d47f0 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5936:	b008      	add	sp, #32
   d5938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d593c:	000d454d 	.word	0x000d454d

000d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5940:	b510      	push	{r4, lr}
   d5942:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5944:	6840      	ldr	r0, [r0, #4]
   d5946:	b108      	cbz	r0, d594c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5948:	f7fe fba7 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d594c:	4620      	mov	r0, r4
   d594e:	bd10      	pop	{r4, pc}

000d5950 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5950:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5952:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5954:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5956:	e88d 0009 	stmia.w	sp, {r0, r3}
   d595a:	4668      	mov	r0, sp
   d595c:	f7ff fff0 	bl	d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5960:	b003      	add	sp, #12
   d5962:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5968:	b538      	push	{r3, r4, r5, lr}
   d596a:	2300      	movs	r3, #0
   d596c:	4604      	mov	r4, r0
   d596e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5970:	2014      	movs	r0, #20
   d5972:	460d      	mov	r5, r1
   d5974:	f7fe fb8f 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5978:	b128      	cbz	r0, d5986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d597a:	2301      	movs	r3, #1
   d597c:	6043      	str	r3, [r0, #4]
   d597e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5980:	4b02      	ldr	r3, [pc, #8]	; (d598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5982:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5984:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5986:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5988:	4620      	mov	r0, r4
   d598a:	bd38      	pop	{r3, r4, r5, pc}
   d598c:	000d7e98 	.word	0x000d7e98

000d5990 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5990:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5992:	2600      	movs	r6, #0
   d5994:	b087      	sub	sp, #28
   d5996:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5998:	6046      	str	r6, [r0, #4]
   d599a:	4604      	mov	r4, r0
   d599c:	2018      	movs	r0, #24
   d599e:	460f      	mov	r7, r1
   d59a0:	f7fe fb79 	bl	d4096 <_Znwj>
   d59a4:	f8cd d010 	str.w	sp, [sp, #16]
   d59a8:	4605      	mov	r5, r0
   d59aa:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59ac:	b138      	cbz	r0, d59be <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d59ae:	f7ff f94b 	bl	d4c48 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d59b2:	4639      	mov	r1, r7
   d59b4:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d59b6:	82ae      	strh	r6, [r5, #20]
   d59b8:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d59ba:	f7ff f9ab 	bl	d4d14 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d59be:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59c0:	4629      	mov	r1, r5
   d59c2:	9305      	str	r3, [sp, #20]
   d59c4:	aa02      	add	r2, sp, #8
   d59c6:	ab01      	add	r3, sp, #4
   d59c8:	a803      	add	r0, sp, #12
   d59ca:	f7ff ffcd 	bl	d5968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d59ce:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d59d0:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d59d2:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d59d4:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59d6:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d59d8:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59da:	f7ff fc5d 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d59de:	a804      	add	r0, sp, #16
   d59e0:	f7ff ffae 	bl	d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d59e4:	6823      	ldr	r3, [r4, #0]
   d59e6:	b90b      	cbnz	r3, d59ec <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d59e8:	f7ff f8d6 	bl	d4b98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d59ec:	4620      	mov	r0, r4
   d59ee:	b007      	add	sp, #28
   d59f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59f8:	4617      	mov	r7, r2
   d59fa:	b09f      	sub	sp, #124	; 0x7c
   d59fc:	4680      	mov	r8, r0
    WiringBleLock lk;
   d59fe:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5a00:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5a02:	f7ff f8f9 	bl	d4bf8 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5a06:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5a08:	7923      	ldrb	r3, [r4, #4]
   d5a0a:	2b00      	cmp	r3, #0
   d5a0c:	f000 80f3 	beq.w	d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a10:	6833      	ldr	r3, [r6, #0]
   d5a12:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a14:	691b      	ldr	r3, [r3, #16]
   d5a16:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5a1a:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a1c:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5a20:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5a24:	9b03      	ldr	r3, [sp, #12]
   d5a26:	42ab      	cmp	r3, r5
   d5a28:	d023      	beq.n	d5a72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5a2a:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a2e:	4650      	mov	r0, sl
   d5a30:	f109 0114 	add.w	r1, r9, #20
   d5a34:	f7ff f987 	bl	d4d46 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a38:	2800      	cmp	r0, #0
   d5a3a:	f000 80e1 	beq.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5a3e:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5a42:	4658      	mov	r0, fp
   d5a44:	f7ff f97f 	bl	d4d46 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a48:	2800      	cmp	r0, #0
   d5a4a:	f000 80d9 	beq.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a4e:	6823      	ldr	r3, [r4, #0]
   d5a50:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5a54:	f8d9 3000 	ldr.w	r3, [r9]
   d5a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5a5c:	4299      	cmp	r1, r3
   d5a5e:	f040 80cf 	bne.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5a62:	2320      	movs	r3, #32
   d5a64:	4a6b      	ldr	r2, [pc, #428]	; (d5c14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d5a66:	9313      	str	r3, [sp, #76]	; 0x4c
   d5a68:	2300      	movs	r3, #0
   d5a6a:	9200      	str	r2, [sp, #0]
   d5a6c:	9314      	str	r3, [sp, #80]	; 0x50
   d5a6e:	aa13      	add	r2, sp, #76	; 0x4c
   d5a70:	e0bd      	b.n	d5bee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5a72:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5a76:	4628      	mov	r0, r5
   d5a78:	f7ff f933 	bl	d4ce2 <_ZNK8particle7BleUuid7isValidEv>
   d5a7c:	b918      	cbnz	r0, d5a86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5a7e:	4966      	ldr	r1, [pc, #408]	; (d5c18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d5a80:	4628      	mov	r0, r5
   d5a82:	f7ff f952 	bl	d4d2a <_ZN8particle7BleUuidaSEPKh>
   d5a86:	6833      	ldr	r3, [r6, #0]
   d5a88:	f8d3 9000 	ldr.w	r9, [r3]
   d5a8c:	685b      	ldr	r3, [r3, #4]
   d5a8e:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a92:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5a94:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a96:	d008      	beq.n	d5aaa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5a98:	f8d9 0000 	ldr.w	r0, [r9]
   d5a9c:	f7ff f953 	bl	d4d46 <_ZNK8particle7BleUuideqERKS0_>
   d5aa0:	2800      	cmp	r0, #0
   d5aa2:	d137      	bne.n	d5b14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5aa4:	f109 0908 	add.w	r9, r9, #8
   d5aa8:	e7f3      	b.n	d5a92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5aaa:	a806      	add	r0, sp, #24
   d5aac:	f7ff ff70 	bl	d5990 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5ab0:	aa13      	add	r2, sp, #76	; 0x4c
   d5ab2:	462b      	mov	r3, r5
   d5ab4:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d5ab8:	4696      	mov	lr, r2
   d5aba:	6818      	ldr	r0, [r3, #0]
   d5abc:	6859      	ldr	r1, [r3, #4]
   d5abe:	4615      	mov	r5, r2
   d5ac0:	c503      	stmia	r5!, {r0, r1}
   d5ac2:	3308      	adds	r3, #8
   d5ac4:	4563      	cmp	r3, ip
   d5ac6:	462a      	mov	r2, r5
   d5ac8:	d1f7      	bne.n	d5aba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d5aca:	6818      	ldr	r0, [r3, #0]
   d5acc:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ace:	9a06      	ldr	r2, [sp, #24]
   d5ad0:	2300      	movs	r3, #0
   d5ad2:	3214      	adds	r2, #20
   d5ad4:	4671      	mov	r1, lr
   d5ad6:	2001      	movs	r0, #1
   d5ad8:	f7fe fd72 	bl	d45c0 <hal_ble_gatt_server_add_service>
   d5adc:	2800      	cmp	r0, #0
   d5ade:	d17e      	bne.n	d5bde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5ae0:	6835      	ldr	r5, [r6, #0]
   d5ae2:	a906      	add	r1, sp, #24
   d5ae4:	a80b      	add	r0, sp, #44	; 0x2c
   d5ae6:	f7ff fbcd 	bl	d5284 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5aea:	4628      	mov	r0, r5
   d5aec:	a90b      	add	r1, sp, #44	; 0x2c
   d5aee:	f7ff fe0c 	bl	d570a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5af2:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5af4:	a80c      	add	r0, sp, #48	; 0x30
   d5af6:	f7ff fbcf 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5afa:	2d00      	cmp	r5, #0
   d5afc:	d06f      	beq.n	d5bde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d5afe:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5b00:	6853      	ldr	r3, [r2, #4]
   d5b02:	6812      	ldr	r2, [r2, #0]
   d5b04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5b08:	3b01      	subs	r3, #1
   d5b0a:	a807      	add	r0, sp, #28
   d5b0c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d5b10:	f7ff fbc2 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5b14:	f104 0514 	add.w	r5, r4, #20
   d5b18:	4628      	mov	r0, r5
   d5b1a:	f7ff f8e2 	bl	d4ce2 <_ZNK8particle7BleUuid7isValidEv>
   d5b1e:	b968      	cbnz	r0, d5b3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b20:	4b3e      	ldr	r3, [pc, #248]	; (d5c1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b22:	493d      	ldr	r1, [pc, #244]	; (d5c18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b24:	881a      	ldrh	r2, [r3, #0]
   d5b26:	3201      	adds	r2, #1
   d5b28:	b292      	uxth	r2, r2
   d5b2a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b2c:	a813      	add	r0, sp, #76	; 0x4c
   d5b2e:	2301      	movs	r3, #1
   d5b30:	f7ff f8c3 	bl	d4cba <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5b34:	a913      	add	r1, sp, #76	; 0x4c
   d5b36:	4628      	mov	r0, r5
   d5b38:	f7ff f8ec 	bl	d4d14 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5b3c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5b40:	4652      	mov	r2, sl
   d5b42:	2100      	movs	r1, #0
   d5b44:	a813      	add	r0, sp, #76	; 0x4c
   d5b46:	f001 ffd8 	bl	d7afa <memset>
    charInit.version = BLE_API_VERSION;
   d5b4a:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b4c:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5b4e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d5b52:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b56:	462b      	mov	r3, r5
   d5b58:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d5b5c:	4615      	mov	r5, r2
   d5b5e:	6818      	ldr	r0, [r3, #0]
   d5b60:	6859      	ldr	r1, [r3, #4]
   d5b62:	4696      	mov	lr, r2
   d5b64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5b68:	3308      	adds	r3, #8
   d5b6a:	4563      	cmp	r3, ip
   d5b6c:	4672      	mov	r2, lr
   d5b6e:	d1f6      	bne.n	d5b5e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d5b70:	6818      	ldr	r0, [r3, #0]
   d5b72:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b78:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d5b7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5b80:	682b      	ldr	r3, [r5, #0]
   d5b82:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d5b86:	7923      	ldrb	r3, [r4, #4]
   d5b88:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d5b8c:	f8d9 3000 	ldr.w	r3, [r9]
   d5b90:	8a9b      	ldrh	r3, [r3, #20]
   d5b92:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d5b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5b98:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b9a:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5b9c:	4b20      	ldr	r3, [pc, #128]	; (d5c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d5b9e:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ba0:	1da1      	adds	r1, r4, #6
   d5ba2:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5ba4:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ba6:	f7fe fd33 	bl	d4610 <hal_ble_gatt_server_add_characteristic>
   d5baa:	bb20      	cbnz	r0, d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d5bac:	2301      	movs	r3, #1
   d5bae:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bb0:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bb2:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bb4:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bb6:	a80b      	add	r0, sp, #44	; 0x2c
   d5bb8:	f7ff fb56 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	a90b      	add	r1, sp, #44	; 0x2c
   d5bc0:	f7ff fe10 	bl	d57e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5bc4:	4604      	mov	r4, r0
   d5bc6:	a80c      	add	r0, sp, #48	; 0x30
   d5bc8:	f7ff fb66 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bcc:	b99c      	cbnz	r4, d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d5bce:	2320      	movs	r3, #32
   d5bd0:	930b      	str	r3, [sp, #44]	; 0x2c
   d5bd2:	4b14      	ldr	r3, [pc, #80]	; (d5c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d5bd4:	9300      	str	r3, [sp, #0]
   d5bd6:	940c      	str	r4, [sp, #48]	; 0x30
   d5bd8:	4623      	mov	r3, r4
   d5bda:	aa0b      	add	r2, sp, #44	; 0x2c
   d5bdc:	e007      	b.n	d5bee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5bde:	4639      	mov	r1, r7
   d5be0:	4640      	mov	r0, r8
   d5be2:	f7ff fb41 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5be6:	a807      	add	r0, sp, #28
   d5be8:	f7ff fb56 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bec:	e00a      	b.n	d5c04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5bee:	490e      	ldr	r1, [pc, #56]	; (d5c28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d5bf0:	2032      	movs	r0, #50	; 0x32
   d5bf2:	f7fe fe05 	bl	d4800 <log_message>
            return characteristic;
   d5bf6:	4639      	mov	r1, r7
   d5bf8:	4640      	mov	r0, r8
   d5bfa:	f7ff fb35 	bl	d5268 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bfe:	e001      	b.n	d5c04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d5c00:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5c02:	e70f      	b.n	d5a24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5c04:	a805      	add	r0, sp, #20
   d5c06:	f7ff f805 	bl	d4c14 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5c0a:	4640      	mov	r0, r8
   d5c0c:	b01f      	add	sp, #124	; 0x7c
   d5c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c12:	bf00      	nop
   d5c14:	000d804d 	.word	0x000d804d
   d5c18:	000d7ec8 	.word	0x000d7ec8
   d5c1c:	2003e3bc 	.word	0x2003e3bc
   d5c20:	000d5175 	.word	0x000d5175
   d5c24:	000d8026 	.word	0x000d8026
   d5c28:	000d7ed8 	.word	0x000d7ed8

000d5c2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c2c:	4802      	ldr	r0, [pc, #8]	; (d5c38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5c2e:	2300      	movs	r3, #0
   d5c30:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c32:	f7fe bd35 	b.w	d46a0 <os_mutex_recursive_create>
   d5c36:	bf00      	nop
   d5c38:	2003e3c0 	.word	0x2003e3c0

000d5c3c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c3e:	4606      	mov	r6, r0
   d5c40:	460d      	mov	r5, r1
   d5c42:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c44:	2400      	movs	r4, #0
  while (size--) {
   d5c46:	42bd      	cmp	r5, r7
   d5c48:	d00c      	beq.n	d5c64 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c4a:	6833      	ldr	r3, [r6, #0]
   d5c4c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c50:	689b      	ldr	r3, [r3, #8]
   d5c52:	4630      	mov	r0, r6
   d5c54:	4798      	blx	r3
     if (chunk>=0)
   d5c56:	2800      	cmp	r0, #0
   d5c58:	db01      	blt.n	d5c5e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c5a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c5c:	e7f3      	b.n	d5c46 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c5e:	2c00      	cmp	r4, #0
   d5c60:	bf08      	it	eq
   d5c62:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c64:	4620      	mov	r0, r4
   d5c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c68 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c68:	b570      	push	{r4, r5, r6, lr}
   d5c6a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c6c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c6e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c70:	b149      	cbz	r1, d5c86 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c72:	f001 ff95 	bl	d7ba0 <strlen>
   d5c76:	682b      	ldr	r3, [r5, #0]
   d5c78:	4602      	mov	r2, r0
   d5c7a:	4621      	mov	r1, r4
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	68db      	ldr	r3, [r3, #12]
    }
   d5c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c84:	4718      	bx	r3
    }
   d5c86:	bd70      	pop	{r4, r5, r6, pc}

000d5c88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c88:	6803      	ldr	r3, [r0, #0]
   d5c8a:	689b      	ldr	r3, [r3, #8]
   d5c8c:	4718      	bx	r3

000d5c8e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c8e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c90:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c92:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c94:	f7ff fff8 	bl	d5c88 <_ZN5Print5printEc>
  n += print('\n');
   d5c98:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c9a:	4604      	mov	r4, r0
  n += print('\n');
   d5c9c:	4628      	mov	r0, r5
   d5c9e:	f7ff fff3 	bl	d5c88 <_ZN5Print5printEc>
  return n;
}
   d5ca2:	4420      	add	r0, r4
   d5ca4:	bd38      	pop	{r3, r4, r5, pc}

000d5ca6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5ca6:	b530      	push	{r4, r5, lr}
   d5ca8:	b08b      	sub	sp, #44	; 0x2c
   d5caa:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cac:	2100      	movs	r1, #0
   d5cae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cb2:	2a01      	cmp	r2, #1
   d5cb4:	bf98      	it	ls
   d5cb6:	220a      	movls	r2, #10
   d5cb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5cbc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5cc0:	fb05 3312 	mls	r3, r5, r2, r3
   d5cc4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cc8:	2b09      	cmp	r3, #9
   d5cca:	bf94      	ite	ls
   d5ccc:	3330      	addls	r3, #48	; 0x30
   d5cce:	3337      	addhi	r3, #55	; 0x37
   d5cd0:	b2db      	uxtb	r3, r3
   d5cd2:	4621      	mov	r1, r4
   d5cd4:	f804 3901 	strb.w	r3, [r4], #-1
   d5cd8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cda:	2d00      	cmp	r5, #0
   d5cdc:	d1ee      	bne.n	d5cbc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cde:	f7ff ffc3 	bl	d5c68 <_ZN5Print5writeEPKc>
}
   d5ce2:	b00b      	add	sp, #44	; 0x2c
   d5ce4:	bd30      	pop	{r4, r5, pc}

000d5ce6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5ce6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5ce8:	b92a      	cbnz	r2, d5cf6 <_ZN5Print5printEmi+0x10>
   d5cea:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5cec:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5cf0:	689b      	ldr	r3, [r3, #8]
   d5cf2:	b2c9      	uxtb	r1, r1
   d5cf4:	4718      	bx	r3
  else return printNumber(n, base);
   d5cf6:	b2d2      	uxtb	r2, r2
}
   d5cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cfc:	f7ff bfd3 	b.w	d5ca6 <_ZN5Print11printNumberEmh>

000d5d00 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5d00:	f7ff bff1 	b.w	d5ce6 <_ZN5Print5printEmi>

000d5d04 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d04:	b40c      	push	{r2, r3}
   d5d06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d0a:	b087      	sub	sp, #28
   d5d0c:	af00      	add	r7, sp, #0
   d5d0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5d12:	4605      	mov	r5, r0
   d5d14:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5d18:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d1a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5d1c:	4623      	mov	r3, r4
   d5d1e:	464a      	mov	r2, r9
   d5d20:	2114      	movs	r1, #20
   d5d22:	1d38      	adds	r0, r7, #4
   d5d24:	f7fe fe10 	bl	d4948 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5d28:	2813      	cmp	r0, #19
   d5d2a:	d805      	bhi.n	d5d38 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d2c:	1d39      	adds	r1, r7, #4
   d5d2e:	4628      	mov	r0, r5
   d5d30:	f7ff ff9a 	bl	d5c68 <_ZN5Print5writeEPKc>
   d5d34:	4604      	mov	r4, r0
   d5d36:	e013      	b.n	d5d60 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d38:	f100 0308 	add.w	r3, r0, #8
   d5d3c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5d40:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d42:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5d46:	1c41      	adds	r1, r0, #1
   d5d48:	4623      	mov	r3, r4
   d5d4a:	464a      	mov	r2, r9
   d5d4c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5d4e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5d50:	f7fe fdfa 	bl	d4948 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d54:	4669      	mov	r1, sp
   d5d56:	4628      	mov	r0, r5
   d5d58:	f7ff ff86 	bl	d5c68 <_ZN5Print5writeEPKc>
   d5d5c:	4604      	mov	r4, r0
   d5d5e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5d60:	b11e      	cbz	r6, d5d6a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5d62:	4628      	mov	r0, r5
   d5d64:	f7ff ff93 	bl	d5c8e <_ZN5Print7printlnEv>
   d5d68:	4404      	add	r4, r0
    return n;
}
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	371c      	adds	r7, #28
   d5d6e:	46bd      	mov	sp, r7
   d5d70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d74:	b002      	add	sp, #8
   d5d76:	4770      	bx	lr

000d5d78 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5d78:	6880      	ldr	r0, [r0, #8]
   d5d7a:	6803      	ldr	r3, [r0, #0]
   d5d7c:	68db      	ldr	r3, [r3, #12]
   d5d7e:	4718      	bx	r3

000d5d80 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5d80:	4770      	bx	lr

000d5d82 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5d82:	b119      	cbz	r1, d5d8c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5d84:	680b      	ldr	r3, [r1, #0]
   d5d86:	4608      	mov	r0, r1
   d5d88:	685b      	ldr	r3, [r3, #4]
   d5d8a:	4718      	bx	r3
   d5d8c:	4770      	bx	lr

000d5d8e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5d8e:	b119      	cbz	r1, d5d98 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5d90:	680b      	ldr	r3, [r1, #0]
   d5d92:	4608      	mov	r0, r1
   d5d94:	685b      	ldr	r3, [r3, #4]
   d5d96:	4718      	bx	r3
   d5d98:	4770      	bx	lr

000d5d9a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5d9a:	4770      	bx	lr

000d5d9c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5d9c:	4770      	bx	lr

000d5d9e <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5d9e:	4770      	bx	lr

000d5da0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5da0:	b538      	push	{r3, r4, r5, lr}
   d5da2:	4604      	mov	r4, r0
   d5da4:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5da6:	6800      	ldr	r0, [r0, #0]
   d5da8:	212e      	movs	r1, #46	; 0x2e
   d5daa:	f001 fee5 	bl	d7b78 <strchrnul>
    size = s - category;
   d5dae:	6823      	ldr	r3, [r4, #0]
   d5db0:	1ac3      	subs	r3, r0, r3
   d5db2:	602b      	str	r3, [r5, #0]
    if (size) {
   d5db4:	b123      	cbz	r3, d5dc0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5db6:	7803      	ldrb	r3, [r0, #0]
   d5db8:	b103      	cbz	r3, d5dbc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5dba:	3001      	adds	r0, #1
   d5dbc:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dbe:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5dc0:	4618      	mov	r0, r3
}
   d5dc2:	bd38      	pop	{r3, r4, r5, pc}

000d5dc4 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5dc4:	b510      	push	{r4, lr}
   d5dc6:	210c      	movs	r1, #12
   d5dc8:	4604      	mov	r4, r0
   d5dca:	f001 fcf9 	bl	d77c0 <_ZdlPvj>
   d5dce:	4620      	mov	r0, r4
   d5dd0:	bd10      	pop	{r4, pc}

000d5dd2 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5dd2:	b510      	push	{r4, lr}
   d5dd4:	2104      	movs	r1, #4
   d5dd6:	4604      	mov	r4, r0
   d5dd8:	f001 fcf2 	bl	d77c0 <_ZdlPvj>
   d5ddc:	4620      	mov	r0, r4
   d5dde:	bd10      	pop	{r4, pc}

000d5de0 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5de0:	b510      	push	{r4, lr}
   d5de2:	2104      	movs	r1, #4
   d5de4:	4604      	mov	r4, r0
   d5de6:	f001 fceb 	bl	d77c0 <_ZdlPvj>
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5dee:	b538      	push	{r3, r4, r5, lr}
   d5df0:	460c      	mov	r4, r1
   d5df2:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5df4:	f001 f8ea 	bl	d6fcc <_Z16_fetch_usbserialv>
   d5df8:	4284      	cmp	r4, r0
   d5dfa:	d00d      	beq.n	d5e18 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5dfc:	f001 f96e 	bl	d70dc <_Z22__fetch_global_Serial1v>
   d5e00:	4284      	cmp	r4, r0
   d5e02:	d105      	bne.n	d5e10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5e04:	f001 f96a 	bl	d70dc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5e0c:	f001 b963 	b.w	d70d6 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5e10:	4621      	mov	r1, r4
   d5e12:	4628      	mov	r0, r5
   d5e14:	f7ff ffbb 	bl	d5d8e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5e18:	bd38      	pop	{r3, r4, r5, pc}

000d5e1a <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5e1a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5e1c:	f001 feb6 	bl	d7b8c <strcmp>
}
   d5e20:	fab0 f080 	clz	r0, r0
   d5e24:	0940      	lsrs	r0, r0, #5
   d5e26:	bd08      	pop	{r3, pc}

000d5e28 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5e28:	b538      	push	{r3, r4, r5, lr}
   d5e2a:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5e2c:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5e2e:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5e30:	f001 feb6 	bl	d7ba0 <strlen>
   d5e34:	4621      	mov	r1, r4
   d5e36:	4602      	mov	r2, r0
   d5e38:	4628      	mov	r0, r5
}
   d5e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5e3e:	f001 bc2c 	b.w	d769a <_ZN5spark10JSONWriter5valueEPKcj>

000d5e42 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5e42:	6800      	ldr	r0, [r0, #0]
   d5e44:	f7fe bc34 	b.w	d46b0 <os_mutex_recursive_lock>

000d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5e48:	b570      	push	{r4, r5, r6, lr}
   d5e4a:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5e4c:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5e4e:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5e50:	f001 fea6 	bl	d7ba0 <strlen>
   d5e54:	6823      	ldr	r3, [r4, #0]
   d5e56:	4602      	mov	r2, r0
   d5e58:	4629      	mov	r1, r5
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	68db      	ldr	r3, [r3, #12]
}
   d5e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5e62:	4718      	bx	r3

000d5e64 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5e64:	b513      	push	{r0, r1, r4, lr}
   d5e66:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5e68:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5e6a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5e6e:	68d4      	ldr	r4, [r2, #12]
   d5e70:	4619      	mov	r1, r3
   d5e72:	2201      	movs	r2, #1
   d5e74:	47a0      	blx	r4
}
   d5e76:	b002      	add	sp, #8
   d5e78:	bd10      	pop	{r4, pc}
	...

000d5e7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5e80:	6845      	ldr	r5, [r0, #4]
   d5e82:	6807      	ldr	r7, [r0, #0]
   d5e84:	b085      	sub	sp, #20
   d5e86:	4691      	mov	r9, r2
   d5e88:	2214      	movs	r2, #20
   d5e8a:	4355      	muls	r5, r2
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	10ab      	asrs	r3, r5, #2
   d5e90:	4d19      	ldr	r5, [pc, #100]	; (d5ef8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5e92:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5e94:	435d      	muls	r5, r3
   d5e96:	468b      	mov	fp, r1
   d5e98:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5e9a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5e9c:	2d00      	cmp	r5, #0
   d5e9e:	9303      	str	r3, [sp, #12]
   d5ea0:	dd23      	ble.n	d5eea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5ea2:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5ea4:	106e      	asrs	r6, r5, #1
   d5ea6:	fb03 f006 	mul.w	r0, r3, r6
   d5eaa:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5eae:	464a      	mov	r2, r9
   d5eb0:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5eb4:	5820      	ldr	r0, [r4, r0]
   d5eb6:	45d1      	cmp	r9, sl
   d5eb8:	bf28      	it	cs
   d5eba:	4652      	movcs	r2, sl
   d5ebc:	4659      	mov	r1, fp
   d5ebe:	f001 fe77 	bl	d7bb0 <strncmp>
                if (cmp == 0) {
   d5ec2:	9b03      	ldr	r3, [sp, #12]
   d5ec4:	b948      	cbnz	r0, d5eda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d5ec6:	45d1      	cmp	r9, sl
   d5ec8:	d103      	bne.n	d5ed2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5eca:	9a01      	ldr	r2, [sp, #4]
   d5ecc:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5ece:	4635      	mov	r5, r6
   d5ed0:	e7e4      	b.n	d5e9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5ed2:	bf8c      	ite	hi
   d5ed4:	2001      	movhi	r0, #1
   d5ed6:	2000      	movls	r0, #0
   d5ed8:	e000      	b.n	d5edc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5eda:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5edc:	2800      	cmp	r0, #0
   d5ede:	d0f6      	beq.n	d5ece <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5ee0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5ee2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d5ee6:	3e01      	subs	r6, #1
   d5ee8:	e7f1      	b.n	d5ece <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5eea:	1be4      	subs	r4, r4, r7
}
   d5eec:	4802      	ldr	r0, [pc, #8]	; (d5ef8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5eee:	10a4      	asrs	r4, r4, #2
}
   d5ef0:	4360      	muls	r0, r4
   d5ef2:	b005      	add	sp, #20
   d5ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ef8:	cccccccd 	.word	0xcccccccd

000d5efc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5efe:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5f00:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5f02:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5f04:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d5f06:	b313      	cbz	r3, d5f4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5f08:	b309      	cbz	r1, d5f4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5f0a:	af04      	add	r7, sp, #16
   d5f0c:	2300      	movs	r3, #0
   d5f0e:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5f12:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5f16:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5f18:	4639      	mov	r1, r7
   d5f1a:	a801      	add	r0, sp, #4
   d5f1c:	f7ff ff40 	bl	d5da0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5f20:	4601      	mov	r1, r0
   d5f22:	b1a0      	cbz	r0, d5f4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5f24:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d5f26:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5f28:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	f7ff ffa5 	bl	d5e7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5f32:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5f36:	b153      	cbz	r3, d5f4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5f38:	6823      	ldr	r3, [r4, #0]
   d5f3a:	2414      	movs	r4, #20
   d5f3c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5f40:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5f42:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d5f46:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5f48:	bfa8      	it	ge
   d5f4a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5f4c:	e7e4      	b.n	d5f18 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5f4e:	4630      	mov	r0, r6
   d5f50:	b005      	add	sp, #20
   d5f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5f54:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5f56:	4c09      	ldr	r4, [pc, #36]	; (d5f7c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5f58:	6823      	ldr	r3, [r4, #0]
   d5f5a:	07db      	lsls	r3, r3, #31
   d5f5c:	d40b      	bmi.n	d5f76 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5f5e:	4620      	mov	r0, r4
   d5f60:	f7fe f8aa 	bl	d40b8 <__cxa_guard_acquire>
   d5f64:	b138      	cbz	r0, d5f76 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5f66:	4620      	mov	r0, r4
   d5f68:	f7fe f8ab 	bl	d40c2 <__cxa_guard_release>
   d5f6c:	4a04      	ldr	r2, [pc, #16]	; (d5f80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5f6e:	4905      	ldr	r1, [pc, #20]	; (d5f84 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5f70:	4805      	ldr	r0, [pc, #20]	; (d5f88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5f72:	f001 fc17 	bl	d77a4 <__aeabi_atexit>
    return &factory;
}
   d5f76:	4804      	ldr	r0, [pc, #16]	; (d5f88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5f78:	bd10      	pop	{r4, pc}
   d5f7a:	bf00      	nop
   d5f7c:	2003e3c4 	.word	0x2003e3c4
   d5f80:	2003e344 	.word	0x2003e344
   d5f84:	000d5d9d 	.word	0x000d5d9d
   d5f88:	2003e2d4 	.word	0x2003e2d4

000d5f8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5f8c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5f8e:	4c09      	ldr	r4, [pc, #36]	; (d5fb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5f90:	6823      	ldr	r3, [r4, #0]
   d5f92:	07db      	lsls	r3, r3, #31
   d5f94:	d40b      	bmi.n	d5fae <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5f96:	4620      	mov	r0, r4
   d5f98:	f7fe f88e 	bl	d40b8 <__cxa_guard_acquire>
   d5f9c:	b138      	cbz	r0, d5fae <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f7fe f88f 	bl	d40c2 <__cxa_guard_release>
   d5fa4:	4a04      	ldr	r2, [pc, #16]	; (d5fb8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5fa6:	4905      	ldr	r1, [pc, #20]	; (d5fbc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5fa8:	4805      	ldr	r0, [pc, #20]	; (d5fc0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5faa:	f001 fbfb 	bl	d77a4 <__aeabi_atexit>
    return &factory;
}
   d5fae:	4804      	ldr	r0, [pc, #16]	; (d5fc0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5fb0:	bd10      	pop	{r4, pc}
   d5fb2:	bf00      	nop
   d5fb4:	2003e3f4 	.word	0x2003e3f4
   d5fb8:	2003e344 	.word	0x2003e344
   d5fbc:	000d5d9b 	.word	0x000d5d9b
   d5fc0:	2003e2d0 	.word	0x2003e2d0

000d5fc4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5fc4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5fc6:	2500      	movs	r5, #0
   d5fc8:	4604      	mov	r4, r0
   d5fca:	6005      	str	r5, [r0, #0]
   d5fcc:	6045      	str	r5, [r0, #4]
   d5fce:	6085      	str	r5, [r0, #8]
   d5fd0:	6105      	str	r5, [r0, #16]
   d5fd2:	6145      	str	r5, [r0, #20]
   d5fd4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fd6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5fda:	f7fe fb61 	bl	d46a0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5fde:	f7ff ffb9 	bl	d5f54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5fe2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5fe4:	f7ff ffd2 	bl	d5f8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5fe8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5fea:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5fec:	4620      	mov	r0, r4
   d5fee:	bd38      	pop	{r3, r4, r5, pc}

000d5ff0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5ff0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5ff2:	4c0a      	ldr	r4, [pc, #40]	; (d601c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5ff4:	6823      	ldr	r3, [r4, #0]
   d5ff6:	07db      	lsls	r3, r3, #31
   d5ff8:	d40e      	bmi.n	d6018 <_ZN5spark10LogManager8instanceEv+0x28>
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7fe f85c 	bl	d40b8 <__cxa_guard_acquire>
   d6000:	b150      	cbz	r0, d6018 <_ZN5spark10LogManager8instanceEv+0x28>
   d6002:	4807      	ldr	r0, [pc, #28]	; (d6020 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6004:	f7ff ffde 	bl	d5fc4 <_ZN5spark10LogManagerC1Ev>
   d6008:	4620      	mov	r0, r4
   d600a:	f7fe f85a 	bl	d40c2 <__cxa_guard_release>
   d600e:	4a05      	ldr	r2, [pc, #20]	; (d6024 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6010:	4905      	ldr	r1, [pc, #20]	; (d6028 <_ZN5spark10LogManager8instanceEv+0x38>)
   d6012:	4803      	ldr	r0, [pc, #12]	; (d6020 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6014:	f001 fbc6 	bl	d77a4 <__aeabi_atexit>
    return &mgr;
}
   d6018:	4801      	ldr	r0, [pc, #4]	; (d6020 <_ZN5spark10LogManager8instanceEv+0x30>)
   d601a:	bd10      	pop	{r4, pc}
   d601c:	2003e3c8 	.word	0x2003e3c8
   d6020:	2003e3cc 	.word	0x2003e3cc
   d6024:	2003e344 	.word	0x2003e344
   d6028:	000d645b 	.word	0x000d645b

000d602c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d602c:	2300      	movs	r3, #0
   d602e:	4a02      	ldr	r2, [pc, #8]	; (d6038 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6030:	4902      	ldr	r1, [pc, #8]	; (d603c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6032:	4803      	ldr	r0, [pc, #12]	; (d6040 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6034:	f7fe bbf4 	b.w	d4820 <log_set_callbacks>
   d6038:	000d633d 	.word	0x000d633d
   d603c:	000d62cd 	.word	0x000d62cd
   d6040:	000d6255 	.word	0x000d6255

000d6044 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6044:	2300      	movs	r3, #0
   d6046:	461a      	mov	r2, r3
   d6048:	4619      	mov	r1, r3
   d604a:	4618      	mov	r0, r3
   d604c:	f7fe bbe8 	b.w	d4820 <log_set_callbacks>

000d6050 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6050:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6052:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6054:	690e      	ldr	r6, [r1, #16]
   d6056:	f851 3b04 	ldr.w	r3, [r1], #4
   d605a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d605e:	4605      	mov	r5, r0
   d6060:	a801      	add	r0, sp, #4
   d6062:	f7ff f8fa 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6066:	4622      	mov	r2, r4
   d6068:	4631      	mov	r1, r6
   d606a:	4628      	mov	r0, r5
   d606c:	f001 fb67 	bl	d773e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6070:	a801      	add	r0, sp, #4
   d6072:	f7ff f911 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6076:	4628      	mov	r0, r5
   d6078:	b002      	add	sp, #8
   d607a:	bd70      	pop	{r4, r5, r6, pc}

000d607c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d607c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d607e:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6080:	688e      	ldr	r6, [r1, #8]
   d6082:	f851 3b04 	ldr.w	r3, [r1], #4
   d6086:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d608a:	4605      	mov	r5, r0
   d608c:	a801      	add	r0, sp, #4
   d608e:	f7ff f8e4 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6092:	4622      	mov	r2, r4
   d6094:	4631      	mov	r1, r6
   d6096:	4628      	mov	r0, r5
   d6098:	f001 fb36 	bl	d7708 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d609c:	a801      	add	r0, sp, #4
   d609e:	f7ff f8fb 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d60a2:	4628      	mov	r0, r5
   d60a4:	b002      	add	sp, #8
   d60a6:	bd70      	pop	{r4, r5, r6, pc}

000d60a8 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d60a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60aa:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d60ac:	68ce      	ldr	r6, [r1, #12]
   d60ae:	f851 3b04 	ldr.w	r3, [r1], #4
   d60b2:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d60b6:	4605      	mov	r5, r0
   d60b8:	a801      	add	r0, sp, #4
   d60ba:	f7ff f8ce 	bl	d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d60be:	4622      	mov	r2, r4
   d60c0:	4631      	mov	r1, r6
   d60c2:	4628      	mov	r0, r5
   d60c4:	f001 faf8 	bl	d76b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60c8:	a801      	add	r0, sp, #4
   d60ca:	f7ff f8e5 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d60ce:	4628      	mov	r0, r5
   d60d0:	b002      	add	sp, #8
   d60d2:	bd70      	pop	{r4, r5, r6, pc}

000d60d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d60d4:	b530      	push	{r4, r5, lr}
   d60d6:	b08b      	sub	sp, #44	; 0x2c
   d60d8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d60da:	4601      	mov	r1, r0
   d60dc:	a804      	add	r0, sp, #16
   d60de:	f7ff ffcd 	bl	d607c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d60e2:	a804      	add	r0, sp, #16
   d60e4:	f001 fa1b 	bl	d751e <_ZN5spark18JSONObjectIterator4nextEv>
   d60e8:	b1e8      	cbz	r0, d6126 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d60ea:	a904      	add	r1, sp, #16
   d60ec:	4668      	mov	r0, sp
   d60ee:	f7ff ffdb 	bl	d60a8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d60f2:	490f      	ldr	r1, [pc, #60]	; (d6130 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d60f4:	9802      	ldr	r0, [sp, #8]
   d60f6:	f7ff fe90 	bl	d5e1a <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d60fa:	4604      	mov	r4, r0
   d60fc:	b110      	cbz	r0, d6104 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d60fe:	1c2c      	adds	r4, r5, #0
   d6100:	bf18      	it	ne
   d6102:	2401      	movne	r4, #1
   d6104:	a801      	add	r0, sp, #4
   d6106:	f7ff f8c7 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d610a:	2c00      	cmp	r4, #0
   d610c:	d0e9      	beq.n	d60e2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d610e:	a904      	add	r1, sp, #16
   d6110:	4668      	mov	r0, sp
   d6112:	f7ff ff9d 	bl	d6050 <_ZNK5spark18JSONObjectIterator5valueEv>
   d6116:	4668      	mov	r0, sp
   d6118:	f001 f9e1 	bl	d74de <_ZNK5spark9JSONValue5toIntEv>
   d611c:	6028      	str	r0, [r5, #0]
   d611e:	a801      	add	r0, sp, #4
   d6120:	f7ff f8ba 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6124:	e7dd      	b.n	d60e2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6126:	a805      	add	r0, sp, #20
   d6128:	f7ff f8b6 	bl	d5298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d612c:	b00b      	add	sp, #44	; 0x2c
   d612e:	bd30      	pop	{r4, r5, pc}
   d6130:	000d80c0 	.word	0x000d80c0

000d6134 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6136:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6138:	4620      	mov	r0, r4
   d613a:	4913      	ldr	r1, [pc, #76]	; (d6188 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d613c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d613e:	f001 fd25 	bl	d7b8c <strcmp>
   d6142:	b940      	cbnz	r0, d6156 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6144:	f000 ff42 	bl	d6fcc <_Z16_fetch_usbserialv>
   d6148:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d614c:	f000 ff2e 	bl	d6fac <_ZN9USBSerial5beginEl>
        return &Serial;
   d6150:	f000 ff3c 	bl	d6fcc <_Z16_fetch_usbserialv>
   d6154:	e015      	b.n	d6182 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6156:	490d      	ldr	r1, [pc, #52]	; (d618c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6158:	4620      	mov	r0, r4
   d615a:	f001 fd17 	bl	d7b8c <strcmp>
   d615e:	b978      	cbnz	r0, d6180 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6160:	a902      	add	r1, sp, #8
   d6162:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6166:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d616a:	4628      	mov	r0, r5
   d616c:	f7ff ffb2 	bl	d60d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6170:	f000 ffb4 	bl	d70dc <_Z22__fetch_global_Serial1v>
   d6174:	9901      	ldr	r1, [sp, #4]
   d6176:	f000 ffab 	bl	d70d0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d617a:	f000 ffaf 	bl	d70dc <_Z22__fetch_global_Serial1v>
   d617e:	e000      	b.n	d6182 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6180:	2000      	movs	r0, #0
}
   d6182:	b003      	add	sp, #12
   d6184:	bd30      	pop	{r4, r5, pc}
   d6186:	bf00      	nop
   d6188:	000d80c5 	.word	0x000d80c5
   d618c:	000d80cc 	.word	0x000d80cc

000d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6190:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6192:	6804      	ldr	r4, [r0, #0]
   d6194:	6843      	ldr	r3, [r0, #4]
   d6196:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6198:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d619a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d619e:	42a6      	cmp	r6, r4
   d61a0:	d005      	beq.n	d61ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d61a2:	f104 0008 	add.w	r0, r4, #8
   d61a6:	f7ff fff3 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d61aa:	3414      	adds	r4, #20
   d61ac:	e7f7      	b.n	d619e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d61ae:	6828      	ldr	r0, [r5, #0]
   d61b0:	f7fe fbba 	bl	d4928 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d61b4:	4628      	mov	r0, r5
   d61b6:	bd70      	pop	{r4, r5, r6, pc}

000d61b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d61b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d61ba:	6804      	ldr	r4, [r0, #0]
   d61bc:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d61be:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d61c0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61c4:	42a6      	cmp	r6, r4
   d61c6:	d004      	beq.n	d61d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d61c8:	4620      	mov	r0, r4
   d61ca:	f7fe fc3b 	bl	d4a44 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61ce:	3410      	adds	r4, #16
   d61d0:	e7f8      	b.n	d61c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d61d2:	6828      	ldr	r0, [r5, #0]
   d61d4:	f7fe fba8 	bl	d4928 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d61d8:	4628      	mov	r0, r5
   d61da:	bd70      	pop	{r4, r5, r6, pc}

000d61dc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d61dc:	b510      	push	{r4, lr}
   d61de:	4604      	mov	r4, r0
   d61e0:	300c      	adds	r0, #12
   d61e2:	f7ff ffd5 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d61e6:	4620      	mov	r0, r4
   d61e8:	f7ff ffe6 	bl	d61b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d61ec:	4620      	mov	r0, r4
   d61ee:	bd10      	pop	{r4, pc}

000d61f0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d61f0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d61f2:	4b04      	ldr	r3, [pc, #16]	; (d6204 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d61f4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d61f6:	f840 3b04 	str.w	r3, [r0], #4
   d61fa:	f7ff ffef 	bl	d61dc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d61fe:	4620      	mov	r0, r4
   d6200:	bd10      	pop	{r4, pc}
   d6202:	bf00      	nop
   d6204:	000d7d54 	.word	0x000d7d54

000d6208 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6208:	b510      	push	{r4, lr}
   d620a:	4604      	mov	r4, r0
   d620c:	f7ff fff0 	bl	d61f0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6210:	4620      	mov	r0, r4
   d6212:	2124      	movs	r1, #36	; 0x24
   d6214:	f001 fad4 	bl	d77c0 <_ZdlPvj>
   d6218:	4620      	mov	r0, r4
   d621a:	bd10      	pop	{r4, pc}

000d621c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d621c:	b510      	push	{r4, lr}
   d621e:	4b03      	ldr	r3, [pc, #12]	; (d622c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6220:	6003      	str	r3, [r0, #0]
   d6222:	4604      	mov	r4, r0
   d6224:	f7ff ffe4 	bl	d61f0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6228:	4620      	mov	r0, r4
   d622a:	bd10      	pop	{r4, pc}
   d622c:	000d8098 	.word	0x000d8098

000d6230 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6230:	b510      	push	{r4, lr}
   d6232:	4604      	mov	r4, r0
   d6234:	f7ff fff2 	bl	d621c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6238:	4620      	mov	r0, r4
   d623a:	2124      	movs	r1, #36	; 0x24
   d623c:	f001 fac0 	bl	d77c0 <_ZdlPvj>
   d6240:	4620      	mov	r0, r4
   d6242:	bd10      	pop	{r4, pc}

000d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6244:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6246:	6803      	ldr	r3, [r0, #0]
   d6248:	4604      	mov	r4, r0
   d624a:	6818      	ldr	r0, [r3, #0]
   d624c:	f7fe fa38 	bl	d46c0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}

000d6254 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6258:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d625a:	4b1b      	ldr	r3, [pc, #108]	; (d62c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d625c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d625e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6262:	b085      	sub	sp, #20
   d6264:	4682      	mov	sl, r0
   d6266:	460e      	mov	r6, r1
   d6268:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d626a:	bb53      	cbnz	r3, d62c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d626c:	f7ff fec0 	bl	d5ff0 <_ZN5spark10LogManager8instanceEv>
   d6270:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6272:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6274:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6276:	f7ff fde4 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d627a:	7b23      	ldrb	r3, [r4, #12]
   d627c:	b9f3      	cbnz	r3, d62bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d627e:	2301      	movs	r3, #1
   d6280:	7323      	strb	r3, [r4, #12]
   d6282:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6284:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6286:	b2f6      	uxtb	r6, r6
   d6288:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d628c:	454d      	cmp	r5, r9
   d628e:	d013      	beq.n	d62b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6290:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6294:	4641      	mov	r1, r8
   d6296:	1d38      	adds	r0, r7, #4
   d6298:	f7ff fe30 	bl	d5efc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d629c:	4286      	cmp	r6, r0
   d629e:	d3f5      	bcc.n	d628c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d62a0:	683b      	ldr	r3, [r7, #0]
   d62a2:	f8cd b000 	str.w	fp, [sp]
   d62a6:	689b      	ldr	r3, [r3, #8]
   d62a8:	469e      	mov	lr, r3
   d62aa:	4638      	mov	r0, r7
   d62ac:	4643      	mov	r3, r8
   d62ae:	4632      	mov	r2, r6
   d62b0:	4651      	mov	r1, sl
   d62b2:	4677      	mov	r7, lr
   d62b4:	47b8      	blx	r7
   d62b6:	e7e9      	b.n	d628c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d62b8:	2300      	movs	r3, #0
   d62ba:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d62bc:	a803      	add	r0, sp, #12
   d62be:	f7ff ffc1 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d62c2:	b005      	add	sp, #20
   d62c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62c8:	e000ed00 	.word	0xe000ed00

000d62cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d62cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62d0:	4699      	mov	r9, r3
   d62d2:	4b19      	ldr	r3, [pc, #100]	; (d6338 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d62d4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d62d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d62da:	4607      	mov	r7, r0
   d62dc:	4688      	mov	r8, r1
   d62de:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d62e0:	bb33      	cbnz	r3, d6330 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d62e2:	f7ff fe85 	bl	d5ff0 <_ZN5spark10LogManager8instanceEv>
   d62e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d62e8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d62ea:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d62ec:	f7ff fda9 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d62f0:	7b23      	ldrb	r3, [r4, #12]
   d62f2:	b9d3      	cbnz	r3, d632a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d62f4:	2301      	movs	r3, #1
   d62f6:	7323      	strb	r3, [r4, #12]
   d62f8:	6825      	ldr	r5, [r4, #0]
   d62fa:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d62fc:	fa5f fb86 	uxtb.w	fp, r6
   d6300:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6304:	4555      	cmp	r5, sl
   d6306:	d00e      	beq.n	d6326 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6308:	f855 6b04 	ldr.w	r6, [r5], #4
   d630c:	4649      	mov	r1, r9
   d630e:	1d30      	adds	r0, r6, #4
   d6310:	f7ff fdf4 	bl	d5efc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6314:	4583      	cmp	fp, r0
   d6316:	d3f5      	bcc.n	d6304 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6318:	6833      	ldr	r3, [r6, #0]
   d631a:	4642      	mov	r2, r8
   d631c:	68db      	ldr	r3, [r3, #12]
   d631e:	4639      	mov	r1, r7
   d6320:	4630      	mov	r0, r6
   d6322:	4798      	blx	r3
   d6324:	e7ee      	b.n	d6304 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6326:	2300      	movs	r3, #0
   d6328:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d632a:	a801      	add	r0, sp, #4
   d632c:	f7ff ff8a 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6330:	b003      	add	sp, #12
   d6332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6336:	bf00      	nop
   d6338:	e000ed00 	.word	0xe000ed00

000d633c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d633c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6340:	4b15      	ldr	r3, [pc, #84]	; (d6398 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6342:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6344:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6348:	4604      	mov	r4, r0
   d634a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d634c:	b9fb      	cbnz	r3, d638e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d634e:	f7ff fe4f 	bl	d5ff0 <_ZN5spark10LogManager8instanceEv>
   d6352:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6354:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6356:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6358:	f7ff fd73 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
   d635c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6360:	2646      	movs	r6, #70	; 0x46
   d6362:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6366:	42af      	cmp	r7, r5
   d6368:	d107      	bne.n	d637a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d636a:	a801      	add	r0, sp, #4
   d636c:	f7ff ff6a 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6370:	42b4      	cmp	r4, r6
   d6372:	bfb4      	ite	lt
   d6374:	2000      	movlt	r0, #0
   d6376:	2001      	movge	r0, #1
   d6378:	e00a      	b.n	d6390 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d637a:	f855 0b04 	ldr.w	r0, [r5], #4
   d637e:	4641      	mov	r1, r8
   d6380:	3004      	adds	r0, #4
   d6382:	f7ff fdbb 	bl	d5efc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6386:	4286      	cmp	r6, r0
   d6388:	bfa8      	it	ge
   d638a:	4606      	movge	r6, r0
   d638c:	e7eb      	b.n	d6366 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d638e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6390:	b002      	add	sp, #8
   d6392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6396:	bf00      	nop
   d6398:	e000ed00 	.word	0xe000ed00

000d639c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d639c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d639e:	6803      	ldr	r3, [r0, #0]
   d63a0:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d63a2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d63a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d63a8:	429a      	cmp	r2, r3
   d63aa:	4618      	mov	r0, r3
   d63ac:	d00e      	beq.n	d63cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d63ae:	6806      	ldr	r6, [r0, #0]
   d63b0:	680d      	ldr	r5, [r1, #0]
   d63b2:	42ae      	cmp	r6, r5
   d63b4:	f103 0304 	add.w	r3, r3, #4
   d63b8:	d1f6      	bne.n	d63a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d63ba:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d63bc:	1a52      	subs	r2, r2, r1
   d63be:	f001 fb81 	bl	d7ac4 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d63c2:	6863      	ldr	r3, [r4, #4]
   d63c4:	3b01      	subs	r3, #1
   d63c6:	6063      	str	r3, [r4, #4]
    return true;
   d63c8:	2001      	movs	r0, #1
}
   d63ca:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d63cc:	2000      	movs	r0, #0
   d63ce:	bd70      	pop	{r4, r5, r6, pc}

000d63d0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d63d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d63d2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d63d4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d63d6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d63d8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d63da:	f7ff fd32 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d63de:	a901      	add	r1, sp, #4
   d63e0:	4620      	mov	r0, r4
   d63e2:	f7ff ffdb 	bl	d639c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d63e6:	b920      	cbnz	r0, d63f2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d63e8:	a803      	add	r0, sp, #12
   d63ea:	f7ff ff2b 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d63ee:	b004      	add	sp, #16
   d63f0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d63f2:	6863      	ldr	r3, [r4, #4]
   d63f4:	2b00      	cmp	r3, #0
   d63f6:	d1f7      	bne.n	d63e8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d63f8:	f7ff fe24 	bl	d6044 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d63fc:	e7f4      	b.n	d63e8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d63fe <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d63fe:	b570      	push	{r4, r5, r6, lr}
   d6400:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6402:	6943      	ldr	r3, [r0, #20]
   d6404:	2618      	movs	r6, #24
   d6406:	4604      	mov	r4, r0
   d6408:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d640c:	42ae      	cmp	r6, r5
   d640e:	d015      	beq.n	d643c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6410:	f105 0110 	add.w	r1, r5, #16
   d6414:	4620      	mov	r0, r4
   d6416:	f7ff ffc1 	bl	d639c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d641a:	6863      	ldr	r3, [r4, #4]
   d641c:	b90b      	cbnz	r3, d6422 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d641e:	f7ff fe11 	bl	d6044 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6422:	69e0      	ldr	r0, [r4, #28]
   d6424:	6929      	ldr	r1, [r5, #16]
   d6426:	6803      	ldr	r3, [r0, #0]
   d6428:	68db      	ldr	r3, [r3, #12]
   d642a:	4798      	blx	r3
        if (h.stream) {
   d642c:	6969      	ldr	r1, [r5, #20]
   d642e:	b119      	cbz	r1, d6438 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6430:	6a20      	ldr	r0, [r4, #32]
   d6432:	6803      	ldr	r3, [r0, #0]
   d6434:	68db      	ldr	r3, [r3, #12]
   d6436:	4798      	blx	r3
   d6438:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d643a:	e7e7      	b.n	d640c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d643c:	6925      	ldr	r5, [r4, #16]
   d643e:	6963      	ldr	r3, [r4, #20]
   d6440:	2618      	movs	r6, #24
   d6442:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6446:	42b5      	cmp	r5, r6
   d6448:	d004      	beq.n	d6454 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d644a:	4628      	mov	r0, r5
   d644c:	f7fe fafa 	bl	d4a44 <_ZN6StringD1Ev>
   d6450:	3518      	adds	r5, #24
   d6452:	e7f8      	b.n	d6446 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6454:	2300      	movs	r3, #0
   d6456:	6163      	str	r3, [r4, #20]
   d6458:	bd70      	pop	{r4, r5, r6, pc}

000d645a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d645a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d645c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d645e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6460:	f7ff fdf0 	bl	d6044 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6464:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6468:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d646c:	f7ff fce9 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6470:	4620      	mov	r0, r4
   d6472:	f7ff ffc4 	bl	d63fe <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff fee4 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d647c:	6925      	ldr	r5, [r4, #16]
   d647e:	6963      	ldr	r3, [r4, #20]
   d6480:	2618      	movs	r6, #24
   d6482:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6486:	42b5      	cmp	r5, r6
   d6488:	d004      	beq.n	d6494 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d648a:	4628      	mov	r0, r5
   d648c:	f7fe fada 	bl	d4a44 <_ZN6StringD1Ev>
   d6490:	3518      	adds	r5, #24
   d6492:	e7f8      	b.n	d6486 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6494:	6920      	ldr	r0, [r4, #16]
   d6496:	f7fe fa47 	bl	d4928 <free>
   d649a:	6820      	ldr	r0, [r4, #0]
   d649c:	f7fe fa44 	bl	d4928 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d64a0:	4620      	mov	r0, r4
   d64a2:	b002      	add	sp, #8
   d64a4:	bd70      	pop	{r4, r5, r6, pc}

000d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64a6:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d64a8:	680a      	ldr	r2, [r1, #0]
   d64aa:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d64ac:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64ae:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d64b0:	684a      	ldr	r2, [r1, #4]
   d64b2:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d64b4:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64b6:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d64b8:	688a      	ldr	r2, [r1, #8]
   d64ba:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64bc:	608b      	str	r3, [r1, #8]
   d64be:	4770      	bx	lr

000d64c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d64c0:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64c2:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d64c4:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64c6:	6003      	str	r3, [r0, #0]
   d64c8:	6043      	str	r3, [r0, #4]
   d64ca:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d64cc:	f7ff ffeb 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd10      	pop	{r4, pc}

000d64d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d64d4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d64d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64d8:	4604      	mov	r4, r0
   d64da:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d64dc:	d925      	bls.n	d652a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d64de:	4290      	cmp	r0, r2
   d64e0:	d224      	bcs.n	d652c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d64e2:	1a55      	subs	r5, r2, r1
   d64e4:	3d14      	subs	r5, #20
   d64e6:	442c      	add	r4, r5
   d64e8:	f1a1 0714 	sub.w	r7, r1, #20
   d64ec:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64f0:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d64f2:	f1a5 0308 	sub.w	r3, r5, #8
   d64f6:	429f      	cmp	r7, r3
   d64f8:	d037      	beq.n	d656a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d64fa:	b184      	cbz	r4, d651e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d64fc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6500:	6023      	str	r3, [r4, #0]
   d6502:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6506:	80a3      	strh	r3, [r4, #4]
   d6508:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d650c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d650e:	60a6      	str	r6, [r4, #8]
   d6510:	60e6      	str	r6, [r4, #12]
   d6512:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6514:	4629      	mov	r1, r5
   d6516:	f104 0008 	add.w	r0, r4, #8
   d651a:	f7ff ffc4 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d651e:	4628      	mov	r0, r5
   d6520:	f7ff fe36 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6524:	3c14      	subs	r4, #20
   d6526:	3d14      	subs	r5, #20
   d6528:	e7e3      	b.n	d64f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d652a:	d01e      	beq.n	d656a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d652c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6530:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6532:	f1a5 0308 	sub.w	r3, r5, #8
   d6536:	429e      	cmp	r6, r3
   d6538:	d017      	beq.n	d656a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d653a:	b184      	cbz	r4, d655e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d653c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6540:	6023      	str	r3, [r4, #0]
   d6542:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6546:	80a3      	strh	r3, [r4, #4]
   d6548:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d654c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d654e:	60a7      	str	r7, [r4, #8]
   d6550:	60e7      	str	r7, [r4, #12]
   d6552:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6554:	4629      	mov	r1, r5
   d6556:	f104 0008 	add.w	r0, r4, #8
   d655a:	f7ff ffa4 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d655e:	4628      	mov	r0, r5
   d6560:	f7ff fe16 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6564:	3414      	adds	r4, #20
   d6566:	3514      	adds	r5, #20
   d6568:	e7e3      	b.n	d6532 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d656c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d656e:	6845      	ldr	r5, [r0, #4]
   d6570:	6883      	ldr	r3, [r0, #8]
   d6572:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6574:	4604      	mov	r4, r0
   d6576:	460e      	mov	r6, r1
   d6578:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d657a:	db0e      	blt.n	d659a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d657c:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d657e:	2d00      	cmp	r5, #0
   d6580:	dd05      	ble.n	d658e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6582:	00a9      	lsls	r1, r5, #2
   d6584:	6800      	ldr	r0, [r0, #0]
   d6586:	f7fe f9d7 	bl	d4938 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d658a:	b920      	cbnz	r0, d6596 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d658e:	6800      	ldr	r0, [r0, #0]
   d6590:	f7fe f9ca 	bl	d4928 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6594:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6596:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6598:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d659a:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d659c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d659e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d65a2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d65a6:	1a52      	subs	r2, r2, r1
   d65a8:	1d08      	adds	r0, r1, #4
   d65aa:	f001 fa8b 	bl	d7ac4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d65ae:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d65b2:	6863      	ldr	r3, [r4, #4]
   d65b4:	3301      	adds	r3, #1
   d65b6:	6063      	str	r3, [r4, #4]
   d65b8:	2001      	movs	r0, #1
    return true;
}
   d65ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d65bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d65be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d65c0:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d65c2:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d65c4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d65c6:	f7ff fc3c 	bl	d5e42 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d65ca:	6823      	ldr	r3, [r4, #0]
   d65cc:	6861      	ldr	r1, [r4, #4]
   d65ce:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d65d2:	4283      	cmp	r3, r0
   d65d4:	461a      	mov	r2, r3
   d65d6:	d009      	beq.n	d65ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d65d8:	6812      	ldr	r2, [r2, #0]
   d65da:	42aa      	cmp	r2, r5
   d65dc:	f103 0304 	add.w	r3, r3, #4
   d65e0:	d1f7      	bne.n	d65d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d65e2:	a801      	add	r0, sp, #4
   d65e4:	f7ff fe2e 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d65e8:	2500      	movs	r5, #0
   d65ea:	e00e      	b.n	d660a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d65ec:	462a      	mov	r2, r5
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7ff ffbc 	bl	d656c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d65f4:	4605      	mov	r5, r0
   d65f6:	2800      	cmp	r0, #0
   d65f8:	d0f3      	beq.n	d65e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d65fa:	6863      	ldr	r3, [r4, #4]
   d65fc:	2b01      	cmp	r3, #1
   d65fe:	d101      	bne.n	d6604 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6600:	f7ff fd14 	bl	d602c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6604:	a801      	add	r0, sp, #4
   d6606:	f7ff fe1d 	bl	d6244 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d660a:	4628      	mov	r0, r5
   d660c:	b003      	add	sp, #12
   d660e:	bd30      	pop	{r4, r5, pc}

000d6610 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6610:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6614:	4606      	mov	r6, r0
   d6616:	460c      	mov	r4, r1
   d6618:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d661a:	d914      	bls.n	d6646 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d661c:	4290      	cmp	r0, r2
   d661e:	d213      	bcs.n	d6648 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6620:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6624:	1a6c      	subs	r4, r5, r1
   d6626:	f1a1 0710 	sub.w	r7, r1, #16
   d662a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d662c:	42af      	cmp	r7, r5
   d662e:	d018      	beq.n	d6662 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6630:	b11c      	cbz	r4, d663a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6632:	4629      	mov	r1, r5
   d6634:	4620      	mov	r0, r4
   d6636:	f7fe f9f5 	bl	d4a24 <_ZN6StringC1EOS_>
                end->~T();
   d663a:	4628      	mov	r0, r5
   d663c:	f7fe fa02 	bl	d4a44 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6640:	3d10      	subs	r5, #16
   d6642:	3c10      	subs	r4, #16
   d6644:	e7f2      	b.n	d662c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6646:	d00c      	beq.n	d6662 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6648:	42ac      	cmp	r4, r5
   d664a:	d00a      	beq.n	d6662 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d664c:	b11e      	cbz	r6, d6656 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d664e:	4621      	mov	r1, r4
   d6650:	4630      	mov	r0, r6
   d6652:	f7fe f9e7 	bl	d4a24 <_ZN6StringC1EOS_>
                p->~T();
   d6656:	4620      	mov	r0, r4
   d6658:	f7fe f9f4 	bl	d4a44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d665c:	3410      	adds	r4, #16
   d665e:	3610      	adds	r6, #16
   d6660:	e7f2      	b.n	d6648 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6664 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6664:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6666:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6668:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d666a:	dd0b      	ble.n	d6684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d666c:	0130      	lsls	r0, r6, #4
   d666e:	f7fe f953 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6672:	4604      	mov	r4, r0
   d6674:	b170      	cbz	r0, d6694 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6676:	e895 0006 	ldmia.w	r5, {r1, r2}
   d667a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d667e:	f7ff ffc7 	bl	d6610 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6682:	e000      	b.n	d6686 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6684:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6686:	6828      	ldr	r0, [r5, #0]
   d6688:	f7fe f94e 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d668c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d668e:	60ae      	str	r6, [r5, #8]
        return true;
   d6690:	2001      	movs	r0, #1
   d6692:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6694:	bd70      	pop	{r4, r5, r6, pc}

000d6696 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d669a:	2300      	movs	r3, #0
   d669c:	b095      	sub	sp, #84	; 0x54
   d669e:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d66a0:	2246      	movs	r2, #70	; 0x46
   d66a2:	6003      	str	r3, [r0, #0]
   d66a4:	6043      	str	r3, [r0, #4]
   d66a6:	6083      	str	r3, [r0, #8]
   d66a8:	60c3      	str	r3, [r0, #12]
   d66aa:	6103      	str	r3, [r0, #16]
   d66ac:	6143      	str	r3, [r0, #20]
   d66ae:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d66b0:	9102      	str	r1, [sp, #8]
   d66b2:	f8da 1004 	ldr.w	r1, [sl, #4]
   d66b6:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d66b8:	4299      	cmp	r1, r3
   d66ba:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d66bc:	9309      	str	r3, [sp, #36]	; 0x24
   d66be:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d66c0:	f340 809d 	ble.w	d67fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d66c4:	a808      	add	r0, sp, #32
   d66c6:	f7ff ffcd 	bl	d6664 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d66ca:	2800      	cmp	r0, #0
   d66cc:	f040 8097 	bne.w	d67fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d66d0:	e08e      	b.n	d67f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d66d2:	4621      	mov	r1, r4
   d66d4:	a80b      	add	r0, sp, #44	; 0x2c
   d66d6:	f7fe f9a5 	bl	d4a24 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d66da:	a90b      	add	r1, sp, #44	; 0x2c
   d66dc:	a80f      	add	r0, sp, #60	; 0x3c
   d66de:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d66e0:	f7fe f9a0 	bl	d4a24 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d66e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d66e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d66e8:	4299      	cmp	r1, r3
   d66ea:	f2c0 80ce 	blt.w	d688a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d66ee:	3101      	adds	r1, #1
   d66f0:	a808      	add	r0, sp, #32
   d66f2:	f7ff ffb7 	bl	d6664 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d66f6:	2800      	cmp	r0, #0
   d66f8:	f040 80c7 	bne.w	d688a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d66fc:	a80f      	add	r0, sp, #60	; 0x3c
   d66fe:	f7fe f9a1 	bl	d4a44 <_ZN6StringD1Ev>
   d6702:	a80b      	add	r0, sp, #44	; 0x2c
   d6704:	f7fe f99e 	bl	d4a44 <_ZN6StringD1Ev>
   d6708:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d670a:	42a7      	cmp	r7, r4
   d670c:	d1e1      	bne.n	d66d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d670e:	2600      	movs	r6, #0
   d6710:	960b      	str	r6, [sp, #44]	; 0x2c
   d6712:	960c      	str	r6, [sp, #48]	; 0x30
   d6714:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6716:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d671a:	429e      	cmp	r6, r3
   d671c:	f280 80a8 	bge.w	d6870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6720:	0133      	lsls	r3, r6, #4
   d6722:	9a08      	ldr	r2, [sp, #32]
   d6724:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6726:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6728:	2b00      	cmp	r3, #0
   d672a:	f000 809f 	beq.w	d686c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d672e:	2314      	movs	r3, #20
   d6730:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6732:	f8cd 901c 	str.w	r9, [sp, #28]
   d6736:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6738:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d673a:	a907      	add	r1, sp, #28
   d673c:	a806      	add	r0, sp, #24
   d673e:	f7ff fb2f 	bl	d5da0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6742:	4607      	mov	r7, r0
   d6744:	2800      	cmp	r0, #0
   d6746:	f000 8091 	beq.w	d686c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d674a:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d674c:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d674e:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6752:	9a07      	ldr	r2, [sp, #28]
   d6754:	4620      	mov	r0, r4
   d6756:	f7ff fb91 	bl	d5e7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d675a:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d675e:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6760:	f1b8 0f00 	cmp.w	r8, #0
   d6764:	d153      	bne.n	d680e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6766:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d676a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d676e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6772:	970f      	str	r7, [sp, #60]	; 0x3c
   d6774:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6778:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d677c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6780:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6784:	6867      	ldr	r7, [r4, #4]
   d6786:	68a3      	ldr	r3, [r4, #8]
   d6788:	429f      	cmp	r7, r3
   d678a:	da4f      	bge.n	d682c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d678c:	9b00      	ldr	r3, [sp, #0]
   d678e:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6792:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6794:	2214      	movs	r2, #20
   d6796:	4353      	muls	r3, r2
   d6798:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d679c:	fb02 b201 	mla	r2, r2, r1, fp
   d67a0:	f107 0014 	add.w	r0, r7, #20
   d67a4:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d67a6:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d67a8:	f7ff fe94 	bl	d64d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d67ac:	b1a7      	cbz	r7, d67d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d67ae:	9b03      	ldr	r3, [sp, #12]
   d67b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d67b2:	f84b 2003 	str.w	r2, [fp, r3]
   d67b6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d67ba:	80bb      	strh	r3, [r7, #4]
   d67bc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d67c0:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67c2:	f8c7 9008 	str.w	r9, [r7, #8]
   d67c6:	f8c7 900c 	str.w	r9, [r7, #12]
   d67ca:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d67ce:	a911      	add	r1, sp, #68	; 0x44
   d67d0:	f107 0008 	add.w	r0, r7, #8
   d67d4:	f7ff fe67 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d67d8:	6863      	ldr	r3, [r4, #4]
   d67da:	3301      	adds	r3, #1
   d67dc:	6063      	str	r3, [r4, #4]
   d67de:	a811      	add	r0, sp, #68	; 0x44
   d67e0:	f7ff fcd6 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d67e4:	f1b8 0f00 	cmp.w	r8, #0
   d67e8:	d011      	beq.n	d680e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d67ea:	a80b      	add	r0, sp, #44	; 0x2c
   d67ec:	f7ff fcd0 	bl	d6190 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d67f0:	a808      	add	r0, sp, #32
   d67f2:	f7ff fce1 	bl	d61b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d67f6:	4628      	mov	r0, r5
   d67f8:	b015      	add	sp, #84	; 0x54
   d67fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67fe:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6802:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6806:	2714      	movs	r7, #20
   d6808:	fb07 4703 	mla	r7, r7, r3, r4
   d680c:	e77d      	b.n	d670a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d680e:	6823      	ldr	r3, [r4, #0]
   d6810:	9a00      	ldr	r2, [sp, #0]
   d6812:	2414      	movs	r4, #20
   d6814:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6818:	9b06      	ldr	r3, [sp, #24]
   d681a:	781b      	ldrb	r3, [r3, #0]
   d681c:	bb23      	cbnz	r3, d6868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d681e:	f8da 3000 	ldr.w	r3, [sl]
   d6822:	9a01      	ldr	r2, [sp, #4]
   d6824:	4413      	add	r3, r2
   d6826:	7c1b      	ldrb	r3, [r3, #16]
   d6828:	80e3      	strh	r3, [r4, #6]
   d682a:	e01d      	b.n	d6868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d682c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d682e:	2f00      	cmp	r7, #0
   d6830:	dd0f      	ble.n	d6852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6832:	2314      	movs	r3, #20
   d6834:	fb03 f007 	mul.w	r0, r3, r7
   d6838:	9303      	str	r3, [sp, #12]
   d683a:	f7fe f86d 	bl	d4918 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d683e:	4683      	mov	fp, r0
   d6840:	b178      	cbz	r0, d6862 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6842:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6846:	9b03      	ldr	r3, [sp, #12]
   d6848:	fb03 1202 	mla	r2, r3, r2, r1
   d684c:	f7ff fe42 	bl	d64d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6850:	e000      	b.n	d6854 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6852:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6854:	6820      	ldr	r0, [r4, #0]
   d6856:	f7fe f867 	bl	d4928 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d685a:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d685e:	60a7      	str	r7, [r4, #8]
   d6860:	e794      	b.n	d678c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6862:	f04f 0801 	mov.w	r8, #1
   d6866:	e7ba      	b.n	d67de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6868:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d686a:	e766      	b.n	d673a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d686c:	3601      	adds	r6, #1
   d686e:	e753      	b.n	d6718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6870:	a908      	add	r1, sp, #32
   d6872:	4628      	mov	r0, r5
   d6874:	f7ff fe17 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6878:	a90b      	add	r1, sp, #44	; 0x2c
   d687a:	f105 000c 	add.w	r0, r5, #12
   d687e:	f7ff fe12 	bl	d64a6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6882:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6886:	762b      	strb	r3, [r5, #24]
   d6888:	e7af      	b.n	d67ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d688a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d688c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d688e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6892:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6896:	4631      	mov	r1, r6
   d6898:	f106 0010 	add.w	r0, r6, #16
   d689c:	f7ff feb8 	bl	d6610 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d68a0:	b11e      	cbz	r6, d68aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d68a2:	a90f      	add	r1, sp, #60	; 0x3c
   d68a4:	4630      	mov	r0, r6
   d68a6:	f7fe f8bd 	bl	d4a24 <_ZN6StringC1EOS_>
    ++size_;
   d68aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d68ac:	3301      	adds	r3, #1
   d68ae:	9309      	str	r3, [sp, #36]	; 0x24
   d68b0:	e724      	b.n	d66fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d68b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d68b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d68b6:	4604      	mov	r4, r0
   d68b8:	4b09      	ldr	r3, [pc, #36]	; (d68e0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d68ba:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d68be:	4605      	mov	r5, r0
   d68c0:	460e      	mov	r6, r1
        filter_(level, filters) {
   d68c2:	a801      	add	r0, sp, #4
   d68c4:	4611      	mov	r1, r2
   d68c6:	f7fd fd1d 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d68ca:	aa01      	add	r2, sp, #4
   d68cc:	4631      	mov	r1, r6
   d68ce:	4620      	mov	r0, r4
   d68d0:	f7ff fee1 	bl	d6696 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d68d4:	a801      	add	r0, sp, #4
   d68d6:	f7fd fcb5 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d68da:	4628      	mov	r0, r5
   d68dc:	b004      	add	sp, #16
   d68de:	bd70      	pop	{r4, r5, r6, pc}
   d68e0:	000d7d54 	.word	0x000d7d54

000d68e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d68e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d68e6:	460f      	mov	r7, r1
   d68e8:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d68ea:	492b      	ldr	r1, [pc, #172]	; (d6998 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d68ec:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d68ee:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d68f0:	4616      	mov	r6, r2
   d68f2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d68f4:	f001 f94a 	bl	d7b8c <strcmp>
   d68f8:	bb28      	cbnz	r0, d6946 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d68fa:	2c00      	cmp	r4, #0
   d68fc:	d049      	beq.n	d6992 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d68fe:	4629      	mov	r1, r5
   d6900:	a801      	add	r0, sp, #4
   d6902:	f7ff fddd 	bl	d64c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6906:	4925      	ldr	r1, [pc, #148]	; (d699c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6908:	2024      	movs	r0, #36	; 0x24
   d690a:	f000 ff5b 	bl	d77c4 <_ZnwjRKSt9nothrow_t>
   d690e:	4605      	mov	r5, r0
   d6910:	b1b8      	cbz	r0, d6942 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6912:	a901      	add	r1, sp, #4
   d6914:	a804      	add	r0, sp, #16
   d6916:	f7ff fdd3 	bl	d64c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d691a:	a904      	add	r1, sp, #16
   d691c:	a807      	add	r0, sp, #28
   d691e:	f7fd fcf1 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6922:	aa07      	add	r2, sp, #28
   d6924:	4631      	mov	r1, r6
   d6926:	4628      	mov	r0, r5
   d6928:	f7ff ffc4 	bl	d68b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d692c:	a807      	add	r0, sp, #28
   d692e:	f7fd fc89 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6932:	4b1b      	ldr	r3, [pc, #108]	; (d69a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6934:	602b      	str	r3, [r5, #0]
   d6936:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6938:	a804      	add	r0, sp, #16
   d693a:	f7fd fc83 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d693e:	4b19      	ldr	r3, [pc, #100]	; (d69a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6940:	602b      	str	r3, [r5, #0]
   d6942:	a801      	add	r0, sp, #4
   d6944:	e01f      	b.n	d6986 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6946:	4918      	ldr	r1, [pc, #96]	; (d69a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6948:	4638      	mov	r0, r7
   d694a:	f001 f91f 	bl	d7b8c <strcmp>
   d694e:	b9f0      	cbnz	r0, d698e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6950:	b1fc      	cbz	r4, d6992 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6952:	4629      	mov	r1, r5
   d6954:	a804      	add	r0, sp, #16
   d6956:	f7ff fdb3 	bl	d64c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d695a:	4910      	ldr	r1, [pc, #64]	; (d699c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d695c:	2024      	movs	r0, #36	; 0x24
   d695e:	f000 ff31 	bl	d77c4 <_ZnwjRKSt9nothrow_t>
   d6962:	4605      	mov	r5, r0
   d6964:	b170      	cbz	r0, d6984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6966:	a904      	add	r1, sp, #16
   d6968:	a807      	add	r0, sp, #28
   d696a:	f7fd fccb 	bl	d4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d696e:	aa07      	add	r2, sp, #28
   d6970:	4631      	mov	r1, r6
   d6972:	4628      	mov	r0, r5
   d6974:	f7ff ff9e 	bl	d68b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6978:	a807      	add	r0, sp, #28
   d697a:	f7fd fc63 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d697e:	4b08      	ldr	r3, [pc, #32]	; (d69a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6980:	602b      	str	r3, [r5, #0]
   d6982:	622c      	str	r4, [r5, #32]
   d6984:	a804      	add	r0, sp, #16
   d6986:	f7fd fc5d 	bl	d4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d698a:	4628      	mov	r0, r5
   d698c:	e002      	b.n	d6994 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d698e:	2000      	movs	r0, #0
   d6990:	e000      	b.n	d6994 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6992:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6994:	b00b      	add	sp, #44	; 0x2c
   d6996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6998:	000d811e 	.word	0x000d811e
   d699c:	000d82fc 	.word	0x000d82fc
   d69a0:	000d81ac 	.word	0x000d81ac
   d69a4:	000d8098 	.word	0x000d8098
   d69a8:	000d8122 	.word	0x000d8122

000d69ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d69ac:	4b01      	ldr	r3, [pc, #4]	; (d69b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d69ae:	4a02      	ldr	r2, [pc, #8]	; (d69b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d69b0:	601a      	str	r2, [r3, #0]
   d69b2:	4770      	bx	lr
   d69b4:	2003e3f8 	.word	0x2003e3f8
   d69b8:	000d8133 	.word	0x000d8133

000d69bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d69bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d69c0:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d69c2:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d69c6:	4604      	mov	r4, r0
   d69c8:	460e      	mov	r6, r1
   d69ca:	4617      	mov	r7, r2
   d69cc:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d69ce:	f000 fafd 	bl	d6fcc <_Z16_fetch_usbserialv>
   d69d2:	4581      	cmp	r9, r0
   d69d4:	d105      	bne.n	d69e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d69d6:	485a      	ldr	r0, [pc, #360]	; (d6b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d69d8:	f000 fc87 	bl	d72ea <_ZN5spark12NetworkClass9listeningEv>
   d69dc:	2800      	cmp	r0, #0
   d69de:	f040 80ac 	bne.w	d6b3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d69e2:	792b      	ldrb	r3, [r5, #4]
   d69e4:	071b      	lsls	r3, r3, #28
   d69e6:	d505      	bpl.n	d69f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d69e8:	696b      	ldr	r3, [r5, #20]
   d69ea:	4a56      	ldr	r2, [pc, #344]	; (d6b44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d69ec:	6a20      	ldr	r0, [r4, #32]
   d69ee:	2100      	movs	r1, #0
   d69f0:	f7ff f988 	bl	d5d04 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d69f4:	f1b8 0f00 	cmp.w	r8, #0
   d69f8:	d00d      	beq.n	d6a16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d69fa:	215b      	movs	r1, #91	; 0x5b
   d69fc:	4620      	mov	r0, r4
   d69fe:	f7ff fa31 	bl	d5e64 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6a02:	4641      	mov	r1, r8
   d6a04:	4620      	mov	r0, r4
   d6a06:	f7ff fa1f 	bl	d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6a0a:	6823      	ldr	r3, [r4, #0]
   d6a0c:	494e      	ldr	r1, [pc, #312]	; (d6b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6a0e:	68db      	ldr	r3, [r3, #12]
   d6a10:	2202      	movs	r2, #2
   d6a12:	4620      	mov	r0, r4
   d6a14:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6a16:	792b      	ldrb	r3, [r5, #4]
   d6a18:	07d9      	lsls	r1, r3, #31
   d6a1a:	d525      	bpl.n	d6a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6a1c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6a20:	212f      	movs	r1, #47	; 0x2f
   d6a22:	4640      	mov	r0, r8
   d6a24:	f001 f8e5 	bl	d7bf2 <strrchr>
    if (s1) {
   d6a28:	b108      	cbz	r0, d6a2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6a2a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6a2e:	4641      	mov	r1, r8
   d6a30:	4620      	mov	r0, r4
   d6a32:	f7ff fa09 	bl	d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6a36:	792b      	ldrb	r3, [r5, #4]
   d6a38:	079a      	lsls	r2, r3, #30
   d6a3a:	d509      	bpl.n	d6a50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6a3c:	213a      	movs	r1, #58	; 0x3a
   d6a3e:	4620      	mov	r0, r4
   d6a40:	f7ff fa10 	bl	d5e64 <_ZN5spark16StreamLogHandler5writeEc>
   d6a44:	68eb      	ldr	r3, [r5, #12]
   d6a46:	4a41      	ldr	r2, [pc, #260]	; (d6b4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6a48:	6a20      	ldr	r0, [r4, #32]
   d6a4a:	2100      	movs	r1, #0
   d6a4c:	f7ff f95a 	bl	d5d04 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6a50:	792b      	ldrb	r3, [r5, #4]
   d6a52:	f013 0f04 	tst.w	r3, #4
   d6a56:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6a58:	bf18      	it	ne
   d6a5a:	493d      	ldrne	r1, [pc, #244]	; (d6b50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6a5c:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6a5e:	bf08      	it	eq
   d6a60:	493c      	ldreq	r1, [pc, #240]	; (d6b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6a62:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6a64:	4620      	mov	r0, r4
   d6a66:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6a68:	792b      	ldrb	r3, [r5, #4]
   d6a6a:	075b      	lsls	r3, r3, #29
   d6a6c:	d518      	bpl.n	d6aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6a6e:	6929      	ldr	r1, [r5, #16]
   d6a70:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6a72:	4613      	mov	r3, r2
   d6a74:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6a78:	b138      	cbz	r0, d6a8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6a7a:	2820      	cmp	r0, #32
   d6a7c:	d101      	bne.n	d6a82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6a7e:	4619      	mov	r1, r3
   d6a80:	e001      	b.n	d6a86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6a82:	2828      	cmp	r0, #40	; 0x28
   d6a84:	d001      	beq.n	d6a8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6a86:	461a      	mov	r2, r3
   d6a88:	e7f3      	b.n	d6a72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6a8a:	6823      	ldr	r3, [r4, #0]
   d6a8c:	1a52      	subs	r2, r2, r1
   d6a8e:	68db      	ldr	r3, [r3, #12]
   d6a90:	4620      	mov	r0, r4
   d6a92:	4798      	blx	r3
        write("(): ", 4);
   d6a94:	6823      	ldr	r3, [r4, #0]
   d6a96:	4930      	ldr	r1, [pc, #192]	; (d6b58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6a98:	68db      	ldr	r3, [r3, #12]
   d6a9a:	2204      	movs	r2, #4
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6aa0:	2100      	movs	r1, #0
   d6aa2:	4638      	mov	r0, r7
   d6aa4:	f7fd feb4 	bl	d4810 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6aa8:	4601      	mov	r1, r0
   d6aaa:	4620      	mov	r0, r4
   d6aac:	f7ff f9cc 	bl	d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6ab0:	6823      	ldr	r3, [r4, #0]
   d6ab2:	4928      	ldr	r1, [pc, #160]	; (d6b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6ab4:	68db      	ldr	r3, [r3, #12]
   d6ab6:	2202      	movs	r2, #2
   d6ab8:	4620      	mov	r0, r4
   d6aba:	4798      	blx	r3
    // Message
    if (msg) {
   d6abc:	b11e      	cbz	r6, d6ac6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6abe:	4631      	mov	r1, r6
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff f9c1 	bl	d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d6ac6:	792b      	ldrb	r3, [r5, #4]
   d6ac8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6acc:	d02d      	beq.n	d6b2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6ace:	6823      	ldr	r3, [r4, #0]
   d6ad0:	4922      	ldr	r1, [pc, #136]	; (d6b5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6ad2:	68db      	ldr	r3, [r3, #12]
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	2202      	movs	r2, #2
   d6ad8:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6ada:	792b      	ldrb	r3, [r5, #4]
   d6adc:	06d8      	lsls	r0, r3, #27
   d6ade:	d50b      	bpl.n	d6af8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6ae0:	6823      	ldr	r3, [r4, #0]
   d6ae2:	491f      	ldr	r1, [pc, #124]	; (d6b60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6ae4:	68db      	ldr	r3, [r3, #12]
   d6ae6:	2207      	movs	r2, #7
   d6ae8:	4620      	mov	r0, r4
   d6aea:	4798      	blx	r3
   d6aec:	69ab      	ldr	r3, [r5, #24]
   d6aee:	4a1d      	ldr	r2, [pc, #116]	; (d6b64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6af0:	6a20      	ldr	r0, [r4, #32]
   d6af2:	2100      	movs	r1, #0
   d6af4:	f7ff f906 	bl	d5d04 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6af8:	792b      	ldrb	r3, [r5, #4]
   d6afa:	0699      	lsls	r1, r3, #26
   d6afc:	d511      	bpl.n	d6b22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6afe:	06da      	lsls	r2, r3, #27
   d6b00:	d505      	bpl.n	d6b0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d6b02:	6823      	ldr	r3, [r4, #0]
   d6b04:	4912      	ldr	r1, [pc, #72]	; (d6b50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6b06:	68db      	ldr	r3, [r3, #12]
   d6b08:	2202      	movs	r2, #2
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	4798      	blx	r3
            }
            write("details = ", 10);
   d6b0e:	6823      	ldr	r3, [r4, #0]
   d6b10:	4915      	ldr	r1, [pc, #84]	; (d6b68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d6b12:	68db      	ldr	r3, [r3, #12]
   d6b14:	4620      	mov	r0, r4
   d6b16:	220a      	movs	r2, #10
   d6b18:	4798      	blx	r3
            write(attr.details);
   d6b1a:	69e9      	ldr	r1, [r5, #28]
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	f7ff f993 	bl	d5e48 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6b22:	215d      	movs	r1, #93	; 0x5d
   d6b24:	4620      	mov	r0, r4
   d6b26:	f7ff f99d 	bl	d5e64 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6b2a:	6823      	ldr	r3, [r4, #0]
   d6b2c:	490f      	ldr	r1, [pc, #60]	; (d6b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6b2e:	68db      	ldr	r3, [r3, #12]
   d6b30:	4620      	mov	r0, r4
   d6b32:	2202      	movs	r2, #2
}
   d6b34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6b38:	4718      	bx	r3
   d6b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b3e:	bf00      	nop
   d6b40:	2003e720 	.word	0x2003e720
   d6b44:	000d8137 	.word	0x000d8137
   d6b48:	000d813e 	.word	0x000d813e
   d6b4c:	000d8141 	.word	0x000d8141
   d6b50:	000d8144 	.word	0x000d8144
   d6b54:	000d8149 	.word	0x000d8149
   d6b58:	000d8147 	.word	0x000d8147
   d6b5c:	000d814c 	.word	0x000d814c
   d6b60:	000d814f 	.word	0x000d814f
   d6b64:	000d8157 	.word	0x000d8157
   d6b68:	000d815a 	.word	0x000d815a
   d6b6c:	000d8165 	.word	0x000d8165

000d6b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6b74:	b085      	sub	sp, #20
   d6b76:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6b7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6b7c:	4606      	mov	r6, r0
   d6b7e:	460f      	mov	r7, r1
   d6b80:	4691      	mov	r9, r2
   d6b82:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d6b84:	f000 fa22 	bl	d6fcc <_Z16_fetch_usbserialv>
   d6b88:	4580      	cmp	r8, r0
   d6b8a:	d105      	bne.n	d6b98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6b8c:	484a      	ldr	r0, [pc, #296]	; (d6cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6b8e:	f000 fbac 	bl	d72ea <_ZN5spark12NetworkClass9listeningEv>
   d6b92:	2800      	cmp	r0, #0
   d6b94:	f040 808c 	bne.w	d6cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6b98:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6b9a:	4a48      	ldr	r2, [pc, #288]	; (d6cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6b9c:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6b9e:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d6ba2:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6ba4:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6ba6:	f88d 8008 	strb.w	r8, [sp, #8]
   d6baa:	f000 fce2 	bl	d7572 <_ZN5spark10JSONWriter11beginObjectEv>
   d6bae:	4641      	mov	r1, r8
   d6bb0:	4648      	mov	r0, r9
   d6bb2:	f7fd fe2d 	bl	d4810 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d6bb6:	4942      	ldr	r1, [pc, #264]	; (d6cc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6bb8:	4680      	mov	r8, r0
   d6bba:	2201      	movs	r2, #1
   d6bbc:	a801      	add	r0, sp, #4
   d6bbe:	f000 fd5d 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6bc2:	4641      	mov	r1, r8
   d6bc4:	f7ff f930 	bl	d5e28 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d6bc8:	b13f      	cbz	r7, d6bda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6bca:	493e      	ldr	r1, [pc, #248]	; (d6cc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6bcc:	2201      	movs	r2, #1
   d6bce:	a801      	add	r0, sp, #4
   d6bd0:	f000 fd54 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6bd4:	4639      	mov	r1, r7
   d6bd6:	f7ff f927 	bl	d5e28 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6bda:	b13d      	cbz	r5, d6bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6bdc:	493a      	ldr	r1, [pc, #232]	; (d6cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6bde:	2201      	movs	r2, #1
   d6be0:	a801      	add	r0, sp, #4
   d6be2:	f000 fd4b 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6be6:	4629      	mov	r1, r5
   d6be8:	f7ff f91e 	bl	d5e28 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6bec:	7923      	ldrb	r3, [r4, #4]
   d6bee:	07df      	lsls	r7, r3, #31
   d6bf0:	d50e      	bpl.n	d6c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d6bf2:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6bf4:	212f      	movs	r1, #47	; 0x2f
   d6bf6:	4628      	mov	r0, r5
   d6bf8:	f000 fffb 	bl	d7bf2 <strrchr>
    if (s1) {
   d6bfc:	b100      	cbz	r0, d6c00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6bfe:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d6c00:	4932      	ldr	r1, [pc, #200]	; (d6ccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d6c02:	2201      	movs	r2, #1
   d6c04:	a801      	add	r0, sp, #4
   d6c06:	f000 fd39 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c0a:	4629      	mov	r1, r5
   d6c0c:	f7ff f90c 	bl	d5e28 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6c10:	7923      	ldrb	r3, [r4, #4]
   d6c12:	079d      	lsls	r5, r3, #30
   d6c14:	d507      	bpl.n	d6c26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6c16:	492e      	ldr	r1, [pc, #184]	; (d6cd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6c18:	2202      	movs	r2, #2
   d6c1a:	a801      	add	r0, sp, #4
   d6c1c:	f000 fd2e 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c20:	68e1      	ldr	r1, [r4, #12]
   d6c22:	f000 fcb3 	bl	d758c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d6c26:	7923      	ldrb	r3, [r4, #4]
   d6c28:	0758      	lsls	r0, r3, #29
   d6c2a:	d516      	bpl.n	d6c5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6c2c:	6925      	ldr	r5, [r4, #16]
   d6c2e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6c30:	463b      	mov	r3, r7
   d6c32:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6c36:	b13a      	cbz	r2, d6c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6c38:	2a20      	cmp	r2, #32
   d6c3a:	d101      	bne.n	d6c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6c3c:	461d      	mov	r5, r3
   d6c3e:	e001      	b.n	d6c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6c40:	2a28      	cmp	r2, #40	; 0x28
   d6c42:	d001      	beq.n	d6c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6c44:	461f      	mov	r7, r3
   d6c46:	e7f3      	b.n	d6c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6c48:	2202      	movs	r2, #2
   d6c4a:	4922      	ldr	r1, [pc, #136]	; (d6cd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6c4c:	a801      	add	r0, sp, #4
   d6c4e:	f000 fd15 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c52:	1b7a      	subs	r2, r7, r5
   d6c54:	4629      	mov	r1, r5
   d6c56:	f000 fd20 	bl	d769a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6c5a:	7923      	ldrb	r3, [r4, #4]
   d6c5c:	0719      	lsls	r1, r3, #28
   d6c5e:	d507      	bpl.n	d6c70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6c60:	491d      	ldr	r1, [pc, #116]	; (d6cd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6c62:	2201      	movs	r2, #1
   d6c64:	a801      	add	r0, sp, #4
   d6c66:	f000 fd09 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c6a:	6961      	ldr	r1, [r4, #20]
   d6c6c:	f000 fca0 	bl	d75b0 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6c70:	7923      	ldrb	r3, [r4, #4]
   d6c72:	06da      	lsls	r2, r3, #27
   d6c74:	d508      	bpl.n	d6c88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d6c76:	2204      	movs	r2, #4
   d6c78:	4918      	ldr	r1, [pc, #96]	; (d6cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6c7a:	eb0d 0002 	add.w	r0, sp, r2
   d6c7e:	f000 fcfd 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c82:	69a1      	ldr	r1, [r4, #24]
   d6c84:	f000 fc82 	bl	d758c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6c88:	7923      	ldrb	r3, [r4, #4]
   d6c8a:	069b      	lsls	r3, r3, #26
   d6c8c:	d507      	bpl.n	d6c9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6c8e:	4914      	ldr	r1, [pc, #80]	; (d6ce0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6c90:	2206      	movs	r2, #6
   d6c92:	a801      	add	r0, sp, #4
   d6c94:	f000 fcf2 	bl	d767c <_ZN5spark10JSONWriter4nameEPKcj>
   d6c98:	69e1      	ldr	r1, [r4, #28]
   d6c9a:	f7ff f8c5 	bl	d5e28 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6c9e:	a801      	add	r0, sp, #4
   d6ca0:	f000 fc51 	bl	d7546 <_ZN5spark10JSONWriter9endObjectEv>
   d6ca4:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6ca6:	490f      	ldr	r1, [pc, #60]	; (d6ce4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6ca8:	6803      	ldr	r3, [r0, #0]
   d6caa:	2202      	movs	r2, #2
   d6cac:	68db      	ldr	r3, [r3, #12]
   d6cae:	4798      	blx	r3
}
   d6cb0:	b005      	add	sp, #20
   d6cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6cb6:	bf00      	nop
   d6cb8:	2003e720 	.word	0x2003e720
   d6cbc:	000d8080 	.word	0x000d8080
   d6cc0:	000d80ca 	.word	0x000d80ca
   d6cc4:	000d80dd 	.word	0x000d80dd
   d6cc8:	000d7e23 	.word	0x000d7e23
   d6ccc:	000d8168 	.word	0x000d8168
   d6cd0:	000d816a 	.word	0x000d816a
   d6cd4:	000d816d 	.word	0x000d816d
   d6cd8:	000d80f2 	.word	0x000d80f2
   d6cdc:	000d8170 	.word	0x000d8170
   d6ce0:	000d8175 	.word	0x000d8175
   d6ce4:	000d8165 	.word	0x000d8165

000d6ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ce8:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6cea:	681a      	ldr	r2, [r3, #0]
   d6cec:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6cee:	601a      	str	r2, [r3, #0]
   d6cf0:	4770      	bx	lr
   d6cf2:	bf00      	nop
   d6cf4:	2003e2d8 	.word	0x2003e2d8
   d6cf8:	2003e3fc 	.word	0x2003e3fc

000d6cfc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cfc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6cfe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d00:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6d02:	b113      	cbz	r3, d6d0a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d04:	2203      	movs	r2, #3
   d6d06:	4601      	mov	r1, r0
   d6d08:	4798      	blx	r3
    }
   d6d0a:	4620      	mov	r0, r4
   d6d0c:	bd10      	pop	{r4, pc}

000d6d0e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6d0e:	b510      	push	{r4, lr}
   d6d10:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d12:	f7ff fff3 	bl	d6cfc <_ZNSt14_Function_baseD1Ev>
   d6d16:	4620      	mov	r0, r4
   d6d18:	bd10      	pop	{r4, pc}
	...

000d6d1c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d1c:	4803      	ldr	r0, [pc, #12]	; (d6d2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6d1e:	4a04      	ldr	r2, [pc, #16]	; (d6d30 <_GLOBAL__sub_I_RGB+0x14>)
   d6d20:	4904      	ldr	r1, [pc, #16]	; (d6d34 <_GLOBAL__sub_I_RGB+0x18>)
   d6d22:	2300      	movs	r3, #0
   d6d24:	6083      	str	r3, [r0, #8]
   d6d26:	f000 bd3d 	b.w	d77a4 <__aeabi_atexit>
   d6d2a:	bf00      	nop
   d6d2c:	2003e400 	.word	0x2003e400
   d6d30:	2003e344 	.word	0x2003e344
   d6d34:	000d6d0f 	.word	0x000d6d0f

000d6d38 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d3a:	4b0f      	ldr	r3, [pc, #60]	; (d6d78 <serialEventRun+0x40>)
   d6d3c:	b133      	cbz	r3, d6d4c <serialEventRun+0x14>
   d6d3e:	f000 f945 	bl	d6fcc <_Z16_fetch_usbserialv>
   d6d42:	6803      	ldr	r3, [r0, #0]
   d6d44:	691b      	ldr	r3, [r3, #16]
   d6d46:	4798      	blx	r3
   d6d48:	2800      	cmp	r0, #0
   d6d4a:	dc0d      	bgt.n	d6d68 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d4c:	4b0b      	ldr	r3, [pc, #44]	; (d6d7c <serialEventRun+0x44>)
   d6d4e:	b133      	cbz	r3, d6d5e <serialEventRun+0x26>
   d6d50:	f000 f9c4 	bl	d70dc <_Z22__fetch_global_Serial1v>
   d6d54:	6803      	ldr	r3, [r0, #0]
   d6d56:	691b      	ldr	r3, [r3, #16]
   d6d58:	4798      	blx	r3
   d6d5a:	2800      	cmp	r0, #0
   d6d5c:	dc07      	bgt.n	d6d6e <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d6d5e:	4b08      	ldr	r3, [pc, #32]	; (d6d80 <serialEventRun+0x48>)
   d6d60:	b143      	cbz	r3, d6d74 <serialEventRun+0x3c>
   d6d62:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6d66:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d68:	f3af 8000 	nop.w
   d6d6c:	e7ee      	b.n	d6d4c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d6e:	f3af 8000 	nop.w
   d6d72:	e7f4      	b.n	d6d5e <serialEventRun+0x26>
   d6d74:	bd08      	pop	{r3, pc}
   d6d76:	bf00      	nop
	...

000d6d84 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d84:	b508      	push	{r3, lr}
	serialEventRun();
   d6d86:	f7ff ffd7 	bl	d6d38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d8a:	f7fd fbe7 	bl	d455c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d8e:	4b01      	ldr	r3, [pc, #4]	; (d6d94 <_post_loop+0x10>)
   d6d90:	6018      	str	r0, [r3, #0]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	2003e748 	.word	0x2003e748

000d6d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d9a:	2300      	movs	r3, #0
   d6d9c:	9300      	str	r3, [sp, #0]
   d6d9e:	461a      	mov	r2, r3
   d6da0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6da4:	f7fd fd56 	bl	d4854 <system_ctrl_set_result>
}
   d6da8:	b003      	add	sp, #12
   d6daa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6db0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6db0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6db2:	8843      	ldrh	r3, [r0, #2]
   d6db4:	2b0a      	cmp	r3, #10
   d6db6:	d008      	beq.n	d6dca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6db8:	2b50      	cmp	r3, #80	; 0x50
   d6dba:	d109      	bne.n	d6dd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6dbc:	4b09      	ldr	r3, [pc, #36]	; (d6de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6dbe:	681b      	ldr	r3, [r3, #0]
   d6dc0:	b13b      	cbz	r3, d6dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6dc2:	b003      	add	sp, #12
   d6dc4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6dc8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6dca:	f7ff ffe5 	bl	d6d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6dce:	e006      	b.n	d6dde <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dd0:	2300      	movs	r3, #0
   d6dd2:	9300      	str	r3, [sp, #0]
   d6dd4:	461a      	mov	r2, r3
   d6dd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dda:	f7fd fd3b 	bl	d4854 <system_ctrl_set_result>
        break;
    }
}
   d6dde:	b003      	add	sp, #12
   d6de0:	f85d fb04 	ldr.w	pc, [sp], #4
   d6de4:	2003e410 	.word	0x2003e410

000d6de8 <module_user_init_hook>:

void module_user_init_hook()
{
   d6de8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6dea:	f7fd fba7 	bl	d453c <HAL_RNG_GetRandomNumber>
   d6dee:	4604      	mov	r4, r0
    srand(seed);
   d6df0:	f000 fe8c 	bl	d7b0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6df4:	4b07      	ldr	r3, [pc, #28]	; (d6e14 <module_user_init_hook+0x2c>)
   d6df6:	b113      	cbz	r3, d6dfe <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6df8:	4620      	mov	r0, r4
   d6dfa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6dfe:	2100      	movs	r1, #0
   d6e00:	4804      	ldr	r0, [pc, #16]	; (d6e14 <module_user_init_hook+0x2c>)
   d6e02:	f7fd fd81 	bl	d4908 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e06:	2100      	movs	r1, #0
   d6e08:	4803      	ldr	r0, [pc, #12]	; (d6e18 <module_user_init_hook+0x30>)
}
   d6e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e0e:	f7fd bd17 	b.w	d4840 <system_ctrl_set_app_request_handler>
   d6e12:	bf00      	nop
   d6e14:	00000000 	.word	0x00000000
   d6e18:	000d6db1 	.word	0x000d6db1

000d6e1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e1c:	4770      	bx	lr

000d6e1e <_ZN9IPAddressD0Ev>:
   d6e1e:	b510      	push	{r4, lr}
   d6e20:	2118      	movs	r1, #24
   d6e22:	4604      	mov	r4, r0
   d6e24:	f000 fccc 	bl	d77c0 <_ZdlPvj>
   d6e28:	4620      	mov	r0, r4
   d6e2a:	bd10      	pop	{r4, pc}

000d6e2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e2e:	7d03      	ldrb	r3, [r0, #20]
   d6e30:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e32:	b08d      	sub	sp, #52	; 0x34
   d6e34:	460e      	mov	r6, r1
   d6e36:	f100 0704 	add.w	r7, r0, #4
   d6e3a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e3e:	d002      	beq.n	d6e46 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e40:	f100 0508 	add.w	r5, r0, #8
   d6e44:	e018      	b.n	d6e78 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e46:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e48:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e4a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e4e:	232f      	movs	r3, #47	; 0x2f
   d6e50:	462a      	mov	r2, r5
   d6e52:	200a      	movs	r0, #10
   d6e54:	f7fd fc3c 	bl	d46d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e58:	4628      	mov	r0, r5
   d6e5a:	f000 fea1 	bl	d7ba0 <strlen>
   d6e5e:	6833      	ldr	r3, [r6, #0]
   d6e60:	4602      	mov	r2, r0
   d6e62:	68db      	ldr	r3, [r3, #12]
   d6e64:	4629      	mov	r1, r5
   d6e66:	4630      	mov	r0, r6
   d6e68:	4798      	blx	r3
   d6e6a:	e00f      	b.n	d6e8c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e6c:	b124      	cbz	r4, d6e78 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e6e:	212e      	movs	r1, #46	; 0x2e
   d6e70:	4630      	mov	r0, r6
   d6e72:	f7fe ff09 	bl	d5c88 <_ZN5Print5printEc>
   d6e76:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6e78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e7c:	220a      	movs	r2, #10
   d6e7e:	4630      	mov	r0, r6
   d6e80:	f7fe ff3e 	bl	d5d00 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e84:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e86:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e88:	d1f0      	bne.n	d6e6c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e8a:	4620      	mov	r0, r4
    }
    return n;
}
   d6e8c:	b00d      	add	sp, #52	; 0x34
   d6e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e90 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e90:	b510      	push	{r4, lr}
   d6e92:	4b05      	ldr	r3, [pc, #20]	; (d6ea8 <_ZN9IPAddressC1Ev+0x18>)
   d6e94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e96:	2211      	movs	r2, #17
   d6e98:	f840 3b04 	str.w	r3, [r0], #4
   d6e9c:	2100      	movs	r1, #0
   d6e9e:	f000 fe2c 	bl	d7afa <memset>
{
    clear();
}
   d6ea2:	4620      	mov	r0, r4
   d6ea4:	bd10      	pop	{r4, pc}
   d6ea6:	bf00      	nop
   d6ea8:	000d8208 	.word	0x000d8208

000d6eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6eac:	4603      	mov	r3, r0
   d6eae:	4a07      	ldr	r2, [pc, #28]	; (d6ecc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6eb0:	b510      	push	{r4, lr}
   d6eb2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6eb6:	f101 0210 	add.w	r2, r1, #16
   d6eba:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ebe:	f843 4b04 	str.w	r4, [r3], #4
   d6ec2:	4291      	cmp	r1, r2
   d6ec4:	d1f9      	bne.n	d6eba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6ec6:	780a      	ldrb	r2, [r1, #0]
   d6ec8:	701a      	strb	r2, [r3, #0]
}
   d6eca:	bd10      	pop	{r4, pc}
   d6ecc:	000d8208 	.word	0x000d8208

000d6ed0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6ed0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6ed2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6ed6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6eda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6ede:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6ee2:	2304      	movs	r3, #4
   d6ee4:	6041      	str	r1, [r0, #4]
   d6ee6:	7503      	strb	r3, [r0, #20]
   d6ee8:	bd10      	pop	{r4, pc}

000d6eea <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6eea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6eec:	780d      	ldrb	r5, [r1, #0]
   d6eee:	788b      	ldrb	r3, [r1, #2]
   d6ef0:	784a      	ldrb	r2, [r1, #1]
   d6ef2:	78c9      	ldrb	r1, [r1, #3]
   d6ef4:	9100      	str	r1, [sp, #0]
   d6ef6:	4629      	mov	r1, r5
   d6ef8:	f7ff ffea 	bl	d6ed0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6efc:	b003      	add	sp, #12
   d6efe:	bd30      	pop	{r4, r5, pc}

000d6f00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f00:	7441      	strb	r1, [r0, #17]
   d6f02:	4770      	bx	lr

000d6f04 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f04:	4770      	bx	lr

000d6f06 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6f06:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f08:	2100      	movs	r1, #0
   d6f0a:	7c00      	ldrb	r0, [r0, #16]
   d6f0c:	f7fd fc58 	bl	d47c0 <HAL_USB_USART_Receive_Data>
}
   d6f10:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f14:	bf28      	it	cs
   d6f16:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f1a:	bd08      	pop	{r3, pc}

000d6f1c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6f1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f1e:	2101      	movs	r1, #1
   d6f20:	7c00      	ldrb	r0, [r0, #16]
   d6f22:	f7fd fc4d 	bl	d47c0 <HAL_USB_USART_Receive_Data>
}
   d6f26:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f2a:	bf28      	it	cs
   d6f2c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f30:	bd08      	pop	{r3, pc}

000d6f32 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f34:	7c00      	ldrb	r0, [r0, #16]
   d6f36:	f7fd fc3b 	bl	d47b0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f3e:	bd08      	pop	{r3, pc}

000d6f40 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f40:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f42:	7c00      	ldrb	r0, [r0, #16]
   d6f44:	f7fd fc2c 	bl	d47a0 <HAL_USB_USART_Available_Data>
}
   d6f48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f4c:	bd08      	pop	{r3, pc}

000d6f4e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f4e:	7c00      	ldrb	r0, [r0, #16]
   d6f50:	f7fd bc46 	b.w	d47e0 <HAL_USB_USART_Flush_Data>

000d6f54 <_ZN9USBSerialD0Ev>:
   d6f54:	b510      	push	{r4, lr}
   d6f56:	2114      	movs	r1, #20
   d6f58:	4604      	mov	r4, r0
   d6f5a:	f000 fc31 	bl	d77c0 <_ZdlPvj>
   d6f5e:	4620      	mov	r0, r4
   d6f60:	bd10      	pop	{r4, pc}

000d6f62 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f62:	b538      	push	{r3, r4, r5, lr}
   d6f64:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f66:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f68:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f6a:	f7fd fc21 	bl	d47b0 <HAL_USB_USART_Available_Data_For_Write>
   d6f6e:	2800      	cmp	r0, #0
   d6f70:	dc01      	bgt.n	d6f76 <_ZN9USBSerial5writeEh+0x14>
   d6f72:	7c60      	ldrb	r0, [r4, #17]
   d6f74:	b128      	cbz	r0, d6f82 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f76:	4629      	mov	r1, r5
   d6f78:	7c20      	ldrb	r0, [r4, #16]
   d6f7a:	f7fd fc29 	bl	d47d0 <HAL_USB_USART_Send_Data>
   d6f7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6f82:	bd38      	pop	{r3, r4, r5, pc}

000d6f84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f84:	b510      	push	{r4, lr}
   d6f86:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f88:	2300      	movs	r3, #0
   d6f8a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f90:	60a3      	str	r3, [r4, #8]
   d6f92:	4b05      	ldr	r3, [pc, #20]	; (d6fa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6f94:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6f96:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f98:	4608      	mov	r0, r1
{
  _serial = serial;
   d6f9a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6f9c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6f9e:	4611      	mov	r1, r2
   d6fa0:	f7fd fbe6 	bl	d4770 <HAL_USB_USART_Init>
}
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	bd10      	pop	{r4, pc}
   d6fa8:	000d821c 	.word	0x000d821c

000d6fac <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6fac:	2200      	movs	r2, #0
   d6fae:	7c00      	ldrb	r0, [r0, #16]
   d6fb0:	f7fd bbe6 	b.w	d4780 <HAL_USB_USART_Begin>

000d6fb4 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d6fb4:	7c00      	ldrb	r0, [r0, #16]
   d6fb6:	f7fd bbeb 	b.w	d4790 <HAL_USB_USART_End>

000d6fba <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6fbc:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6fc0:	2100      	movs	r1, #0
   d6fc2:	f000 fd9a 	bl	d7afa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	bd10      	pop	{r4, pc}
	...

000d6fcc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6fcc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fce:	4d0e      	ldr	r5, [pc, #56]	; (d7008 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6fd0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6fd2:	a801      	add	r0, sp, #4
   d6fd4:	f7ff fff1 	bl	d6fba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fd8:	6829      	ldr	r1, [r5, #0]
   d6fda:	f011 0401 	ands.w	r4, r1, #1
   d6fde:	d110      	bne.n	d7002 <_Z16_fetch_usbserialv+0x36>
   d6fe0:	4628      	mov	r0, r5
   d6fe2:	f7fd f869 	bl	d40b8 <__cxa_guard_acquire>
   d6fe6:	b160      	cbz	r0, d7002 <_Z16_fetch_usbserialv+0x36>
   d6fe8:	aa01      	add	r2, sp, #4
   d6fea:	4621      	mov	r1, r4
   d6fec:	4807      	ldr	r0, [pc, #28]	; (d700c <_Z16_fetch_usbserialv+0x40>)
   d6fee:	f7ff ffc9 	bl	d6f84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ff2:	4628      	mov	r0, r5
   d6ff4:	f7fd f865 	bl	d40c2 <__cxa_guard_release>
   d6ff8:	4a05      	ldr	r2, [pc, #20]	; (d7010 <_Z16_fetch_usbserialv+0x44>)
   d6ffa:	4906      	ldr	r1, [pc, #24]	; (d7014 <_Z16_fetch_usbserialv+0x48>)
   d6ffc:	4803      	ldr	r0, [pc, #12]	; (d700c <_Z16_fetch_usbserialv+0x40>)
   d6ffe:	f000 fbd1 	bl	d77a4 <__aeabi_atexit>
	return _usbserial;
}
   d7002:	4802      	ldr	r0, [pc, #8]	; (d700c <_Z16_fetch_usbserialv+0x40>)
   d7004:	b007      	add	sp, #28
   d7006:	bd30      	pop	{r4, r5, pc}
   d7008:	2003e414 	.word	0x2003e414
   d700c:	2003e418 	.word	0x2003e418
   d7010:	2003e344 	.word	0x2003e344
   d7014:	000d6f05 	.word	0x000d6f05

000d7018 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7018:	4770      	bx	lr

000d701a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d701a:	7441      	strb	r1, [r0, #17]
   d701c:	4770      	bx	lr

000d701e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d701e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7020:	7c00      	ldrb	r0, [r0, #16]
   d7022:	f7fd fb95 	bl	d4750 <HAL_USART_Available_Data_For_Write>
}
   d7026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d702a:	bd08      	pop	{r3, pc}

000d702c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d702c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d702e:	7c00      	ldrb	r0, [r0, #16]
   d7030:	f7fd fb6e 	bl	d4710 <HAL_USART_Available_Data>
}
   d7034:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7038:	bd08      	pop	{r3, pc}

000d703a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d703a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d703c:	7c00      	ldrb	r0, [r0, #16]
   d703e:	f7fd fb77 	bl	d4730 <HAL_USART_Peek_Data>
}
   d7042:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7046:	bf28      	it	cs
   d7048:	f04f 30ff 	movcs.w	r0, #4294967295
   d704c:	bd08      	pop	{r3, pc}

000d704e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d704e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7050:	7c00      	ldrb	r0, [r0, #16]
   d7052:	f7fd fb65 	bl	d4720 <HAL_USART_Read_Data>
}
   d7056:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d705a:	bf28      	it	cs
   d705c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7060:	bd08      	pop	{r3, pc}

000d7062 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7062:	7c00      	ldrb	r0, [r0, #16]
   d7064:	f7fd bb6c 	b.w	d4740 <HAL_USART_Flush_Data>

000d7068 <_ZN11USARTSerialD0Ev>:
   d7068:	b510      	push	{r4, lr}
   d706a:	2114      	movs	r1, #20
   d706c:	4604      	mov	r4, r0
   d706e:	f000 fba7 	bl	d77c0 <_ZdlPvj>
   d7072:	4620      	mov	r0, r4
   d7074:	bd10      	pop	{r4, pc}

000d7076 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7076:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7078:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d707a:	4604      	mov	r4, r0
   d707c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d707e:	b925      	cbnz	r5, d708a <_ZN11USARTSerial5writeEh+0x14>
   d7080:	7c00      	ldrb	r0, [r0, #16]
   d7082:	f7fd fb65 	bl	d4750 <HAL_USART_Available_Data_For_Write>
   d7086:	2800      	cmp	r0, #0
   d7088:	dd05      	ble.n	d7096 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d708a:	4631      	mov	r1, r6
   d708c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7092:	f7fd bb35 	b.w	d4700 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7096:	4628      	mov	r0, r5
   d7098:	bd70      	pop	{r4, r5, r6, pc}
	...

000d709c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d709c:	b510      	push	{r4, lr}
   d709e:	4604      	mov	r4, r0
   d70a0:	4608      	mov	r0, r1
   d70a2:	4611      	mov	r1, r2
   d70a4:	2200      	movs	r2, #0
   d70a6:	6062      	str	r2, [r4, #4]
   d70a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70ac:	60a2      	str	r2, [r4, #8]
   d70ae:	4a05      	ldr	r2, [pc, #20]	; (d70c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70b0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70b2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70b4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70b6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70b8:	461a      	mov	r2, r3
   d70ba:	f7fd fb11 	bl	d46e0 <HAL_USART_Init>
}
   d70be:	4620      	mov	r0, r4
   d70c0:	bd10      	pop	{r4, pc}
   d70c2:	bf00      	nop
   d70c4:	000d824c 	.word	0x000d824c

000d70c8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d70c8:	2300      	movs	r3, #0
   d70ca:	7c00      	ldrb	r0, [r0, #16]
   d70cc:	f7fd bb48 	b.w	d4760 <HAL_USART_BeginConfig>

000d70d0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d70d0:	2200      	movs	r2, #0
   d70d2:	f7ff bff9 	b.w	d70c8 <_ZN11USARTSerial5beginEmm>

000d70d6 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d70d6:	7c00      	ldrb	r0, [r0, #16]
   d70d8:	f7fd bb0a 	b.w	d46f0 <HAL_USART_End>

000d70dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70de:	4d0c      	ldr	r5, [pc, #48]	; (d7110 <_Z22__fetch_global_Serial1v+0x34>)
   d70e0:	6829      	ldr	r1, [r5, #0]
   d70e2:	f011 0401 	ands.w	r4, r1, #1
   d70e6:	d111      	bne.n	d710c <_Z22__fetch_global_Serial1v+0x30>
   d70e8:	4628      	mov	r0, r5
   d70ea:	f7fc ffe5 	bl	d40b8 <__cxa_guard_acquire>
   d70ee:	b168      	cbz	r0, d710c <_Z22__fetch_global_Serial1v+0x30>
   d70f0:	4a08      	ldr	r2, [pc, #32]	; (d7114 <_Z22__fetch_global_Serial1v+0x38>)
   d70f2:	4b09      	ldr	r3, [pc, #36]	; (d7118 <_Z22__fetch_global_Serial1v+0x3c>)
   d70f4:	4809      	ldr	r0, [pc, #36]	; (d711c <_Z22__fetch_global_Serial1v+0x40>)
   d70f6:	4621      	mov	r1, r4
   d70f8:	f7ff ffd0 	bl	d709c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d70fc:	4628      	mov	r0, r5
   d70fe:	f7fc ffe0 	bl	d40c2 <__cxa_guard_release>
   d7102:	4a07      	ldr	r2, [pc, #28]	; (d7120 <_Z22__fetch_global_Serial1v+0x44>)
   d7104:	4907      	ldr	r1, [pc, #28]	; (d7124 <_Z22__fetch_global_Serial1v+0x48>)
   d7106:	4805      	ldr	r0, [pc, #20]	; (d711c <_Z22__fetch_global_Serial1v+0x40>)
   d7108:	f000 fb4c 	bl	d77a4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d710c:	4803      	ldr	r0, [pc, #12]	; (d711c <_Z22__fetch_global_Serial1v+0x40>)
   d710e:	bd38      	pop	{r3, r4, r5, pc}
   d7110:	2003e4c4 	.word	0x2003e4c4
   d7114:	2003e4c8 	.word	0x2003e4c8
   d7118:	2003e440 	.word	0x2003e440
   d711c:	2003e42c 	.word	0x2003e42c
   d7120:	2003e344 	.word	0x2003e344
   d7124:	000d7019 	.word	0x000d7019

000d7128 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7128:	2200      	movs	r2, #0
   d712a:	4611      	mov	r1, r2
   d712c:	6840      	ldr	r0, [r0, #4]
   d712e:	f7fd bbd3 	b.w	d48d8 <network_listening>

000d7132 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7132:	2200      	movs	r2, #0
   d7134:	4611      	mov	r1, r2
   d7136:	6840      	ldr	r0, [r0, #4]
   d7138:	f7fd bbde 	b.w	d48f8 <network_get_listen_timeout>

000d713c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d713c:	2200      	movs	r2, #0
   d713e:	6840      	ldr	r0, [r0, #4]
   d7140:	f7fd bbd2 	b.w	d48e8 <network_set_listen_timeout>

000d7144 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7144:	2200      	movs	r2, #0
   d7146:	f081 0101 	eor.w	r1, r1, #1
   d714a:	6840      	ldr	r0, [r0, #4]
   d714c:	f7fd bbbc 	b.w	d48c8 <network_listen>

000d7150 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7150:	2300      	movs	r3, #0
   d7152:	461a      	mov	r2, r3
   d7154:	2101      	movs	r1, #1
   d7156:	6840      	ldr	r0, [r0, #4]
   d7158:	f7fd bbae 	b.w	d48b8 <network_off>

000d715c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d715c:	2300      	movs	r3, #0
   d715e:	461a      	mov	r2, r3
   d7160:	4619      	mov	r1, r3
   d7162:	6840      	ldr	r0, [r0, #4]
   d7164:	f7fd bba0 	b.w	d48a8 <network_on>

000d7168 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7168:	2200      	movs	r2, #0
   d716a:	4611      	mov	r1, r2
   d716c:	6840      	ldr	r0, [r0, #4]
   d716e:	f7fd bb93 	b.w	d4898 <network_ready>

000d7172 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7172:	2200      	movs	r2, #0
   d7174:	4611      	mov	r1, r2
   d7176:	6840      	ldr	r0, [r0, #4]
   d7178:	f7fd bb7e 	b.w	d4878 <network_connecting>

000d717c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d717c:	2200      	movs	r2, #0
   d717e:	2102      	movs	r1, #2
   d7180:	6840      	ldr	r0, [r0, #4]
   d7182:	f7fd bb81 	b.w	d4888 <network_disconnect>

000d7186 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7186:	2300      	movs	r3, #0
   d7188:	461a      	mov	r2, r3
   d718a:	6840      	ldr	r0, [r0, #4]
   d718c:	f7fd bb6c 	b.w	d4868 <network_connect>

000d7190 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7190:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7192:	4605      	mov	r5, r0
   d7194:	b188      	cbz	r0, d71ba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7196:	6804      	ldr	r4, [r0, #0]
   d7198:	b14c      	cbz	r4, d71ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d719a:	68a3      	ldr	r3, [r4, #8]
   d719c:	b11b      	cbz	r3, d71a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d719e:	2203      	movs	r2, #3
   d71a0:	4621      	mov	r1, r4
   d71a2:	4620      	mov	r0, r4
   d71a4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d71a6:	2110      	movs	r1, #16
   d71a8:	4620      	mov	r0, r4
   d71aa:	f000 fb09 	bl	d77c0 <_ZdlPvj>
   d71ae:	4628      	mov	r0, r5
   d71b0:	2114      	movs	r1, #20
      }
   d71b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d71b6:	f000 bb03 	b.w	d77c0 <_ZdlPvj>
   d71ba:	bd38      	pop	{r3, r4, r5, pc}

000d71bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d71bc:	b110      	cbz	r0, d71c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d71be:	6803      	ldr	r3, [r0, #0]
   d71c0:	685b      	ldr	r3, [r3, #4]
   d71c2:	4718      	bx	r3
   d71c4:	4770      	bx	lr

000d71c6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d71c6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d71c8:	6803      	ldr	r3, [r0, #0]
   d71ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d71cc:	b1bb      	cbz	r3, d71fe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d71ce:	6858      	ldr	r0, [r3, #4]
   d71d0:	f7fd fa46 	bl	d4660 <os_thread_is_current>
   d71d4:	b978      	cbnz	r0, d71f6 <_ZN6ThreadD1Ev+0x30>
   d71d6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d71d8:	7c5a      	ldrb	r2, [r3, #17]
   d71da:	b912      	cbnz	r2, d71e2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d71dc:	6858      	ldr	r0, [r3, #4]
   d71de:	f7fd fa47 	bl	d4670 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d71e2:	6823      	ldr	r3, [r4, #0]
   d71e4:	6858      	ldr	r0, [r3, #4]
   d71e6:	f7fd fa4b 	bl	d4680 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71ec:	2300      	movs	r3, #0
   d71ee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71f0:	b128      	cbz	r0, d71fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d71f2:	f7ff ffcd 	bl	d7190 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71f6:	6820      	ldr	r0, [r4, #0]
   d71f8:	b108      	cbz	r0, d71fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d71fa:	f7ff ffc9 	bl	d7190 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d71fe:	4620      	mov	r0, r4
   d7200:	bd10      	pop	{r4, pc}
	...

000d7204 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7204:	b538      	push	{r3, r4, r5, lr}
   d7206:	4b0c      	ldr	r3, [pc, #48]	; (d7238 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7208:	6003      	str	r3, [r0, #0]
   d720a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d720c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7210:	b108      	cbz	r0, d7216 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7212:	f7fc ff44 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7216:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d721a:	b135      	cbz	r5, d722a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d721c:	4628      	mov	r0, r5
   d721e:	f7ff ffd2 	bl	d71c6 <_ZN6ThreadD1Ev>
   d7222:	2104      	movs	r1, #4
   d7224:	4628      	mov	r0, r5
   d7226:	f000 facb 	bl	d77c0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d722a:	68a0      	ldr	r0, [r4, #8]
   d722c:	b108      	cbz	r0, d7232 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d722e:	f7ff ffc5 	bl	d71bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7232:	4620      	mov	r0, r4
   d7234:	bd38      	pop	{r3, r4, r5, pc}
   d7236:	bf00      	nop
   d7238:	000d827c 	.word	0x000d827c

000d723c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d723c:	b538      	push	{r3, r4, r5, lr}
   d723e:	4c0e      	ldr	r4, [pc, #56]	; (d7278 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7240:	4b0e      	ldr	r3, [pc, #56]	; (d727c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7242:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7244:	2500      	movs	r5, #0
   d7246:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7248:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d724c:	6063      	str	r3, [r4, #4]
   d724e:	60a5      	str	r5, [r4, #8]
   d7250:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7254:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7258:	f7fd fa22 	bl	d46a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d725c:	4b08      	ldr	r3, [pc, #32]	; (d7280 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d725e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7262:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7266:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7268:	4620      	mov	r0, r4
   d726a:	4a06      	ldr	r2, [pc, #24]	; (d7284 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d726c:	4906      	ldr	r1, [pc, #24]	; (d7288 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d726e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7272:	f000 ba97 	b.w	d77a4 <__aeabi_atexit>
   d7276:	bf00      	nop
   d7278:	2003e54c 	.word	0x2003e54c
   d727c:	000d82b0 	.word	0x000d82b0
   d7280:	000d827c 	.word	0x000d827c
   d7284:	2003e344 	.word	0x2003e344
   d7288:	000d7205 	.word	0x000d7205

000d728c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d728c:	2300      	movs	r3, #0
   d728e:	461a      	mov	r2, r3
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7fd bae9 	b.w	d4868 <network_connect>

000d7296 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7296:	2200      	movs	r2, #0
   d7298:	2102      	movs	r1, #2
   d729a:	6840      	ldr	r0, [r0, #4]
   d729c:	f7fd baf4 	b.w	d4888 <network_disconnect>

000d72a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d72a0:	2200      	movs	r2, #0
   d72a2:	4611      	mov	r1, r2
   d72a4:	6840      	ldr	r0, [r0, #4]
   d72a6:	f7fd bae7 	b.w	d4878 <network_connecting>

000d72aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d72aa:	2200      	movs	r2, #0
   d72ac:	4611      	mov	r1, r2
   d72ae:	6840      	ldr	r0, [r0, #4]
   d72b0:	f7fd baf2 	b.w	d4898 <network_ready>

000d72b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d72b4:	2300      	movs	r3, #0
   d72b6:	461a      	mov	r2, r3
   d72b8:	4619      	mov	r1, r3
   d72ba:	6840      	ldr	r0, [r0, #4]
   d72bc:	f7fd baf4 	b.w	d48a8 <network_on>

000d72c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d72c0:	2300      	movs	r3, #0
   d72c2:	461a      	mov	r2, r3
   d72c4:	4619      	mov	r1, r3
   d72c6:	6840      	ldr	r0, [r0, #4]
   d72c8:	f7fd baf6 	b.w	d48b8 <network_off>

000d72cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d72cc:	2200      	movs	r2, #0
   d72ce:	f081 0101 	eor.w	r1, r1, #1
   d72d2:	6840      	ldr	r0, [r0, #4]
   d72d4:	f7fd baf8 	b.w	d48c8 <network_listen>

000d72d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d72d8:	2200      	movs	r2, #0
   d72da:	6840      	ldr	r0, [r0, #4]
   d72dc:	f7fd bb04 	b.w	d48e8 <network_set_listen_timeout>

000d72e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d72e0:	2200      	movs	r2, #0
   d72e2:	4611      	mov	r1, r2
   d72e4:	6840      	ldr	r0, [r0, #4]
   d72e6:	f7fd bb07 	b.w	d48f8 <network_get_listen_timeout>

000d72ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d72ea:	2200      	movs	r2, #0
   d72ec:	4611      	mov	r1, r2
   d72ee:	6840      	ldr	r0, [r0, #4]
   d72f0:	f7fd baf2 	b.w	d48d8 <network_listening>

000d72f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d72f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72f8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d72fa:	b095      	sub	sp, #84	; 0x54
   d72fc:	4616      	mov	r6, r2
   d72fe:	460d      	mov	r5, r1
   d7300:	4607      	mov	r7, r0
    IPAddress addr;
   d7302:	f7ff fdc5 	bl	d6e90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7306:	4621      	mov	r1, r4
   d7308:	2220      	movs	r2, #32
   d730a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d730c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d730e:	f000 fbf4 	bl	d7afa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7312:	2340      	movs	r3, #64	; 0x40
   d7314:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7316:	4621      	mov	r1, r4
   d7318:	466b      	mov	r3, sp
   d731a:	aa0c      	add	r2, sp, #48	; 0x30
   d731c:	4630      	mov	r0, r6
   d731e:	f7fd f8f5 	bl	d450c <netdb_getaddrinfo>
    if (!r) {
   d7322:	4604      	mov	r4, r0
   d7324:	2800      	cmp	r0, #0
   d7326:	d144      	bne.n	d73b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7328:	4602      	mov	r2, r0
   d732a:	2101      	movs	r1, #1
   d732c:	6868      	ldr	r0, [r5, #4]
   d732e:	f7fd fab3 	bl	d4898 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7332:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7334:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7336:	4622      	mov	r2, r4
   d7338:	6868      	ldr	r0, [r5, #4]
   d733a:	f7fd faad 	bl	d4898 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d733e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7340:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7342:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7344:	2e00      	cmp	r6, #0
   d7346:	d034      	beq.n	d73b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7348:	2900      	cmp	r1, #0
   d734a:	d132      	bne.n	d73b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d734c:	6873      	ldr	r3, [r6, #4]
   d734e:	2b02      	cmp	r3, #2
   d7350:	d002      	beq.n	d7358 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7352:	2b0a      	cmp	r3, #10
   d7354:	d009      	beq.n	d736a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7356:	e02a      	b.n	d73ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7358:	f1b8 0f00 	cmp.w	r8, #0
   d735c:	d027      	beq.n	d73ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d735e:	6971      	ldr	r1, [r6, #20]
   d7360:	4638      	mov	r0, r7
   d7362:	3104      	adds	r1, #4
   d7364:	f7ff fdc1 	bl	d6eea <_ZN9IPAddressaSEPKh>
   d7368:	e020      	b.n	d73ac <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d736a:	f1b9 0f00 	cmp.w	r9, #0
   d736e:	d01e      	beq.n	d73ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7370:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7372:	2211      	movs	r2, #17
   d7374:	a801      	add	r0, sp, #4
   d7376:	f000 fbc0 	bl	d7afa <memset>
                    a.v = 6;
   d737a:	2306      	movs	r3, #6
   d737c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7380:	ad01      	add	r5, sp, #4
   d7382:	f104 0308 	add.w	r3, r4, #8
   d7386:	3418      	adds	r4, #24
   d7388:	6818      	ldr	r0, [r3, #0]
   d738a:	6859      	ldr	r1, [r3, #4]
   d738c:	462a      	mov	r2, r5
   d738e:	c203      	stmia	r2!, {r0, r1}
   d7390:	3308      	adds	r3, #8
   d7392:	42a3      	cmp	r3, r4
   d7394:	4615      	mov	r5, r2
   d7396:	d1f7      	bne.n	d7388 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7398:	a901      	add	r1, sp, #4
   d739a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d739c:	ad07      	add	r5, sp, #28
   d739e:	f7ff fd85 	bl	d6eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d73a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73a4:	1d3c      	adds	r4, r7, #4
   d73a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73a8:	682b      	ldr	r3, [r5, #0]
   d73aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d73ac:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73ae:	69f6      	ldr	r6, [r6, #28]
   d73b0:	e7c8      	b.n	d7344 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d73b2:	9800      	ldr	r0, [sp, #0]
   d73b4:	f7fd f8a2 	bl	d44fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d73b8:	4638      	mov	r0, r7
   d73ba:	b015      	add	sp, #84	; 0x54
   d73bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d73c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d73c0:	4b02      	ldr	r3, [pc, #8]	; (d73cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d73c2:	4a03      	ldr	r2, [pc, #12]	; (d73d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d73c4:	601a      	str	r2, [r3, #0]
   d73c6:	2200      	movs	r2, #0
   d73c8:	605a      	str	r2, [r3, #4]
   d73ca:	4770      	bx	lr
   d73cc:	2003e720 	.word	0x2003e720
   d73d0:	000d82b0 	.word	0x000d82b0

000d73d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d73d4:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d73d8:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d73da:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d73de:	2901      	cmp	r1, #1
   d73e0:	4610      	mov	r0, r2
   d73e2:	d104      	bne.n	d73ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d73e4:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d73e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d73ec:	e004      	b.n	d73f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d73ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d73f0:	bf04      	itt	eq
   d73f2:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d73f6:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d73f8:	3b01      	subs	r3, #1
   d73fa:	f102 0210 	add.w	r2, r2, #16
   d73fe:	d1ec      	bne.n	d73da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d7400:	4770      	bx	lr

000d7402 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d7402:	b40e      	push	{r1, r2, r3}
   d7404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7408:	b087      	sub	sp, #28
   d740a:	af00      	add	r7, sp, #0
   d740c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d7410:	4605      	mov	r5, r0
   d7412:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d7416:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7418:	4623      	mov	r3, r4
   d741a:	4632      	mov	r2, r6
   d741c:	2110      	movs	r1, #16
   d741e:	f107 0008 	add.w	r0, r7, #8
   d7422:	f7fd fa91 	bl	d4948 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d7426:	280f      	cmp	r0, #15
   d7428:	d916      	bls.n	d7458 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d742a:	f100 0308 	add.w	r3, r0, #8
   d742e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d7432:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d7434:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7438:	4632      	mov	r2, r6
   d743a:	1c41      	adds	r1, r0, #1
   d743c:	4623      	mov	r3, r4
   d743e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d7440:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7442:	f7fd fa81 	bl	d4948 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d7446:	1e02      	subs	r2, r0, #0
   d7448:	dd04      	ble.n	d7454 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d744a:	682b      	ldr	r3, [r5, #0]
   d744c:	4669      	mov	r1, sp
   d744e:	689b      	ldr	r3, [r3, #8]
   d7450:	4628      	mov	r0, r5
   d7452:	4798      	blx	r3
   d7454:	46c5      	mov	sp, r8
   d7456:	e007      	b.n	d7468 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d7458:	b130      	cbz	r0, d7468 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d745a:	682b      	ldr	r3, [r5, #0]
   d745c:	4602      	mov	r2, r0
   d745e:	689b      	ldr	r3, [r3, #8]
   d7460:	f107 0108 	add.w	r1, r7, #8
   d7464:	4628      	mov	r0, r5
   d7466:	4798      	blx	r3
    }
}
   d7468:	371c      	adds	r7, #28
   d746a:	46bd      	mov	sp, r7
   d746c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7470:	b003      	add	sp, #12
   d7472:	4770      	bx	lr

000d7474 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7474:	b513      	push	{r0, r1, r4, lr}
   d7476:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d7478:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d747a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d747e:	6894      	ldr	r4, [r2, #8]
   d7480:	4619      	mov	r1, r3
   d7482:	2201      	movs	r2, #1
   d7484:	47a0      	blx	r4
}
   d7486:	b002      	add	sp, #8
   d7488:	bd10      	pop	{r4, pc}

000d748a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d748a:	6883      	ldr	r3, [r0, #8]
   d748c:	b1fb      	cbz	r3, d74ce <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d748e:	781a      	ldrb	r2, [r3, #0]
   d7490:	2a03      	cmp	r2, #3
   d7492:	d81a      	bhi.n	d74ca <_ZNK5spark9JSONValue4typeEv+0x40>
   d7494:	e8df f002 	tbb	[pc, r2]
   d7498:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d749c:	2005      	movs	r0, #5
   d749e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d74a0:	6802      	ldr	r2, [r0, #0]
   d74a2:	685b      	ldr	r3, [r3, #4]
   d74a4:	6852      	ldr	r2, [r2, #4]
   d74a6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d74a8:	282d      	cmp	r0, #45	; 0x2d
   d74aa:	d014      	beq.n	d74d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d74ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d74b0:	2b09      	cmp	r3, #9
   d74b2:	d910      	bls.n	d74d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d74b4:	2874      	cmp	r0, #116	; 0x74
   d74b6:	d010      	beq.n	d74da <_ZNK5spark9JSONValue4typeEv+0x50>
   d74b8:	2866      	cmp	r0, #102	; 0x66
   d74ba:	d00e      	beq.n	d74da <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d74bc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d74c0:	4258      	negs	r0, r3
   d74c2:	4158      	adcs	r0, r3
   d74c4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d74c6:	2006      	movs	r0, #6
   d74c8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d74ca:	2000      	movs	r0, #0
   d74cc:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d74ce:	4618      	mov	r0, r3
   d74d0:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d74d2:	2004      	movs	r0, #4
   d74d4:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d74d6:	2003      	movs	r0, #3
   d74d8:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d74da:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d74dc:	4770      	bx	lr

000d74de <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d74de:	b510      	push	{r4, lr}
   d74e0:	4604      	mov	r4, r0
    switch (type()) {
   d74e2:	f7ff ffd2 	bl	d748a <_ZNK5spark9JSONValue4typeEv>
   d74e6:	2802      	cmp	r0, #2
   d74e8:	d00d      	beq.n	d7506 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d74ea:	d316      	bcc.n	d751a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d74ec:	2804      	cmp	r0, #4
   d74ee:	d814      	bhi.n	d751a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d74f0:	6822      	ldr	r2, [r4, #0]
   d74f2:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d74f4:	6850      	ldr	r0, [r2, #4]
   d74f6:	685b      	ldr	r3, [r3, #4]
   d74f8:	220a      	movs	r2, #10
   d74fa:	2100      	movs	r1, #0
   d74fc:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d74fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d7502:	f000 bc0f 	b.w	d7d24 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d7506:	6822      	ldr	r2, [r4, #0]
   d7508:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d750a:	6852      	ldr	r2, [r2, #4]
   d750c:	685b      	ldr	r3, [r3, #4]
   d750e:	5cd0      	ldrb	r0, [r2, r3]
   d7510:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d7514:	4258      	negs	r0, r3
   d7516:	4158      	adcs	r0, r3
   d7518:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d751a:	2000      	movs	r0, #0
    }
}
   d751c:	bd10      	pop	{r4, pc}

000d751e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d751e:	b510      	push	{r4, lr}
    if (!n_) {
   d7520:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d7522:	4604      	mov	r4, r0
    if (!n_) {
   d7524:	b15b      	cbz	r3, d753e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d7526:	6880      	ldr	r0, [r0, #8]
   d7528:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d752a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d752c:	3010      	adds	r0, #16
   d752e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7530:	6120      	str	r0, [r4, #16]
    --n_;
   d7532:	6163      	str	r3, [r4, #20]
    if (n_) {
   d7534:	b12b      	cbz	r3, d7542 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d7536:	f7ff ff4d 	bl	d73d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d753a:	60a0      	str	r0, [r4, #8]
   d753c:	e001      	b.n	d7542 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d753e:	4618      	mov	r0, r3
   d7540:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d7542:	2001      	movs	r0, #1
}
   d7544:	bd10      	pop	{r4, pc}

000d7546 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d7546:	b510      	push	{r4, lr}
    write('}');
   d7548:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d754a:	4604      	mov	r4, r0
    write('}');
   d754c:	f7ff ff92 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d7550:	2301      	movs	r3, #1
   d7552:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7554:	4620      	mov	r0, r4
   d7556:	bd10      	pop	{r4, pc}

000d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d7558:	b508      	push	{r3, lr}
    switch (state_) {
   d755a:	7903      	ldrb	r3, [r0, #4]
   d755c:	2b01      	cmp	r3, #1
   d755e:	d002      	beq.n	d7566 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d7560:	2b02      	cmp	r3, #2
   d7562:	d002      	beq.n	d756a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d7564:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d7566:	212c      	movs	r1, #44	; 0x2c
   d7568:	e000      	b.n	d756c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d756a:	213a      	movs	r1, #58	; 0x3a
   d756c:	f7ff ff82 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
   d7570:	bd08      	pop	{r3, pc}

000d7572 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d7572:	b510      	push	{r4, lr}
   d7574:	4604      	mov	r4, r0
    writeSeparator();
   d7576:	f7ff ffef 	bl	d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d757a:	4620      	mov	r0, r4
   d757c:	217b      	movs	r1, #123	; 0x7b
   d757e:	f7ff ff79 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d7582:	2300      	movs	r3, #0
   d7584:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7586:	4620      	mov	r0, r4
   d7588:	bd10      	pop	{r4, pc}
	...

000d758c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d758c:	b538      	push	{r3, r4, r5, lr}
   d758e:	4604      	mov	r4, r0
   d7590:	460d      	mov	r5, r1
    writeSeparator();
   d7592:	f7ff ffe1 	bl	d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d7596:	6823      	ldr	r3, [r4, #0]
   d7598:	4904      	ldr	r1, [pc, #16]	; (d75ac <_ZN5spark10JSONWriter5valueEi+0x20>)
   d759a:	68db      	ldr	r3, [r3, #12]
   d759c:	4620      	mov	r0, r4
   d759e:	462a      	mov	r2, r5
   d75a0:	4798      	blx	r3
    state_ = NEXT;
   d75a2:	2301      	movs	r3, #1
   d75a4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d75a6:	4620      	mov	r0, r4
   d75a8:	bd38      	pop	{r3, r4, r5, pc}
   d75aa:	bf00      	nop
   d75ac:	000d8141 	.word	0x000d8141

000d75b0 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d75b0:	b538      	push	{r3, r4, r5, lr}
   d75b2:	4604      	mov	r4, r0
   d75b4:	460d      	mov	r5, r1
    writeSeparator();
   d75b6:	f7ff ffcf 	bl	d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d75ba:	6823      	ldr	r3, [r4, #0]
   d75bc:	4904      	ldr	r1, [pc, #16]	; (d75d0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d75be:	68db      	ldr	r3, [r3, #12]
   d75c0:	4620      	mov	r0, r4
   d75c2:	462a      	mov	r2, r5
   d75c4:	4798      	blx	r3
    state_ = NEXT;
   d75c6:	2301      	movs	r3, #1
   d75c8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d75ca:	4620      	mov	r0, r4
   d75cc:	bd38      	pop	{r3, r4, r5, pc}
   d75ce:	bf00      	nop
   d75d0:	000d82eb 	.word	0x000d82eb

000d75d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d75d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75d6:	460d      	mov	r5, r1
   d75d8:	4617      	mov	r7, r2
    write('"');
   d75da:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d75dc:	4604      	mov	r4, r0
   d75de:	442f      	add	r7, r5
    write('"');
   d75e0:	f7ff ff48 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
   d75e4:	462a      	mov	r2, r5
    const char* const end = str + size;
   d75e6:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d75e8:	42ba      	cmp	r2, r7
   d75ea:	d038      	beq.n	d765e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d75ec:	4616      	mov	r6, r2
   d75ee:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d75f2:	2d22      	cmp	r5, #34	; 0x22
   d75f4:	d003      	beq.n	d75fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d75f6:	2d5c      	cmp	r5, #92	; 0x5c
   d75f8:	d001      	beq.n	d75fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d75fa:	2d1f      	cmp	r5, #31
   d75fc:	d82d      	bhi.n	d765a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d75fe:	6823      	ldr	r3, [r4, #0]
   d7600:	1a52      	subs	r2, r2, r1
   d7602:	689b      	ldr	r3, [r3, #8]
   d7604:	4620      	mov	r0, r4
   d7606:	4798      	blx	r3
            write('\\');
   d7608:	215c      	movs	r1, #92	; 0x5c
   d760a:	4620      	mov	r0, r4
   d760c:	f7ff ff32 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d7610:	2d0c      	cmp	r5, #12
   d7612:	d019      	beq.n	d7648 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d7614:	d807      	bhi.n	d7626 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d7616:	2d09      	cmp	r5, #9
   d7618:	d00f      	beq.n	d763a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d761a:	2d0a      	cmp	r5, #10
   d761c:	d012      	beq.n	d7644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d761e:	2d08      	cmp	r5, #8
   d7620:	d114      	bne.n	d764c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d7622:	2162      	movs	r1, #98	; 0x62
   d7624:	e00a      	b.n	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d7626:	2d22      	cmp	r5, #34	; 0x22
   d7628:	d005      	beq.n	d7636 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d762a:	2d5c      	cmp	r5, #92	; 0x5c
   d762c:	d003      	beq.n	d7636 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d762e:	2d0d      	cmp	r5, #13
   d7630:	d10c      	bne.n	d764c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d7632:	2172      	movs	r1, #114	; 0x72
   d7634:	e002      	b.n	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d7636:	4629      	mov	r1, r5
   d7638:	e000      	b.n	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d763a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d763c:	4620      	mov	r0, r4
   d763e:	f7ff ff19 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
                break;
   d7642:	e009      	b.n	d7658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d7644:	216e      	movs	r1, #110	; 0x6e
   d7646:	e7f9      	b.n	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d7648:	2166      	movs	r1, #102	; 0x66
   d764a:	e7f7      	b.n	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d764c:	6823      	ldr	r3, [r4, #0]
   d764e:	490a      	ldr	r1, [pc, #40]	; (d7678 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d7650:	68db      	ldr	r3, [r3, #12]
   d7652:	462a      	mov	r2, r5
   d7654:	4620      	mov	r0, r4
   d7656:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d7658:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d765a:	4632      	mov	r2, r6
   d765c:	e7c4      	b.n	d75e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d765e:	4291      	cmp	r1, r2
   d7660:	d004      	beq.n	d766c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d7662:	6823      	ldr	r3, [r4, #0]
   d7664:	1a52      	subs	r2, r2, r1
   d7666:	689d      	ldr	r5, [r3, #8]
   d7668:	4620      	mov	r0, r4
   d766a:	47a8      	blx	r5
    }
    write('"');
   d766c:	2122      	movs	r1, #34	; 0x22
   d766e:	4620      	mov	r0, r4
   d7670:	f7ff ff00 	bl	d7474 <_ZN5spark10JSONWriter5writeEc>
   d7674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7676:	bf00      	nop
   d7678:	000d82f6 	.word	0x000d82f6

000d767c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d767c:	b570      	push	{r4, r5, r6, lr}
   d767e:	4604      	mov	r4, r0
   d7680:	460d      	mov	r5, r1
   d7682:	4616      	mov	r6, r2
    writeSeparator();
   d7684:	f7ff ff68 	bl	d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7688:	4620      	mov	r0, r4
   d768a:	4632      	mov	r2, r6
   d768c:	4629      	mov	r1, r5
   d768e:	f7ff ffa1 	bl	d75d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7692:	2302      	movs	r3, #2
   d7694:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7696:	4620      	mov	r0, r4
   d7698:	bd70      	pop	{r4, r5, r6, pc}

000d769a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d769a:	b570      	push	{r4, r5, r6, lr}
   d769c:	4604      	mov	r4, r0
   d769e:	460d      	mov	r5, r1
   d76a0:	4616      	mov	r6, r2
    writeSeparator();
   d76a2:	f7ff ff59 	bl	d7558 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d76a6:	4620      	mov	r0, r4
   d76a8:	4632      	mov	r2, r6
   d76aa:	4629      	mov	r1, r5
   d76ac:	f7ff ff92 	bl	d75d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d76b0:	2301      	movs	r3, #1
   d76b2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d76b4:	4620      	mov	r0, r4
   d76b6:	bd70      	pop	{r4, r5, r6, pc}

000d76b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d76b8:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d76ba:	2300      	movs	r3, #0
   d76bc:	4604      	mov	r4, r0
   d76be:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d76c0:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d76c2:	4810      	ldr	r0, [pc, #64]	; (d7704 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d76c4:	60a0      	str	r0, [r4, #8]
   d76c6:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d76c8:	b1d1      	cbz	r1, d7700 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d76ca:	780b      	ldrb	r3, [r1, #0]
   d76cc:	2b03      	cmp	r3, #3
   d76ce:	d006      	beq.n	d76de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d76d0:	b9b3      	cbnz	r3, d7700 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d76d2:	6813      	ldr	r3, [r2, #0]
   d76d4:	6858      	ldr	r0, [r3, #4]
   d76d6:	684b      	ldr	r3, [r1, #4]
   d76d8:	5cc3      	ldrb	r3, [r0, r3]
   d76da:	2b6e      	cmp	r3, #110	; 0x6e
   d76dc:	d008      	beq.n	d76f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d76de:	6813      	ldr	r3, [r2, #0]
   d76e0:	6858      	ldr	r0, [r3, #4]
   d76e2:	684b      	ldr	r3, [r1, #4]
   d76e4:	4403      	add	r3, r0
   d76e6:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d76e8:	688b      	ldr	r3, [r1, #8]
   d76ea:	6849      	ldr	r1, [r1, #4]
   d76ec:	1a5b      	subs	r3, r3, r1
   d76ee:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d76f0:	4611      	mov	r1, r2
   d76f2:	4620      	mov	r0, r4
   d76f4:	f851 3b04 	ldr.w	r3, [r1], #4
   d76f8:	f840 3b04 	str.w	r3, [r0], #4
   d76fc:	f7fd fe6a 	bl	d53d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d7700:	4620      	mov	r0, r4
   d7702:	bd10      	pop	{r4, pc}
   d7704:	000d8167 	.word	0x000d8167

000d7708 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7708:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d770a:	b510      	push	{r4, lr}
   d770c:	4604      	mov	r4, r0
   d770e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7710:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d7712:	6083      	str	r3, [r0, #8]
   d7714:	60c3      	str	r3, [r0, #12]
   d7716:	6103      	str	r3, [r0, #16]
   d7718:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d771a:	b171      	cbz	r1, d773a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d771c:	780b      	ldrb	r3, [r1, #0]
   d771e:	2b01      	cmp	r3, #1
   d7720:	d10b      	bne.n	d773a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d7722:	f101 0310 	add.w	r3, r1, #16
   d7726:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d7728:	68cb      	ldr	r3, [r1, #12]
   d772a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d772c:	4611      	mov	r1, r2
   d772e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7732:	f840 3b04 	str.w	r3, [r0], #4
   d7736:	f7fd fe4d 	bl	d53d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d773a:	4620      	mov	r0, r4
   d773c:	bd10      	pop	{r4, pc}

000d773e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d773e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7740:	b510      	push	{r4, lr}
   d7742:	4604      	mov	r4, r0
   d7744:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7746:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d7748:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d774a:	b131      	cbz	r1, d775a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d774c:	4611      	mov	r1, r2
   d774e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7752:	f840 3b04 	str.w	r3, [r0], #4
   d7756:	f7fd fe3d 	bl	d53d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d775a:	4620      	mov	r0, r4
   d775c:	bd10      	pop	{r4, pc}
	...

000d7760 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7760:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7762:	4c0c      	ldr	r4, [pc, #48]	; (d7794 <_GLOBAL__sub_I_SPI+0x34>)
   d7764:	4e0c      	ldr	r6, [pc, #48]	; (d7798 <_GLOBAL__sub_I_SPI+0x38>)
   d7766:	4d0d      	ldr	r5, [pc, #52]	; (d779c <_GLOBAL__sub_I_SPI+0x3c>)
   d7768:	2100      	movs	r1, #0
   d776a:	4620      	mov	r0, r4
   d776c:	f7fd f93a 	bl	d49e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7770:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7772:	4c0b      	ldr	r4, [pc, #44]	; (d77a0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7774:	4632      	mov	r2, r6
   d7776:	4629      	mov	r1, r5
   d7778:	f000 f814 	bl	d77a4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d777c:	2101      	movs	r1, #1
   d777e:	4620      	mov	r0, r4
   d7780:	f7fd f930 	bl	d49e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7784:	4632      	mov	r2, r6
   d7786:	4629      	mov	r1, r5
   d7788:	4620      	mov	r0, r4
   d778a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d778e:	f000 b809 	b.w	d77a4 <__aeabi_atexit>
   d7792:	bf00      	nop
   d7794:	2003e728 	.word	0x2003e728
   d7798:	2003e344 	.word	0x2003e344
   d779c:	000d49d5 	.word	0x000d49d5
   d77a0:	2003e738 	.word	0x2003e738

000d77a4 <__aeabi_atexit>:
   d77a4:	460b      	mov	r3, r1
   d77a6:	4601      	mov	r1, r0
   d77a8:	4618      	mov	r0, r3
   d77aa:	f000 b963 	b.w	d7a74 <__cxa_atexit>
	...

000d77b0 <_ZSt15get_new_handlerv>:
   d77b0:	4b02      	ldr	r3, [pc, #8]	; (d77bc <_ZSt15get_new_handlerv+0xc>)
   d77b2:	6818      	ldr	r0, [r3, #0]
   d77b4:	f3bf 8f5f 	dmb	sy
   d77b8:	4770      	bx	lr
   d77ba:	bf00      	nop
   d77bc:	2003e74c 	.word	0x2003e74c

000d77c0 <_ZdlPvj>:
   d77c0:	f7fc bc6b 	b.w	d409a <_ZdlPv>

000d77c4 <_ZnwjRKSt9nothrow_t>:
   d77c4:	b510      	push	{r4, lr}
   d77c6:	2800      	cmp	r0, #0
   d77c8:	bf14      	ite	ne
   d77ca:	4604      	movne	r4, r0
   d77cc:	2401      	moveq	r4, #1
   d77ce:	4620      	mov	r0, r4
   d77d0:	f7fd f8a2 	bl	d4918 <malloc>
   d77d4:	b920      	cbnz	r0, d77e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d77d6:	f7ff ffeb 	bl	d77b0 <_ZSt15get_new_handlerv>
   d77da:	b108      	cbz	r0, d77e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d77dc:	4780      	blx	r0
   d77de:	e7f6      	b.n	d77ce <_ZnwjRKSt9nothrow_t+0xa>
   d77e0:	bd10      	pop	{r4, pc}
	...

000d77e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77e4:	4b18      	ldr	r3, [pc, #96]	; (d7848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77e6:	681a      	ldr	r2, [r3, #0]
   d77e8:	07d1      	lsls	r1, r2, #31
   d77ea:	bf5c      	itt	pl
   d77ec:	2201      	movpl	r2, #1
   d77ee:	601a      	strpl	r2, [r3, #0]
   d77f0:	4b16      	ldr	r3, [pc, #88]	; (d784c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d2      	lsls	r2, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4b14      	ldr	r3, [pc, #80]	; (d7850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d77fe:	681a      	ldr	r2, [r3, #0]
   d7800:	07d0      	lsls	r0, r2, #31
   d7802:	bf5c      	itt	pl
   d7804:	2201      	movpl	r2, #1
   d7806:	601a      	strpl	r2, [r3, #0]
   d7808:	4b12      	ldr	r3, [pc, #72]	; (d7854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d780a:	681a      	ldr	r2, [r3, #0]
   d780c:	07d1      	lsls	r1, r2, #31
   d780e:	bf5c      	itt	pl
   d7810:	2201      	movpl	r2, #1
   d7812:	601a      	strpl	r2, [r3, #0]
   d7814:	4b10      	ldr	r3, [pc, #64]	; (d7858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7816:	681a      	ldr	r2, [r3, #0]
   d7818:	07d2      	lsls	r2, r2, #31
   d781a:	bf5c      	itt	pl
   d781c:	2201      	movpl	r2, #1
   d781e:	601a      	strpl	r2, [r3, #0]
   d7820:	4b0e      	ldr	r3, [pc, #56]	; (d785c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7822:	681a      	ldr	r2, [r3, #0]
   d7824:	07d0      	lsls	r0, r2, #31
   d7826:	bf5c      	itt	pl
   d7828:	2201      	movpl	r2, #1
   d782a:	601a      	strpl	r2, [r3, #0]
   d782c:	4b0c      	ldr	r3, [pc, #48]	; (d7860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d1      	lsls	r1, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4b0a      	ldr	r3, [pc, #40]	; (d7864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d2      	lsls	r2, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4770      	bx	lr
   d7846:	bf00      	nop
   d7848:	2003e76c 	.word	0x2003e76c
   d784c:	2003e768 	.word	0x2003e768
   d7850:	2003e764 	.word	0x2003e764
   d7854:	2003e760 	.word	0x2003e760
   d7858:	2003e75c 	.word	0x2003e75c
   d785c:	2003e758 	.word	0x2003e758
   d7860:	2003e754 	.word	0x2003e754
   d7864:	2003e750 	.word	0x2003e750

000d7868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7868:	4b24      	ldr	r3, [pc, #144]	; (d78fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d786a:	681a      	ldr	r2, [r3, #0]
   d786c:	07d0      	lsls	r0, r2, #31
   d786e:	bf5c      	itt	pl
   d7870:	2201      	movpl	r2, #1
   d7872:	601a      	strpl	r2, [r3, #0]
   d7874:	4b22      	ldr	r3, [pc, #136]	; (d7900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d1      	lsls	r1, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b20      	ldr	r3, [pc, #128]	; (d7904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d2      	lsls	r2, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4b1e      	ldr	r3, [pc, #120]	; (d7908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d788e:	681a      	ldr	r2, [r3, #0]
   d7890:	07d0      	lsls	r0, r2, #31
   d7892:	bf5c      	itt	pl
   d7894:	2201      	movpl	r2, #1
   d7896:	601a      	strpl	r2, [r3, #0]
   d7898:	4b1c      	ldr	r3, [pc, #112]	; (d790c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d789a:	681a      	ldr	r2, [r3, #0]
   d789c:	07d1      	lsls	r1, r2, #31
   d789e:	bf5c      	itt	pl
   d78a0:	2201      	movpl	r2, #1
   d78a2:	601a      	strpl	r2, [r3, #0]
   d78a4:	4b1a      	ldr	r3, [pc, #104]	; (d7910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d78a6:	681a      	ldr	r2, [r3, #0]
   d78a8:	07d2      	lsls	r2, r2, #31
   d78aa:	bf5c      	itt	pl
   d78ac:	2201      	movpl	r2, #1
   d78ae:	601a      	strpl	r2, [r3, #0]
   d78b0:	4b18      	ldr	r3, [pc, #96]	; (d7914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d78b2:	681a      	ldr	r2, [r3, #0]
   d78b4:	07d0      	lsls	r0, r2, #31
   d78b6:	bf5c      	itt	pl
   d78b8:	2201      	movpl	r2, #1
   d78ba:	601a      	strpl	r2, [r3, #0]
   d78bc:	4b16      	ldr	r3, [pc, #88]	; (d7918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d78be:	681a      	ldr	r2, [r3, #0]
   d78c0:	07d1      	lsls	r1, r2, #31
   d78c2:	bf5c      	itt	pl
   d78c4:	2201      	movpl	r2, #1
   d78c6:	601a      	strpl	r2, [r3, #0]
   d78c8:	4b14      	ldr	r3, [pc, #80]	; (d791c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d78ca:	681a      	ldr	r2, [r3, #0]
   d78cc:	07d2      	lsls	r2, r2, #31
   d78ce:	bf5c      	itt	pl
   d78d0:	2201      	movpl	r2, #1
   d78d2:	601a      	strpl	r2, [r3, #0]
   d78d4:	4b12      	ldr	r3, [pc, #72]	; (d7920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d78d6:	681a      	ldr	r2, [r3, #0]
   d78d8:	07d0      	lsls	r0, r2, #31
   d78da:	bf5c      	itt	pl
   d78dc:	2201      	movpl	r2, #1
   d78de:	601a      	strpl	r2, [r3, #0]
   d78e0:	4b10      	ldr	r3, [pc, #64]	; (d7924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d78e2:	681a      	ldr	r2, [r3, #0]
   d78e4:	07d1      	lsls	r1, r2, #31
   d78e6:	bf5c      	itt	pl
   d78e8:	2201      	movpl	r2, #1
   d78ea:	601a      	strpl	r2, [r3, #0]
   d78ec:	4b0e      	ldr	r3, [pc, #56]	; (d7928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d78ee:	681a      	ldr	r2, [r3, #0]
   d78f0:	07d2      	lsls	r2, r2, #31
   d78f2:	bf5c      	itt	pl
   d78f4:	2201      	movpl	r2, #1
   d78f6:	601a      	strpl	r2, [r3, #0]
   d78f8:	4770      	bx	lr
   d78fa:	bf00      	nop
   d78fc:	2003e79c 	.word	0x2003e79c
   d7900:	2003e798 	.word	0x2003e798
   d7904:	2003e794 	.word	0x2003e794
   d7908:	2003e790 	.word	0x2003e790
   d790c:	2003e78c 	.word	0x2003e78c
   d7910:	2003e788 	.word	0x2003e788
   d7914:	2003e784 	.word	0x2003e784
   d7918:	2003e780 	.word	0x2003e780
   d791c:	2003e77c 	.word	0x2003e77c
   d7920:	2003e778 	.word	0x2003e778
   d7924:	2003e774 	.word	0x2003e774
   d7928:	2003e770 	.word	0x2003e770

000d792c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d792c:	4b24      	ldr	r3, [pc, #144]	; (d79c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d0      	lsls	r0, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b22      	ldr	r3, [pc, #136]	; (d79c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d1      	lsls	r1, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4b20      	ldr	r3, [pc, #128]	; (d79c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7946:	681a      	ldr	r2, [r3, #0]
   d7948:	07d2      	lsls	r2, r2, #31
   d794a:	bf5c      	itt	pl
   d794c:	2201      	movpl	r2, #1
   d794e:	601a      	strpl	r2, [r3, #0]
   d7950:	4b1e      	ldr	r3, [pc, #120]	; (d79cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7952:	681a      	ldr	r2, [r3, #0]
   d7954:	07d0      	lsls	r0, r2, #31
   d7956:	bf5c      	itt	pl
   d7958:	2201      	movpl	r2, #1
   d795a:	601a      	strpl	r2, [r3, #0]
   d795c:	4b1c      	ldr	r3, [pc, #112]	; (d79d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d795e:	681a      	ldr	r2, [r3, #0]
   d7960:	07d1      	lsls	r1, r2, #31
   d7962:	bf5c      	itt	pl
   d7964:	2201      	movpl	r2, #1
   d7966:	601a      	strpl	r2, [r3, #0]
   d7968:	4b1a      	ldr	r3, [pc, #104]	; (d79d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d796a:	681a      	ldr	r2, [r3, #0]
   d796c:	07d2      	lsls	r2, r2, #31
   d796e:	bf5c      	itt	pl
   d7970:	2201      	movpl	r2, #1
   d7972:	601a      	strpl	r2, [r3, #0]
   d7974:	4b18      	ldr	r3, [pc, #96]	; (d79d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7976:	681a      	ldr	r2, [r3, #0]
   d7978:	07d0      	lsls	r0, r2, #31
   d797a:	bf5c      	itt	pl
   d797c:	2201      	movpl	r2, #1
   d797e:	601a      	strpl	r2, [r3, #0]
   d7980:	4b16      	ldr	r3, [pc, #88]	; (d79dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7982:	681a      	ldr	r2, [r3, #0]
   d7984:	07d1      	lsls	r1, r2, #31
   d7986:	bf5c      	itt	pl
   d7988:	2201      	movpl	r2, #1
   d798a:	601a      	strpl	r2, [r3, #0]
   d798c:	4b14      	ldr	r3, [pc, #80]	; (d79e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d798e:	681a      	ldr	r2, [r3, #0]
   d7990:	07d2      	lsls	r2, r2, #31
   d7992:	bf5c      	itt	pl
   d7994:	2201      	movpl	r2, #1
   d7996:	601a      	strpl	r2, [r3, #0]
   d7998:	4b12      	ldr	r3, [pc, #72]	; (d79e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d799a:	681a      	ldr	r2, [r3, #0]
   d799c:	07d0      	lsls	r0, r2, #31
   d799e:	bf5c      	itt	pl
   d79a0:	2201      	movpl	r2, #1
   d79a2:	601a      	strpl	r2, [r3, #0]
   d79a4:	4b10      	ldr	r3, [pc, #64]	; (d79e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d79a6:	681a      	ldr	r2, [r3, #0]
   d79a8:	07d1      	lsls	r1, r2, #31
   d79aa:	bf5c      	itt	pl
   d79ac:	2201      	movpl	r2, #1
   d79ae:	601a      	strpl	r2, [r3, #0]
   d79b0:	4b0e      	ldr	r3, [pc, #56]	; (d79ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d2      	lsls	r2, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4770      	bx	lr
   d79be:	bf00      	nop
   d79c0:	2003e7cc 	.word	0x2003e7cc
   d79c4:	2003e7c8 	.word	0x2003e7c8
   d79c8:	2003e7c4 	.word	0x2003e7c4
   d79cc:	2003e7c0 	.word	0x2003e7c0
   d79d0:	2003e7bc 	.word	0x2003e7bc
   d79d4:	2003e7b8 	.word	0x2003e7b8
   d79d8:	2003e7b4 	.word	0x2003e7b4
   d79dc:	2003e7b0 	.word	0x2003e7b0
   d79e0:	2003e7ac 	.word	0x2003e7ac
   d79e4:	2003e7a8 	.word	0x2003e7a8
   d79e8:	2003e7a4 	.word	0x2003e7a4
   d79ec:	2003e7a0 	.word	0x2003e7a0

000d79f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79f0:	4b18      	ldr	r3, [pc, #96]	; (d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79f2:	681a      	ldr	r2, [r3, #0]
   d79f4:	07d1      	lsls	r1, r2, #31
   d79f6:	bf5c      	itt	pl
   d79f8:	2201      	movpl	r2, #1
   d79fa:	601a      	strpl	r2, [r3, #0]
   d79fc:	4b16      	ldr	r3, [pc, #88]	; (d7a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79fe:	681a      	ldr	r2, [r3, #0]
   d7a00:	07d2      	lsls	r2, r2, #31
   d7a02:	bf5c      	itt	pl
   d7a04:	2201      	movpl	r2, #1
   d7a06:	601a      	strpl	r2, [r3, #0]
   d7a08:	4b14      	ldr	r3, [pc, #80]	; (d7a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a0a:	681a      	ldr	r2, [r3, #0]
   d7a0c:	07d0      	lsls	r0, r2, #31
   d7a0e:	bf5c      	itt	pl
   d7a10:	2201      	movpl	r2, #1
   d7a12:	601a      	strpl	r2, [r3, #0]
   d7a14:	4b12      	ldr	r3, [pc, #72]	; (d7a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a16:	681a      	ldr	r2, [r3, #0]
   d7a18:	07d1      	lsls	r1, r2, #31
   d7a1a:	bf5c      	itt	pl
   d7a1c:	2201      	movpl	r2, #1
   d7a1e:	601a      	strpl	r2, [r3, #0]
   d7a20:	4b10      	ldr	r3, [pc, #64]	; (d7a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a22:	681a      	ldr	r2, [r3, #0]
   d7a24:	07d2      	lsls	r2, r2, #31
   d7a26:	bf5c      	itt	pl
   d7a28:	2201      	movpl	r2, #1
   d7a2a:	601a      	strpl	r2, [r3, #0]
   d7a2c:	4b0e      	ldr	r3, [pc, #56]	; (d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a2e:	681a      	ldr	r2, [r3, #0]
   d7a30:	07d0      	lsls	r0, r2, #31
   d7a32:	bf5c      	itt	pl
   d7a34:	2201      	movpl	r2, #1
   d7a36:	601a      	strpl	r2, [r3, #0]
   d7a38:	4b0c      	ldr	r3, [pc, #48]	; (d7a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d1      	lsls	r1, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4b0a      	ldr	r3, [pc, #40]	; (d7a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a46:	681a      	ldr	r2, [r3, #0]
   d7a48:	07d2      	lsls	r2, r2, #31
   d7a4a:	bf5c      	itt	pl
   d7a4c:	2201      	movpl	r2, #1
   d7a4e:	601a      	strpl	r2, [r3, #0]
   d7a50:	4770      	bx	lr
   d7a52:	bf00      	nop
   d7a54:	2003e7ec 	.word	0x2003e7ec
   d7a58:	2003e7e8 	.word	0x2003e7e8
   d7a5c:	2003e7e4 	.word	0x2003e7e4
   d7a60:	2003e7e0 	.word	0x2003e7e0
   d7a64:	2003e7dc 	.word	0x2003e7dc
   d7a68:	2003e7d8 	.word	0x2003e7d8
   d7a6c:	2003e7d4 	.word	0x2003e7d4
   d7a70:	2003e7d0 	.word	0x2003e7d0

000d7a74 <__cxa_atexit>:
   d7a74:	b510      	push	{r4, lr}
   d7a76:	4c05      	ldr	r4, [pc, #20]	; (d7a8c <__cxa_atexit+0x18>)
   d7a78:	4613      	mov	r3, r2
   d7a7a:	b12c      	cbz	r4, d7a88 <__cxa_atexit+0x14>
   d7a7c:	460a      	mov	r2, r1
   d7a7e:	4601      	mov	r1, r0
   d7a80:	2002      	movs	r0, #2
   d7a82:	f3af 8000 	nop.w
   d7a86:	bd10      	pop	{r4, pc}
   d7a88:	4620      	mov	r0, r4
   d7a8a:	bd10      	pop	{r4, pc}
   d7a8c:	00000000 	.word	0x00000000

000d7a90 <memcmp>:
   d7a90:	b510      	push	{r4, lr}
   d7a92:	3901      	subs	r1, #1
   d7a94:	4402      	add	r2, r0
   d7a96:	4290      	cmp	r0, r2
   d7a98:	d007      	beq.n	d7aaa <memcmp+0x1a>
   d7a9a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7a9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7aa2:	42a3      	cmp	r3, r4
   d7aa4:	d0f7      	beq.n	d7a96 <memcmp+0x6>
   d7aa6:	1b18      	subs	r0, r3, r4
   d7aa8:	bd10      	pop	{r4, pc}
   d7aaa:	2000      	movs	r0, #0
   d7aac:	bd10      	pop	{r4, pc}

000d7aae <memcpy>:
   d7aae:	b510      	push	{r4, lr}
   d7ab0:	1e43      	subs	r3, r0, #1
   d7ab2:	440a      	add	r2, r1
   d7ab4:	4291      	cmp	r1, r2
   d7ab6:	d004      	beq.n	d7ac2 <memcpy+0x14>
   d7ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7abc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7ac0:	e7f8      	b.n	d7ab4 <memcpy+0x6>
   d7ac2:	bd10      	pop	{r4, pc}

000d7ac4 <memmove>:
   d7ac4:	4288      	cmp	r0, r1
   d7ac6:	b510      	push	{r4, lr}
   d7ac8:	eb01 0302 	add.w	r3, r1, r2
   d7acc:	d801      	bhi.n	d7ad2 <memmove+0xe>
   d7ace:	1e42      	subs	r2, r0, #1
   d7ad0:	e00b      	b.n	d7aea <memmove+0x26>
   d7ad2:	4298      	cmp	r0, r3
   d7ad4:	d2fb      	bcs.n	d7ace <memmove+0xa>
   d7ad6:	1881      	adds	r1, r0, r2
   d7ad8:	1ad2      	subs	r2, r2, r3
   d7ada:	42d3      	cmn	r3, r2
   d7adc:	d004      	beq.n	d7ae8 <memmove+0x24>
   d7ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7ae2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7ae6:	e7f8      	b.n	d7ada <memmove+0x16>
   d7ae8:	bd10      	pop	{r4, pc}
   d7aea:	4299      	cmp	r1, r3
   d7aec:	d004      	beq.n	d7af8 <memmove+0x34>
   d7aee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7af2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7af6:	e7f8      	b.n	d7aea <memmove+0x26>
   d7af8:	bd10      	pop	{r4, pc}

000d7afa <memset>:
   d7afa:	4402      	add	r2, r0
   d7afc:	4603      	mov	r3, r0
   d7afe:	4293      	cmp	r3, r2
   d7b00:	d002      	beq.n	d7b08 <memset+0xe>
   d7b02:	f803 1b01 	strb.w	r1, [r3], #1
   d7b06:	e7fa      	b.n	d7afe <memset+0x4>
   d7b08:	4770      	bx	lr
	...

000d7b0c <srand>:
   d7b0c:	b538      	push	{r3, r4, r5, lr}
   d7b0e:	4b12      	ldr	r3, [pc, #72]	; (d7b58 <srand+0x4c>)
   d7b10:	681c      	ldr	r4, [r3, #0]
   d7b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b14:	4605      	mov	r5, r0
   d7b16:	b9d3      	cbnz	r3, d7b4e <srand+0x42>
   d7b18:	2018      	movs	r0, #24
   d7b1a:	f7fc fefd 	bl	d4918 <malloc>
   d7b1e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7b22:	63a0      	str	r0, [r4, #56]	; 0x38
   d7b24:	8003      	strh	r3, [r0, #0]
   d7b26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7b2a:	8043      	strh	r3, [r0, #2]
   d7b2c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7b30:	8083      	strh	r3, [r0, #4]
   d7b32:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7b36:	80c3      	strh	r3, [r0, #6]
   d7b38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7b3c:	8103      	strh	r3, [r0, #8]
   d7b3e:	2305      	movs	r3, #5
   d7b40:	8143      	strh	r3, [r0, #10]
   d7b42:	230b      	movs	r3, #11
   d7b44:	8183      	strh	r3, [r0, #12]
   d7b46:	2201      	movs	r2, #1
   d7b48:	2300      	movs	r3, #0
   d7b4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7b50:	2200      	movs	r2, #0
   d7b52:	611d      	str	r5, [r3, #16]
   d7b54:	615a      	str	r2, [r3, #20]
   d7b56:	bd38      	pop	{r3, r4, r5, pc}
   d7b58:	2003e340 	.word	0x2003e340

000d7b5c <strchr>:
   d7b5c:	b2c9      	uxtb	r1, r1
   d7b5e:	4603      	mov	r3, r0
   d7b60:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b64:	b11a      	cbz	r2, d7b6e <strchr+0x12>
   d7b66:	4291      	cmp	r1, r2
   d7b68:	d1f9      	bne.n	d7b5e <strchr+0x2>
   d7b6a:	4618      	mov	r0, r3
   d7b6c:	4770      	bx	lr
   d7b6e:	2900      	cmp	r1, #0
   d7b70:	bf0c      	ite	eq
   d7b72:	4618      	moveq	r0, r3
   d7b74:	2000      	movne	r0, #0
   d7b76:	4770      	bx	lr

000d7b78 <strchrnul>:
   d7b78:	b510      	push	{r4, lr}
   d7b7a:	4604      	mov	r4, r0
   d7b7c:	f7ff ffee 	bl	d7b5c <strchr>
   d7b80:	b918      	cbnz	r0, d7b8a <strchrnul+0x12>
   d7b82:	4620      	mov	r0, r4
   d7b84:	f000 f80c 	bl	d7ba0 <strlen>
   d7b88:	4420      	add	r0, r4
   d7b8a:	bd10      	pop	{r4, pc}

000d7b8c <strcmp>:
   d7b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b90:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7b94:	2a01      	cmp	r2, #1
   d7b96:	bf28      	it	cs
   d7b98:	429a      	cmpcs	r2, r3
   d7b9a:	d0f7      	beq.n	d7b8c <strcmp>
   d7b9c:	1ad0      	subs	r0, r2, r3
   d7b9e:	4770      	bx	lr

000d7ba0 <strlen>:
   d7ba0:	4603      	mov	r3, r0
   d7ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7ba6:	2a00      	cmp	r2, #0
   d7ba8:	d1fb      	bne.n	d7ba2 <strlen+0x2>
   d7baa:	1a18      	subs	r0, r3, r0
   d7bac:	3801      	subs	r0, #1
   d7bae:	4770      	bx	lr

000d7bb0 <strncmp>:
   d7bb0:	b530      	push	{r4, r5, lr}
   d7bb2:	b182      	cbz	r2, d7bd6 <strncmp+0x26>
   d7bb4:	1e45      	subs	r5, r0, #1
   d7bb6:	3901      	subs	r1, #1
   d7bb8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7bc0:	42a3      	cmp	r3, r4
   d7bc2:	d106      	bne.n	d7bd2 <strncmp+0x22>
   d7bc4:	43ec      	mvns	r4, r5
   d7bc6:	4414      	add	r4, r2
   d7bc8:	42e0      	cmn	r0, r4
   d7bca:	d001      	beq.n	d7bd0 <strncmp+0x20>
   d7bcc:	2b00      	cmp	r3, #0
   d7bce:	d1f3      	bne.n	d7bb8 <strncmp+0x8>
   d7bd0:	461c      	mov	r4, r3
   d7bd2:	1b18      	subs	r0, r3, r4
   d7bd4:	bd30      	pop	{r4, r5, pc}
   d7bd6:	4610      	mov	r0, r2
   d7bd8:	bd30      	pop	{r4, r5, pc}

000d7bda <strnlen>:
   d7bda:	b510      	push	{r4, lr}
   d7bdc:	4603      	mov	r3, r0
   d7bde:	4401      	add	r1, r0
   d7be0:	428b      	cmp	r3, r1
   d7be2:	d004      	beq.n	d7bee <strnlen+0x14>
   d7be4:	781a      	ldrb	r2, [r3, #0]
   d7be6:	1c5c      	adds	r4, r3, #1
   d7be8:	b10a      	cbz	r2, d7bee <strnlen+0x14>
   d7bea:	4623      	mov	r3, r4
   d7bec:	e7f8      	b.n	d7be0 <strnlen+0x6>
   d7bee:	1a18      	subs	r0, r3, r0
   d7bf0:	bd10      	pop	{r4, pc}

000d7bf2 <strrchr>:
   d7bf2:	b538      	push	{r3, r4, r5, lr}
   d7bf4:	4603      	mov	r3, r0
   d7bf6:	460d      	mov	r5, r1
   d7bf8:	b141      	cbz	r1, d7c0c <strrchr+0x1a>
   d7bfa:	2400      	movs	r4, #0
   d7bfc:	4629      	mov	r1, r5
   d7bfe:	4618      	mov	r0, r3
   d7c00:	f7ff ffac 	bl	d7b5c <strchr>
   d7c04:	b130      	cbz	r0, d7c14 <strrchr+0x22>
   d7c06:	1c43      	adds	r3, r0, #1
   d7c08:	4604      	mov	r4, r0
   d7c0a:	e7f7      	b.n	d7bfc <strrchr+0xa>
   d7c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7c10:	f7ff bfa4 	b.w	d7b5c <strchr>
   d7c14:	4620      	mov	r0, r4
   d7c16:	bd38      	pop	{r3, r4, r5, pc}

000d7c18 <_strtol_r>:
   d7c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c1c:	4680      	mov	r8, r0
   d7c1e:	4840      	ldr	r0, [pc, #256]	; (d7d20 <_strtol_r+0x108>)
   d7c20:	f8d0 9000 	ldr.w	r9, [r0]
   d7c24:	460f      	mov	r7, r1
   d7c26:	463d      	mov	r5, r7
   d7c28:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7c2c:	eb09 0004 	add.w	r0, r9, r4
   d7c30:	7840      	ldrb	r0, [r0, #1]
   d7c32:	f000 0008 	and.w	r0, r0, #8
   d7c36:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7c3a:	b108      	cbz	r0, d7c40 <_strtol_r+0x28>
   d7c3c:	462f      	mov	r7, r5
   d7c3e:	e7f2      	b.n	d7c26 <_strtol_r+0xe>
   d7c40:	2c2d      	cmp	r4, #45	; 0x2d
   d7c42:	d103      	bne.n	d7c4c <_strtol_r+0x34>
   d7c44:	1cbd      	adds	r5, r7, #2
   d7c46:	787c      	ldrb	r4, [r7, #1]
   d7c48:	2601      	movs	r6, #1
   d7c4a:	e003      	b.n	d7c54 <_strtol_r+0x3c>
   d7c4c:	2c2b      	cmp	r4, #43	; 0x2b
   d7c4e:	bf04      	itt	eq
   d7c50:	787c      	ldrbeq	r4, [r7, #1]
   d7c52:	1cbd      	addeq	r5, r7, #2
   d7c54:	b113      	cbz	r3, d7c5c <_strtol_r+0x44>
   d7c56:	2b10      	cmp	r3, #16
   d7c58:	d10a      	bne.n	d7c70 <_strtol_r+0x58>
   d7c5a:	e05b      	b.n	d7d14 <_strtol_r+0xfc>
   d7c5c:	2c30      	cmp	r4, #48	; 0x30
   d7c5e:	d157      	bne.n	d7d10 <_strtol_r+0xf8>
   d7c60:	7828      	ldrb	r0, [r5, #0]
   d7c62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c66:	2858      	cmp	r0, #88	; 0x58
   d7c68:	d14d      	bne.n	d7d06 <_strtol_r+0xee>
   d7c6a:	786c      	ldrb	r4, [r5, #1]
   d7c6c:	2310      	movs	r3, #16
   d7c6e:	3502      	adds	r5, #2
   d7c70:	2e00      	cmp	r6, #0
   d7c72:	bf14      	ite	ne
   d7c74:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7c78:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7c7c:	2700      	movs	r7, #0
   d7c7e:	fbbc faf3 	udiv	sl, ip, r3
   d7c82:	4638      	mov	r0, r7
   d7c84:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7c88:	eb09 0e04 	add.w	lr, r9, r4
   d7c8c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7c90:	f01e 0f04 	tst.w	lr, #4
   d7c94:	d001      	beq.n	d7c9a <_strtol_r+0x82>
   d7c96:	3c30      	subs	r4, #48	; 0x30
   d7c98:	e00b      	b.n	d7cb2 <_strtol_r+0x9a>
   d7c9a:	f01e 0e03 	ands.w	lr, lr, #3
   d7c9e:	d01b      	beq.n	d7cd8 <_strtol_r+0xc0>
   d7ca0:	f1be 0f01 	cmp.w	lr, #1
   d7ca4:	bf0c      	ite	eq
   d7ca6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7caa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7cae:	ebce 0404 	rsb	r4, lr, r4
   d7cb2:	42a3      	cmp	r3, r4
   d7cb4:	dd10      	ble.n	d7cd8 <_strtol_r+0xc0>
   d7cb6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7cba:	d00a      	beq.n	d7cd2 <_strtol_r+0xba>
   d7cbc:	4550      	cmp	r0, sl
   d7cbe:	d806      	bhi.n	d7cce <_strtol_r+0xb6>
   d7cc0:	d101      	bne.n	d7cc6 <_strtol_r+0xae>
   d7cc2:	4564      	cmp	r4, ip
   d7cc4:	dc03      	bgt.n	d7cce <_strtol_r+0xb6>
   d7cc6:	fb03 4000 	mla	r0, r3, r0, r4
   d7cca:	2701      	movs	r7, #1
   d7ccc:	e001      	b.n	d7cd2 <_strtol_r+0xba>
   d7cce:	f04f 37ff 	mov.w	r7, #4294967295
   d7cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7cd6:	e7d7      	b.n	d7c88 <_strtol_r+0x70>
   d7cd8:	1c7b      	adds	r3, r7, #1
   d7cda:	d10c      	bne.n	d7cf6 <_strtol_r+0xde>
   d7cdc:	2e00      	cmp	r6, #0
   d7cde:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7ce2:	bf14      	ite	ne
   d7ce4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7ce8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7cec:	f8c8 3000 	str.w	r3, [r8]
   d7cf0:	b92a      	cbnz	r2, d7cfe <_strtol_r+0xe6>
   d7cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cf6:	b106      	cbz	r6, d7cfa <_strtol_r+0xe2>
   d7cf8:	4240      	negs	r0, r0
   d7cfa:	b172      	cbz	r2, d7d1a <_strtol_r+0x102>
   d7cfc:	b107      	cbz	r7, d7d00 <_strtol_r+0xe8>
   d7cfe:	1e69      	subs	r1, r5, #1
   d7d00:	6011      	str	r1, [r2, #0]
   d7d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d06:	2430      	movs	r4, #48	; 0x30
   d7d08:	2b00      	cmp	r3, #0
   d7d0a:	d1b1      	bne.n	d7c70 <_strtol_r+0x58>
   d7d0c:	2308      	movs	r3, #8
   d7d0e:	e7af      	b.n	d7c70 <_strtol_r+0x58>
   d7d10:	230a      	movs	r3, #10
   d7d12:	e7ad      	b.n	d7c70 <_strtol_r+0x58>
   d7d14:	2c30      	cmp	r4, #48	; 0x30
   d7d16:	d0a3      	beq.n	d7c60 <_strtol_r+0x48>
   d7d18:	e7aa      	b.n	d7c70 <_strtol_r+0x58>
   d7d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d1e:	bf00      	nop
   d7d20:	2003e2dc 	.word	0x2003e2dc

000d7d24 <strtol>:
   d7d24:	4613      	mov	r3, r2
   d7d26:	460a      	mov	r2, r1
   d7d28:	4601      	mov	r1, r0
   d7d2a:	4802      	ldr	r0, [pc, #8]	; (d7d34 <strtol+0x10>)
   d7d2c:	6800      	ldr	r0, [r0, #0]
   d7d2e:	f7ff bf73 	b.w	d7c18 <_strtol_r>
   d7d32:	bf00      	nop
   d7d34:	2003e340 	.word	0x2003e340

000d7d38 <dynalib_user>:
   d7d38:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7d48:	00000000                                ....

000d7d4c <_ZTVN5spark10LogHandlerE>:
	...
   d7d5c:	000d40a5 000d40c9                       .@...@..

000d7d64 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7d6c:	000d40d5 000d4109 000d69bd 000d40cb     .@...A...i...@..
   d7d7c:	62316335 64306139 6235622d 61342d65     5c1b9a0d-b5be-4a
   d7d8c:	382d3034 2d613766 33623636 61306436     40-8f7a-66b36d0a
   d7d9c:	36373135 63646600 33613466 66332d66     5176.fdcf4a3f-3f
   d7dac:	342d6465 2d326465 36653438 6234302d     ed-4ed2-84e6-04b
   d7dbc:	61396262 64343065 61620034 61745374     bb9ae04d4.batSta
   d7dcc:	63006574 63373963 2d633032 32323835     te.cc97c20c-5822
   d7ddc:	3038342d 64612d30 312d3565 31363666     -4800-ade5-1f661
   d7dec:	33313264 00656533 65776f70 756f5372     d2133ee.powerSou
   d7dfc:	00656372 32623264 33666236 3937392d     rce.d2b26bf3-979
   d7e0c:	32342d32 392d6366 2d613865 36663134     2-42fc-9e8a-41f6
   d7e1c:	64373031 63343066 74616200 6576654c     107df04c.batLeve
   d7e2c:	0000006c                                l...

000d7e30 <_ZTVN5spark13EthernetClassE>:
	...
   d7e38:	000d49b7 000d49ad 000d49a3 000d4999     .I...I...I...I..
   d7e48:	000d498d 000d4981 000d4975 000d496d     .I...I..uI..mI..
   d7e58:	000d4963 000d4959 000d72f5              cI..YI...r..

000d7e64 <_ZTV8SPIClass>:
	...
   d7e6c:	000d49d5 000d49d7                       .I...I..

000d7e74 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7e7c:	000d4b5b 000d4b61 000d5849 000d4b8b     [K..aK..IX...K..
   d7e8c:	000d4b5d                                ]K..

000d7e90 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7e98:	000d4b55 000d4b6f 000d5951 000d4b8f     UK..oK..QY...K..
   d7ea8:	000d4b57                                WK..

000d7eac <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7eb4:	000d4b4f 000d4b7d 000d5307 000d4b93     OK..}K...S...K..
   d7ec4:	000d4b51                                QK..

000d7ec8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d7ec8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d7ed8:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d7ee8:	73696420 65766f63 676e6972 72657320      discovering ser
   d7ef8:	65636976 53002e73 74726174 73696420     vices..Start dis
   d7f08:	65766f63 676e6972 61686320 74636172     covering charact
   d7f18:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d7f28:	63697665 73692065 73696d20 676e6973     evice is missing
   d7f38:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d7f48:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d7f58:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d7f68:	79622064 6e654320 6c617274 76656420     d by Central dev
   d7f78:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d7f88:	79622064 6d657220 2065746f 69766564     d by remote devi
   d7f98:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d7fa8:	70207765 20726565 69766564 002e6563     ew peer device..
   d7fb8:	2077654e 69726570 72656870 69206c61     New peripheral i
   d7fc8:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d7fd8:	2064656c 61206f74 6e657070 69642064     led to append di
   d7fe8:	766f6373 64657265 61686320 74636172     scovered charact
   d7ff8:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d8008:	61206f74 6e657070 69642064 766f6373     to append discov
   d8018:	64657265 72657320 65636976 6146002e     ered service..Fa
   d8028:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d8038:	6c61636f 61686320 74636172 73697265     ocal characteris
   d8048:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d8058:	72616863 65746361 74736972 63206369     characteristic c
   d8068:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d8078 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8080:	000d5d9f 000d5dc5 000d5d79 000d7403     .]...]..y]...t..

000d8090 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d8098:	000d621d 000d6231 000d6b71 000d5d81     .b..1b..qk...]..

000d80a8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d80b0:	000d5d9b 000d5de1 000d6135 000d5def     .]...]..5a...]..
   d80c0:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d80d0:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d80e0:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d80f0:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d8100:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d8110:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d8120:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d8130:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d8140:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
   d8150:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d8160:	203d2073 000a0d00 6e6c0066 006e6600     s = ....f.ln.fn.
   d8170:	65646f63 74656400 006c6961 656e6f6e     code.detail.none
   d8180:	61727400 69006563 006f666e 6e726177     .trace.info.warn
   d8190:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
   d81a0:	00000000                                ....

000d81a4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d81ac:	000d61f1 000d6209 000d69bd 000d40cb     .a...b...i...@..

000d81bc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d81c4:	000d5d9d 000d5dd3 000d68e5 000d5d83     .]...]...h...]..
   d81d4:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d81e4:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d81f4:	63736100 656d6974 00000000              .asctime....

000d8200 <_ZTV9IPAddress>:
	...
   d8208:	000d6e2d 000d6e1d 000d6e1f              -n...n...n..

000d8214 <_ZTV9USBSerial>:
	...
   d821c:	000d6f05 000d6f55 000d6f63 000d5c3d     .o..Uo..co..=\..
   d822c:	000d6f41 000d6f07 000d6f1d 000d6f4f     Ao...o...o..Oo..
   d823c:	000d6f33 000d6f01                       3o...o..

000d8244 <_ZTV11USARTSerial>:
	...
   d824c:	000d7019 000d7069 000d7077 000d5c3d     .p..ip..wp..=\..
   d825c:	000d702d 000d704f 000d703b 000d7063     -p..Op..;p..cp..
   d826c:	000d701b 000d701f                       .p...p..

000d8274 <_ZTVN5spark9MeshClassE>:
	...
   d827c:	000d7187 000d717d 000d7173 000d7169     .q..}q..sq..iq..
   d828c:	000d715d 000d7151 000d7145 000d713d     ]q..Qq..Eq..=q..
   d829c:	000d7133 000d7129 000d72f5              3q..)q...r..

000d82a8 <_ZTVN5spark12NetworkClassE>:
	...
   d82b0:	000d728d 000d7297 000d72a1 000d72ab     .r...r...r...r..
   d82c0:	000d72b5 000d72c1 000d72cd 000d72d9     .r...r...r...r..
   d82d0:	000d72e1 000d72eb 000d72f5 00302e30     .r...r...r..0.0.
   d82e0:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d82f0:	6c756e00 2575006c 00783430              .null.u%04x.

000d82fc <_ZSt7nothrow>:
	...

000d82fd <_ctype_>:
   d82fd:	20202000 20202020 28282020 20282828     .         ((((( 
   d830d:	20202020 20202020 20202020 20202020                     
   d831d:	10108820 10101010 10101010 10101010      ...............
   d832d:	04040410 04040404 10040404 10101010     ................
   d833d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d834d:	01010101 01010101 01010101 10101010     ................
   d835d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d836d:	02020202 02020202 02020202 10101010     ................
   d837d:	00000020 00000000 00000000 00000000      ...............
	...

000d8400 <__sf_fake_stdin>:
	...

000d8420 <__sf_fake_stdout>:
	...

000d8440 <__sf_fake_stderr>:
	...
   d8460:	00000043                                         C.

000d8462 <link_const_variable_data_end>:
	...

000d8464 <link_constructors_location>:
   d8464:	000d436d 	.word	0x000d436d
   d8468:	000d44f9 	.word	0x000d44f9
   d846c:	000d49c1 	.word	0x000d49c1
   d8470:	000d4a0d 	.word	0x000d4a0d
   d8474:	000d5c2d 	.word	0x000d5c2d
   d8478:	000d69ad 	.word	0x000d69ad
   d847c:	000d6ce9 	.word	0x000d6ce9
   d8480:	000d6d1d 	.word	0x000d6d1d
   d8484:	000d723d 	.word	0x000d723d
   d8488:	000d73c1 	.word	0x000d73c1
   d848c:	000d7761 	.word	0x000d7761
   d8490:	000d77e5 	.word	0x000d77e5
   d8494:	000d7869 	.word	0x000d7869
   d8498:	000d792d 	.word	0x000d792d
   d849c:	000d79f1 	.word	0x000d79f1
