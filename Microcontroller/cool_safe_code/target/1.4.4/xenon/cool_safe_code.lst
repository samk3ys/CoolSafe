
a:/Documents/Programming/GitHub/CoolSafe/Microcontroller/cool_safe_code/target/1.4.4/xenon/cool_safe_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f34  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001804c  2**0
                  CONTENTS
  4 .data         000000d0  2003e2b8  000d7f50  0000e2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000468  2003e388  2003e388  0001e388  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8020  000d8020  00018020  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8048  000d8048  00018048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1c36  00000000  00000000  0001804c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011128  00000000  00000000  000e9c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001da73  00000000  00000000  000fadaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002878  00000000  00000000  0011881d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004738  00000000  00000000  0011b095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000382e6  00000000  00000000  0011f7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002af67  00000000  00000000  00157ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffee3  00000000  00000000  00182a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d318  00000000  00000000  00282900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fac0 	bl	d75b2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fae0 	bl	d75fe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2b8 	.word	0x2003e2b8
   d4048:	000d7f50 	.word	0x000d7f50
   d404c:	2003e388 	.word	0x2003e388
   d4050:	2003e388 	.word	0x2003e388
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd3b 	bl	d6ad4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7f48 	.word	0x000d7f48
   d4080:	000d7f08 	.word	0x000d7f08

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba22 	b.w	d44cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 faa7 	bl	d45dc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bced 	b.w	d6a70 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 ba5f 	b.w	d5558 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 ba5d 	b.w	d5558 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 ba63 	b.w	d5568 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 ba61 	b.w	d5568 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z4playiiPiS_>:
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40bc:	f8df b048 	ldr.w	fp, [pc, #72]	; d4108 <_Z4playiiPiS_+0x50>
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40c0:	460f      	mov	r7, r1
   d40c2:	4690      	mov	r8, r2
   d40c4:	4699      	mov	r9, r3
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40c6:	2400      	movs	r4, #0
   d40c8:	b2c6      	uxtb	r6, r0

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40ca:	f44f 7a16 	mov.w	sl, #600	; 0x258

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40ce:	42bc      	cmp	r4, r7
   d40d0:	da15      	bge.n	d40fe <_Z4playiiPiS_+0x46>

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40d2:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40d6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
   d40da:	fb9a f5f5 	sdiv	r5, sl, r5
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40de:	b109      	cbz	r1, d40e4 <_Z4playiiPiS_+0x2c>
   d40e0:	fb9b f1f1 	sdiv	r1, fp, r1
   d40e4:	f1a5 0214 	sub.w	r2, r5, #20
   d40e8:	4630      	mov	r0, r6
   d40ea:	f002 fe03 	bl	d6cf4 <tone>

    // blocking delay needed because tone() does not block
    delay(noteDuration);
   d40ee:	4628      	mov	r0, r5
   d40f0:	f002 fc46 	bl	d6980 <delay>

    noTone(speakerPin);
   d40f4:	4630      	mov	r0, r6
   d40f6:	f002 fe14 	bl	d6d22 <noTone>

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40fa:	3401      	adds	r4, #1
   d40fc:	e7e7      	b.n	d40ce <_Z4playiiPiS_+0x16>
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d40fe:	4630      	mov	r0, r6
   d4100:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d4104:	f002 be0d 	b.w	d6d22 <noTone>
   d4108:	0007a120 	.word	0x0007a120

000d410c <_GLOBAL__sub_I__Z4playiiPiS_>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d410c:	f000 bf8e 	b.w	d502c <HAL_Pin_Map>

000d4110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
int badSound[]      = {NOTE_G3, NOTE_E3, NOTE_C3};                              // plays when access to the lock-bin is denied
int badDuration[]   = {4, 4, 1};


// Function called when the app sends data through TxBLE to this device
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4110:	b538      	push	{r3, r4, r5, lr}
   d4112:	4604      	mov	r4, r0
  // when data for when data is recieved through the RxBLE characteristic
  const char * dataChars = (char *) data;
  Serial.write(dataChars);
   d4114:	f002 fdc8 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4118:	4605      	mov	r5, r0
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d411a:	b144      	cbz	r4, d412e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d411c:	4620      	mov	r0, r4
   d411e:	f003 fa9f 	bl	d7660 <strlen>
   d4122:	682b      	ldr	r3, [r5, #0]
   d4124:	4602      	mov	r2, r0
   d4126:	68db      	ldr	r3, [r3, #12]
   d4128:	4621      	mov	r1, r4
   d412a:	4628      	mov	r0, r5
   d412c:	4798      	blx	r3
  Serial.write('\n');
   d412e:	f002 fdbb 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4132:	6803      	ldr	r3, [r0, #0]
   d4134:	210a      	movs	r1, #10
   d4136:	689b      	ldr	r3, [r3, #8]
   d4138:	4798      	blx	r3

  char operationID = data[0];

  switch (operationID) {
   d413a:	7823      	ldrb	r3, [r4, #0]
   d413c:	2b62      	cmp	r3, #98	; 0x62
   d413e:	d008      	beq.n	d4152 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
   d4140:	2b63      	cmp	r3, #99	; 0x63
   d4142:	d00a      	beq.n	d415a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
   d4144:	2b61      	cmp	r3, #97	; 0x61
    case 'a':
      RGB.color(100, 0, 0);
   d4146:	f04f 0200 	mov.w	r2, #0
  Serial.write(dataChars);
  Serial.write('\n');

  char operationID = data[0];

  switch (operationID) {
   d414a:	d109      	bne.n	d4160 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>
    case 'a':
      RGB.color(100, 0, 0);
   d414c:	4611      	mov	r1, r2
   d414e:	2064      	movs	r0, #100	; 0x64
   d4150:	e008      	b.n	d4164 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
      break;
    case 'b':
      RGB.color(0, 100, 0);
   d4152:	2200      	movs	r2, #0
   d4154:	2164      	movs	r1, #100	; 0x64
   d4156:	4610      	mov	r0, r2
   d4158:	e004      	b.n	d4164 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
      break;
    case 'c':
      RGB.color(0, 0, 100);
   d415a:	2264      	movs	r2, #100	; 0x64
   d415c:	2100      	movs	r1, #0
   d415e:	e000      	b.n	d4162 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      break;
    default:
      RGB.color(255, 255, 0);
   d4160:	21ff      	movs	r1, #255	; 0xff
   d4162:	4608      	mov	r0, r1
  // Hex code in to change LED color
  //uint8_t red = dataToHex(data[0], data[1]);
  //uint8_t green = dataToHex(data[2], data[3]);
  //uint8_t blue = dataToHex(data[4], data[5]);
  //RGB.color(red, green, blue);
}
   d4164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      break;
    case 'c':
      RGB.color(0, 0, 100);
      break;
    default:
      RGB.color(255, 255, 0);
   d4168:	f002 bc2c 	b.w	d69c4 <_ZN8RGBClass5colorEiii>

000d416c <_Z12goodFeedbackv>:
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
}

void goodFeedback() {
   d416c:	b508      	push	{r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
   d416e:	2101      	movs	r1, #1
   d4170:	2006      	movs	r0, #6
   d4172:	f003 f842 	bl	d71fa <digitalWrite>
  RGB.color(0, 255, 0);                                         // on-board green light
   d4176:	2200      	movs	r2, #0
   d4178:	4610      	mov	r0, r2
   d417a:	21ff      	movs	r1, #255	; 0xff
   d417c:	f002 fc22 	bl	d69c4 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
   d4180:	4b08      	ldr	r3, [pc, #32]	; (d41a4 <_Z12goodFeedbackv+0x38>)
   d4182:	4a09      	ldr	r2, [pc, #36]	; (d41a8 <_Z12goodFeedbackv+0x3c>)
   d4184:	2103      	movs	r1, #3
   d4186:	2013      	movs	r0, #19
   d4188:	f7ff ff96 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(greenLED, LOW);                                  // turn lights back off
   d418c:	2100      	movs	r1, #0
   d418e:	2006      	movs	r0, #6
   d4190:	f003 f833 	bl	d71fa <digitalWrite>
  RGB.color(0, 0, 0);
   d4194:	2200      	movs	r2, #0
   d4196:	4611      	mov	r1, r2
   d4198:	4610      	mov	r0, r2
}
   d419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
  RGB.color(0, 255, 0);                                         // on-board green light
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
   d419e:	f002 bc11 	b.w	d69c4 <_ZN8RGBClass5colorEiii>
   d41a2:	bf00      	nop
   d41a4:	2003e310 	.word	0x2003e310
   d41a8:	2003e304 	.word	0x2003e304

000d41ac <_Z7openBinv>:
  //uint8_t green = dataToHex(data[2], data[3]);
  //uint8_t blue = dataToHex(data[4], data[5]);
  //RGB.color(red, green, blue);
}

void openBin() {
   d41ac:	b508      	push	{r3, lr}
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(relay, HIGH);        // Unlock the bin
   d41ae:	2101      	movs	r1, #1
   d41b0:	200f      	movs	r0, #15
   d41b2:	f003 f822 	bl	d71fa <digitalWrite>
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
   d41b6:	f7ff ffd9 	bl	d416c <_Z12goodFeedbackv>
  delay(unlockTime);                // How long the solenoid stays pulled in
   d41ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41be:	f002 fbdf 	bl	d6980 <delay>
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
   d41c2:	2100      	movs	r1, #0
   d41c4:	200f      	movs	r0, #15
}
   d41c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void openBin() {
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(relay, HIGH);        // Unlock the bin
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
   d41ca:	f003 b816 	b.w	d71fa <digitalWrite>
	...

000d41d0 <_Z11badFeedbackv>:
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
}

void badFeedback() {
   d41d0:	b508      	push	{r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
   d41d2:	2101      	movs	r1, #1
   d41d4:	2008      	movs	r0, #8
   d41d6:	f003 f810 	bl	d71fa <digitalWrite>
  RGB.color(255, 0, 0);                                         // on-board red light
   d41da:	2200      	movs	r2, #0
   d41dc:	4611      	mov	r1, r2
   d41de:	20ff      	movs	r0, #255	; 0xff
   d41e0:	f002 fbf0 	bl	d69c4 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
   d41e4:	4b08      	ldr	r3, [pc, #32]	; (d4208 <_Z11badFeedbackv+0x38>)
   d41e6:	4a09      	ldr	r2, [pc, #36]	; (d420c <_Z11badFeedbackv+0x3c>)
   d41e8:	2103      	movs	r1, #3
   d41ea:	2013      	movs	r0, #19
   d41ec:	f7ff ff64 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(redLED, LOW);                                    // turn lights back off
   d41f0:	2100      	movs	r1, #0
   d41f2:	2008      	movs	r0, #8
   d41f4:	f003 f801 	bl	d71fa <digitalWrite>
  RGB.color(0, 0, 0);
   d41f8:	2200      	movs	r2, #0
   d41fa:	4611      	mov	r1, r2
   d41fc:	4610      	mov	r0, r2
}
   d41fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
  RGB.color(255, 0, 0);                                         // on-board red light
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
  digitalWrite(redLED, LOW);                                    // turn lights back off
  RGB.color(0, 0, 0);
   d4202:	f002 bbdf 	b.w	d69c4 <_ZN8RGBClass5colorEiii>
   d4206:	bf00      	nop
   d4208:	2003e2f8 	.word	0x2003e2f8
   d420c:	2003e2ec 	.word	0x2003e2ec

000d4210 <_Z12identifyUserv>:
}

int identifyUser() {
   d4210:	b510      	push	{r4, lr}
  // Once a finger is detected then identify a user with the FPS
  fps.CaptureFinger(false);   // take a low quality image (faster)
   d4212:	2100      	movs	r1, #0
   d4214:	480f      	ldr	r0, [pc, #60]	; (d4254 <_Z12identifyUserv+0x44>)
   d4216:	f000 febf 	bl	d4f98 <_ZN11FPS_GT511C313CaptureFingerEb>
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d421a:	480e      	ldr	r0, [pc, #56]	; (d4254 <_Z12identifyUserv+0x44>)
   d421c:	f000 fe8a 	bl	d4f34 <_ZN11FPS_GT511C311Identify1_NEv>

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d4220:	28c7      	cmp	r0, #199	; 0xc7
}

int identifyUser() {
  // Once a finger is detected then identify a user with the FPS
  fps.CaptureFinger(false);   // take a low quality image (faster)
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d4222:	4604      	mov	r4, r0

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d4224:	d80d      	bhi.n	d4242 <_Z12identifyUserv+0x32>
    Serial.print("Verified ID:");
   d4226:	f002 fd3f 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d422a:	490b      	ldr	r1, [pc, #44]	; (d4258 <_Z12identifyUserv+0x48>)
   d422c:	f002 fb14 	bl	d6858 <_ZN5Print5printEPKc>
    Serial.println(id);
   d4230:	f002 fd3a 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4234:	220a      	movs	r2, #10
   d4236:	4621      	mov	r1, r4
   d4238:	f002 fb86 	bl	d6948 <_ZN5Print7printlnEii>
    openBin();  // Allow access. Includes good feedback
   d423c:	f7ff ffb6 	bl	d41ac <_Z7openBinv>
   d4240:	e006      	b.n	d4250 <_Z12identifyUserv+0x40>
  }
  else {//if unable to recognize
    Serial.println("Finger not found");
   d4242:	f002 fd31 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4246:	4905      	ldr	r1, [pc, #20]	; (d425c <_Z12identifyUserv+0x4c>)
   d4248:	f002 fb19 	bl	d687e <_ZN5Print7printlnEPKc>
    badFeedback();  // Deny access
   d424c:	f7ff ffc0 	bl	d41d0 <_Z11badFeedbackv>
  }

  return id;  // Return id of the user from the FPS
}
   d4250:	4620      	mov	r0, r4
   d4252:	bd10      	pop	{r4, pc}
   d4254:	2003e3c0 	.word	0x2003e3c0
   d4258:	000d769c 	.word	0x000d769c
   d425c:	000d76a9 	.word	0x000d76a9

000d4260 <_Z10enrollUserv>:

bool enrollUser() {
   d4260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Enroll a new fingerprint for the scanner. Returns true if successful. Returns false if timed out or error.

  // Signal to users that the system is busy. Normal functions won't work at this time
  digitalWrite(busyLED, HIGH);
   d4262:	2101      	movs	r1, #1
   d4264:	2007      	movs	r0, #7
   d4266:	f002 ffc8 	bl	d71fa <digitalWrite>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d426a:	f000 ff2f 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d426e:	4d74      	ldr	r5, [pc, #464]	; (d4440 <_Z10enrollUserv+0x1e0>)

  // find open enroll id
  int enrollid = 0;
   d4270:	2400      	movs	r4, #0

  // Signal to users that the system is busy. Normal functions won't work at this time
  digitalWrite(busyLED, HIGH);

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d4272:	6028      	str	r0, [r5, #0]

  // find open enroll id
  int enrollid = 0;
  bool usedid = true;
  while (usedid == true) {
    usedid = fps.CheckEnrolled(enrollid);
   d4274:	4621      	mov	r1, r4
   d4276:	4873      	ldr	r0, [pc, #460]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4278:	f000 fcf2 	bl	d4c60 <_ZN11FPS_GT511C313CheckEnrolledEi>
    if (usedid==true) enrollid++;
   d427c:	b108      	cbz	r0, d4282 <_Z10enrollUserv+0x22>
   d427e:	3401      	adds	r4, #1
   d4280:	e7f8      	b.n	d4274 <_Z10enrollUserv+0x14>
  }
  fps.EnrollStart(enrollid);
   d4282:	4621      	mov	r1, r4
   d4284:	486f      	ldr	r0, [pc, #444]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4286:	f000 fd19 	bl	d4cbc <_ZN11FPS_GT511C311EnrollStartEi>

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
   d428a:	f002 fd0d 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d428e:	496e      	ldr	r1, [pc, #440]	; (d4448 <_Z10enrollUserv+0x1e8>)
   d4290:	f002 fae2 	bl	d6858 <_ZN5Print5printEPKc>
  Serial.println(enrollid);
   d4294:	f002 fd08 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4298:	4621      	mov	r1, r4
   d429a:	220a      	movs	r2, #10
   d429c:	f002 fb54 	bl	d6948 <_ZN5Print7printlnEii>
  while(fps.IsPressFinger() == false) {
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d42a0:	f64e 245f 	movw	r4, #59999	; 0xea5f
  fps.EnrollStart(enrollid);

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
   d42a4:	4867      	ldr	r0, [pc, #412]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d42a6:	f000 fe19 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d42aa:	b978      	cbnz	r0, d42cc <_Z10enrollUserv+0x6c>
   d42ac:	f000 ff0e 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d42b0:	682b      	ldr	r3, [r5, #0]
   d42b2:	1ac0      	subs	r0, r0, r3
   d42b4:	42a0      	cmp	r0, r4
   d42b6:	d905      	bls.n	d42c4 <_Z10enrollUserv+0x64>
      digitalWrite(busyLED, LOW);
   d42b8:	2100      	movs	r1, #0
   d42ba:	2007      	movs	r0, #7
   d42bc:	f002 ff9d 	bl	d71fa <digitalWrite>
      return false; // exit w/ timeout function if we've been here for too long
   d42c0:	2400      	movs	r4, #0
   d42c2:	e0ba      	b.n	d443a <_Z10enrollUserv+0x1da>
    }
    delay(100);
   d42c4:	2064      	movs	r0, #100	; 0x64
   d42c6:	f002 fb5b 	bl	d6980 <delay>
  fps.EnrollStart(enrollid);

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
   d42ca:	e7eb      	b.n	d42a4 <_Z10enrollUserv+0x44>
      digitalWrite(busyLED, LOW);
      return false; // exit w/ timeout function if we've been here for too long
    }
    delay(100);
  }
  bool bret = fps.CaptureFinger(true);  // true = use high quality scan
   d42cc:	2101      	movs	r1, #1
   d42ce:	485d      	ldr	r0, [pc, #372]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d42d0:	f000 fe62 	bl	d4f98 <_ZN11FPS_GT511C313CaptureFingerEb>
  int iret = 0;
  if (bret != false) {
   d42d4:	4604      	mov	r4, r0
   d42d6:	2800      	cmp	r0, #0
   d42d8:	f000 80a4 	beq.w	d4424 <_Z10enrollUserv+0x1c4>
    // Successful first scan
    goodFeedback();
   d42dc:	f7ff ff46 	bl	d416c <_Z12goodFeedbackv>
    Serial.println("Remove finger");
   d42e0:	f002 fce2 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d42e4:	4959      	ldr	r1, [pc, #356]	; (d444c <_Z10enrollUserv+0x1ec>)
   d42e6:	f002 faca 	bl	d687e <_ZN5Print7printlnEPKc>
    fps.Enroll1(); 
   d42ea:	4856      	ldr	r0, [pc, #344]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d42ec:	f000 fd2a 	bl	d4d44 <_ZN11FPS_GT511C37Enroll1Ev>
    while(fps.IsPressFinger() == true) delay(100);
   d42f0:	4854      	ldr	r0, [pc, #336]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d42f2:	f000 fdf3 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d42f6:	4604      	mov	r4, r0
   d42f8:	b118      	cbz	r0, d4302 <_Z10enrollUserv+0xa2>
   d42fa:	2064      	movs	r0, #100	; 0x64
   d42fc:	f002 fb40 	bl	d6980 <delay>
   d4300:	e7f6      	b.n	d42f0 <_Z10enrollUserv+0x90>
    Serial.println("Press same finger again");
   d4302:	f002 fcd1 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4306:	4952      	ldr	r1, [pc, #328]	; (d4450 <_Z10enrollUserv+0x1f0>)
   d4308:	f002 fab9 	bl	d687e <_ZN5Print7printlnEPKc>
    while(fps.IsPressFinger() == false) {
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d430c:	f64e 265f 	movw	r6, #59999	; 0xea5f
    goodFeedback();
    Serial.println("Remove finger");
    fps.Enroll1(); 
    while(fps.IsPressFinger() == true) delay(100);
    Serial.println("Press same finger again");
    while(fps.IsPressFinger() == false) {
   d4310:	484c      	ldr	r0, [pc, #304]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4312:	f000 fde3 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d4316:	b948      	cbnz	r0, d432c <_Z10enrollUserv+0xcc>
   d4318:	f000 fed8 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d431c:	682b      	ldr	r3, [r5, #0]
   d431e:	1ac0      	subs	r0, r0, r3
   d4320:	42b0      	cmp	r0, r6
   d4322:	d8c9      	bhi.n	d42b8 <_Z10enrollUserv+0x58>
        digitalWrite(busyLED, LOW);
        return false; // exit w/ timeout function if we've been here for too long
      }
      delay(100);
   d4324:	2064      	movs	r0, #100	; 0x64
   d4326:	f002 fb2b 	bl	d6980 <delay>
    goodFeedback();
    Serial.println("Remove finger");
    fps.Enroll1(); 
    while(fps.IsPressFinger() == true) delay(100);
    Serial.println("Press same finger again");
    while(fps.IsPressFinger() == false) {
   d432a:	e7f1      	b.n	d4310 <_Z10enrollUserv+0xb0>
        digitalWrite(busyLED, LOW);
        return false; // exit w/ timeout function if we've been here for too long
      }
      delay(100);
    }
    bret = fps.CaptureFinger(true);
   d432c:	2101      	movs	r1, #1
   d432e:	4845      	ldr	r0, [pc, #276]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4330:	f000 fe32 	bl	d4f98 <_ZN11FPS_GT511C313CaptureFingerEb>
    if (bret != false) {
   d4334:	4606      	mov	r6, r0
   d4336:	2800      	cmp	r0, #0
   d4338:	d06b      	beq.n	d4412 <_Z10enrollUserv+0x1b2>
      // Successful second scan
      goodFeedback();
   d433a:	f7ff ff17 	bl	d416c <_Z12goodFeedbackv>
      Serial.println("Remove finger");
   d433e:	f002 fcb3 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4342:	4942      	ldr	r1, [pc, #264]	; (d444c <_Z10enrollUserv+0x1ec>)
   d4344:	f002 fa9b 	bl	d687e <_ZN5Print7printlnEPKc>
      fps.Enroll2();
   d4348:	483e      	ldr	r0, [pc, #248]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d434a:	f000 fd3f 	bl	d4dcc <_ZN11FPS_GT511C37Enroll2Ev>
      while(fps.IsPressFinger() == true) delay(100);
   d434e:	483d      	ldr	r0, [pc, #244]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4350:	f000 fdc4 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d4354:	4604      	mov	r4, r0
   d4356:	b118      	cbz	r0, d4360 <_Z10enrollUserv+0x100>
   d4358:	2064      	movs	r0, #100	; 0x64
   d435a:	f002 fb11 	bl	d6980 <delay>
   d435e:	e7f6      	b.n	d434e <_Z10enrollUserv+0xee>
      Serial.println("Press same finger yet again");
   d4360:	f002 fca2 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4364:	493b      	ldr	r1, [pc, #236]	; (d4454 <_Z10enrollUserv+0x1f4>)
   d4366:	f002 fa8a 	bl	d687e <_ZN5Print7printlnEPKc>
      while(fps.IsPressFinger() == false)  {
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d436a:	f64e 275f 	movw	r7, #59999	; 0xea5f
      goodFeedback();
      Serial.println("Remove finger");
      fps.Enroll2();
      while(fps.IsPressFinger() == true) delay(100);
      Serial.println("Press same finger yet again");
      while(fps.IsPressFinger() == false)  {
   d436e:	4835      	ldr	r0, [pc, #212]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4370:	f000 fdb4 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d4374:	4606      	mov	r6, r0
   d4376:	b948      	cbnz	r0, d438c <_Z10enrollUserv+0x12c>
   d4378:	f000 fea8 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d437c:	682b      	ldr	r3, [r5, #0]
   d437e:	1ac0      	subs	r0, r0, r3
   d4380:	42b8      	cmp	r0, r7
   d4382:	d899      	bhi.n	d42b8 <_Z10enrollUserv+0x58>
          digitalWrite(busyLED, LOW);
          return false; // exit w/ timeout function if we've been here for too long
        }
        delay(100);
   d4384:	2064      	movs	r0, #100	; 0x64
   d4386:	f002 fafb 	bl	d6980 <delay>
      goodFeedback();
      Serial.println("Remove finger");
      fps.Enroll2();
      while(fps.IsPressFinger() == true) delay(100);
      Serial.println("Press same finger yet again");
      while(fps.IsPressFinger() == false)  {
   d438a:	e7f0      	b.n	d436e <_Z10enrollUserv+0x10e>
          digitalWrite(busyLED, LOW);
          return false; // exit w/ timeout function if we've been here for too long
        }
        delay(100);
      }
      bret = fps.CaptureFinger(true);
   d438c:	2101      	movs	r1, #1
   d438e:	482d      	ldr	r0, [pc, #180]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d4390:	f000 fe02 	bl	d4f98 <_ZN11FPS_GT511C313CaptureFingerEb>
      if (bret != false) {
   d4394:	4605      	mov	r5, r0
   d4396:	b398      	cbz	r0, d4400 <_Z10enrollUserv+0x1a0>
        // Successful third scan
        goodFeedback();
   d4398:	f7ff fee8 	bl	d416c <_Z12goodFeedbackv>
        Serial.println("Remove finger");
   d439c:	f002 fc84 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d43a0:	492a      	ldr	r1, [pc, #168]	; (d444c <_Z10enrollUserv+0x1ec>)
   d43a2:	f002 fa6c 	bl	d687e <_ZN5Print7printlnEPKc>
        iret = fps.Enroll3();
   d43a6:	4827      	ldr	r0, [pc, #156]	; (d4444 <_Z10enrollUserv+0x1e4>)
   d43a8:	f000 fd54 	bl	d4e54 <_ZN11FPS_GT511C37Enroll3Ev>
        if (iret == 0) {
   d43ac:	4605      	mov	r5, r0
   d43ae:	b9c0      	cbnz	r0, d43e2 <_Z10enrollUserv+0x182>
          // All scans successful
          //goodFeedback();
          digitalWrite(greenLED, HIGH);
   d43b0:	2101      	movs	r1, #1
   d43b2:	2006      	movs	r0, #6
   d43b4:	f002 ff21 	bl	d71fa <digitalWrite>
          play(buzzer, arraySize(startDuration), startSound, startDuration);
   d43b8:	4b27      	ldr	r3, [pc, #156]	; (d4458 <_Z10enrollUserv+0x1f8>)
   d43ba:	4a28      	ldr	r2, [pc, #160]	; (d445c <_Z10enrollUserv+0x1fc>)
   d43bc:	2106      	movs	r1, #6
   d43be:	2013      	movs	r0, #19
   d43c0:	f7ff fe7a 	bl	d40b8 <_Z4playiiPiS_>
          digitalWrite(greenLED, LOW);
   d43c4:	4629      	mov	r1, r5
   d43c6:	2006      	movs	r0, #6
   d43c8:	f002 ff17 	bl	d71fa <digitalWrite>
          Serial.println("Enrolling Successful");
   d43cc:	f002 fc6c 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d43d0:	4923      	ldr	r1, [pc, #140]	; (d4460 <_Z10enrollUserv+0x200>)
   d43d2:	f002 fa54 	bl	d687e <_ZN5Print7printlnEPKc>
    digitalWrite(busyLED, LOW);
    return false; // stop w/ failure
  }

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
   d43d6:	4629      	mov	r1, r5
   d43d8:	2007      	movs	r0, #7
   d43da:	f002 ff0e 	bl	d71fa <digitalWrite>
  return true;  // exit w/ success
   d43de:	4634      	mov	r4, r6
   d43e0:	e02b      	b.n	d443a <_Z10enrollUserv+0x1da>
          digitalWrite(greenLED, LOW);
          Serial.println("Enrolling Successful");
        }
        else {
          // Something went wrong
          badFeedback();
   d43e2:	f7ff fef5 	bl	d41d0 <_Z11badFeedbackv>
          Serial.print("Enrolling Failed with error code:");
   d43e6:	f002 fc5f 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d43ea:	491e      	ldr	r1, [pc, #120]	; (d4464 <_Z10enrollUserv+0x204>)
   d43ec:	f002 fa34 	bl	d6858 <_ZN5Print5printEPKc>
          Serial.println(iret);
   d43f0:	f002 fc5a 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d43f4:	4629      	mov	r1, r5
   d43f6:	220a      	movs	r2, #10
   d43f8:	f002 faa6 	bl	d6948 <_ZN5Print7printlnEii>
          digitalWrite(busyLED, LOW);
   d43fc:	2100      	movs	r1, #0
   d43fe:	e019      	b.n	d4434 <_Z10enrollUserv+0x1d4>
          return false; // stop w/ failure
        }
      }
      else {
        badFeedback();
   d4400:	f7ff fee6 	bl	d41d0 <_Z11badFeedbackv>
        Serial.println("Failed to capture third finger");
   d4404:	f002 fc50 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4408:	4917      	ldr	r1, [pc, #92]	; (d4468 <_Z10enrollUserv+0x208>)
   d440a:	f002 fa38 	bl	d687e <_ZN5Print7printlnEPKc>
        digitalWrite(busyLED, LOW);
   d440e:	4629      	mov	r1, r5
   d4410:	e010      	b.n	d4434 <_Z10enrollUserv+0x1d4>
        return false; // stop w/ failure
      }
    }
    else {
      badFeedback();
   d4412:	f7ff fedd 	bl	d41d0 <_Z11badFeedbackv>
      Serial.println("Failed to capture second finger");
   d4416:	f002 fc47 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d441a:	4914      	ldr	r1, [pc, #80]	; (d446c <_Z10enrollUserv+0x20c>)
   d441c:	f002 fa2f 	bl	d687e <_ZN5Print7printlnEPKc>
      digitalWrite(busyLED, LOW);
   d4420:	4631      	mov	r1, r6
   d4422:	e007      	b.n	d4434 <_Z10enrollUserv+0x1d4>
      return false; // stop w/ failure
    }
  }
  else {
    badFeedback();
   d4424:	f7ff fed4 	bl	d41d0 <_Z11badFeedbackv>
    Serial.println("Failed to capture first finger");
   d4428:	f002 fc3e 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d442c:	4910      	ldr	r1, [pc, #64]	; (d4470 <_Z10enrollUserv+0x210>)
   d442e:	f002 fa26 	bl	d687e <_ZN5Print7printlnEPKc>
    digitalWrite(busyLED, LOW);
   d4432:	4621      	mov	r1, r4
   d4434:	2007      	movs	r0, #7
   d4436:	f002 fee0 	bl	d71fa <digitalWrite>
  }

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
  return true;  // exit w/ success
}
   d443a:	4620      	mov	r0, r4
   d443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d443e:	bf00      	nop
   d4440:	2003e3bc 	.word	0x2003e3bc
   d4444:	2003e3c0 	.word	0x2003e3c0
   d4448:	000d7791 	.word	0x000d7791
   d444c:	000d76ba 	.word	0x000d76ba
   d4450:	000d76c8 	.word	0x000d76c8
   d4454:	000d76e0 	.word	0x000d76e0
   d4458:	2003e2b8 	.word	0x2003e2b8
   d445c:	2003e2d0 	.word	0x2003e2d0
   d4460:	000d76fc 	.word	0x000d76fc
   d4464:	000d7711 	.word	0x000d7711
   d4468:	000d7733 	.word	0x000d7733
   d446c:	000d7752 	.word	0x000d7752
   d4470:	000d7772 	.word	0x000d7772

000d4474 <_Z11LEDsequencev>:

void LEDsequence() {
   d4474:	b508      	push	{r3, lr}
  // Do a wave of all 3 LEDs on and then off. Used for making sure they work
  digitalWrite(greenLED, HIGH);
   d4476:	2101      	movs	r1, #1
   d4478:	2006      	movs	r0, #6
   d447a:	f002 febe 	bl	d71fa <digitalWrite>
  delay(100);
   d447e:	2064      	movs	r0, #100	; 0x64
   d4480:	f002 fa7e 	bl	d6980 <delay>
  digitalWrite(busyLED, HIGH);
   d4484:	2101      	movs	r1, #1
   d4486:	2007      	movs	r0, #7
   d4488:	f002 feb7 	bl	d71fa <digitalWrite>
  delay(100);
   d448c:	2064      	movs	r0, #100	; 0x64
   d448e:	f002 fa77 	bl	d6980 <delay>
  digitalWrite(redLED, HIGH);
   d4492:	2101      	movs	r1, #1
   d4494:	2008      	movs	r0, #8
   d4496:	f002 feb0 	bl	d71fa <digitalWrite>
  delay(500);
   d449a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d449e:	f002 fa6f 	bl	d6980 <delay>
  digitalWrite(greenLED, LOW);
   d44a2:	2100      	movs	r1, #0
   d44a4:	2006      	movs	r0, #6
   d44a6:	f002 fea8 	bl	d71fa <digitalWrite>
  delay(100);
   d44aa:	2064      	movs	r0, #100	; 0x64
   d44ac:	f002 fa68 	bl	d6980 <delay>
  digitalWrite(busyLED, LOW);
   d44b0:	2100      	movs	r1, #0
   d44b2:	2007      	movs	r0, #7
   d44b4:	f002 fea1 	bl	d71fa <digitalWrite>
  delay(100);
   d44b8:	2064      	movs	r0, #100	; 0x64
   d44ba:	f002 fa61 	bl	d6980 <delay>
  digitalWrite(redLED, LOW);
   d44be:	2100      	movs	r1, #0
   d44c0:	2008      	movs	r0, #8
}
   d44c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);
  digitalWrite(greenLED, LOW);
  delay(100);
  digitalWrite(busyLED, LOW);
  delay(100);
  digitalWrite(redLED, LOW);
   d44c6:	f002 be98 	b.w	d71fa <digitalWrite>
	...

000d44cc <setup>:
}

void setup() {
   d44cc:	b510      	push	{r4, lr}
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
   d44ce:	2001      	movs	r0, #1
  digitalWrite(busyLED, LOW);
  delay(100);
  digitalWrite(redLED, LOW);
}

void setup() {
   d44d0:	b096      	sub	sp, #88	; 0x58
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
   d44d2:	f002 fa67 	bl	d69a4 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);     // Format red, green, blue, from 0 to 255
   d44d6:	22ff      	movs	r2, #255	; 0xff
   d44d8:	4611      	mov	r1, r2
   d44da:	4610      	mov	r0, r2
   d44dc:	f002 fa72 	bl	d69c4 <_ZN8RGBClass5colorEiii>
  RGB.brightness(64);           // scales brightness of all three colors, 0-255
   d44e0:	2101      	movs	r1, #1
   d44e2:	2040      	movs	r0, #64	; 0x40
   d44e4:	f002 fa81 	bl	d69ea <_ZN8RGBClass10brightnessEhb>
  //Serial.print("EEPROM Available: ");
  //Serial.println(EEPROM.length());    // 4096 available
  
  // BLE
  // Attach characteristics
  BLE.addCharacteristic(TxBLE);
   d44e8:	f001 fc24 	bl	d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ec:	4a34      	ldr	r2, [pc, #208]	; (d45c0 <setup+0xf4>)
   d44ee:	4601      	mov	r1, r0
   d44f0:	a80d      	add	r0, sp, #52	; 0x34
   d44f2:	f002 f867 	bl	d65c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44f6:	a80d      	add	r0, sp, #52	; 0x34
   d44f8:	f001 fcd8 	bl	d5eac <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(RxBLE);
   d44fc:	f001 fc1a 	bl	d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4500:	4a30      	ldr	r2, [pc, #192]	; (d45c4 <setup+0xf8>)
   d4502:	4601      	mov	r1, r0
   d4504:	a80d      	add	r0, sp, #52	; 0x34
   d4506:	f002 f85d 	bl	d65c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d450a:	a80d      	add	r0, sp, #52	; 0x34
   d450c:	f001 fcce 	bl	d5eac <_ZN8particle17BleCharacteristicD1Ev>
  RxBLE.onDataReceived(onDataReceived, NULL);
   d4510:	2200      	movs	r2, #0
   d4512:	492d      	ldr	r1, [pc, #180]	; (d45c8 <setup+0xfc>)
   d4514:	482b      	ldr	r0, [pc, #172]	; (d45c4 <setup+0xf8>)
   d4516:	f001 fbb9 	bl	d5c8c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  // Start advertising service
  BleAdvertisingData adverData;
   d451a:	a80d      	add	r0, sp, #52	; 0x34
   d451c:	f001 faeb 	bl	d5af6 <_ZN8particle18BleAdvertisingDataC1Ev>
  adverData.appendServiceUUID(serviceUuid);
   d4520:	492a      	ldr	r1, [pc, #168]	; (d45cc <setup+0x100>)
   d4522:	a803      	add	r0, sp, #12
   d4524:	f001 f992 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4528:	a903      	add	r1, sp, #12
   d452a:	a808      	add	r0, sp, #32
   d452c:	f001 f98e 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4530:	a808      	add	r0, sp, #32
   d4532:	f001 f9c9 	bl	d58c8 <_ZNK8particle7BleUuid4typeEv>
   d4536:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4538:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d453a:	b944      	cbnz	r4, d454e <setup+0x82>
            uint16_t uuid16 = tempUUID.shorted();
   d453c:	f001 f9e1 	bl	d5902 <_ZNK8particle7BleUuid7shortedEv>
   d4540:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4542:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4544:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4548:	2103      	movs	r1, #3
   d454a:	9400      	str	r4, [sp, #0]
   d454c:	e006      	b.n	d455c <setup+0x90>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d454e:	f001 f9da 	bl	d5906 <_ZNK8particle7BleUuid8rawBytesEv>
   d4552:	2300      	movs	r3, #0
   d4554:	9300      	str	r3, [sp, #0]
   d4556:	4602      	mov	r2, r0
   d4558:	2310      	movs	r3, #16
   d455a:	2107      	movs	r1, #7
   d455c:	a80d      	add	r0, sp, #52	; 0x34
   d455e:	f001 fa83 	bl	d5a68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&adverData);
   d4562:	f001 fbe7 	bl	d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4566:	2200      	movs	r2, #0
   d4568:	a90d      	add	r1, sp, #52	; 0x34
   d456a:	f001 fc50 	bl	d5e0e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

  // Device I/O
	fps.Open();                   // Send serial command to initialize fps. FPS UART uses Rx (pin 14) & Tx (pin 15) on Particle Xenon. Make sure FPS is connected or the program won't go past this part
   d456e:	4818      	ldr	r0, [pc, #96]	; (d45d0 <setup+0x104>)
   d4570:	f000 fb0a 	bl	d4b88 <_ZN11FPS_GT511C34OpenEv>
  fps.SetLED(true);             // Visual test to make sure the fps is connected. Leave on for being able to detect fingerprints
   d4574:	2101      	movs	r1, #1
   d4576:	4816      	ldr	r0, [pc, #88]	; (d45d0 <setup+0x104>)
   d4578:	f000 fb34 	bl	d4be4 <_ZN11FPS_GT511C36SetLEDEb>
  //delay(500);
  //fps.SetLED(false);
  pinMode(buzzer, OUTPUT);      // sound buzzer, not necessary for using tone()
   d457c:	2101      	movs	r1, #1
   d457e:	2013      	movs	r0, #19
   d4580:	f002 fe2a 	bl	d71d8 <pinMode>
  pinMode(relay, OUTPUT);       // signal to relay for switching solenoid
   d4584:	2101      	movs	r1, #1
   d4586:	200f      	movs	r0, #15
   d4588:	f002 fe26 	bl	d71d8 <pinMode>
  pinMode(keySwitch, INPUT);    // electro-mechanical switch w/ a key
   d458c:	2100      	movs	r1, #0
   d458e:	2005      	movs	r0, #5
   d4590:	f002 fe22 	bl	d71d8 <pinMode>
  pinMode(greenLED, OUTPUT);    // green access permitted LED
   d4594:	2101      	movs	r1, #1
   d4596:	2006      	movs	r0, #6
   d4598:	f002 fe1e 	bl	d71d8 <pinMode>
  pinMode(busyLED, OUTPUT);     // amber registration mode LED
   d459c:	2101      	movs	r1, #1
   d459e:	2007      	movs	r0, #7
   d45a0:	f002 fe1a 	bl	d71d8 <pinMode>
  pinMode(redLED, OUTPUT);      // red access denied LED
   d45a4:	2101      	movs	r1, #1
   d45a6:	2008      	movs	r0, #8
   d45a8:	f002 fe16 	bl	d71d8 <pinMode>
  LEDsequence();                // turn all LEDs on at start to make sure they work
   d45ac:	f7ff ff62 	bl	d4474 <_Z11LEDsequencev>

  // Setup done. Play start-up sound, signifying that the system is ready to be used
  play(buzzer, arraySize(startDuration), startSound, startDuration);
   d45b0:	4b08      	ldr	r3, [pc, #32]	; (d45d4 <setup+0x108>)
   d45b2:	4a09      	ldr	r2, [pc, #36]	; (d45d8 <setup+0x10c>)
   d45b4:	2106      	movs	r1, #6
   d45b6:	2013      	movs	r0, #19
   d45b8:	f7ff fd7e 	bl	d40b8 <_Z4playiiPiS_>

  // Enroll test
  //digitalWrite(busyLED, HIGH);
  //enrollUser();
  //digitalWrite(busyLED, LOW);
}
   d45bc:	b016      	add	sp, #88	; 0x58
   d45be:	bd10      	pop	{r4, pc}
   d45c0:	2003e38c 	.word	0x2003e38c
   d45c4:	2003e3b4 	.word	0x2003e3b4
   d45c8:	000d4111 	.word	0x000d4111
   d45cc:	2003e39c 	.word	0x2003e39c
   d45d0:	2003e3c0 	.word	0x2003e3c0
   d45d4:	2003e2b8 	.word	0x2003e2b8
   d45d8:	2003e2d0 	.word	0x2003e2d0

000d45dc <loop>:

uint8_t a = (uint8_t) 1;  // variable for testing BLE incrementing data
void loop() {
  RGB.color(0, 0, 255);
   d45dc:	2100      	movs	r1, #0
  //enrollUser();
  //digitalWrite(busyLED, LOW);
}

uint8_t a = (uint8_t) 1;  // variable for testing BLE incrementing data
void loop() {
   d45de:	b538      	push	{r3, r4, r5, lr}
  RGB.color(0, 0, 255);
   d45e0:	4608      	mov	r0, r1
   d45e2:	22ff      	movs	r2, #255	; 0xff
   d45e4:	f002 f9ee 	bl	d69c4 <_ZN8RGBClass5colorEiii>
 
  // Check for users trying to access using a fingerprint
  if(fps.IsPressFinger()) {
   d45e8:	482e      	ldr	r0, [pc, #184]	; (d46a4 <loop+0xc8>)
   d45ea:	f000 fc77 	bl	d4edc <_ZN11FPS_GT511C313IsPressFingerEv>
   d45ee:	b130      	cbz	r0, d45fe <loop+0x22>
    RGB.color(255, 255, 255);   // white LED for debugging to show that a finger is recognized and the FPS is working on figuring out the user
   d45f0:	22ff      	movs	r2, #255	; 0xff
   d45f2:	4611      	mov	r1, r2
   d45f4:	4610      	mov	r0, r2
   d45f6:	f002 f9e5 	bl	d69c4 <_ZN8RGBClass5colorEiii>
    identifyUser();
   d45fa:	f7ff fe09 	bl	d4210 <_Z12identifyUserv>
    // TODO: Check if user is allowed access (or is disabled)
  }
  
  // Check for users trying to access using the electro-mechanical tumbler lock switch
  if (digitalRead(keySwitch) == HIGH && keySwitchFlag == false) {     // Key switch turned on
   d45fe:	2005      	movs	r0, #5
   d4600:	f002 fe14 	bl	d722c <digitalRead>
   d4604:	2801      	cmp	r0, #1
   d4606:	4604      	mov	r4, r0
   d4608:	d111      	bne.n	d462e <loop+0x52>
   d460a:	4d27      	ldr	r5, [pc, #156]	; (d46a8 <loop+0xcc>)
   d460c:	782b      	ldrb	r3, [r5, #0]
   d460e:	b973      	cbnz	r3, d462e <loop+0x52>
    delay(500);
   d4610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4614:	f002 f9b4 	bl	d6980 <delay>
    if (digitalRead(keySwitch) == LOW) {  // Enter registration mode manually by flicking the switch on and off quickly      
   d4618:	2005      	movs	r0, #5
   d461a:	f002 fe07 	bl	d722c <digitalRead>
   d461e:	b910      	cbnz	r0, d4626 <loop+0x4a>
      enrollUser();
   d4620:	f7ff fe1e 	bl	d4260 <_Z10enrollUserv>
   d4624:	e007      	b.n	d4636 <loop+0x5a>
    }
    else {  // normal use of switch to open lock-bin
      openBin();                      // Allow access. Includes good feedback
   d4626:	f7ff fdc1 	bl	d41ac <_Z7openBinv>
      keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
   d462a:	702c      	strb	r4, [r5, #0]
   d462c:	e003      	b.n	d4636 <loop+0x5a>
    }
  } 
  else if (digitalRead(keySwitch) == LOW && keySwitchFlag == true) {  // Key switch turned off
   d462e:	2005      	movs	r0, #5
   d4630:	f002 fdfc 	bl	d722c <digitalRead>
   d4634:	b380      	cbz	r0, d4698 <loop+0xbc>
    keySwitchFlag = false;          // Reset flag so the key can be used again
  }
  
  // Check for Bluetooth connections periodically
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
   d4636:	4c1d      	ldr	r4, [pc, #116]	; (d46ac <loop+0xd0>)
   d4638:	f000 fd48 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
   d463c:	6823      	ldr	r3, [r4, #0]
   d463e:	1ac0      	subs	r0, r0, r3
   d4640:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4644:	d323      	bcc.n	d468e <loop+0xb2>
   d4646:	f000 fd41 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
	  lastUpdate = millis();
   d464a:	6020      	str	r0, [r4, #0]

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d464c:	f001 fb72 	bl	d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4650:	f001 fbfa 	bl	d5e48 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4654:	4c16      	ldr	r4, [pc, #88]	; (d46b0 <loop+0xd4>)
   d4656:	4605      	mov	r5, r0
        if (connectionFlag == false) {
   d4658:	7823      	ldrb	r3, [r4, #0]
  // Check for Bluetooth connections periodically
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
	  lastUpdate = millis();

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d465a:	b188      	cbz	r0, d4680 <loop+0xa4>
        if (connectionFlag == false) {
   d465c:	b933      	cbnz	r3, d466c <loop+0x90>
          Serial.println("Bluetooth Connected!");
   d465e:	f002 fb23 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4662:	4914      	ldr	r1, [pc, #80]	; (d46b4 <loop+0xd8>)
   d4664:	f002 f90b 	bl	d687e <_ZN5Print7printlnEPKc>
          connectionFlag = true;
   d4668:	2301      	movs	r3, #1
   d466a:	7023      	strb	r3, [r4, #0]
          // TODO: update / send users to mobile app
        }
        a++;                // increment testing variable
   d466c:	4912      	ldr	r1, [pc, #72]	; (d46b8 <loop+0xdc>)
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d466e:	4813      	ldr	r0, [pc, #76]	; (d46bc <loop+0xe0>)
   d4670:	780b      	ldrb	r3, [r1, #0]
   d4672:	3301      	adds	r3, #1
   d4674:	700b      	strb	r3, [r1, #0]
   d4676:	2201      	movs	r2, #1
   d4678:	2300      	movs	r3, #0
   d467a:	f001 faa5 	bl	d5bc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d467e:	e006      	b.n	d468e <loop+0xb2>
        TxBLE.setValue(a);  // send test data messages
    }
    else {  // No Bluetooth connection
      if (connectionFlag == true) { // Make sure flag is set correctly
   d4680:	b12b      	cbz	r3, d468e <loop+0xb2>
        Serial.println("Bluetooth Disconnected.");
   d4682:	f002 fb11 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4686:	490e      	ldr	r1, [pc, #56]	; (d46c0 <loop+0xe4>)
   d4688:	f002 f8f9 	bl	d687e <_ZN5Print7printlnEPKc>
        connectionFlag = false;
   d468c:	7025      	strb	r5, [r4, #0]
      }
    }
  }

  delay(delayTime);
   d468e:	2064      	movs	r0, #100	; 0x64
}
   d4690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        connectionFlag = false;
      }
    }
  }

  delay(delayTime);
   d4694:	f002 b974 	b.w	d6980 <delay>
    else {  // normal use of switch to open lock-bin
      openBin();                      // Allow access. Includes good feedback
      keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
    }
  } 
  else if (digitalRead(keySwitch) == LOW && keySwitchFlag == true) {  // Key switch turned off
   d4698:	4b03      	ldr	r3, [pc, #12]	; (d46a8 <loop+0xcc>)
   d469a:	781a      	ldrb	r2, [r3, #0]
   d469c:	2a00      	cmp	r2, #0
   d469e:	d0ca      	beq.n	d4636 <loop+0x5a>
    keySwitchFlag = false;          // Reset flag so the key can be used again
   d46a0:	7018      	strb	r0, [r3, #0]
   d46a2:	e7c8      	b.n	d4636 <loop+0x5a>
   d46a4:	2003e3c0 	.word	0x2003e3c0
   d46a8:	2003e394 	.word	0x2003e394
   d46ac:	2003e3b0 	.word	0x2003e3b0
   d46b0:	2003e3c3 	.word	0x2003e3c3
   d46b4:	000d77aa 	.word	0x000d77aa
   d46b8:	2003e2e8 	.word	0x2003e2e8
   d46bc:	2003e38c 	.word	0x2003e38c
   d46c0:	000d77bf 	.word	0x000d77bf

000d46c4 <_GLOBAL__sub_I_SystemMode>:
      }
    }
  }

  delay(delayTime);
}
   d46c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d46c8:	b099      	sub	sp, #100	; 0x64
   d46ca:	f000 fcaf 	bl	d502c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46ce:	4b31      	ldr	r3, [pc, #196]	; (d4794 <_GLOBAL__sub_I_SystemMode+0xd0>)
const int relay     = A4;                     // digital pin for relay signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT511C3 fps;                              // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d46d0:	4d31      	ldr	r5, [pc, #196]	; (d4798 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d46d2:	4f32      	ldr	r7, [pc, #200]	; (d479c <_GLOBAL__sub_I_SystemMode+0xd8>)

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d46d4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d47c4 <_GLOBAL__sub_I_SystemMode+0x100>
   d46d8:	2400      	movs	r4, #0
   d46da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46de:	701c      	strb	r4, [r3, #0]
   d46e0:	805c      	strh	r4, [r3, #2]
   d46e2:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46e4:	2003      	movs	r0, #3
   d46e6:	f000 febb 	bl	d5460 <set_system_mode>
const int relay     = A4;                     // digital pin for relay signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT511C3 fps;                              // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d46ea:	4628      	mov	r0, r5
   d46ec:	f000 f992 	bl	d4a14 <_ZN11FPS_GT511C3C1Ev>
   d46f0:	463a      	mov	r2, r7
   d46f2:	492b      	ldr	r1, [pc, #172]	; (d47a0 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d46f4:	4628      	mov	r0, r5
   d46f6:	f002 fdef 	bl	d72d8 <__aeabi_atexit>

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d46fa:	492a      	ldr	r1, [pc, #168]	; (d47a4 <_GLOBAL__sub_I_SystemMode+0xe0>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d46fc:	4d2a      	ldr	r5, [pc, #168]	; (d47a8 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d46fe:	4640      	mov	r0, r8
   d4700:	f001 f98f 	bl	d5a22 <_ZN8particle7BleUuidC1EPKc>
// BLE Characteristics UUIDs - UART Protocol regarding mobile device as host (i.e. Rx for app receives data and Tx for app transmits data)
const char* writeUUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic RxBLE("receive", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUuid, onDataReceived, (void*)writeUUID);
   d4704:	4641      	mov	r1, r8
   d4706:	a809      	add	r0, sp, #36	; 0x24
   d4708:	f001 f8a0 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
   d470c:	4b27      	ldr	r3, [pc, #156]	; (d47ac <_GLOBAL__sub_I_SystemMode+0xe8>)
   d470e:	602c      	str	r4, [r5, #0]
   d4710:	f8d3 9000 	ldr.w	r9, [r3]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4714:	606c      	str	r4, [r5, #4]
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4716:	ae13      	add	r6, sp, #76	; 0x4c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4718:	4649      	mov	r1, r9
   d471a:	a80e      	add	r0, sp, #56	; 0x38
   d471c:	f001 f981 	bl	d5a22 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4720:	a909      	add	r1, sp, #36	; 0x24
   d4722:	4630      	mov	r0, r6
   d4724:	f001 f892 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4728:	f8cd 9008 	str.w	r9, [sp, #8]
   d472c:	4b20      	ldr	r3, [pc, #128]	; (d47b0 <_GLOBAL__sub_I_SystemMode+0xec>)
   d472e:	f8df 9098 	ldr.w	r9, [pc, #152]	; d47c8 <_GLOBAL__sub_I_SystemMode+0x104>
   d4732:	9301      	str	r3, [sp, #4]
   d4734:	4628      	mov	r0, r5
   d4736:	ab0e      	add	r3, sp, #56	; 0x38
   d4738:	9600      	str	r6, [sp, #0]
   d473a:	2204      	movs	r2, #4
   d473c:	491d      	ldr	r1, [pc, #116]	; (d47b4 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d473e:	f001 fe8f 	bl	d6460 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4742:	463a      	mov	r2, r7
   d4744:	4649      	mov	r1, r9
   d4746:	4628      	mov	r0, r5
   d4748:	f002 fdc6 	bl	d72d8 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d474c:	4d1a      	ldr	r5, [pc, #104]	; (d47b8 <_GLOBAL__sub_I_SystemMode+0xf4>)
BleCharacteristic TxBLE("transmit", BleCharacteristicProperty::NOTIFY, BleUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d474e:	491b      	ldr	r1, [pc, #108]	; (d47bc <_GLOBAL__sub_I_SystemMode+0xf8>)
   d4750:	a804      	add	r0, sp, #16
   d4752:	f001 f966 	bl	d5a22 <_ZN8particle7BleUuidC1EPKc>
   d4756:	4641      	mov	r1, r8
   d4758:	a809      	add	r0, sp, #36	; 0x24
   d475a:	f001 f877 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d475e:	a904      	add	r1, sp, #16
   d4760:	602c      	str	r4, [r5, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4762:	606c      	str	r4, [r5, #4]
   d4764:	a80e      	add	r0, sp, #56	; 0x38
   d4766:	f001 f871 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d476a:	a909      	add	r1, sp, #36	; 0x24
   d476c:	4630      	mov	r0, r6
   d476e:	f001 f86d 	bl	d584c <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4772:	ab0e      	add	r3, sp, #56	; 0x38
   d4774:	4628      	mov	r0, r5
   d4776:	9402      	str	r4, [sp, #8]
   d4778:	9401      	str	r4, [sp, #4]
   d477a:	9600      	str	r6, [sp, #0]
   d477c:	2210      	movs	r2, #16
   d477e:	4910      	ldr	r1, [pc, #64]	; (d47c0 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4780:	f001 fe6e 	bl	d6460 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4784:	463a      	mov	r2, r7
   d4786:	4649      	mov	r1, r9
   d4788:	4628      	mov	r0, r5
   d478a:	f002 fda5 	bl	d72d8 <__aeabi_atexit>
      }
    }
  }

  delay(delayTime);
}
   d478e:	b019      	add	sp, #100	; 0x64
   d4790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4794:	2003e396 	.word	0x2003e396
   d4798:	2003e3c0 	.word	0x2003e3c0
   d479c:	2003e388 	.word	0x2003e388
   d47a0:	000d4a2d 	.word	0x000d4a2d
   d47a4:	000d77d7 	.word	0x000d77d7
   d47a8:	2003e3b4 	.word	0x2003e3b4
   d47ac:	2003e31c 	.word	0x2003e31c
   d47b0:	000d4111 	.word	0x000d4111
   d47b4:	000d77fc 	.word	0x000d77fc
   d47b8:	2003e38c 	.word	0x2003e38c
   d47bc:	000d7804 	.word	0x000d7804
   d47c0:	000d7829 	.word	0x000d7829
   d47c4:	2003e39c 	.word	0x2003e39c
   d47c8:	000d5ead 	.word	0x000d5ead

000d47cc <_ZN14Command_Packet16ParameterFromIntEi>:

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d47cc:	120b      	asrs	r3, r1, #8
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d47ce:	7041      	strb	r1, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d47d0:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d47d2:	140b      	asrs	r3, r1, #16
	Parameter[3] = (i & 0xff000000) >> 24;
   d47d4:	0e09      	lsrs	r1, r1, #24
// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d47d6:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d47d8:	7101      	strb	r1, [r0, #4]
   d47da:	4770      	bx	lr

000d47dc <_ZN14Command_Packet18_CalculateChecksumEv>:
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d47dc:	7842      	ldrb	r2, [r0, #1]
   d47de:	7883      	ldrb	r3, [r0, #2]
   d47e0:	4413      	add	r3, r2
	w += Parameter[2];
   d47e2:	78c2      	ldrb	r2, [r0, #3]
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d47e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
	w += Parameter[2];
   d47e8:	4413      	add	r3, r2
	w += Parameter[3];
   d47ea:	7902      	ldrb	r2, [r0, #4]
   d47ec:	4413      	add	r3, r2
	w += command[0];
   d47ee:	7942      	ldrb	r2, [r0, #5]
	w += command[1];

	return w;
   d47f0:	7980      	ldrb	r0, [r0, #6]
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
	w += Parameter[2];
	w += Parameter[3];
	w += command[0];
   d47f2:	4413      	add	r3, r2
	w += command[1];

	return w;
}
   d47f4:	4418      	add	r0, r3
   d47f6:	4770      	bx	lr

000d47f8 <_ZN14Command_Packet14GetPacketBytesEv>:
#endif  //__GNUC__

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
   d47f8:	b570      	push	{r4, r5, r6, lr}
   d47fa:	4604      	mov	r4, r0
	byte* packetbytes= new byte[12];
   d47fc:	200c      	movs	r0, #12
   d47fe:	f7ff fc4c 	bl	d409a <_Znaj>

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d4802:	2500      	movs	r5, #0
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];

	// update command before calculating checksum (important!)
	word cmd = Command;
   d4804:	7826      	ldrb	r6, [r4, #0]
	command[0] = GetLowByte(cmd);
   d4806:	7166      	strb	r6, [r4, #5]

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];
   d4808:	4601      	mov	r1, r0

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d480a:	71a5      	strb	r5, [r4, #6]

	word checksum = _CalculateChecksum();
   d480c:	4620      	mov	r0, r4
   d480e:	f7ff ffe5 	bl	d47dc <_ZN14Command_Packet18_CalculateChecksumEv>

	packetbytes[0] = COMMAND_START_CODE_1;
   d4812:	2355      	movs	r3, #85	; 0x55
   d4814:	700b      	strb	r3, [r1, #0]
	packetbytes[1] = COMMAND_START_CODE_2;
   d4816:	23aa      	movs	r3, #170	; 0xaa
   d4818:	704b      	strb	r3, [r1, #1]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
   d481a:	2301      	movs	r3, #1
   d481c:	708b      	strb	r3, [r1, #2]
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
   d481e:	7863      	ldrb	r3, [r4, #1]
   d4820:	710b      	strb	r3, [r1, #4]
	packetbytes[5] = Parameter[1];
   d4822:	78a3      	ldrb	r3, [r4, #2]
   d4824:	714b      	strb	r3, [r1, #5]
	packetbytes[6] = Parameter[2];
   d4826:	78e3      	ldrb	r3, [r4, #3]
   d4828:	718b      	strb	r3, [r1, #6]
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
   d482a:	7288      	strb	r0, [r1, #10]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d482c:	7923      	ldrb	r3, [r4, #4]
	word checksum = _CalculateChecksum();

	packetbytes[0] = COMMAND_START_CODE_1;
	packetbytes[1] = COMMAND_START_CODE_2;
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
   d482e:	70cd      	strb	r5, [r1, #3]
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);
   d4830:	0a00      	lsrs	r0, r0, #8
   d4832:	72c8      	strb	r0, [r1, #11]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4834:	71cb      	strb	r3, [r1, #7]
	packetbytes[8] = command[0];
   d4836:	720e      	strb	r6, [r1, #8]
	packetbytes[9] = command[1];
   d4838:	724d      	strb	r5, [r1, #9]
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);

	return packetbytes;
}
   d483a:	4608      	mov	r0, r1
   d483c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4840 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
	if (high == 0x00)
   d4840:	b128      	cbz	r0, d484e <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4842:	2912      	cmp	r1, #18
   d4844:	d803      	bhi.n	d484e <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4846:	4b03      	ldr	r3, [pc, #12]	; (d4854 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x14>)
   d4848:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   d484c:	4770      	bx	lr
}

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
   d484e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			case 0x11: e = NACK_INVALID_PARAM; break;
			case 0x12: e = NACK_FINGER_IS_NOT_PRESSED; break;
		}
	}
	return e;
}
   d4852:	4770      	bx	lr
   d4854:	000d7858 	.word	0x000d7858

000d4858 <_ZN15Response_Packet16IntFromParameterEv>:
int Response_Packet::IntFromParameter()
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
   d4858:	7c03      	ldrb	r3, [r0, #16]
   d485a:	7c42      	ldrb	r2, [r0, #17]
   d485c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
	retval = (retval << 8) + ParameterBytes[0];
   d4860:	7bc3      	ldrb	r3, [r0, #15]
	return retval;
   d4862:	7b80      	ldrb	r0, [r0, #14]
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
	retval = (retval << 8) + ParameterBytes[0];
   d4864:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return retval;
}
   d4868:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   d486c:	4770      	bx	lr

000d486e <_ZN15Response_Packet17CalculateChecksumEPhi>:

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
   d486e:	b510      	push	{r4, lr}
   d4870:	460b      	mov	r3, r1
	word checksum = 0;
   d4872:	2000      	movs	r0, #0
	for (int i=0; i<length; i++)
   d4874:	1a5c      	subs	r4, r3, r1
   d4876:	42a2      	cmp	r2, r4
   d4878:	dd03      	ble.n	d4882 <_ZN15Response_Packet17CalculateChecksumEPhi+0x14>
	{
		checksum +=buffer[i];
   d487a:	f813 4b01 	ldrb.w	r4, [r3], #1
   d487e:	4420      	add	r0, r4

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
	word checksum = 0;
	for (int i=0; i<length; i++)
   d4880:	e7f8      	b.n	d4874 <_ZN15Response_Packet17CalculateChecksumEPhi+0x6>
	{
		checksum +=buffer[i];
	}
	return checksum;
}
   d4882:	bd10      	pop	{r4, pc}

000d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>:
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4884:	4291      	cmp	r1, r2
	return (byte)w&0x00FF;
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
   d4886:	b570      	push	{r4, r5, r6, lr}
   d4888:	460c      	mov	r4, r1
   d488a:	4615      	mov	r5, r2
   d488c:	461e      	mov	r6, r3
	bool retval = (b != propervalue) && (b != alternatevalue);
   d488e:	d001      	beq.n	d4894 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x10>
   d4890:	4299      	cmp	r1, r3
   d4892:	d101      	bne.n	d4898 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x14>
   d4894:	2000      	movs	r0, #0
   d4896:	bd70      	pop	{r4, r5, r6, pc}
	if ((UseSerialDebug) && (retval))
   d4898:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d489c:	b353      	cbz	r3, d48f4 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x70>
	{
		Serial.print("Response_Packet parsing error ");
   d489e:	f002 fa03 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48a2:	4915      	ldr	r1, [pc, #84]	; (d48f8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x74>)
   d48a4:	f001 ffd8 	bl	d6858 <_ZN5Print5printEPKc>
		Serial.print(varname);
   d48a8:	f002 f9fe 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48ac:	9904      	ldr	r1, [sp, #16]
   d48ae:	f001 ffd3 	bl	d6858 <_ZN5Print5printEPKc>
		Serial.print(" ");
   d48b2:	f002 f9f9 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48b6:	4911      	ldr	r1, [pc, #68]	; (d48fc <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x78>)
   d48b8:	f001 ffce 	bl	d6858 <_ZN5Print5printEPKc>
		Serial.print(propervalue, HEX);
   d48bc:	f002 f9f4 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48c0:	2210      	movs	r2, #16
   d48c2:	4629      	mov	r1, r5
   d48c4:	f002 f812 	bl	d68ec <_ZN5Print5printEhi>
		Serial.print(" || ");
   d48c8:	f002 f9ee 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48cc:	490c      	ldr	r1, [pc, #48]	; (d4900 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x7c>)
   d48ce:	f001 ffc3 	bl	d6858 <_ZN5Print5printEPKc>
		Serial.print(alternatevalue, HEX);
   d48d2:	f002 f9e9 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48d6:	2210      	movs	r2, #16
   d48d8:	4631      	mov	r1, r6
   d48da:	f002 f807 	bl	d68ec <_ZN5Print5printEhi>
		Serial.print(" != ");
   d48de:	f002 f9e3 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48e2:	4908      	ldr	r1, [pc, #32]	; (d4904 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x80>)
   d48e4:	f001 ffb8 	bl	d6858 <_ZN5Print5printEPKc>
		Serial.println(b, HEX);
   d48e8:	f002 f9de 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d48ec:	2210      	movs	r2, #16
   d48ee:	4621      	mov	r1, r4
   d48f0:	f001 fffe 	bl	d68f0 <_ZN5Print7printlnEhi>
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d48f4:	2001      	movs	r0, #1
		Serial.print(alternatevalue, HEX);
		Serial.print(" != ");
		Serial.println(b, HEX);
	}
  return retval;
}
   d48f6:	bd70      	pop	{r4, r5, r6, pc}
   d48f8:	000d787e 	.word	0x000d787e
   d48fc:	000d7d1d 	.word	0x000d7d1d
   d4900:	000d789d 	.word	0x000d789d
   d4904:	000d78a2 	.word	0x000d78a2

000d4908 <_ZN15Response_PacketC1EPhb>:

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d490a:	4b3a      	ldr	r3, [pc, #232]	; (d49f4 <_ZN15Response_PacketC1EPhb+0xec>)

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d490c:	460c      	mov	r4, r1
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d490e:	7809      	ldrb	r1, [r1, #0]
   d4910:	9300      	str	r3, [sp, #0]
   d4912:	2355      	movs	r3, #85	; 0x55

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4914:	4616      	mov	r6, r2
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4916:	9201      	str	r2, [sp, #4]
   d4918:	461a      	mov	r2, r3

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d491a:	4605      	mov	r5, r0
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d491c:	f7ff ffb2 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[1], COMMAND_START_CODE_2, COMMAND_START_CODE_2, "COMMAND_START_CODE_2", UseSerialDebug);
   d4920:	4b35      	ldr	r3, [pc, #212]	; (d49f8 <_ZN15Response_PacketC1EPhb+0xf0>)
   d4922:	7861      	ldrb	r1, [r4, #1]
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	23aa      	movs	r3, #170	; 0xaa
   d4928:	461a      	mov	r2, r3
   d492a:	9601      	str	r6, [sp, #4]
   d492c:	4628      	mov	r0, r5
   d492e:	f7ff ffa9 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[2], COMMAND_DEVICE_ID_1, COMMAND_DEVICE_ID_1, "COMMAND_DEVICE_ID_1", UseSerialDebug);
   d4932:	4b32      	ldr	r3, [pc, #200]	; (d49fc <_ZN15Response_PacketC1EPhb+0xf4>)
   d4934:	78a1      	ldrb	r1, [r4, #2]
   d4936:	9300      	str	r3, [sp, #0]
   d4938:	2301      	movs	r3, #1
   d493a:	461a      	mov	r2, r3
   d493c:	9601      	str	r6, [sp, #4]
   d493e:	4628      	mov	r0, r5
   d4940:	f7ff ffa0 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[3], COMMAND_DEVICE_ID_2, COMMAND_DEVICE_ID_2, "COMMAND_DEVICE_ID_2", UseSerialDebug);
   d4944:	4b2e      	ldr	r3, [pc, #184]	; (d4a00 <_ZN15Response_PacketC1EPhb+0xf8>)
   d4946:	78e1      	ldrb	r1, [r4, #3]
   d4948:	9300      	str	r3, [sp, #0]
   d494a:	2300      	movs	r3, #0
   d494c:	461a      	mov	r2, r3
   d494e:	9601      	str	r6, [sp, #4]
   d4950:	4628      	mov	r0, r5
   d4952:	f7ff ff97 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[8], 0x30, 0x31, "AckNak_LOW", UseSerialDebug);
   d4956:	4b2b      	ldr	r3, [pc, #172]	; (d4a04 <_ZN15Response_PacketC1EPhb+0xfc>)
   d4958:	7a21      	ldrb	r1, [r4, #8]
   d495a:	9300      	str	r3, [sp, #0]
   d495c:	2230      	movs	r2, #48	; 0x30
   d495e:	2331      	movs	r3, #49	; 0x31
   d4960:	9601      	str	r6, [sp, #4]
   d4962:	4628      	mov	r0, r5
   d4964:	f7ff ff8e 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	if (buffer[8] == 0x30) ACK = true; else ACK = false;
   d4968:	7a23      	ldrb	r3, [r4, #8]
   d496a:	2b30      	cmp	r3, #48	; 0x30
   d496c:	bf0c      	ite	eq
   d496e:	2301      	moveq	r3, #1
   d4970:	2300      	movne	r3, #0
   d4972:	752b      	strb	r3, [r5, #20]
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);
   d4974:	4b24      	ldr	r3, [pc, #144]	; (d4a08 <_ZN15Response_PacketC1EPhb+0x100>)
   d4976:	7a61      	ldrb	r1, [r4, #9]
   d4978:	9300      	str	r3, [sp, #0]
   d497a:	2300      	movs	r3, #0
   d497c:	461a      	mov	r2, r3
   d497e:	9601      	str	r6, [sp, #4]
   d4980:	4628      	mov	r0, r5
   d4982:	f7ff ff7f 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	word checksum = CalculateChecksum(buffer, 10);
   d4986:	4621      	mov	r1, r4
   d4988:	220a      	movs	r2, #10
   d498a:	4628      	mov	r0, r5
   d498c:	f7ff ff6f 	bl	d486e <_ZN15Response_Packet17CalculateChecksumEPhi>
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4990:	4a1e      	ldr	r2, [pc, #120]	; (d4a0c <_ZN15Response_PacketC1EPhb+0x104>)
   d4992:	7aa1      	ldrb	r1, [r4, #10]
   d4994:	9200      	str	r2, [sp, #0]
}

// Returns the low byte from a word
byte Response_Packet::GetLowByte(word w)
{
	return (byte)w&0x00FF;
   d4996:	b2c3      	uxtb	r3, r0
}

// Returns the high byte from a word
byte Response_Packet::GetHighByte(word w)
{
	return (byte)(w>>8)&0x00FF;
   d4998:	f3c0 2707 	ubfx	r7, r0, #8, #8
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);

	word checksum = CalculateChecksum(buffer, 10);
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d499c:	461a      	mov	r2, r3
   d499e:	9601      	str	r6, [sp, #4]
   d49a0:	4628      	mov	r0, r5
   d49a2:	f7ff ff6f 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[11], checksum_high, checksum_high, "Checksum_HIGH", UseSerialDebug);
   d49a6:	4b1a      	ldr	r3, [pc, #104]	; (d4a10 <_ZN15Response_PacketC1EPhb+0x108>)
   d49a8:	7ae1      	ldrb	r1, [r4, #11]
   d49aa:	9300      	str	r3, [sp, #0]
   d49ac:	463a      	mov	r2, r7
   d49ae:	463b      	mov	r3, r7
   d49b0:	9601      	str	r6, [sp, #4]
   d49b2:	4628      	mov	r0, r5
   d49b4:	f7ff ff66 	bl	d4884 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	Error = ErrorCodes::ParseFromBytes(buffer[5], buffer[4]);
   d49b8:	7921      	ldrb	r1, [r4, #4]
   d49ba:	7960      	ldrb	r0, [r4, #5]
   d49bc:	f7ff ff40 	bl	d4840 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
   d49c0:	8028      	strh	r0, [r5, #0]

	ParameterBytes[0] = buffer[4];
   d49c2:	7923      	ldrb	r3, [r4, #4]
   d49c4:	73ab      	strb	r3, [r5, #14]
	ParameterBytes[1] = buffer[5];
   d49c6:	7963      	ldrb	r3, [r4, #5]
   d49c8:	73eb      	strb	r3, [r5, #15]
	ParameterBytes[2] = buffer[6];
   d49ca:	79a3      	ldrb	r3, [r4, #6]
   d49cc:	742b      	strb	r3, [r5, #16]
	ParameterBytes[3] = buffer[7];
   d49ce:	79e3      	ldrb	r3, [r4, #7]
   d49d0:	746b      	strb	r3, [r5, #17]
	ResponseBytes[0]=buffer[8];
   d49d2:	7a23      	ldrb	r3, [r4, #8]
   d49d4:	74ab      	strb	r3, [r5, #18]
	ResponseBytes[1]=buffer[9];
   d49d6:	7a63      	ldrb	r3, [r4, #9]
   d49d8:	74eb      	strb	r3, [r5, #19]
   d49da:	3c01      	subs	r4, #1
   d49dc:	1c6b      	adds	r3, r5, #1
   d49de:	f105 020d 	add.w	r2, r5, #13
	for (int i=0; i < 12; i++)
	{
		RawBytes[i]=buffer[i];
   d49e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d49e6:	f803 1f01 	strb.w	r1, [r3, #1]!
	ParameterBytes[1] = buffer[5];
	ParameterBytes[2] = buffer[6];
	ParameterBytes[3] = buffer[7];
	ResponseBytes[0]=buffer[8];
	ResponseBytes[1]=buffer[9];
	for (int i=0; i < 12; i++)
   d49ea:	4293      	cmp	r3, r2
   d49ec:	d1f9      	bne.n	d49e2 <_ZN15Response_PacketC1EPhb+0xda>
	{
		RawBytes[i]=buffer[i];
	}
}
   d49ee:	4628      	mov	r0, r5
   d49f0:	b003      	add	sp, #12
   d49f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49f4:	000d78a7 	.word	0x000d78a7
   d49f8:	000d78bc 	.word	0x000d78bc
   d49fc:	000d78d1 	.word	0x000d78d1
   d4a00:	000d78e5 	.word	0x000d78e5
   d4a04:	000d78f9 	.word	0x000d78f9
   d4a08:	000d7904 	.word	0x000d7904
   d4a0c:	000d7910 	.word	0x000d7910
   d4a10:	000d791d 	.word	0x000d791d

000d4a14 <_ZN11FPS_GT511C3C1Ev>:
#ifndef __GNUC__
#pragma region -= Constructor/Destructor =-
#endif  //__GNUC__
// Creates a new object to interface with the fingerprint scanner
//FPS_GT511C3::FPS_GT511C3(uint8_t rx, uint8_t tx)
FPS_GT511C3::FPS_GT511C3()	// Serial pins pre-defined
   d4a14:	b510      	push	{r4, lr}
   d4a16:	4604      	mov	r4, r0
	//pin_RX = rx;
	//pin_TX = tx;
	//pin_RX = 14;
	//pin_TX = 15;
	//_serial.begin(9600);
	Serial1.begin(9600);
   d4a18:	f002 f9fc 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4a1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a20:	f002 f9ee 	bl	d6e00 <_ZN11USARTSerial5beginEm>
	this->UseSerialDebug = false;
   d4a24:	2300      	movs	r3, #0
   d4a26:	7023      	strb	r3, [r4, #0]
};
   d4a28:	4620      	mov	r0, r4
   d4a2a:	bd10      	pop	{r4, pc}

000d4a2c <_ZN11FPS_GT511C3D1Ev>:

// destructor
FPS_GT511C3::~FPS_GT511C3()
   d4a2c:	b510      	push	{r4, lr}
   d4a2e:	4604      	mov	r4, r0
{
	//_serial.~SoftwareSerial();
	Serial1.~USARTSerial();
   d4a30:	f002 f9f0 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4a34:	6803      	ldr	r3, [r0, #0]
   d4a36:	681b      	ldr	r3, [r3, #0]
   d4a38:	4798      	blx	r3
	Serial1.end();
   d4a3a:	f002 f9eb 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4a3e:	f002 f9e2 	bl	d6e06 <_ZN11USARTSerial3endEv>
}
   d4a42:	4620      	mov	r0, r4
   d4a44:	bd10      	pop	{r4, pc}
	...

000d4a48 <_ZN11FPS_GT511C314serialPrintHexEh>:
  Serial.print("\"");
}

// sends a byte to the serial debugger in the hex format we want EX "0F"
void FPS_GT511C3::serialPrintHex(byte data)
{
   d4a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char tmp[16];
  sprintf(tmp, "%.2X",data);
   d4a4a:	460a      	mov	r2, r1
   d4a4c:	4668      	mov	r0, sp
   d4a4e:	4905      	ldr	r1, [pc, #20]	; (d4a64 <_ZN11FPS_GT511C314serialPrintHexEh+0x1c>)
   d4a50:	f000 fd9a 	bl	d5588 <sprintf>
  Serial.print(tmp);
   d4a54:	f002 f928 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4a58:	4669      	mov	r1, sp
   d4a5a:	f001 fefd 	bl	d6858 <_ZN5Print5printEPKc>
}
   d4a5e:	b005      	add	sp, #20
   d4a60:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a64:	000d792b 	.word	0x000d792b

000d4a68 <_ZN11FPS_GT511C312SendToSerialEPhi>:
	return rp;
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
   d4a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a6a:	460d      	mov	r5, r1
   d4a6c:	4617      	mov	r7, r2
   d4a6e:	4606      	mov	r6, r0
  boolean first=true;
  Serial.print("\"");
   d4a70:	f002 f91a 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4a74:	490d      	ldr	r1, [pc, #52]	; (d4aac <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
   d4a76:	f001 feef 	bl	d6858 <_ZN5Print5printEPKc>
   d4a7a:	462c      	mov	r4, r5
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
   d4a7c:	2301      	movs	r3, #1
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4a7e:	1b62      	subs	r2, r4, r5
   d4a80:	4297      	cmp	r7, r2
   d4a82:	dd0c      	ble.n	d4a9e <_ZN11FPS_GT511C312SendToSerialEPhi+0x36>
  {
	if (first) first=false; else Serial.print(" ");
   d4a84:	b923      	cbnz	r3, d4a90 <_ZN11FPS_GT511C312SendToSerialEPhi+0x28>
   d4a86:	f002 f90f 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4a8a:	4909      	ldr	r1, [pc, #36]	; (d4ab0 <_ZN11FPS_GT511C312SendToSerialEPhi+0x48>)
   d4a8c:	f001 fee4 	bl	d6858 <_ZN5Print5printEPKc>
	serialPrintHex(data[i]);
   d4a90:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4a94:	4630      	mov	r0, r6
   d4a96:	f7ff ffd7 	bl	d4a48 <_ZN11FPS_GT511C314serialPrintHexEh>
   d4a9a:	2300      	movs	r3, #0
// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4a9c:	e7ef      	b.n	d4a7e <_ZN11FPS_GT511C312SendToSerialEPhi+0x16>
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4a9e:	f002 f903 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4aa2:	4902      	ldr	r1, [pc, #8]	; (d4aac <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
}
   d4aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for(int i=0; i<length; i++)
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4aa8:	f001 bed6 	b.w	d6858 <_ZN5Print5printEPKc>
   d4aac:	000d7930 	.word	0x000d7930
   d4ab0:	000d7d1d 	.word	0x000d7d1d

000d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>:
#ifndef __GNUC__
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT511C3::SendCommand(byte cmd[], int length)
{
   d4ab4:	b570      	push	{r4, r5, r6, lr}
   d4ab6:	4604      	mov	r4, r0
   d4ab8:	460d      	mov	r5, r1
   d4aba:	4616      	mov	r6, r2
	//_serial.write(cmd, length);
	Serial1.write(cmd, length);
   d4abc:	f002 f9aa 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4ac0:	6803      	ldr	r3, [r0, #0]
   d4ac2:	4632      	mov	r2, r6
   d4ac4:	68db      	ldr	r3, [r3, #12]
   d4ac6:	4629      	mov	r1, r5
   d4ac8:	4798      	blx	r3
	if (UseSerialDebug)
   d4aca:	7823      	ldrb	r3, [r4, #0]
   d4acc:	b17b      	cbz	r3, d4aee <_ZN11FPS_GT511C311SendCommandEPhi+0x3a>
	{
		Serial.print("FPS - SEND: ");
   d4ace:	f002 f8eb 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4ad2:	4907      	ldr	r1, [pc, #28]	; (d4af0 <_ZN11FPS_GT511C311SendCommandEPhi+0x3c>)
   d4ad4:	f001 fec0 	bl	d6858 <_ZN5Print5printEPKc>
		SendToSerial(cmd, length);
   d4ad8:	4632      	mov	r2, r6
   d4ada:	4629      	mov	r1, r5
   d4adc:	4620      	mov	r0, r4
   d4ade:	f7ff ffc3 	bl	d4a68 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d4ae2:	f002 f8e1 	bl	d6ca8 <_Z16_fetch_usbserialv>
	}
};
   d4ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial1.write(cmd, length);
	if (UseSerialDebug)
	{
		Serial.print("FPS - SEND: ");
		SendToSerial(cmd, length);
		Serial.println();
   d4aea:	f001 bebc 	b.w	d6866 <_ZN5Print7printlnEv>
   d4aee:	bd70      	pop	{r4, r5, r6, pc}
   d4af0:	000d7932 	.word	0x000d7932

000d4af4 <_ZN11FPS_GT511C311GetResponseEv>:
	}
};

// Gets the response to the command from the software serial channel (and waits for it)
Response_Packet* FPS_GT511C3::GetResponse()
{
   d4af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4af6:	4605      	mov	r5, r0
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
	{
		//firstbyte = (byte)_serial.read();
		firstbyte = (byte)Serial1.read();
   d4af8:	f002 f98c 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4afc:	6803      	ldr	r3, [r0, #0]
   d4afe:	695b      	ldr	r3, [r3, #20]
   d4b00:	4798      	blx	r3
{
	byte firstbyte = 0;
	bool done = false;
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
   d4b02:	b2c6      	uxtb	r6, r0
   d4b04:	2e55      	cmp	r6, #85	; 0x55
   d4b06:	d1f7      	bne.n	d4af8 <_ZN11FPS_GT511C311GetResponseEv+0x4>
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4b08:	200c      	movs	r0, #12
   d4b0a:	f7ff fac6 	bl	d409a <_Znaj>
	resp[0] = firstbyte;
   d4b0e:	7006      	strb	r6, [r0, #0]
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4b10:	4604      	mov	r4, r0
   d4b12:	4606      	mov	r6, r0
   d4b14:	f100 070b 	add.w	r7, r0, #11
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
	{
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
   d4b18:	f002 f97c 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4b1c:	6803      	ldr	r3, [r0, #0]
   d4b1e:	691b      	ldr	r3, [r3, #16]
   d4b20:	4798      	blx	r3
   d4b22:	b918      	cbnz	r0, d4b2c <_ZN11FPS_GT511C311GetResponseEv+0x38>
   d4b24:	200a      	movs	r0, #10
   d4b26:	f001 ff2b 	bl	d6980 <delay>
   d4b2a:	e7f5      	b.n	d4b18 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		resp[i]= (byte) Serial1.read();
   d4b2c:	f002 f972 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d4b30:	6803      	ldr	r3, [r0, #0]
   d4b32:	695b      	ldr	r3, [r3, #20]
   d4b34:	4798      	blx	r3
   d4b36:	f806 0f01 	strb.w	r0, [r6, #1]!
			done = true;
		}
	}
	byte* resp = new byte[12];
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
   d4b3a:	42b7      	cmp	r7, r6
   d4b3c:	d1ec      	bne.n	d4b18 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
		resp[i]= (byte) Serial1.read();
	}
	Response_Packet* rp = new Response_Packet(resp, UseSerialDebug);
   d4b3e:	2016      	movs	r0, #22
   d4b40:	f7ff faa9 	bl	d4096 <_Znwj>
   d4b44:	4606      	mov	r6, r0
   d4b46:	b118      	cbz	r0, d4b50 <_ZN11FPS_GT511C311GetResponseEv+0x5c>
   d4b48:	782a      	ldrb	r2, [r5, #0]
   d4b4a:	4621      	mov	r1, r4
   d4b4c:	f7ff fedc 	bl	d4908 <_ZN15Response_PacketC1EPhb>
	delete resp;
   d4b50:	2101      	movs	r1, #1
   d4b52:	4620      	mov	r0, r4
   d4b54:	f002 fbc5 	bl	d72e2 <_ZdlPvj>
	if (UseSerialDebug)
   d4b58:	782b      	ldrb	r3, [r5, #0]
   d4b5a:	b18b      	cbz	r3, d4b80 <_ZN11FPS_GT511C311GetResponseEv+0x8c>
	{
		Serial.print("FPS - RECV: ");
   d4b5c:	f002 f8a4 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4b60:	4908      	ldr	r1, [pc, #32]	; (d4b84 <_ZN11FPS_GT511C311GetResponseEv+0x90>)
   d4b62:	f001 fe79 	bl	d6858 <_ZN5Print5printEPKc>
		SendToSerial(rp->RawBytes, 12);
   d4b66:	220c      	movs	r2, #12
   d4b68:	1cb1      	adds	r1, r6, #2
   d4b6a:	4628      	mov	r0, r5
   d4b6c:	f7ff ff7c 	bl	d4a68 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d4b70:	f002 f89a 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4b74:	f001 fe77 	bl	d6866 <_ZN5Print7printlnEv>
		Serial.println();
   d4b78:	f002 f896 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4b7c:	f001 fe73 	bl	d6866 <_ZN5Print7printlnEv>
	}
	return rp;
};
   d4b80:	4630      	mov	r0, r6
   d4b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b84:	000d793f 	.word	0x000d793f

000d4b88 <_ZN11FPS_GT511C34OpenEv>:
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d4b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UseSerialDebug) Serial.println("FPS - Open");
   d4b8a:	7803      	ldrb	r3, [r0, #0]
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d4b8c:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - Open");
   d4b8e:	b123      	cbz	r3, d4b9a <_ZN11FPS_GT511C34OpenEv+0x12>
   d4b90:	f002 f88a 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4b94:	4912      	ldr	r1, [pc, #72]	; (d4be0 <_ZN11FPS_GT511C34OpenEv+0x58>)
   d4b96:	f001 fe72 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4b9a:	2007      	movs	r0, #7
   d4b9c:	f7ff fa7b 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Open;
   d4ba0:	2701      	movs	r7, #1
	cp->Parameter[0] = 0x00;
   d4ba2:	2300      	movs	r3, #0
   d4ba4:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d4ba6:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d4ba8:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d4baa:	7103      	strb	r3, [r0, #4]
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Open;
   d4bac:	7007      	strb	r7, [r0, #0]
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
   d4bae:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4bb0:	f7ff fe22 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4bb4:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4bb6:	4606      	mov	r6, r0
	delete cp;
   d4bb8:	4620      	mov	r0, r4
   d4bba:	f002 fb92 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4bbe:	4631      	mov	r1, r6
   d4bc0:	220c      	movs	r2, #12
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	f7ff ff76 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4bc8:	4628      	mov	r0, r5
   d4bca:	f7ff ff93 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	delete rp;
   d4bce:	2116      	movs	r1, #22
   d4bd0:	f002 fb87 	bl	d72e2 <_ZdlPvj>
	delete packetbytes;
   d4bd4:	4639      	mov	r1, r7
   d4bd6:	4630      	mov	r0, r6
}
   d4bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	delete rp;
	delete packetbytes;
   d4bdc:	f002 bb81 	b.w	d72e2 <_ZdlPvj>
   d4be0:	000d794c 	.word	0x000d794c

000d4be4 <_ZN11FPS_GT511C36SetLEDEb>:

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d4be4:	b570      	push	{r4, r5, r6, lr}
   d4be6:	4605      	mov	r5, r0
	Command_Packet* cp = new Command_Packet();
   d4be8:	2007      	movs	r0, #7

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d4bea:	460e      	mov	r6, r1
	Command_Packet* cp = new Command_Packet();
   d4bec:	f7ff fa53 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CmosLed;
   d4bf0:	2312      	movs	r3, #18
   d4bf2:	7003      	strb	r3, [r0, #0]
// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
	Command_Packet* cp = new Command_Packet();
   d4bf4:	4604      	mov	r4, r0
   d4bf6:	782b      	ldrb	r3, [r5, #0]
	cp->Command = Command_Packet::Commands::CmosLed;
	if (on)
   d4bf8:	b13e      	cbz	r6, d4c0a <_ZN11FPS_GT511C36SetLEDEb+0x26>
	{
		if (UseSerialDebug) Serial.println("FPS - LED on");
   d4bfa:	b123      	cbz	r3, d4c06 <_ZN11FPS_GT511C36SetLEDEb+0x22>
   d4bfc:	f002 f854 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4c00:	4915      	ldr	r1, [pc, #84]	; (d4c58 <_ZN11FPS_GT511C36SetLEDEb+0x74>)
   d4c02:	f001 fe3c 	bl	d687e <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x01;
   d4c06:	2301      	movs	r3, #1
   d4c08:	e006      	b.n	d4c18 <_ZN11FPS_GT511C36SetLEDEb+0x34>
	}
	else
	{
		if (UseSerialDebug) Serial.println("FPS - LED off");
   d4c0a:	b123      	cbz	r3, d4c16 <_ZN11FPS_GT511C36SetLEDEb+0x32>
   d4c0c:	f002 f84c 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4c10:	4912      	ldr	r1, [pc, #72]	; (d4c5c <_ZN11FPS_GT511C36SetLEDEb+0x78>)
   d4c12:	f001 fe34 	bl	d687e <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x00;
   d4c16:	2300      	movs	r3, #0
   d4c18:	7063      	strb	r3, [r4, #1]
	}
	cp->Parameter[1] = 0x00;
   d4c1a:	2300      	movs	r3, #0
   d4c1c:	70a3      	strb	r3, [r4, #2]
	cp->Parameter[2] = 0x00;
   d4c1e:	70e3      	strb	r3, [r4, #3]
	cp->Parameter[3] = 0x00;
   d4c20:	7123      	strb	r3, [r4, #4]
	byte* packetbytes = cp->GetPacketBytes();
   d4c22:	4620      	mov	r0, r4
   d4c24:	f7ff fde8 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4c28:	2107      	movs	r1, #7
		cp->Parameter[0] = 0x00;
	}
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4c2a:	4606      	mov	r6, r0
	delete cp;
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	f002 fb58 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4c32:	220c      	movs	r2, #12
   d4c34:	4631      	mov	r1, r6
   d4c36:	4628      	mov	r0, r5
   d4c38:	f7ff ff3c 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f7ff ff59 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = true;
	if (rp->ACK == false) retval = false;
	delete rp;
   d4c42:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = true;
	if (rp->ACK == false) retval = false;
   d4c44:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4c46:	f002 fb4c 	bl	d72e2 <_ZdlPvj>
	delete packetbytes;
   d4c4a:	4630      	mov	r0, r6
   d4c4c:	2101      	movs	r1, #1
   d4c4e:	f002 fb48 	bl	d72e2 <_ZdlPvj>
	return retval;
};
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd70      	pop	{r4, r5, r6, pc}
   d4c56:	bf00      	nop
   d4c58:	000d7963 	.word	0x000d7963
   d4c5c:	000d7970 	.word	0x000d7970

000d4c60 <_ZN11FPS_GT511C313CheckEnrolledEi>:
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT511C3::CheckEnrolled(int id)
{
   d4c60:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d4c62:	7803      	ldrb	r3, [r0, #0]
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT511C3::CheckEnrolled(int id)
{
   d4c64:	4604      	mov	r4, r0
   d4c66:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d4c68:	b123      	cbz	r3, d4c74 <_ZN11FPS_GT511C313CheckEnrolledEi+0x14>
   d4c6a:	f002 f81d 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4c6e:	4912      	ldr	r1, [pc, #72]	; (d4cb8 <_ZN11FPS_GT511C313CheckEnrolledEi+0x58>)
   d4c70:	f001 fe05 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4c74:	2007      	movs	r0, #7
   d4c76:	f7ff fa0e 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CheckEnrolled;
   d4c7a:	2321      	movs	r3, #33	; 0x21
   d4c7c:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d4c7e:	4631      	mov	r1, r6
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT511C3::CheckEnrolled(int id)
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
   d4c80:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
   d4c82:	f7ff fda3 	bl	d47cc <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d4c86:	f7ff fdb7 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4c8a:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d4c8c:	4606      	mov	r6, r0
	delete cp;
   d4c8e:	4628      	mov	r0, r5
   d4c90:	f002 fb27 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4c94:	220c      	movs	r2, #12
   d4c96:	4631      	mov	r1, r6
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff ff0b 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	delete packetbytes;
   d4c9e:	2101      	movs	r1, #1
   d4ca0:	4630      	mov	r0, r6
   d4ca2:	f002 fb1e 	bl	d72e2 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	f7ff ff24 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = false;
	retval = rp->ACK;
   d4cac:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4cae:	2116      	movs	r1, #22
   d4cb0:	f002 fb17 	bl	d72e2 <_ZdlPvj>
	return retval;
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd70      	pop	{r4, r5, r6, pc}
   d4cb8:	000d79aa 	.word	0x000d79aa

000d4cbc <_ZN11FPS_GT511C311EnrollStartEi>:
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT511C3::EnrollStart(int id)
{
   d4cbc:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d4cbe:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT511C3::EnrollStart(int id)
{
   d4cc0:	4604      	mov	r4, r0
   d4cc2:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d4cc4:	b123      	cbz	r3, d4cd0 <_ZN11FPS_GT511C311EnrollStartEi+0x14>
   d4cc6:	f001 ffef 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4cca:	491d      	ldr	r1, [pc, #116]	; (d4d40 <_ZN11FPS_GT511C311EnrollStartEi+0x84>)
   d4ccc:	f001 fdd7 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4cd0:	2007      	movs	r0, #7
   d4cd2:	f7ff f9e0 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::EnrollStart;
   d4cd6:	2322      	movs	r3, #34	; 0x22
   d4cd8:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d4cda:	4631      	mov	r1, r6
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT511C3::EnrollStart(int id)
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
   d4cdc:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
   d4cde:	f7ff fd75 	bl	d47cc <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d4ce2:	f7ff fd89 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4ce6:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d4ce8:	4606      	mov	r6, r0
	delete cp;
   d4cea:	4628      	mov	r0, r5
   d4cec:	f002 faf9 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4cf0:	220c      	movs	r2, #12
   d4cf2:	4631      	mov	r1, r6
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	f7ff fedd 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	delete packetbytes;
   d4cfa:	2101      	movs	r1, #1
   d4cfc:	4630      	mov	r0, r6
   d4cfe:	f002 faf0 	bl	d72e2 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4d02:	4620      	mov	r0, r4
   d4d04:	f7ff fef6 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	int retval = 0;
	if (rp->ACK == false)
   d4d08:	7d03      	ldrb	r3, [r0, #20]
   d4d0a:	b97b      	cbnz	r3, d4d2c <_ZN11FPS_GT511C311EnrollStartEi+0x70>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d4d0c:	8803      	ldrh	r3, [r0, #0]
   d4d0e:	f241 0209 	movw	r2, #4105	; 0x1009
   d4d12:	4293      	cmp	r3, r2
   d4d14:	d00c      	beq.n	d4d30 <_ZN11FPS_GT511C311EnrollStartEi+0x74>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d4d16:	f241 0203 	movw	r2, #4099	; 0x1003
   d4d1a:	4293      	cmp	r3, r2
   d4d1c:	d00a      	beq.n	d4d34 <_ZN11FPS_GT511C311EnrollStartEi+0x78>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
   d4d1e:	f241 0405 	movw	r4, #4101	; 0x1005
   d4d22:	42a3      	cmp	r3, r4
   d4d24:	bf0c      	ite	eq
   d4d26:	2403      	moveq	r4, #3
   d4d28:	2400      	movne	r4, #0
   d4d2a:	e004      	b.n	d4d36 <_ZN11FPS_GT511C311EnrollStartEi+0x7a>
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = 0;
   d4d2c:	2400      	movs	r4, #0
   d4d2e:	e002      	b.n	d4d36 <_ZN11FPS_GT511C311EnrollStartEi+0x7a>
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d4d30:	2401      	movs	r4, #1
   d4d32:	e000      	b.n	d4d36 <_ZN11FPS_GT511C311EnrollStartEi+0x7a>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d4d34:	2402      	movs	r4, #2
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
	}
	delete rp;
   d4d36:	2116      	movs	r1, #22
   d4d38:	f002 fad3 	bl	d72e2 <_ZdlPvj>
	return retval;
}
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	bd70      	pop	{r4, r5, r6, pc}
   d4d40:	000d79be 	.word	0x000d79be

000d4d44 <_ZN11FPS_GT511C37Enroll1Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll1()
{
   d4d44:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d4d46:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll1()
{
   d4d48:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d4d4a:	b123      	cbz	r3, d4d56 <_ZN11FPS_GT511C37Enroll1Ev+0x12>
   d4d4c:	f001 ffac 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4d50:	491d      	ldr	r1, [pc, #116]	; (d4dc8 <_ZN11FPS_GT511C37Enroll1Ev+0x84>)
   d4d52:	f001 fd94 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4d56:	2007      	movs	r0, #7
   d4d58:	f7ff f99d 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll1;
   d4d5c:	2323      	movs	r3, #35	; 0x23
   d4d5e:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
   d4d60:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d4d62:	f7ff fd49 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4d66:	2107      	movs	r1, #7
int FPS_GT511C3::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d4d68:	4605      	mov	r5, r0
	delete cp;
   d4d6a:	4630      	mov	r0, r6
   d4d6c:	f002 fab9 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4d70:	220c      	movs	r2, #12
   d4d72:	4620      	mov	r0, r4
   d4d74:	4629      	mov	r1, r5
   d4d76:	f7ff fe9d 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	delete packetbytes;
   d4d7a:	2101      	movs	r1, #1
   d4d7c:	4628      	mov	r0, r5
   d4d7e:	f002 fab0 	bl	d72e2 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4d82:	4620      	mov	r0, r4
   d4d84:	f7ff feb6 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
   d4d88:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4d8a:	f7ff fd65 	bl	d4858 <_ZN15Response_Packet16IntFromParameterEv>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4d8e:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d4d90:	28c7      	cmp	r0, #199	; 0xc7
   d4d92:	bfd4      	ite	le
   d4d94:	2403      	movle	r4, #3
   d4d96:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4d98:	b95b      	cbnz	r3, d4db2 <_ZN11FPS_GT511C37Enroll1Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4d9a:	882b      	ldrh	r3, [r5, #0]
   d4d9c:	f241 020d 	movw	r2, #4109	; 0x100d
   d4da0:	4293      	cmp	r3, r2
   d4da2:	d005      	beq.n	d4db0 <_ZN11FPS_GT511C37Enroll1Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4da4:	f241 020c 	movw	r2, #4108	; 0x100c
   d4da8:	4293      	cmp	r3, r2
   d4daa:	bf08      	it	eq
   d4dac:	2402      	moveq	r4, #2
   d4dae:	e000      	b.n	d4db2 <_ZN11FPS_GT511C37Enroll1Ev+0x6e>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4db0:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4db2:	4628      	mov	r0, r5
   d4db4:	2116      	movs	r1, #22
   d4db6:	f002 fa94 	bl	d72e2 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4dba:	7d2b      	ldrb	r3, [r5, #20]
   d4dbc:	2b00      	cmp	r3, #0
}
   d4dbe:	bf0c      	ite	eq
   d4dc0:	4620      	moveq	r0, r4
   d4dc2:	2000      	movne	r0, #0
   d4dc4:	bd70      	pop	{r4, r5, r6, pc}
   d4dc6:	bf00      	nop
   d4dc8:	000d79d0 	.word	0x000d79d0

000d4dcc <_ZN11FPS_GT511C37Enroll2Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll2()
{
   d4dcc:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d4dce:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll2()
{
   d4dd0:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d4dd2:	b123      	cbz	r3, d4dde <_ZN11FPS_GT511C37Enroll2Ev+0x12>
   d4dd4:	f001 ff68 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4dd8:	491d      	ldr	r1, [pc, #116]	; (d4e50 <_ZN11FPS_GT511C37Enroll2Ev+0x84>)
   d4dda:	f001 fd50 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4dde:	2007      	movs	r0, #7
   d4de0:	f7ff f959 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll2;
   d4de4:	2324      	movs	r3, #36	; 0x24
   d4de6:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
   d4de8:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d4dea:	f7ff fd05 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4dee:	2107      	movs	r1, #7
int FPS_GT511C3::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d4df0:	4605      	mov	r5, r0
	delete cp;
   d4df2:	4630      	mov	r0, r6
   d4df4:	f002 fa75 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4df8:	220c      	movs	r2, #12
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	4629      	mov	r1, r5
   d4dfe:	f7ff fe59 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	delete packetbytes;
   d4e02:	2101      	movs	r1, #1
   d4e04:	4628      	mov	r0, r5
   d4e06:	f002 fa6c 	bl	d72e2 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f7ff fe72 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
   d4e10:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4e12:	f7ff fd21 	bl	d4858 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4e16:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d4e18:	28c7      	cmp	r0, #199	; 0xc7
   d4e1a:	bfd4      	ite	le
   d4e1c:	2403      	movle	r4, #3
   d4e1e:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4e20:	b95b      	cbnz	r3, d4e3a <_ZN11FPS_GT511C37Enroll2Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4e22:	882b      	ldrh	r3, [r5, #0]
   d4e24:	f241 020d 	movw	r2, #4109	; 0x100d
   d4e28:	4293      	cmp	r3, r2
   d4e2a:	d005      	beq.n	d4e38 <_ZN11FPS_GT511C37Enroll2Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4e2c:	f241 020c 	movw	r2, #4108	; 0x100c
   d4e30:	4293      	cmp	r3, r2
   d4e32:	bf08      	it	eq
   d4e34:	2402      	moveq	r4, #2
   d4e36:	e000      	b.n	d4e3a <_ZN11FPS_GT511C37Enroll2Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4e38:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4e3a:	4628      	mov	r0, r5
   d4e3c:	2116      	movs	r1, #22
   d4e3e:	f002 fa50 	bl	d72e2 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4e42:	7d2b      	ldrb	r3, [r5, #20]
   d4e44:	2b00      	cmp	r3, #0
}
   d4e46:	bf0c      	ite	eq
   d4e48:	4620      	moveq	r0, r4
   d4e4a:	2000      	movne	r0, #0
   d4e4c:	bd70      	pop	{r4, r5, r6, pc}
   d4e4e:	bf00      	nop
   d4e50:	000d79de 	.word	0x000d79de

000d4e54 <_ZN11FPS_GT511C37Enroll3Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll3()
{
   d4e54:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d4e56:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll3()
{
   d4e58:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d4e5a:	b123      	cbz	r3, d4e66 <_ZN11FPS_GT511C37Enroll3Ev+0x12>
   d4e5c:	f001 ff24 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4e60:	491d      	ldr	r1, [pc, #116]	; (d4ed8 <_ZN11FPS_GT511C37Enroll3Ev+0x84>)
   d4e62:	f001 fd0c 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4e66:	2007      	movs	r0, #7
   d4e68:	f7ff f915 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll3;
   d4e6c:	2325      	movs	r3, #37	; 0x25
   d4e6e:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT511C3::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
   d4e70:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d4e72:	f7ff fcc1 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4e76:	2107      	movs	r1, #7
int FPS_GT511C3::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d4e78:	4605      	mov	r5, r0
	delete cp;
   d4e7a:	4630      	mov	r0, r6
   d4e7c:	f002 fa31 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4e80:	220c      	movs	r2, #12
   d4e82:	4620      	mov	r0, r4
   d4e84:	4629      	mov	r1, r5
   d4e86:	f7ff fe15 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	delete packetbytes;
   d4e8a:	2101      	movs	r1, #1
   d4e8c:	4628      	mov	r0, r5
   d4e8e:	f002 fa28 	bl	d72e2 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4e92:	4620      	mov	r0, r4
   d4e94:	f7ff fe2e 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
   d4e98:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4e9a:	f7ff fcdd 	bl	d4858 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4e9e:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
   d4ea0:	28c7      	cmp	r0, #199	; 0xc7
   d4ea2:	bfd4      	ite	le
   d4ea4:	2403      	movle	r4, #3
   d4ea6:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4ea8:	b95b      	cbnz	r3, d4ec2 <_ZN11FPS_GT511C37Enroll3Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4eaa:	882b      	ldrh	r3, [r5, #0]
   d4eac:	f241 020d 	movw	r2, #4109	; 0x100d
   d4eb0:	4293      	cmp	r3, r2
   d4eb2:	d005      	beq.n	d4ec0 <_ZN11FPS_GT511C37Enroll3Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4eb4:	f241 020c 	movw	r2, #4108	; 0x100c
   d4eb8:	4293      	cmp	r3, r2
   d4eba:	bf08      	it	eq
   d4ebc:	2402      	moveq	r4, #2
   d4ebe:	e000      	b.n	d4ec2 <_ZN11FPS_GT511C37Enroll3Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4ec0:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	2116      	movs	r1, #22
   d4ec6:	f002 fa0c 	bl	d72e2 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4eca:	7d2b      	ldrb	r3, [r5, #20]
   d4ecc:	2b00      	cmp	r3, #0
}
   d4ece:	bf0c      	ite	eq
   d4ed0:	4620      	moveq	r0, r4
   d4ed2:	2000      	movne	r0, #0
   d4ed4:	bd70      	pop	{r4, r5, r6, pc}
   d4ed6:	bf00      	nop
   d4ed8:	000d79ec 	.word	0x000d79ec

000d4edc <_ZN11FPS_GT511C313IsPressFingerEv>:

// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT511C3::IsPressFinger()
{
   d4edc:	b570      	push	{r4, r5, r6, lr}
   d4ede:	4605      	mov	r5, r0
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d4ee0:	2007      	movs	r0, #7
   d4ee2:	f7ff f8d8 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::IsPressFinger;
   d4ee6:	2326      	movs	r3, #38	; 0x26
   d4ee8:	7003      	strb	r3, [r0, #0]
// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT511C3::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d4eea:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4eec:	f7ff fc84 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4ef0:	2107      	movs	r1, #7
bool FPS_GT511C3::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4ef2:	4604      	mov	r4, r0
	delete cp;
   d4ef4:	4630      	mov	r0, r6
   d4ef6:	f002 f9f4 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4efa:	4628      	mov	r0, r5
   d4efc:	4621      	mov	r1, r4
   d4efe:	220c      	movs	r2, #12
   d4f00:	f7ff fdd8 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4f04:	4628      	mov	r0, r5
   d4f06:	f7ff fdf5 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d4f0a:	7bc1      	ldrb	r1, [r0, #15]
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
   d4f0c:	7b83      	ldrb	r3, [r0, #14]
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4f0e:	7c42      	ldrb	r2, [r0, #17]
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d4f10:	440b      	add	r3, r1
	pval += rp->ParameterBytes[2];
   d4f12:	7c01      	ldrb	r1, [r0, #16]
   d4f14:	440b      	add	r3, r1
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4f16:	42da      	cmn	r2, r3
	delete rp;
   d4f18:	f04f 0116 	mov.w	r1, #22
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4f1c:	bf0c      	ite	eq
   d4f1e:	2501      	moveq	r5, #1
   d4f20:	2500      	movne	r5, #0
	delete rp;
   d4f22:	f002 f9de 	bl	d72e2 <_ZdlPvj>
	delete packetbytes;
   d4f26:	4620      	mov	r0, r4
   d4f28:	2101      	movs	r1, #1
   d4f2a:	f002 f9da 	bl	d72e2 <_ZdlPvj>
	return retval;
}
   d4f2e:	4628      	mov	r0, r5
   d4f30:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f34 <_ZN11FPS_GT511C311Identify1_NEv>:
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
   d4f34:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d4f36:	7803      	ldrb	r3, [r0, #0]
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
   d4f38:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d4f3a:	b123      	cbz	r3, d4f46 <_ZN11FPS_GT511C311Identify1_NEv+0x12>
   d4f3c:	f001 feb4 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4f40:	4914      	ldr	r1, [pc, #80]	; (d4f94 <_ZN11FPS_GT511C311Identify1_NEv+0x60>)
   d4f42:	f001 fc9c 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4f46:	2007      	movs	r0, #7
   d4f48:	f7ff f8a5 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Identify1_N;
   d4f4c:	2351      	movs	r3, #81	; 0x51
   d4f4e:	7003      	strb	r3, [r0, #0]
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
   d4f50:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d4f52:	f7ff fc51 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4f56:	2107      	movs	r1, #7
int FPS_GT511C3::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d4f58:	4605      	mov	r5, r0
	delete cp;
   d4f5a:	4630      	mov	r0, r6
   d4f5c:	f002 f9c1 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4f60:	220c      	movs	r2, #12
   d4f62:	4629      	mov	r1, r5
   d4f64:	4620      	mov	r0, r4
   d4f66:	f7ff fda5 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f7ff fdc2 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
   d4f70:	4606      	mov	r6, r0
	int retval = rp->IntFromParameter();
   d4f72:	f7ff fc71 	bl	d4858 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4f76:	2116      	movs	r1, #22
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
   d4f78:	4604      	mov	r4, r0
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4f7a:	4630      	mov	r0, r6
   d4f7c:	f002 f9b1 	bl	d72e2 <_ZdlPvj>
	delete packetbytes;
   d4f80:	4628      	mov	r0, r5
   d4f82:	2101      	movs	r1, #1
   d4f84:	f002 f9ad 	bl	d72e2 <_ZdlPvj>
	return retval;
}
   d4f88:	2cc8      	cmp	r4, #200	; 0xc8
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	bfa8      	it	ge
   d4f8e:	20c8      	movge	r0, #200	; 0xc8
   d4f90:	bd70      	pop	{r4, r5, r6, pc}
   d4f92:	bf00      	nop
   d4f94:	000d7a29 	.word	0x000d7a29

000d4f98 <_ZN11FPS_GT511C313CaptureFingerEb>:
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
   d4f98:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4f9a:	7803      	ldrb	r3, [r0, #0]
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
   d4f9c:	4606      	mov	r6, r0
   d4f9e:	460d      	mov	r5, r1
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4fa0:	b123      	cbz	r3, d4fac <_ZN11FPS_GT511C313CaptureFingerEb+0x14>
   d4fa2:	f001 fe81 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d4fa6:	4917      	ldr	r1, [pc, #92]	; (d5004 <_ZN11FPS_GT511C313CaptureFingerEb+0x6c>)
   d4fa8:	f001 fc69 	bl	d687e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4fac:	2007      	movs	r0, #7
   d4fae:	f7ff f872 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4fb2:	2360      	movs	r3, #96	; 0x60
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
	Command_Packet* cp = new Command_Packet();
   d4fb4:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4fb6:	7003      	strb	r3, [r0, #0]
	if (highquality)
   d4fb8:	b135      	cbz	r5, d4fc8 <_ZN11FPS_GT511C313CaptureFingerEb+0x30>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4fba:	2301      	movs	r3, #1
   d4fbc:	7043      	strb	r3, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4fc2:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4fc4:	7103      	strb	r3, [r0, #4]
   d4fc6:	e003      	b.n	d4fd0 <_ZN11FPS_GT511C313CaptureFingerEb+0x38>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4fc8:	7045      	strb	r5, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4fca:	7085      	strb	r5, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4fcc:	70c5      	strb	r5, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4fce:	7105      	strb	r5, [r0, #4]
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f7ff fc11 	bl	d47f8 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4fd6:	2107      	movs	r1, #7
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4fd8:	4605      	mov	r5, r0
	delete cp;
   d4fda:	4620      	mov	r0, r4
   d4fdc:	f002 f981 	bl	d72e2 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4fe0:	220c      	movs	r2, #12
   d4fe2:	4629      	mov	r1, r5
   d4fe4:	4630      	mov	r0, r6
   d4fe6:	f7ff fd65 	bl	d4ab4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4fea:	4630      	mov	r0, r6
   d4fec:	f7ff fd82 	bl	d4af4 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = rp->ACK;
	delete rp;
   d4ff0:	2116      	movs	r1, #22
	}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = rp->ACK;
   d4ff2:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4ff4:	f002 f975 	bl	d72e2 <_ZdlPvj>
	delete packetbytes;
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	2101      	movs	r1, #1
   d4ffc:	f002 f971 	bl	d72e2 <_ZdlPvj>
	return retval;

}
   d5000:	4620      	mov	r0, r4
   d5002:	bd70      	pop	{r4, r5, r6, pc}
   d5004:	000d7a3b 	.word	0x000d7a3b

000d5008 <_GLOBAL__sub_I__ZN14Command_Packet14GetPacketBytesEv>:
   d5008:	f000 b810 	b.w	d502c <HAL_Pin_Map>

000d500c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <netdb_freeaddrinfo+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	689b      	ldr	r3, [r3, #8]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030268 	.word	0x00030268

000d501c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <netdb_getaddrinfo+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	68db      	ldr	r3, [r3, #12]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030268 	.word	0x00030268

000d502c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <HAL_Pin_Map+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	681b      	ldr	r3, [r3, #0]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	0003022c 	.word	0x0003022c

000d503c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_Validate_Pin_Function+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	685b      	ldr	r3, [r3, #4]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	0003022c 	.word	0x0003022c

000d504c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_Pin_Mode+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	689b      	ldr	r3, [r3, #8]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	0003022c 	.word	0x0003022c

000d505c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_Get_Pin_Mode+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	68db      	ldr	r3, [r3, #12]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003022c 	.word	0x0003022c

000d506c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_GPIO_Write+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	691b      	ldr	r3, [r3, #16]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003022c 	.word	0x0003022c

000d507c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_GPIO_Read+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	695b      	ldr	r3, [r3, #20]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003022c 	.word	0x0003022c

000d508c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_SPI_Init+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	69db      	ldr	r3, [r3, #28]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030230 	.word	0x00030230

000d509c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_SPI_Is_Enabled+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6a1b      	ldr	r3, [r3, #32]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030230 	.word	0x00030230

000d50ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_RNG_GetRandomNumber+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	685b      	ldr	r3, [r3, #4]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030218 	.word	0x00030218

000d50bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_Delay_Microseconds+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	68db      	ldr	r3, [r3, #12]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030218 	.word	0x00030218

000d50cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	695b      	ldr	r3, [r3, #20]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030218 	.word	0x00030218

000d50dc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <hal_ble_stack_init+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	689b      	ldr	r3, [r3, #8]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030274 	.word	0x00030274

000d50ec <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <hal_ble_gap_set_advertising_data+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030274 	.word	0x00030274

000d50fc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <hal_ble_gap_set_scan_response_data+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030274 	.word	0x00030274

000d510c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <hal_ble_gap_start_advertising+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030274 	.word	0x00030274

000d511c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b03      	ldr	r3, [pc, #12]	; (d512c <hal_ble_gap_disconnect+0x10>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5126:	9301      	str	r3, [sp, #4]
   d5128:	bd08      	pop	{r3, pc}
   d512a:	0000      	.short	0x0000
   d512c:	00030274 	.word	0x00030274

000d5130 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b03      	ldr	r3, [pc, #12]	; (d5140 <hal_ble_gatt_server_add_service+0x10>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d513a:	9301      	str	r3, [sp, #4]
   d513c:	bd08      	pop	{r3, pc}
   d513e:	0000      	.short	0x0000
   d5140:	00030274 	.word	0x00030274

000d5144 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b03      	ldr	r3, [pc, #12]	; (d5154 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d514e:	9301      	str	r3, [sp, #4]
   d5150:	bd08      	pop	{r3, pc}
   d5152:	0000      	.short	0x0000
   d5154:	00030274 	.word	0x00030274

000d5158 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b03      	ldr	r3, [pc, #12]	; (d5168 <hal_ble_gatt_client_write_with_response+0x10>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5162:	9301      	str	r3, [sp, #4]
   d5164:	bd08      	pop	{r3, pc}
   d5166:	0000      	.short	0x0000
   d5168:	00030274 	.word	0x00030274

000d516c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b03      	ldr	r3, [pc, #12]	; (d517c <hal_ble_gatt_client_write_without_response+0x10>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5176:	9301      	str	r3, [sp, #4]
   d5178:	bd08      	pop	{r3, pc}
   d517a:	0000      	.short	0x0000
   d517c:	00030274 	.word	0x00030274

000d5180 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b03      	ldr	r3, [pc, #12]	; (d5190 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d518a:	9301      	str	r3, [sp, #4]
   d518c:	bd08      	pop	{r3, pc}
   d518e:	0000      	.short	0x0000
   d5190:	00030274 	.word	0x00030274

000d5194 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b03      	ldr	r3, [pc, #12]	; (d51a4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d519e:	9301      	str	r3, [sp, #4]
   d51a0:	bd08      	pop	{r3, pc}
   d51a2:	0000      	.short	0x0000
   d51a4:	00030274 	.word	0x00030274

000d51a8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b03      	ldr	r3, [pc, #12]	; (d51b8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d51b2:	9301      	str	r3, [sp, #4]
   d51b4:	bd08      	pop	{r3, pc}
   d51b6:	0000      	.short	0x0000
   d51b8:	00030274 	.word	0x00030274

000d51bc <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b03      	ldr	r3, [pc, #12]	; (d51cc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d51c6:	9301      	str	r3, [sp, #4]
   d51c8:	bd08      	pop	{r3, pc}
   d51ca:	0000      	.short	0x0000
   d51cc:	00030274 	.word	0x00030274

000d51d0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <os_thread_is_current+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	689b      	ldr	r3, [r3, #8]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030248 	.word	0x00030248

000d51e0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <os_thread_join+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	691b      	ldr	r3, [r3, #16]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030248 	.word	0x00030248

000d51f0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <os_thread_cleanup+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	695b      	ldr	r3, [r3, #20]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030248 	.word	0x00030248

000d5200 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <os_mutex_create+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030248 	.word	0x00030248

000d5210 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <os_mutex_recursive_create+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030248 	.word	0x00030248

000d5220 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <os_mutex_recursive_lock+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030248 	.word	0x00030248

000d5230 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <os_mutex_recursive_unlock+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030248 	.word	0x00030248

000d5240 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <inet_inet_ntop+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	695b      	ldr	r3, [r3, #20]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030264 	.word	0x00030264

000d5250 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_USART_Init+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	681b      	ldr	r3, [r3, #0]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	0003023c 	.word	0x0003023c

000d5260 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <HAL_USART_End+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	689b      	ldr	r3, [r3, #8]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	0003023c 	.word	0x0003023c

000d5270 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <HAL_USART_Write_Data+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	68db      	ldr	r3, [r3, #12]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	0003023c 	.word	0x0003023c

000d5280 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <HAL_USART_Available_Data+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	691b      	ldr	r3, [r3, #16]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003023c 	.word	0x0003023c

000d5290 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <HAL_USART_Read_Data+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	695b      	ldr	r3, [r3, #20]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003023c 	.word	0x0003023c

000d52a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <HAL_USART_Peek_Data+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	699b      	ldr	r3, [r3, #24]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003023c 	.word	0x0003023c

000d52b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <HAL_USART_Flush_Data+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	69db      	ldr	r3, [r3, #28]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003023c 	.word	0x0003023c

000d52c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <HAL_USART_Is_Enabled+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	6a1b      	ldr	r3, [r3, #32]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003023c 	.word	0x0003023c

000d52d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_USART_Available_Data_For_Write+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003023c 	.word	0x0003023c

000d52e0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_USART_BeginConfig+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003023c 	.word	0x0003023c

000d52f0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_I2C_Write_Data+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	6a1b      	ldr	r3, [r3, #32]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030228 	.word	0x00030228

000d5300 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_I2C_Available_Data+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030228 	.word	0x00030228

000d5310 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_I2C_Read_Data+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030228 	.word	0x00030228

000d5320 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_I2C_Peek_Data+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030228 	.word	0x00030228

000d5330 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_I2C_Flush_Data+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030228 	.word	0x00030228

000d5340 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_I2C_Is_Enabled+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030228 	.word	0x00030228

000d5350 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <HAL_I2C_Init+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030228 	.word	0x00030228

000d5360 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <HAL_Tone_Start+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	681b      	ldr	r3, [r3, #0]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030224 	.word	0x00030224

000d5370 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <HAL_Tone_Stop+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	685b      	ldr	r3, [r3, #4]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030224 	.word	0x00030224

000d5380 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <HAL_USB_USART_Init+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	681b      	ldr	r3, [r3, #0]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	0003024c 	.word	0x0003024c

000d5390 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <HAL_USB_USART_Available_Data+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	691b      	ldr	r3, [r3, #16]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	0003024c 	.word	0x0003024c

000d53a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	695b      	ldr	r3, [r3, #20]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	0003024c 	.word	0x0003024c

000d53b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <HAL_USB_USART_Receive_Data+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	699b      	ldr	r3, [r3, #24]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	0003024c 	.word	0x0003024c

000d53c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <HAL_USB_USART_Send_Data+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	69db      	ldr	r3, [r3, #28]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	0003024c 	.word	0x0003024c

000d53d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <HAL_USB_USART_Flush_Data+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	6a1b      	ldr	r3, [r3, #32]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	0003024c 	.word	0x0003024c

000d53e0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <LED_SetSignalingColor+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	685b      	ldr	r3, [r3, #4]
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030260 	.word	0x00030260

000d53f0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <LED_Signaling_Start+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030260 	.word	0x00030260

000d5400 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <LED_Signaling_Stop+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	68db      	ldr	r3, [r3, #12]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030260 	.word	0x00030260

000d5410 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <LED_SetBrightness+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	691b      	ldr	r3, [r3, #16]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030260 	.word	0x00030260

000d5420 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <LED_RGB_IsOverRidden+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	699b      	ldr	r3, [r3, #24]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030260 	.word	0x00030260

000d5430 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <LED_On+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	69db      	ldr	r3, [r3, #28]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030260 	.word	0x00030260

000d5440 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <panic_+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030260 	.word	0x00030260

000d5450 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <log_message+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030260 	.word	0x00030260

000d5460 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <set_system_mode+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	685b      	ldr	r3, [r3, #4]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030220 	.word	0x00030220

000d5470 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <system_delay_ms+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	695b      	ldr	r3, [r3, #20]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	00030220 	.word	0x00030220

000d5480 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b03      	ldr	r3, [pc, #12]	; (d5490 <system_ctrl_set_app_request_handler+0x10>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d548a:	9301      	str	r3, [sp, #4]
   d548c:	bd08      	pop	{r3, pc}
   d548e:	0000      	.short	0x0000
   d5490:	00030220 	.word	0x00030220

000d5494 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b03      	ldr	r3, [pc, #12]	; (d54a4 <system_ctrl_set_result+0x10>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d549e:	9301      	str	r3, [sp, #4]
   d54a0:	bd08      	pop	{r3, pc}
   d54a2:	0000      	.short	0x0000
   d54a4:	00030220 	.word	0x00030220

000d54a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <network_connect+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	685b      	ldr	r3, [r3, #4]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030240 	.word	0x00030240

000d54b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <network_connecting+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	689b      	ldr	r3, [r3, #8]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030240 	.word	0x00030240

000d54c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <network_disconnect+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	68db      	ldr	r3, [r3, #12]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030240 	.word	0x00030240

000d54d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <network_ready+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	691b      	ldr	r3, [r3, #16]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030240 	.word	0x00030240

000d54e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <network_on+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	695b      	ldr	r3, [r3, #20]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030240 	.word	0x00030240

000d54f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <network_off+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	699b      	ldr	r3, [r3, #24]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030240 	.word	0x00030240

000d5508 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <network_listen+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	69db      	ldr	r3, [r3, #28]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030240 	.word	0x00030240

000d5518 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <network_listening+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6a1b      	ldr	r3, [r3, #32]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030240 	.word	0x00030240

000d5528 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <network_set_listen_timeout+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030240 	.word	0x00030240

000d5538 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <network_get_listen_timeout+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030240 	.word	0x00030240

000d5548 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <spark_set_random_seed_from_cloud_handler+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030244 	.word	0x00030244

000d5558 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <malloc+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	681b      	ldr	r3, [r3, #0]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003021c 	.word	0x0003021c

000d5568 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <free+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	685b      	ldr	r3, [r3, #4]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003021c 	.word	0x0003021c

000d5578 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <realloc+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	689b      	ldr	r3, [r3, #8]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003021c 	.word	0x0003021c

000d5588 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <sprintf+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	68db      	ldr	r3, [r3, #12]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	0003021c 	.word	0x0003021c

000d5598 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5598:	2200      	movs	r2, #0
   d559a:	4611      	mov	r1, r2
   d559c:	6840      	ldr	r0, [r0, #4]
   d559e:	f7ff bfbb 	b.w	d5518 <network_listening>

000d55a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55a2:	2200      	movs	r2, #0
   d55a4:	4611      	mov	r1, r2
   d55a6:	6840      	ldr	r0, [r0, #4]
   d55a8:	f7ff bfc6 	b.w	d5538 <network_get_listen_timeout>

000d55ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55ac:	2200      	movs	r2, #0
   d55ae:	6840      	ldr	r0, [r0, #4]
   d55b0:	f7ff bfba 	b.w	d5528 <network_set_listen_timeout>

000d55b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55b4:	2200      	movs	r2, #0
   d55b6:	f081 0101 	eor.w	r1, r1, #1
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	f7ff bfa4 	b.w	d5508 <network_listen>

000d55c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55c0:	2300      	movs	r3, #0
   d55c2:	461a      	mov	r2, r3
   d55c4:	4619      	mov	r1, r3
   d55c6:	6840      	ldr	r0, [r0, #4]
   d55c8:	f7ff bf96 	b.w	d54f8 <network_off>

000d55cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55cc:	2300      	movs	r3, #0
   d55ce:	461a      	mov	r2, r3
   d55d0:	4619      	mov	r1, r3
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	f7ff bf88 	b.w	d54e8 <network_on>

000d55d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55d8:	2200      	movs	r2, #0
   d55da:	4611      	mov	r1, r2
   d55dc:	6840      	ldr	r0, [r0, #4]
   d55de:	f7ff bf7b 	b.w	d54d8 <network_ready>

000d55e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55e2:	2200      	movs	r2, #0
   d55e4:	4611      	mov	r1, r2
   d55e6:	6840      	ldr	r0, [r0, #4]
   d55e8:	f7ff bf66 	b.w	d54b8 <network_connecting>

000d55ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55ec:	2200      	movs	r2, #0
   d55ee:	2102      	movs	r1, #2
   d55f0:	6840      	ldr	r0, [r0, #4]
   d55f2:	f7ff bf69 	b.w	d54c8 <network_disconnect>

000d55f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55f6:	2300      	movs	r3, #0
   d55f8:	461a      	mov	r2, r3
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	f7ff bf54 	b.w	d54a8 <network_connect>

000d5600 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5600:	4b02      	ldr	r3, [pc, #8]	; (d560c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5602:	2203      	movs	r2, #3
   d5604:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5606:	4a02      	ldr	r2, [pc, #8]	; (d5610 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5608:	601a      	str	r2, [r3, #0]
   d560a:	4770      	bx	lr
   d560c:	2003e3c4 	.word	0x2003e3c4
   d5610:	000d7a58 	.word	0x000d7a58

000d5614 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5614:	4770      	bx	lr

000d5616 <_ZN8SPIClassD0Ev>:
   d5616:	b510      	push	{r4, lr}
   d5618:	2110      	movs	r1, #16
   d561a:	4604      	mov	r4, r0
   d561c:	f001 fe61 	bl	d72e2 <_ZdlPvj>
   d5620:	4620      	mov	r0, r4
   d5622:	bd10      	pop	{r4, pc}

000d5624 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5624:	b570      	push	{r4, r5, r6, lr}
   d5626:	4b08      	ldr	r3, [pc, #32]	; (d5648 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5628:	6003      	str	r3, [r0, #0]
   d562a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d562c:	2500      	movs	r5, #0
   d562e:	460e      	mov	r6, r1
   d5630:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5634:	f7ff fde4 	bl	d5200 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5638:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d563a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d563c:	f7ff fd26 	bl	d508c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5640:	60a5      	str	r5, [r4, #8]
}
   d5642:	4620      	mov	r0, r4
   d5644:	bd70      	pop	{r4, r5, r6, pc}
   d5646:	bf00      	nop
   d5648:	000d7a8c 	.word	0x000d7a8c

000d564c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d564c:	7900      	ldrb	r0, [r0, #4]
   d564e:	f7ff bd25 	b.w	d509c <HAL_SPI_Is_Enabled>
	...

000d5654 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5654:	4b04      	ldr	r3, [pc, #16]	; (d5668 <_GLOBAL__sub_I_System+0x14>)
   d5656:	2000      	movs	r0, #0
   d5658:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d565c:	7018      	strb	r0, [r3, #0]
   d565e:	8058      	strh	r0, [r3, #2]
   d5660:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5662:	f7ff befd 	b.w	d5460 <set_system_mode>
   d5666:	bf00      	nop
   d5668:	2003e3cc 	.word	0x2003e3cc

000d566c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d566c:	b510      	push	{r4, lr}
   d566e:	4604      	mov	r4, r0
{
	free(buffer);
   d5670:	6800      	ldr	r0, [r0, #0]
   d5672:	f7ff ff79 	bl	d5568 <free>
}
   d5676:	4620      	mov	r0, r4
   d5678:	bd10      	pop	{r4, pc}

000d567a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d567a:	b510      	push	{r4, lr}
   d567c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d567e:	6800      	ldr	r0, [r0, #0]
   d5680:	b108      	cbz	r0, d5686 <_ZN6String10invalidateEv+0xc>
   d5682:	f7ff ff71 	bl	d5568 <free>
	buffer = NULL;
   d5686:	2300      	movs	r3, #0
   d5688:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d568a:	60a3      	str	r3, [r4, #8]
   d568c:	6063      	str	r3, [r4, #4]
   d568e:	bd10      	pop	{r4, pc}

000d5690 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5690:	b538      	push	{r3, r4, r5, lr}
   d5692:	4604      	mov	r4, r0
   d5694:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5696:	6800      	ldr	r0, [r0, #0]
   d5698:	3101      	adds	r1, #1
   d569a:	f7ff ff6d 	bl	d5578 <realloc>
	if (newbuffer) {
   d569e:	b110      	cbz	r0, d56a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d56a0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d56a4:	2001      	movs	r0, #1
	}
	return 0;
}
   d56a6:	bd38      	pop	{r3, r4, r5, pc}

000d56a8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d56a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d56aa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d56ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d56ae:	b113      	cbz	r3, d56b6 <_ZN6String7reserveEj+0xe>
   d56b0:	6843      	ldr	r3, [r0, #4]
   d56b2:	428b      	cmp	r3, r1
   d56b4:	d207      	bcs.n	d56c6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d56b6:	4620      	mov	r0, r4
   d56b8:	f7ff ffea 	bl	d5690 <_ZN6String12changeBufferEj>
   d56bc:	b120      	cbz	r0, d56c8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d56be:	68a3      	ldr	r3, [r4, #8]
   d56c0:	b90b      	cbnz	r3, d56c6 <_ZN6String7reserveEj+0x1e>
   d56c2:	6822      	ldr	r2, [r4, #0]
   d56c4:	7013      	strb	r3, [r2, #0]
   d56c6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d56c8:	bd10      	pop	{r4, pc}

000d56ca <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d56ca:	b570      	push	{r4, r5, r6, lr}
   d56cc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d56ce:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d56d0:	4604      	mov	r4, r0
   d56d2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d56d4:	f7ff ffe8 	bl	d56a8 <_ZN6String7reserveEj>
   d56d8:	b918      	cbnz	r0, d56e2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d56da:	4620      	mov	r0, r4
   d56dc:	f7ff ffcd 	bl	d567a <_ZN6String10invalidateEv>
		return *this;
   d56e0:	e009      	b.n	d56f6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d56e2:	462a      	mov	r2, r5
   d56e4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d56e6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d56e8:	6820      	ldr	r0, [r4, #0]
   d56ea:	f001 ff62 	bl	d75b2 <memcpy>
	buffer[len] = 0;
   d56ee:	6822      	ldr	r2, [r4, #0]
   d56f0:	68a3      	ldr	r3, [r4, #8]
   d56f2:	2100      	movs	r1, #0
   d56f4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d56f6:	4620      	mov	r0, r4
   d56f8:	bd70      	pop	{r4, r5, r6, pc}

000d56fa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d56fa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d56fc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d56fe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5700:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5702:	6043      	str	r3, [r0, #4]
	len = 0;
   d5704:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5706:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5708:	460d      	mov	r5, r1
   d570a:	b139      	cbz	r1, d571c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d570c:	4608      	mov	r0, r1
   d570e:	f001 ffa7 	bl	d7660 <strlen>
   d5712:	4629      	mov	r1, r5
   d5714:	4602      	mov	r2, r0
   d5716:	4620      	mov	r0, r4
   d5718:	f7ff ffd7 	bl	d56ca <_ZN6String4copyEPKcj>
}
   d571c:	4620      	mov	r0, r4
   d571e:	bd38      	pop	{r3, r4, r5, pc}

000d5720 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5720:	b538      	push	{r3, r4, r5, lr}
   d5722:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5724:	460c      	mov	r4, r1
   d5726:	b141      	cbz	r1, d573a <_ZN6StringaSEPKc+0x1a>
   d5728:	4608      	mov	r0, r1
   d572a:	f001 ff99 	bl	d7660 <strlen>
   d572e:	4621      	mov	r1, r4
   d5730:	4602      	mov	r2, r0
   d5732:	4628      	mov	r0, r5
   d5734:	f7ff ffc9 	bl	d56ca <_ZN6String4copyEPKcj>
   d5738:	e001      	b.n	d573e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d573a:	f7ff ff9e 	bl	d567a <_ZN6String10invalidateEv>

	return *this;
}
   d573e:	4628      	mov	r0, r5
   d5740:	bd38      	pop	{r3, r4, r5, pc}

000d5742 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5742:	4770      	bx	lr

000d5744 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5744:	2000      	movs	r0, #0
   d5746:	4770      	bx	lr

000d5748 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5748:	4770      	bx	lr

000d574a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d574a:	2000      	movs	r0, #0
   d574c:	4770      	bx	lr

000d574e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d574e:	4770      	bx	lr

000d5750 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5750:	2000      	movs	r0, #0
   d5752:	4770      	bx	lr

000d5754 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5754:	b510      	push	{r4, lr}
   d5756:	2114      	movs	r1, #20
   d5758:	4604      	mov	r4, r0
   d575a:	f001 fdc2 	bl	d72e2 <_ZdlPvj>
   d575e:	4620      	mov	r0, r4
   d5760:	bd10      	pop	{r4, pc}

000d5762 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5762:	b510      	push	{r4, lr}
   d5764:	2114      	movs	r1, #20
   d5766:	4604      	mov	r4, r0
   d5768:	f001 fdbb 	bl	d72e2 <_ZdlPvj>
   d576c:	4620      	mov	r0, r4
   d576e:	bd10      	pop	{r4, pc}

000d5770 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5770:	b510      	push	{r4, lr}
   d5772:	2114      	movs	r1, #20
   d5774:	4604      	mov	r4, r0
   d5776:	f001 fdb4 	bl	d72e2 <_ZdlPvj>
   d577a:	4620      	mov	r0, r4
   d577c:	bd10      	pop	{r4, pc}

000d577e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d577e:	f7fe bc8e 	b.w	d409e <_ZdlPv>

000d5782 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5782:	f7fe bc8c 	b.w	d409e <_ZdlPv>

000d5786 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5786:	f7fe bc8a 	b.w	d409e <_ZdlPv>
	...

000d578c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d578c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d578e:	200a      	movs	r0, #10
   d5790:	4a02      	ldr	r2, [pc, #8]	; (d579c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d5792:	2100      	movs	r1, #0
   d5794:	f7ff fe54 	bl	d5440 <panic_>
    }
}
   d5798:	bd08      	pop	{r3, pc}
   d579a:	bf00      	nop
   d579c:	000d50bd 	.word	0x000d50bd

000d57a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d57a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d57a6:	689b      	ldr	r3, [r3, #8]
   d57a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57aa:	68a3      	ldr	r3, [r4, #8]
   d57ac:	3b01      	subs	r3, #1
   d57ae:	60a3      	str	r3, [r4, #8]
   d57b0:	b92b      	cbnz	r3, d57be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d57b2:	6823      	ldr	r3, [r4, #0]
   d57b4:	4620      	mov	r0, r4
   d57b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d57b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d57bc:	4718      	bx	r3
   d57be:	bd10      	pop	{r4, pc}

000d57c0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d57c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57c4:	b2da      	uxtb	r2, r3
   d57c6:	2a09      	cmp	r2, #9
   d57c8:	d801      	bhi.n	d57ce <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d57ca:	4618      	mov	r0, r3
   d57cc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d57ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d57d2:	2b05      	cmp	r3, #5
   d57d4:	d801      	bhi.n	d57da <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d57d6:	3857      	subs	r0, #87	; 0x57
   d57d8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d57da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d57de:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d57e0:	bf94      	ite	ls
   d57e2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d57e4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d57e8:	4770      	bx	lr
	...

000d57ec <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d57ec:	b510      	push	{r4, lr}
            locked_(false) {
   d57ee:	2300      	movs	r3, #0
   d57f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d57f2:	4b04      	ldr	r3, [pc, #16]	; (d5804 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d57f4:	4604      	mov	r4, r0
   d57f6:	6818      	ldr	r0, [r3, #0]
   d57f8:	f7ff fd12 	bl	d5220 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d57fc:	2301      	movs	r3, #1
   d57fe:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5800:	4620      	mov	r0, r4
   d5802:	bd10      	pop	{r4, pc}
   d5804:	2003e3e0 	.word	0x2003e3e0

000d5808 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5808:	b510      	push	{r4, lr}
        if (locked_) {
   d580a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d580c:	4604      	mov	r4, r0
        if (locked_) {
   d580e:	b11b      	cbz	r3, d5818 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5810:	4b02      	ldr	r3, [pc, #8]	; (d581c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5812:	6818      	ldr	r0, [r3, #0]
   d5814:	f7ff fd0c 	bl	d5230 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5818:	4620      	mov	r0, r4
   d581a:	bd10      	pop	{r4, pc}
   d581c:	2003e3e0 	.word	0x2003e3e0

000d5820 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5820:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5822:	7982      	ldrb	r2, [r0, #6]
   d5824:	798b      	ldrb	r3, [r1, #6]
   d5826:	429a      	cmp	r2, r3
   d5828:	d106      	bne.n	d5838 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d582a:	2206      	movs	r2, #6
   d582c:	f001 feb2 	bl	d7594 <memcmp>
   d5830:	fab0 f080 	clz	r0, r0
   d5834:	0940      	lsrs	r0, r0, #5
   d5836:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5838:	2000      	movs	r0, #0
}
   d583a:	bd08      	pop	{r3, pc}

000d583c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d583c:	b510      	push	{r4, lr}
        : uuid_() {
   d583e:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5840:	4604      	mov	r4, r0
        : uuid_() {
   d5842:	2100      	movs	r1, #0
   d5844:	f001 fedb 	bl	d75fe <memset>
}
   d5848:	4620      	mov	r0, r4
   d584a:	bd10      	pop	{r4, pc}

000d584c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d584c:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d584e:	4603      	mov	r3, r0
   d5850:	f101 0214 	add.w	r2, r1, #20
   d5854:	f851 4b04 	ldr.w	r4, [r1], #4
   d5858:	f843 4b04 	str.w	r4, [r3], #4
   d585c:	4291      	cmp	r1, r2
   d585e:	d1f9      	bne.n	d5854 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d5860:	bd10      	pop	{r4, pc}

000d5862 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d5862:	b570      	push	{r4, r5, r6, lr}
   d5864:	460c      	mov	r4, r1
   d5866:	4605      	mov	r5, r0
   d5868:	4616      	mov	r6, r2
        : BleUuid() {
   d586a:	f7ff ffe7 	bl	d583c <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d586e:	b92c      	cbnz	r4, d587c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5870:	2210      	movs	r2, #16
   d5872:	4621      	mov	r1, r4
   d5874:	4628      	mov	r0, r5
   d5876:	f001 fec2 	bl	d75fe <memset>
   d587a:	e016      	b.n	d58aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d587c:	2e01      	cmp	r6, #1
   d587e:	d109      	bne.n	d5894 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5880:	462b      	mov	r3, r5
   d5882:	f104 0210 	add.w	r2, r4, #16
   d5886:	f854 1b04 	ldr.w	r1, [r4], #4
   d588a:	f843 1b04 	str.w	r1, [r3], #4
   d588e:	4294      	cmp	r4, r2
   d5890:	d1f9      	bne.n	d5886 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d5892:	e008      	b.n	d58a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5894:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d5896:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d5898:	5ce1      	ldrb	r1, [r4, r3]
   d589a:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d589e:	3b01      	subs	r3, #1
   d58a0:	b2db      	uxtb	r3, r3
   d58a2:	2bff      	cmp	r3, #255	; 0xff
   d58a4:	d1f8      	bne.n	d5898 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d58a6:	2301      	movs	r3, #1
   d58a8:	742b      	strb	r3, [r5, #16]
    }
}
   d58aa:	4628      	mov	r0, r5
   d58ac:	bd70      	pop	{r4, r5, r6, pc}

000d58ae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d58ae:	b538      	push	{r3, r4, r5, lr}
   d58b0:	4604      	mov	r4, r0
   d58b2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d58b4:	461a      	mov	r2, r3
   d58b6:	f7ff ffd4 	bl	d5862 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d58ba:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d58bc:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d58be:	0a2d      	lsrs	r5, r5, #8
   d58c0:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d58c2:	7423      	strb	r3, [r4, #16]
}
   d58c4:	4620      	mov	r0, r4
   d58c6:	bd38      	pop	{r3, r4, r5, pc}

000d58c8 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d58c8:	7c03      	ldrb	r3, [r0, #16]
   d58ca:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d58ce:	bf14      	ite	ne
   d58d0:	2001      	movne	r0, #1
   d58d2:	2000      	moveq	r0, #0
   d58d4:	4770      	bx	lr

000d58d6 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d58d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d58d8:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d58da:	f7ff fff5 	bl	d58c8 <_ZNK8particle7BleUuid4typeEv>
   d58de:	b908      	cbnz	r0, d58e4 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d58e0:	8820      	ldrh	r0, [r4, #0]
   d58e2:	e009      	b.n	d58f8 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d58e4:	2210      	movs	r2, #16
   d58e6:	2100      	movs	r1, #0
   d58e8:	4668      	mov	r0, sp
   d58ea:	f001 fe88 	bl	d75fe <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d58ee:	2210      	movs	r2, #16
   d58f0:	4669      	mov	r1, sp
   d58f2:	4620      	mov	r0, r4
   d58f4:	f001 fe4e 	bl	d7594 <memcmp>
   d58f8:	3000      	adds	r0, #0
   d58fa:	bf18      	it	ne
   d58fc:	2001      	movne	r0, #1
    }
}
   d58fe:	b004      	add	sp, #16
   d5900:	bd10      	pop	{r4, pc}

000d5902 <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d5902:	8800      	ldrh	r0, [r0, #0]
   d5904:	4770      	bx	lr

000d5906 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d5906:	4770      	bx	lr

000d5908 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5908:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d590a:	4603      	mov	r3, r0
   d590c:	f101 0214 	add.w	r2, r1, #20
   d5910:	f851 4b04 	ldr.w	r4, [r1], #4
   d5914:	f843 4b04 	str.w	r4, [r3], #4
   d5918:	4291      	cmp	r1, r2
   d591a:	d1f9      	bne.n	d5910 <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d591c:	bd10      	pop	{r4, pc}

000d591e <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d591e:	b510      	push	{r4, lr}
    if (uuid128) {
   d5920:	b151      	cbz	r1, d5938 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5922:	4603      	mov	r3, r0
   d5924:	f101 0210 	add.w	r2, r1, #16
   d5928:	f851 4b04 	ldr.w	r4, [r1], #4
   d592c:	f843 4b04 	str.w	r4, [r3], #4
   d5930:	4291      	cmp	r1, r2
   d5932:	d1f9      	bne.n	d5928 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5934:	2301      	movs	r3, #1
   d5936:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d5938:	bd10      	pop	{r4, pc}

000d593a <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d593a:	b510      	push	{r4, lr}
   d593c:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d593e:	f7ff ffc3 	bl	d58c8 <_ZNK8particle7BleUuid4typeEv>
   d5942:	b928      	cbnz	r0, d5950 <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d5944:	8808      	ldrh	r0, [r1, #0]
   d5946:	8823      	ldrh	r3, [r4, #0]
   d5948:	1a1b      	subs	r3, r3, r0
   d594a:	4258      	negs	r0, r3
   d594c:	4158      	adcs	r0, r3
   d594e:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5950:	2210      	movs	r2, #16
   d5952:	4620      	mov	r0, r4
   d5954:	f001 fe1e 	bl	d7594 <memcmp>
   d5958:	fab0 f080 	clz	r0, r0
   d595c:	0940      	lsrs	r0, r0, #5
    }
}
   d595e:	bd10      	pop	{r4, pc}

000d5960 <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d5960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5962:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5964:	460e      	mov	r6, r1
   d5966:	b919      	cbnz	r1, d5970 <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5968:	2210      	movs	r2, #16
   d596a:	f001 fe48 	bl	d75fe <memset>
   d596e:	e051      	b.n	d5a14 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5970:	2124      	movs	r1, #36	; 0x24
   d5972:	4630      	mov	r0, r6
   d5974:	f001 fe7c 	bl	d7670 <strnlen>
   d5978:	2804      	cmp	r0, #4
   d597a:	d002      	beq.n	d5982 <_ZN8particle7BleUuid9constructEPKc+0x22>
   d597c:	2700      	movs	r7, #0
   d597e:	2410      	movs	r4, #16
   d5980:	e03b      	b.n	d59fa <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5982:	7830      	ldrb	r0, [r6, #0]
   d5984:	f7ff ff1c 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5988:	1e04      	subs	r4, r0, #0
   d598a:	db47      	blt.n	d5a1c <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d598c:	7870      	ldrb	r0, [r6, #1]
   d598e:	f7ff ff17 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5992:	2800      	cmp	r0, #0
   d5994:	db42      	blt.n	d5a1c <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5996:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d599a:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d599e:	78b0      	ldrb	r0, [r6, #2]
   d59a0:	f7ff ff0e 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d59a4:	1e04      	subs	r4, r0, #0
   d59a6:	db39      	blt.n	d5a1c <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d59a8:	78f0      	ldrb	r0, [r6, #3]
   d59aa:	f7ff ff09 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d59ae:	2800      	cmp	r0, #0
   d59b0:	db34      	blt.n	d5a1c <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d59b2:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d59b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d59ba:	b2c0      	uxtb	r0, r0
   d59bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d59c0:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d59c2:	2300      	movs	r3, #0
   d59c4:	e027      	b.n	d5a16 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d59c6:	b32c      	cbz	r4, d5a14 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d59c8:	5df0      	ldrb	r0, [r6, r7]
   d59ca:	f7ff fef9 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d59ce:	0603      	lsls	r3, r0, #24
   d59d0:	d412      	bmi.n	d59f8 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d59d2:	3c01      	subs	r4, #1
   d59d4:	0100      	lsls	r0, r0, #4
   d59d6:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d59d8:	2124      	movs	r1, #36	; 0x24
   d59da:	4630      	mov	r0, r6
   d59dc:	f001 fe48 	bl	d7670 <strnlen>
   d59e0:	3701      	adds	r7, #1
   d59e2:	4287      	cmp	r7, r0
   d59e4:	d208      	bcs.n	d59f8 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d59e6:	5df0      	ldrb	r0, [r6, r7]
   d59e8:	f7ff feea 	bl	d57c0 <_ZN8particle11hexToNibbleEc>
   d59ec:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d59ee:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d59f0:	bfa2      	ittt	ge
   d59f2:	5d2b      	ldrbge	r3, [r5, r4]
   d59f4:	4318      	orrge	r0, r3
   d59f6:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d59f8:	3701      	adds	r7, #1
   d59fa:	2124      	movs	r1, #36	; 0x24
   d59fc:	4630      	mov	r0, r6
   d59fe:	f001 fe37 	bl	d7670 <strnlen>
   d5a02:	4287      	cmp	r7, r0
   d5a04:	d3df      	bcc.n	d59c6 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d5a06:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d5a08:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5a0a:	42a5      	cmp	r5, r4
   d5a0c:	d002      	beq.n	d5a14 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d5a0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5a12:	e7fa      	b.n	d5a0a <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5a14:	2301      	movs	r3, #1
   d5a16:	742b      	strb	r3, [r5, #16]
}
   d5a18:	b003      	add	sp, #12
   d5a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d5a1c:	2300      	movs	r3, #0
   d5a1e:	802b      	strh	r3, [r5, #0]
   d5a20:	e7cf      	b.n	d59c2 <_ZN8particle7BleUuid9constructEPKc+0x62>

000d5a22 <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d5a22:	b538      	push	{r3, r4, r5, lr}
   d5a24:	4604      	mov	r4, r0
   d5a26:	460d      	mov	r5, r1
        : BleUuid() {
   d5a28:	f7ff ff08 	bl	d583c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	4629      	mov	r1, r5
   d5a30:	f7ff ff96 	bl	d5960 <_ZN8particle7BleUuid9constructEPKc>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd38      	pop	{r3, r4, r5, pc}

000d5a38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5a3a:	b18b      	cbz	r3, d5a60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5a3c:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a3e:	1ce5      	adds	r5, r4, #3
   d5a40:	428d      	cmp	r5, r1
   d5a42:	d80f      	bhi.n	d5a64 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5a44:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5a46:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5a48:	5d87      	ldrb	r7, [r0, r6]
   d5a4a:	4297      	cmp	r7, r2
   d5a4c:	d105      	bne.n	d5a5a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5a4e:	442e      	add	r6, r5
   d5a50:	42b1      	cmp	r1, r6
   d5a52:	d307      	bcc.n	d5a64 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5a54:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5a56:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5a5a:	3501      	adds	r5, #1
   d5a5c:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a5e:	e7ee      	b.n	d5a3e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5a60:	4618      	mov	r0, r3
   d5a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a64:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5a6c:	4604      	mov	r4, r0
   d5a6e:	460e      	mov	r6, r1
   d5a70:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5a72:	4617      	mov	r7, r2
   d5a74:	2a00      	cmp	r2, #0
   d5a76:	d03a      	beq.n	d5aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5a78:	460a      	mov	r2, r1
   d5a7a:	ab01      	add	r3, sp, #4
   d5a7c:	6a01      	ldr	r1, [r0, #32]
   d5a7e:	f7ff ffdb 	bl	d5a38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5a82:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5a86:	6a22      	ldr	r2, [r4, #32]
   d5a88:	bb03      	cbnz	r3, d5acc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5a8a:	b1f8      	cbz	r0, d5acc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5a8c:	1c96      	adds	r6, r2, #2
   d5a8e:	442e      	add	r6, r5
   d5a90:	1a36      	subs	r6, r6, r0
   d5a92:	2e1f      	cmp	r6, #31
   d5a94:	d82b      	bhi.n	d5aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5a96:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5a9a:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5a9e:	ebc8 0202 	rsb	r2, r8, r2
   d5aa2:	1a12      	subs	r2, r2, r0
   d5aa4:	eb00 0108 	add.w	r1, r0, r8
   d5aa8:	eb05 0009 	add.w	r0, r5, r9
   d5aac:	b292      	uxth	r2, r2
   d5aae:	4421      	add	r1, r4
   d5ab0:	4420      	add	r0, r4
   d5ab2:	f001 fd89 	bl	d75c8 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5ab6:	1c6b      	adds	r3, r5, #1
   d5ab8:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5abc:	462a      	mov	r2, r5
   d5abe:	4639      	mov	r1, r7
   d5ac0:	eb04 0009 	add.w	r0, r4, r9
   d5ac4:	f001 fd75 	bl	d75b2 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5ac8:	6226      	str	r6, [r4, #32]
   d5aca:	e010      	b.n	d5aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5acc:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ace:	182b      	adds	r3, r5, r0
   d5ad0:	2b1f      	cmp	r3, #31
   d5ad2:	d80c      	bhi.n	d5aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5ad4:	1c6b      	adds	r3, r5, #1
   d5ad6:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ad8:	4422      	add	r2, r4
   d5ada:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5adc:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ade:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ae0:	4420      	add	r0, r4
   d5ae2:	462a      	mov	r2, r5
   d5ae4:	f001 fd65 	bl	d75b2 <memcpy>
        selfLen_ += len;
   d5ae8:	6a22      	ldr	r2, [r4, #32]
   d5aea:	442a      	add	r2, r5
   d5aec:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5aee:	6a20      	ldr	r0, [r4, #32]
}
   d5af0:	b003      	add	sp, #12
   d5af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5af6 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5af6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5af8:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5afa:	4603      	mov	r3, r0
   d5afc:	f100 021f 	add.w	r2, r0, #31
   d5b00:	2000      	movs	r0, #0
   d5b02:	f803 0b01 	strb.w	r0, [r3], #1
   d5b06:	4293      	cmp	r3, r2
   d5b08:	f04f 0100 	mov.w	r1, #0
   d5b0c:	d1f9      	bne.n	d5b02 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5b0e:	aa04      	add	r2, sp, #16
   d5b10:	2306      	movs	r3, #6
   d5b12:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b16:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5b18:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b1a:	9100      	str	r1, [sp, #0]
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	4619      	mov	r1, r3
   d5b20:	f7ff ffa2 	bl	d5a68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b24:	4620      	mov	r0, r4
   d5b26:	b004      	add	sp, #16
   d5b28:	bd10      	pop	{r4, pc}

000d5b2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b2c:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b2e:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b30:	ab01      	add	r3, sp, #4
   d5b32:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5b34:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5b36:	f7ff ff7f 	bl	d5a38 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5b3a:	4605      	mov	r5, r0
   d5b3c:	b178      	cbz	r0, d5b5e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5b3e:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5b40:	6a22      	ldr	r2, [r4, #32]
   d5b42:	1829      	adds	r1, r5, r0
   d5b44:	1a12      	subs	r2, r2, r0
   d5b46:	1b52      	subs	r2, r2, r5
   d5b48:	4421      	add	r1, r4
   d5b4a:	4420      	add	r0, r4
   d5b4c:	f001 fd31 	bl	d75b2 <memcpy>
        selfLen_ -= len;
   d5b50:	6a23      	ldr	r3, [r4, #32]
   d5b52:	1b5d      	subs	r5, r3, r5
   d5b54:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5b56:	4631      	mov	r1, r6
   d5b58:	4620      	mov	r0, r4
   d5b5a:	f7ff ffe6 	bl	d5b2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5b5e:	b002      	add	sp, #8
   d5b60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b64 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5b64:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5b66:	2500      	movs	r5, #0
   d5b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5b6c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5b6e:	8043      	strh	r3, [r0, #2]
   d5b70:	220e      	movs	r2, #14
   d5b72:	4629      	mov	r1, r5
   d5b74:	7005      	strb	r5, [r0, #0]
   d5b76:	7105      	strb	r5, [r0, #4]
   d5b78:	3006      	adds	r0, #6
   d5b7a:	f001 fd40 	bl	d75fe <memset>
   d5b7e:	f104 0014 	add.w	r0, r4, #20
   d5b82:	f7ff fe5b 	bl	d583c <_ZN8particle7BleUuidC1Ev>
   d5b86:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5b8a:	f7ff fe57 	bl	d583c <_ZN8particle7BleUuidC1Ev>
   d5b8e:	4904      	ldr	r1, [pc, #16]	; (d5ba0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5b90:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5b94:	f7ff fdb1 	bl	d56fa <_ZN6StringC1EPK19__FlashStringHelper>
   d5b98:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5b9a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	bd38      	pop	{r3, r4, r5, pc}
   d5ba0:	000d7d3f 	.word	0x000d7d3f

000d5ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ba8:	69c2      	ldr	r2, [r0, #28]
   d5baa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5bae:	4293      	cmp	r3, r2
   d5bb0:	4618      	mov	r0, r3
   d5bb2:	d006      	beq.n	d5bc2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5bb4:	6804      	ldr	r4, [r0, #0]
   d5bb6:	8824      	ldrh	r4, [r4, #0]
   d5bb8:	428c      	cmp	r4, r1
   d5bba:	f103 0308 	add.w	r3, r3, #8
   d5bbe:	d1f6      	bne.n	d5bae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5bc0:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5bc2:	2000      	movs	r0, #0
    }
   d5bc4:	bd10      	pop	{r4, pc}
	...

000d5bc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5bc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5bcc:	4680      	mov	r8, r0
   d5bce:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5bd0:	460e      	mov	r6, r1
   d5bd2:	b369      	cbz	r1, d5c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5bd4:	b362      	cbz	r2, d5c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5bd6:	2af4      	cmp	r2, #244	; 0xf4
   d5bd8:	6805      	ldr	r5, [r0, #0]
   d5bda:	bf28      	it	cs
   d5bdc:	22f4      	movcs	r2, #244	; 0xf4
   d5bde:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5be0:	782a      	ldrb	r2, [r5, #0]
   d5be2:	b1a2      	cbz	r2, d5c0e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d5be4:	792b      	ldrb	r3, [r5, #4]
   d5be6:	0798      	lsls	r0, r3, #30
   d5be8:	d507      	bpl.n	d5bfa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5bea:	2300      	movs	r3, #0
   d5bec:	4622      	mov	r2, r4
   d5bee:	89a8      	ldrh	r0, [r5, #12]
   d5bf0:	f7ff faa8 	bl	d5144 <hal_ble_gatt_server_set_characteristic_value>
   d5bf4:	2800      	cmp	r0, #0
   d5bf6:	da02      	bge.n	d5bfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5bf8:	e043      	b.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5bfa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5bfe:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d5c02:	792b      	ldrb	r3, [r5, #4]
   d5c04:	06da      	lsls	r2, r3, #27
   d5c06:	d518      	bpl.n	d5c3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5c08:	2f01      	cmp	r7, #1
   d5c0a:	d123      	bne.n	d5c54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5c0c:	e015      	b.n	d5c3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5c0e:	8868      	ldrh	r0, [r5, #2]
   d5c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5c14:	4298      	cmp	r0, r3
   d5c16:	d00d      	beq.n	d5c34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d5c18:	792b      	ldrb	r3, [r5, #4]
   d5c1a:	0759      	lsls	r1, r3, #29
   d5c1c:	d523      	bpl.n	d5c66 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5c1e:	2f01      	cmp	r7, #1
   d5c20:	d021      	beq.n	d5c66 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c22:	89a9      	ldrh	r1, [r5, #12]
   d5c24:	9200      	str	r2, [sp, #0]
   d5c26:	4623      	mov	r3, r4
   d5c28:	4632      	mov	r2, r6
   d5c2a:	f7ff fa9f 	bl	d516c <hal_ble_gatt_client_write_without_response>
   d5c2e:	e028      	b.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5c30:	4815      	ldr	r0, [pc, #84]	; (d5c88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5c32:	e026      	b.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5c34:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5c38:	e023      	b.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d5c3a:	069a      	lsls	r2, r3, #26
   d5c3c:	d521      	bpl.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5c3e:	2f02      	cmp	r7, #2
   d5c40:	d01f      	beq.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c42:	89a8      	ldrh	r0, [r5, #12]
   d5c44:	2300      	movs	r3, #0
   d5c46:	4622      	mov	r2, r4
   d5c48:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5c4a:	b002      	add	sp, #8
   d5c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c50:	f7ff bab4 	b.w	d51bc <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c54:	89a8      	ldrh	r0, [r5, #12]
   d5c56:	2300      	movs	r3, #0
   d5c58:	4622      	mov	r2, r4
   d5c5a:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5c5c:	b002      	add	sp, #8
   d5c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c62:	f7ff baa1 	b.w	d51a8 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d5c66:	071b      	lsls	r3, r3, #28
   d5c68:	d501      	bpl.n	d5c6e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5c6a:	2f02      	cmp	r7, #2
   d5c6c:	d102      	bne.n	d5c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5c6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5c72:	e006      	b.n	d5c82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c74:	2300      	movs	r3, #0
   d5c76:	89a9      	ldrh	r1, [r5, #12]
   d5c78:	9300      	str	r3, [sp, #0]
   d5c7a:	4632      	mov	r2, r6
   d5c7c:	4623      	mov	r3, r4
   d5c7e:	f7ff fa6b 	bl	d5158 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5c82:	b002      	add	sp, #8
   d5c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c88:	fffffef2 	.word	0xfffffef2

000d5c8c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5c8c:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d5c8e:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d5c90:	651a      	str	r2, [r3, #80]	; 0x50
   d5c92:	4770      	bx	lr

000d5c94 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5c94:	b510      	push	{r4, lr}
    return impl()->address();
   d5c96:	680a      	ldr	r2, [r1, #0]
   d5c98:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5c9c:	6003      	str	r3, [r0, #0]
   d5c9e:	6853      	ldr	r3, [r2, #4]
   d5ca0:	6043      	str	r3, [r0, #4]
}
   d5ca2:	bd10      	pop	{r4, pc}

000d5ca4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ca6:	6802      	ldr	r2, [r0, #0]
   d5ca8:	680b      	ldr	r3, [r1, #0]
   d5caa:	8812      	ldrh	r2, [r2, #0]
   d5cac:	881b      	ldrh	r3, [r3, #0]
   d5cae:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5cb0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5cb2:	d10c      	bne.n	d5cce <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5cb4:	4601      	mov	r1, r0
   d5cb6:	4668      	mov	r0, sp
   d5cb8:	f7ff ffec 	bl	d5c94 <_ZNK8particle13BlePeerDevice7addressEv>
   d5cbc:	4621      	mov	r1, r4
   d5cbe:	a802      	add	r0, sp, #8
   d5cc0:	f7ff ffe8 	bl	d5c94 <_ZNK8particle13BlePeerDevice7addressEv>
   d5cc4:	a902      	add	r1, sp, #8
   d5cc6:	4668      	mov	r0, sp
   d5cc8:	f7ff fdaa 	bl	d5820 <_ZNK8particle10BleAddresseqERKS0_>
   d5ccc:	b900      	cbnz	r0, d5cd0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5cce:	2000      	movs	r0, #0
}
   d5cd0:	b004      	add	sp, #16
   d5cd2:	bd10      	pop	{r4, pc}

000d5cd4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5cd4:	b510      	push	{r4, lr}
   d5cd6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5cd8:	2034      	movs	r0, #52	; 0x34
   d5cda:	f7fe f9dc 	bl	d4096 <_Znwj>
   d5cde:	4601      	mov	r1, r0
   d5ce0:	b168      	cbz	r0, d5cfe <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ce2:	2300      	movs	r3, #0
   d5ce4:	6003      	str	r3, [r0, #0]
   d5ce6:	6043      	str	r3, [r0, #4]
   d5ce8:	6083      	str	r3, [r0, #8]
   d5cea:	60c3      	str	r3, [r0, #12]
   d5cec:	6103      	str	r3, [r0, #16]
   d5cee:	6143      	str	r3, [r0, #20]
   d5cf0:	6183      	str	r3, [r0, #24]
   d5cf2:	61c3      	str	r3, [r0, #28]
   d5cf4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5cf6:	6243      	str	r3, [r0, #36]	; 0x24
   d5cf8:	6283      	str	r3, [r0, #40]	; 0x28
   d5cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5cfc:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5cfe:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5d00:	b919      	cbnz	r1, d5d0a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5d02:	4a0a      	ldr	r2, [pc, #40]	; (d5d2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5d04:	200a      	movs	r0, #10
   d5d06:	f7ff fb9b 	bl	d5440 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5d0a:	2000      	movs	r0, #0
   d5d0c:	f7ff f9e6 	bl	d50dc <hal_ble_stack_init>
   d5d10:	b120      	cbz	r0, d5d1c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5d12:	4a06      	ldr	r2, [pc, #24]	; (d5d2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5d14:	2100      	movs	r1, #0
   d5d16:	200a      	movs	r0, #10
   d5d18:	f7ff fb92 	bl	d5440 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	6821      	ldr	r1, [r4, #0]
   d5d20:	4803      	ldr	r0, [pc, #12]	; (d5d30 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5d22:	f7ff fa37 	bl	d5194 <hal_ble_set_callback_on_periph_link_events>
}
   d5d26:	4620      	mov	r0, r4
   d5d28:	bd10      	pop	{r4, pc}
   d5d2a:	bf00      	nop
   d5d2c:	000d50bd 	.word	0x000d50bd
   d5d30:	000d610d 	.word	0x000d610d

000d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5d34:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5d36:	4c0a      	ldr	r4, [pc, #40]	; (d5d60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5d38:	6823      	ldr	r3, [r4, #0]
   d5d3a:	07db      	lsls	r3, r3, #31
   d5d3c:	d40e      	bmi.n	d5d5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5d3e:	4620      	mov	r0, r4
   d5d40:	f7fe f9b1 	bl	d40a6 <__cxa_guard_acquire>
   d5d44:	b150      	cbz	r0, d5d5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5d46:	4807      	ldr	r0, [pc, #28]	; (d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d48:	f7ff ffc4 	bl	d5cd4 <_ZN8particle14BleLocalDeviceC1Ev>
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	f7fe f9af 	bl	d40b0 <__cxa_guard_release>
   d5d52:	4a05      	ldr	r2, [pc, #20]	; (d5d68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5d54:	4905      	ldr	r1, [pc, #20]	; (d5d6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5d56:	4803      	ldr	r0, [pc, #12]	; (d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d58:	f001 fabe 	bl	d72d8 <__aeabi_atexit>
    return instance;
}
   d5d5c:	4801      	ldr	r0, [pc, #4]	; (d5d64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5d5e:	bd10      	pop	{r4, pc}
   d5d60:	2003e3d8 	.word	0x2003e3d8
   d5d64:	2003e3d4 	.word	0x2003e3d4
   d5d68:	2003e388 	.word	0x2003e388
   d5d6c:	000d5f21 	.word	0x000d5f21

000d5d70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5d70:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5d72:	6803      	ldr	r3, [r0, #0]
   d5d74:	3b09      	subs	r3, #9
   d5d76:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5d78:	b08a      	sub	sp, #40	; 0x28
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5d7e:	d819      	bhi.n	d5db4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5d80:	f7ff ffd8 	bl	d5d34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5d84:	88a1      	ldrh	r1, [r4, #4]
   d5d86:	6800      	ldr	r0, [r0, #0]
   d5d88:	f7ff ff0c 	bl	d5ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5d8c:	4602      	mov	r2, r0
   d5d8e:	b958      	cbnz	r0, d5da8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5d90:	2320      	movs	r3, #32
   d5d92:	9302      	str	r3, [sp, #8]
   d5d94:	4b08      	ldr	r3, [pc, #32]	; (d5db8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5d96:	9003      	str	r0, [sp, #12]
   d5d98:	9300      	str	r3, [sp, #0]
   d5d9a:	aa02      	add	r2, sp, #8
   d5d9c:	4603      	mov	r3, r0
   d5d9e:	4907      	ldr	r1, [pc, #28]	; (d5dbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5da0:	2032      	movs	r0, #50	; 0x32
   d5da2:	f7ff fb55 	bl	d5450 <log_message>
   d5da6:	e005      	b.n	d5db4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5da8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5daa:	b11d      	cbz	r5, d5db4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5dac:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5dae:	68e1      	ldr	r1, [r4, #12]
   d5db0:	6920      	ldr	r0, [r4, #16]
   d5db2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5db4:	b00a      	add	sp, #40	; 0x28
   d5db6:	bd70      	pop	{r4, r5, r6, pc}
   d5db8:	000d7b42 	.word	0x000d7b42
   d5dbc:	000d7af8 	.word	0x000d7af8

000d5dc0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5dc0:	4608      	mov	r0, r1
   d5dc2:	b909      	cbnz	r1, d5dc8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5dc4:	460a      	mov	r2, r1
   d5dc6:	e001      	b.n	d5dcc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5dc8:	6a09      	ldr	r1, [r1, #32]
   d5dca:	2200      	movs	r2, #0
   d5dcc:	f7ff b98e 	b.w	d50ec <hal_ble_gap_set_advertising_data>

000d5dd0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5dd0:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5dd2:	460c      	mov	r4, r1
   d5dd4:	b911      	cbnz	r1, d5ddc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5dd6:	460a      	mov	r2, r1
   d5dd8:	4608      	mov	r0, r1
   d5dda:	e006      	b.n	d5dea <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5ddc:	2101      	movs	r1, #1
   d5dde:	4620      	mov	r0, r4
   d5de0:	f7ff fea3 	bl	d5b2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5de4:	6a21      	ldr	r1, [r4, #32]
   d5de6:	2200      	movs	r2, #0
   d5de8:	4620      	mov	r0, r4
    }
}
   d5dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5dee:	f7ff b985 	b.w	d50fc <hal_ble_gap_set_scan_response_data>

000d5df2 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5df2:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5df4:	a801      	add	r0, sp, #4
   d5df6:	f7ff fcf9 	bl	d57ec <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5dfa:	2000      	movs	r0, #0
   d5dfc:	f7ff f986 	bl	d510c <hal_ble_gap_start_advertising>
   d5e00:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5e02:	a801      	add	r0, sp, #4
   d5e04:	f7ff fd00 	bl	d5808 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5e08:	4620      	mov	r0, r4
   d5e0a:	b002      	add	sp, #8
   d5e0c:	bd10      	pop	{r4, pc}

000d5e0e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e10:	4605      	mov	r5, r0
   d5e12:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5e14:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5e16:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5e18:	f7ff fce8 	bl	d57ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5e1c:	4621      	mov	r1, r4
   d5e1e:	4628      	mov	r0, r5
   d5e20:	f7ff ffce 	bl	d5dc0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5e24:	2800      	cmp	r0, #0
   d5e26:	db08      	blt.n	d5e3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5e28:	4631      	mov	r1, r6
   d5e2a:	4628      	mov	r0, r5
   d5e2c:	f7ff ffd0 	bl	d5dd0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5e30:	2800      	cmp	r0, #0
   d5e32:	db02      	blt.n	d5e3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5e34:	4628      	mov	r0, r5
   d5e36:	f7ff ffdc 	bl	d5df2 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5e3a:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5e3c:	a801      	add	r0, sp, #4
   d5e3e:	f7ff fce3 	bl	d5808 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5e42:	4620      	mov	r0, r4
   d5e44:	b002      	add	sp, #8
   d5e46:	bd70      	pop	{r4, r5, r6, pc}

000d5e48 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5e48:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5e4a:	69d8      	ldr	r0, [r3, #28]
}
   d5e4c:	2800      	cmp	r0, #0
   d5e4e:	bfd4      	ite	le
   d5e50:	2000      	movle	r0, #0
   d5e52:	2001      	movgt	r0, #1
   d5e54:	4770      	bx	lr

000d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5e56:	680b      	ldr	r3, [r1, #0]
   d5e58:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5e5a:	b113      	cbz	r3, d5e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5e5c:	685a      	ldr	r2, [r3, #4]
   d5e5e:	3201      	adds	r2, #1
   d5e60:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5e62:	4770      	bx	lr

000d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5e64:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e66:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e6a:	4604      	mov	r4, r0
   d5e6c:	f840 3b04 	str.w	r3, [r0], #4
   d5e70:	f7ff fff1 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5e74:	6823      	ldr	r3, [r4, #0]
   d5e76:	b90b      	cbnz	r3, d5e7c <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5e78:	f7ff fc88 	bl	d578c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5e80:	b510      	push	{r4, lr}
   d5e82:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e86:	4604      	mov	r4, r0
   d5e88:	f840 3b04 	str.w	r3, [r0], #4
   d5e8c:	f7ff ffe3 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd10      	pop	{r4, pc}

000d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5e94:	b510      	push	{r4, lr}
   d5e96:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5e98:	6800      	ldr	r0, [r0, #0]
   d5e9a:	b128      	cbz	r0, d5ea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5e9c:	6843      	ldr	r3, [r0, #4]
   d5e9e:	3b01      	subs	r3, #1
   d5ea0:	6043      	str	r3, [r0, #4]
   d5ea2:	b90b      	cbnz	r3, d5ea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5ea4:	f7ff fc7c 	bl	d57a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	bd10      	pop	{r4, pc}

000d5eac <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5eac:	b510      	push	{r4, lr}
   d5eae:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5eb0:	3004      	adds	r0, #4
   d5eb2:	f7ff ffef 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	bd10      	pop	{r4, pc}

000d5eba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5eba:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ebc:	6804      	ldr	r4, [r0, #0]
   d5ebe:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ec0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ec2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ec6:	42a6      	cmp	r6, r4
   d5ec8:	d004      	beq.n	d5ed4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5eca:	1d20      	adds	r0, r4, #4
   d5ecc:	f7ff ffe2 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ed0:	3408      	adds	r4, #8
   d5ed2:	e7f8      	b.n	d5ec6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ed4:	6828      	ldr	r0, [r5, #0]
   d5ed6:	f7ff fb47 	bl	d5568 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5eda:	4628      	mov	r0, r5
   d5edc:	bd70      	pop	{r4, r5, r6, pc}

000d5ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ede:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ee0:	6804      	ldr	r4, [r0, #0]
   d5ee2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ee4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ee6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5eea:	42a6      	cmp	r6, r4
   d5eec:	d004      	beq.n	d5ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5eee:	1d20      	adds	r0, r4, #4
   d5ef0:	f7ff ffd0 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ef4:	3408      	adds	r4, #8
   d5ef6:	e7f8      	b.n	d5eea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ef8:	6828      	ldr	r0, [r5, #0]
   d5efa:	f7ff fb35 	bl	d5568 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5efe:	4628      	mov	r0, r5
   d5f00:	bd70      	pop	{r4, r5, r6, pc}

000d5f02 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5f02:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5f04:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5f06:	f104 0018 	add.w	r0, r4, #24
   d5f0a:	f7ff ffe8 	bl	d5ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5f0e:	f104 000c 	add.w	r0, r4, #12
   d5f12:	f7ff ffd2 	bl	d5eba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5f16:	4620      	mov	r0, r4
   d5f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f1c:	f7fe b8bf 	b.w	d409e <_ZdlPv>

000d5f20 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f22:	6804      	ldr	r4, [r0, #0]
   d5f24:	4607      	mov	r7, r0
   d5f26:	b1c4      	cbz	r4, d5f5a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5f28:	69a5      	ldr	r5, [r4, #24]
   d5f2a:	69e3      	ldr	r3, [r4, #28]
   d5f2c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f30:	42ae      	cmp	r6, r5
   d5f32:	d004      	beq.n	d5f3e <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f34:	1d28      	adds	r0, r5, #4
   d5f36:	f7ff ffad 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f3a:	3508      	adds	r5, #8
   d5f3c:	e7f8      	b.n	d5f30 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f3e:	69a0      	ldr	r0, [r4, #24]
   d5f40:	f7ff fb12 	bl	d5568 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5f44:	f104 000c 	add.w	r0, r4, #12
   d5f48:	f7ff ffc9 	bl	d5ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	f7ff ffb4 	bl	d5eba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f52:	2134      	movs	r1, #52	; 0x34
   d5f54:	4620      	mov	r0, r4
   d5f56:	f001 f9c4 	bl	d72e2 <_ZdlPvj>
   d5f5a:	4638      	mov	r0, r7
   d5f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5f60 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5f62:	2500      	movs	r5, #0
   d5f64:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f66:	6045      	str	r5, [r0, #4]
   d5f68:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5f6a:	2024      	movs	r0, #36	; 0x24
   d5f6c:	f7fe f893 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5f70:	4604      	mov	r4, r0
   d5f72:	b178      	cbz	r0, d5f94 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5f74:	4603      	mov	r3, r0
   d5f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f7a:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5f7e:	f8c0 5002 	str.w	r5, [r0, #2]
   d5f82:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5f84:	7285      	strb	r5, [r0, #10]
   d5f86:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5f88:	60c5      	str	r5, [r0, #12]
   d5f8a:	6105      	str	r5, [r0, #16]
   d5f8c:	6145      	str	r5, [r0, #20]
   d5f8e:	6185      	str	r5, [r0, #24]
   d5f90:	61c5      	str	r5, [r0, #28]
   d5f92:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5f94:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5f96:	2014      	movs	r0, #20
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	f7fe f87c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5f9e:	4603      	mov	r3, r0
   d5fa0:	b128      	cbz	r0, d5fae <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5fa2:	2201      	movs	r2, #1
   d5fa4:	6042      	str	r2, [r0, #4]
   d5fa6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5fa8:	4a08      	ldr	r2, [pc, #32]	; (d5fcc <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5faa:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5fac:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5fae:	a802      	add	r0, sp, #8
   d5fb0:	6872      	ldr	r2, [r6, #4]
   d5fb2:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5fb6:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5fb8:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5fba:	f7ff ff6b 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5fbe:	6833      	ldr	r3, [r6, #0]
   d5fc0:	b90b      	cbnz	r3, d5fc6 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5fc2:	f7ff fbe3 	bl	d578c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5fc6:	4630      	mov	r0, r6
   d5fc8:	b002      	add	sp, #8
   d5fca:	bd70      	pop	{r4, r5, r6, pc}
   d5fcc:	000d7ad4 	.word	0x000d7ad4

000d5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5fd0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5fd2:	b570      	push	{r4, r5, r6, lr}
   d5fd4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5fd6:	d91a      	bls.n	d600e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5fd8:	4290      	cmp	r0, r2
   d5fda:	d219      	bcs.n	d6010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5fdc:	f1a1 0608 	sub.w	r6, r1, #8
   d5fe0:	1a51      	subs	r1, r2, r1
   d5fe2:	3904      	subs	r1, #4
   d5fe4:	1f15      	subs	r5, r2, #4
   d5fe6:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5fe8:	1f2b      	subs	r3, r5, #4
   d5fea:	429e      	cmp	r6, r3
   d5fec:	d025      	beq.n	d603a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5fee:	2c04      	cmp	r4, #4
   d5ff0:	d007      	beq.n	d6002 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ff2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5ff6:	f844 3c04 	str.w	r3, [r4, #-4]
   d5ffa:	4629      	mov	r1, r5
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	f7ff ff2a 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6002:	4628      	mov	r0, r5
   d6004:	f7ff ff46 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6008:	3d08      	subs	r5, #8
   d600a:	3c08      	subs	r4, #8
   d600c:	e7ec      	b.n	d5fe8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d600e:	d014      	beq.n	d603a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6010:	1d0c      	adds	r4, r1, #4
   d6012:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6014:	1f23      	subs	r3, r4, #4
   d6016:	429d      	cmp	r5, r3
   d6018:	d00f      	beq.n	d603a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d601a:	2e04      	cmp	r6, #4
   d601c:	d007      	beq.n	d602e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d601e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6022:	f846 3c04 	str.w	r3, [r6, #-4]
   d6026:	4621      	mov	r1, r4
   d6028:	4630      	mov	r0, r6
   d602a:	f7ff ff14 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d602e:	4620      	mov	r0, r4
   d6030:	f7ff ff30 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6034:	3408      	adds	r4, #8
   d6036:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6038:	e7ec      	b.n	d6014 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d603a:	bd70      	pop	{r4, r5, r6, pc}

000d603c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6040:	6804      	ldr	r4, [r0, #0]
   d6042:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6044:	4605      	mov	r5, r0
   d6046:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6048:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d604c:	42a7      	cmp	r7, r4
   d604e:	d018      	beq.n	d6082 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d6050:	4641      	mov	r1, r8
   d6052:	4620      	mov	r0, r4
   d6054:	f7ff fe26 	bl	d5ca4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6058:	4606      	mov	r6, r0
   d605a:	b908      	cbnz	r0, d6060 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d605c:	3408      	adds	r4, #8
   d605e:	e7f5      	b.n	d604c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6060:	b18c      	cbz	r4, d6086 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6062:	1d20      	adds	r0, r4, #4
   d6064:	f7ff ff16 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6068:	682b      	ldr	r3, [r5, #0]
   d606a:	686a      	ldr	r2, [r5, #4]
   d606c:	f104 0108 	add.w	r1, r4, #8
   d6070:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6074:	4620      	mov	r0, r4
   d6076:	f7ff ffab 	bl	d5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d607a:	686b      	ldr	r3, [r5, #4]
   d607c:	3b01      	subs	r3, #1
   d607e:	606b      	str	r3, [r5, #4]
    return true;
   d6080:	e002      	b.n	d6088 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6082:	2600      	movs	r6, #0
   d6084:	e000      	b.n	d6088 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6086:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6088:	4630      	mov	r0, r6
   d608a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d608e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d608e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6090:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6092:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6096:	6847      	ldr	r7, [r0, #4]
   d6098:	9300      	str	r3, [sp, #0]
   d609a:	a801      	add	r0, sp, #4
   d609c:	f7ff fedb 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d60a0:	6866      	ldr	r6, [r4, #4]
   d60a2:	68a3      	ldr	r3, [r4, #8]
   d60a4:	429e      	cmp	r6, r3
   d60a6:	db14      	blt.n	d60d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d60a8:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d60aa:	2e00      	cmp	r6, #0
   d60ac:	dd0b      	ble.n	d60c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d60ae:	00f0      	lsls	r0, r6, #3
   d60b0:	f7ff fa52 	bl	d5558 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d60b4:	4605      	mov	r5, r0
   d60b6:	b318      	cbz	r0, d6100 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d60b8:	e894 0006 	ldmia.w	r4, {r1, r2}
   d60bc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d60c0:	f7ff ff86 	bl	d5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d60c4:	e000      	b.n	d60c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d60c6:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60c8:	6820      	ldr	r0, [r4, #0]
   d60ca:	f7ff fa4d 	bl	d5568 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d60ce:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d60d0:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d60d2:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d60d4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d60d6:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d60da:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d60de:	4629      	mov	r1, r5
   d60e0:	f105 0008 	add.w	r0, r5, #8
   d60e4:	f7ff ff74 	bl	d5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d60e8:	b135      	cbz	r5, d60f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d60ea:	9b00      	ldr	r3, [sp, #0]
   d60ec:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d60f0:	a901      	add	r1, sp, #4
   d60f2:	1d28      	adds	r0, r5, #4
   d60f4:	f7ff feaf 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d60f8:	6863      	ldr	r3, [r4, #4]
   d60fa:	3301      	adds	r3, #1
   d60fc:	6063      	str	r3, [r4, #4]
   d60fe:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6100:	a801      	add	r0, sp, #4
   d6102:	f7ff fec7 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6106:	4628      	mov	r0, r5
   d6108:	b003      	add	sp, #12
   d610a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d610c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6110:	4604      	mov	r4, r0
   d6112:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6114:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6116:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6118:	f7ff fb68 	bl	d57ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d611c:	6823      	ldr	r3, [r4, #0]
   d611e:	2b03      	cmp	r3, #3
   d6120:	d002      	beq.n	d6128 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6122:	2b04      	cmp	r3, #4
   d6124:	d042      	beq.n	d61ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6126:	e087      	b.n	d6238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6128:	a804      	add	r0, sp, #16
   d612a:	f7ff ff19 	bl	d5f60 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d612e:	9b04      	ldr	r3, [sp, #16]
   d6130:	8922      	ldrh	r2, [r4, #8]
   d6132:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6134:	6862      	ldr	r2, [r4, #4]
   d6136:	9904      	ldr	r1, [sp, #16]
   d6138:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d613c:	f8c1 3002 	str.w	r3, [r1, #2]
   d6140:	6853      	ldr	r3, [r2, #4]
   d6142:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6146:	a807      	add	r0, sp, #28
   d6148:	9b04      	ldr	r3, [sp, #16]
   d614a:	9306      	str	r3, [sp, #24]
   d614c:	a905      	add	r1, sp, #20
   d614e:	f7ff fe82 	bl	d5e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6152:	a906      	add	r1, sp, #24
   d6154:	f105 0018 	add.w	r0, r5, #24
   d6158:	f7ff ff99 	bl	d608e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d615c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d615e:	a807      	add	r0, sp, #28
   d6160:	f7ff fe98 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6164:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6166:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6168:	b974      	cbnz	r4, d6188 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d616a:	4b36      	ldr	r3, [pc, #216]	; (d6244 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d616c:	9300      	str	r3, [sp, #0]
   d616e:	aa06      	add	r2, sp, #24
   d6170:	4623      	mov	r3, r4
   d6172:	4935      	ldr	r1, [pc, #212]	; (d6248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6174:	9407      	str	r4, [sp, #28]
   d6176:	2032      	movs	r0, #50	; 0x32
   d6178:	f7ff f96a 	bl	d5450 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d617c:	9b04      	ldr	r3, [sp, #16]
   d617e:	4621      	mov	r1, r4
   d6180:	8818      	ldrh	r0, [r3, #0]
   d6182:	f7fe ffcb 	bl	d511c <hal_ble_gap_disconnect>
   d6186:	e00d      	b.n	d61a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6188:	4a30      	ldr	r2, [pc, #192]	; (d624c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d618a:	9200      	str	r2, [sp, #0]
   d618c:	2300      	movs	r3, #0
   d618e:	aa06      	add	r2, sp, #24
   d6190:	492d      	ldr	r1, [pc, #180]	; (d6248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6192:	9307      	str	r3, [sp, #28]
   d6194:	2001      	movs	r0, #1
   d6196:	f7ff f95b 	bl	d5450 <log_message>
                if (impl->connectedCb_) {
   d619a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d619c:	b113      	cbz	r3, d61a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d619e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d61a0:	a804      	add	r0, sp, #16
   d61a2:	4798      	blx	r3
   d61a4:	a805      	add	r0, sp, #20
   d61a6:	f7ff fe75 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61aa:	e045      	b.n	d6238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d61ac:	8921      	ldrh	r1, [r4, #8]
   d61ae:	4628      	mov	r0, r5
   d61b0:	f7ff fcf8 	bl	d5ba4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d61b4:	4607      	mov	r7, r0
   d61b6:	2800      	cmp	r0, #0
   d61b8:	d03e      	beq.n	d6238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d61ba:	6804      	ldr	r4, [r0, #0]
   d61bc:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d61be:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d61c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d61c4:	8022      	strh	r2, [r4, #0]
   d61c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d61ca:	4299      	cmp	r1, r3
   d61cc:	d003      	beq.n	d61d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d61ce:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d61d2:	8042      	strh	r2, [r0, #2]
   d61d4:	e7f9      	b.n	d61ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d61d6:	68e6      	ldr	r6, [r4, #12]
   d61d8:	6923      	ldr	r3, [r4, #16]
   d61da:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61de:	45b0      	cmp	r8, r6
   d61e0:	d004      	beq.n	d61ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d61e2:	1d30      	adds	r0, r6, #4
   d61e4:	f7ff fe56 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61e8:	3608      	adds	r6, #8
   d61ea:	e7f8      	b.n	d61de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d61ec:	2300      	movs	r3, #0
   d61ee:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d61f0:	69a6      	ldr	r6, [r4, #24]
   d61f2:	69e3      	ldr	r3, [r4, #28]
   d61f4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61f8:	45b0      	cmp	r8, r6
   d61fa:	d004      	beq.n	d6206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d61fc:	1d30      	adds	r0, r6, #4
   d61fe:	f7ff fe49 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6202:	3608      	adds	r6, #8
   d6204:	e7f8      	b.n	d61f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6206:	2300      	movs	r3, #0
   d6208:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d620a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d620c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d620e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6210:	b113      	cbz	r3, d6218 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6212:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6214:	4638      	mov	r0, r7
   d6216:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6218:	2320      	movs	r3, #32
   d621a:	4a0d      	ldr	r2, [pc, #52]	; (d6250 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d621c:	9306      	str	r3, [sp, #24]
   d621e:	9200      	str	r2, [sp, #0]
   d6220:	2300      	movs	r3, #0
   d6222:	4909      	ldr	r1, [pc, #36]	; (d6248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6224:	9307      	str	r3, [sp, #28]
   d6226:	2001      	movs	r0, #1
   d6228:	aa06      	add	r2, sp, #24
   d622a:	f7ff f911 	bl	d5450 <log_message>
                    impl->peers_.removeOne(*peer);
   d622e:	4639      	mov	r1, r7
   d6230:	f105 0018 	add.w	r0, r5, #24
   d6234:	f7ff ff02 	bl	d603c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6238:	a803      	add	r0, sp, #12
   d623a:	f7ff fae5 	bl	d5808 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d623e:	b00e      	add	sp, #56	; 0x38
   d6240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6244:	000d7b5a 	.word	0x000d7b5a
   d6248:	000d7af8 	.word	0x000d7af8
   d624c:	000d7b80 	.word	0x000d7b80
   d6250:	000d7b9d 	.word	0x000d7b9d

000d6254 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6254:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6258:	4606      	mov	r6, r0
   d625a:	460c      	mov	r4, r1
   d625c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d625e:	d914      	bls.n	d628a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6260:	4290      	cmp	r0, r2
   d6262:	d213      	bcs.n	d628c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6264:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6268:	1a6c      	subs	r4, r5, r1
   d626a:	f1a1 0708 	sub.w	r7, r1, #8
   d626e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6270:	42af      	cmp	r7, r5
   d6272:	d018      	beq.n	d62a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6274:	b11c      	cbz	r4, d627e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6276:	4629      	mov	r1, r5
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff fe01 	bl	d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d627e:	1d28      	adds	r0, r5, #4
   d6280:	f7ff fe08 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6284:	3d08      	subs	r5, #8
   d6286:	3c08      	subs	r4, #8
   d6288:	e7f2      	b.n	d6270 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d628a:	d00c      	beq.n	d62a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d628c:	42ac      	cmp	r4, r5
   d628e:	d00a      	beq.n	d62a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6290:	b11e      	cbz	r6, d629a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6292:	4621      	mov	r1, r4
   d6294:	4630      	mov	r0, r6
   d6296:	f7ff fdf3 	bl	d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d629a:	1d20      	adds	r0, r4, #4
   d629c:	f7ff fdfa 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d62a0:	3408      	adds	r4, #8
   d62a2:	3608      	adds	r6, #8
   d62a4:	e7f2      	b.n	d628c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d62a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d62a8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d62aa:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d62ac:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d62ae:	dd0b      	ble.n	d62c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d62b0:	00f0      	lsls	r0, r6, #3
   d62b2:	f7ff f951 	bl	d5558 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d62b6:	4604      	mov	r4, r0
   d62b8:	b170      	cbz	r0, d62d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d62ba:	e895 0006 	ldmia.w	r5, {r1, r2}
   d62be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d62c2:	f7ff ffc7 	bl	d6254 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d62c6:	e000      	b.n	d62ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d62c8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d62ca:	6828      	ldr	r0, [r5, #0]
   d62cc:	f7ff f94c 	bl	d5568 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d62d0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d62d2:	60ae      	str	r6, [r5, #8]
        return true;
   d62d4:	2001      	movs	r0, #1
   d62d6:	bd70      	pop	{r4, r5, r6, pc}
    }
   d62d8:	bd70      	pop	{r4, r5, r6, pc}

000d62da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d62da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d62dc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d62de:	6845      	ldr	r5, [r0, #4]
   d62e0:	4668      	mov	r0, sp
   d62e2:	f7ff fdcd 	bl	d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d62e6:	6861      	ldr	r1, [r4, #4]
   d62e8:	68a3      	ldr	r3, [r4, #8]
   d62ea:	4299      	cmp	r1, r3
   d62ec:	db05      	blt.n	d62fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d62ee:	3101      	adds	r1, #1
   d62f0:	4620      	mov	r0, r4
   d62f2:	f7ff ffd9 	bl	d62a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d62f6:	4606      	mov	r6, r0
   d62f8:	b198      	cbz	r0, d6322 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d62fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d62fc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d62fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6302:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6306:	4629      	mov	r1, r5
   d6308:	f105 0008 	add.w	r0, r5, #8
   d630c:	f7ff ffa2 	bl	d6254 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6310:	b11d      	cbz	r5, d631a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6312:	4669      	mov	r1, sp
   d6314:	4628      	mov	r0, r5
   d6316:	f7ff fdb3 	bl	d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d631a:	6863      	ldr	r3, [r4, #4]
   d631c:	3301      	adds	r3, #1
   d631e:	6063      	str	r3, [r4, #4]
   d6320:	2601      	movs	r6, #1
   d6322:	a801      	add	r0, sp, #4
   d6324:	f7ff fdb6 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6328:	4630      	mov	r0, r6
   d632a:	b002      	add	sp, #8
   d632c:	bd70      	pop	{r4, r5, r6, pc}

000d632e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d632e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6332:	4606      	mov	r6, r0
   d6334:	460c      	mov	r4, r1
   d6336:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6338:	d914      	bls.n	d6364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d633a:	4290      	cmp	r0, r2
   d633c:	d213      	bcs.n	d6366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d633e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6342:	1a6c      	subs	r4, r5, r1
   d6344:	f1a1 0708 	sub.w	r7, r1, #8
   d6348:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d634a:	42af      	cmp	r7, r5
   d634c:	d018      	beq.n	d6380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d634e:	b11c      	cbz	r4, d6358 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6350:	4629      	mov	r1, r5
   d6352:	4620      	mov	r0, r4
   d6354:	f7ff fd86 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6358:	1d28      	adds	r0, r5, #4
   d635a:	f7ff fd9b 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d635e:	3d08      	subs	r5, #8
   d6360:	3c08      	subs	r4, #8
   d6362:	e7f2      	b.n	d634a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6364:	d00c      	beq.n	d6380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6366:	42ac      	cmp	r4, r5
   d6368:	d00a      	beq.n	d6380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d636a:	b11e      	cbz	r6, d6374 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d636c:	4621      	mov	r1, r4
   d636e:	4630      	mov	r0, r6
   d6370:	f7ff fd78 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6374:	1d20      	adds	r0, r4, #4
   d6376:	f7ff fd8d 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d637a:	3408      	adds	r4, #8
   d637c:	3608      	adds	r6, #8
   d637e:	e7f2      	b.n	d6366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6382 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6382:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6384:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6386:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6388:	dd0b      	ble.n	d63a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d638a:	00f0      	lsls	r0, r6, #3
   d638c:	f7ff f8e4 	bl	d5558 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6390:	4604      	mov	r4, r0
   d6392:	b170      	cbz	r0, d63b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6394:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6398:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d639c:	f7ff ffc7 	bl	d632e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d63a0:	e000      	b.n	d63a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d63a2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d63a4:	6828      	ldr	r0, [r5, #0]
   d63a6:	f7ff f8df 	bl	d5568 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d63aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d63ac:	60ae      	str	r6, [r5, #8]
        return true;
   d63ae:	2001      	movs	r0, #1
   d63b0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d63b2:	bd70      	pop	{r4, r5, r6, pc}

000d63b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d63b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d63b6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d63b8:	6845      	ldr	r5, [r0, #4]
   d63ba:	4668      	mov	r0, sp
   d63bc:	f7ff fd52 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d63c0:	6861      	ldr	r1, [r4, #4]
   d63c2:	68a3      	ldr	r3, [r4, #8]
   d63c4:	4299      	cmp	r1, r3
   d63c6:	db05      	blt.n	d63d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d63c8:	3101      	adds	r1, #1
   d63ca:	4620      	mov	r0, r4
   d63cc:	f7ff ffd9 	bl	d6382 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d63d0:	4606      	mov	r6, r0
   d63d2:	b198      	cbz	r0, d63fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d63d4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d63d6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d63d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d63dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d63e0:	4629      	mov	r1, r5
   d63e2:	f105 0008 	add.w	r0, r5, #8
   d63e6:	f7ff ffa2 	bl	d632e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d63ea:	b11d      	cbz	r5, d63f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d63ec:	4669      	mov	r1, sp
   d63ee:	4628      	mov	r0, r5
   d63f0:	f7ff fd38 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d63f4:	6863      	ldr	r3, [r4, #4]
   d63f6:	3301      	adds	r3, #1
   d63f8:	6063      	str	r3, [r4, #4]
   d63fa:	2601      	movs	r6, #1
   d63fc:	a801      	add	r0, sp, #4
   d63fe:	f7ff fd49 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6402:	4630      	mov	r0, r6
   d6404:	b002      	add	sp, #8
   d6406:	bd70      	pop	{r4, r5, r6, pc}

000d6408 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6408:	b510      	push	{r4, lr}
   d640a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d640c:	6840      	ldr	r0, [r0, #4]
   d640e:	b108      	cbz	r0, d6414 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6410:	f7fd fe45 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6414:	4620      	mov	r0, r4
   d6416:	bd10      	pop	{r4, pc}

000d6418 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6418:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d641a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d641c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d641e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6422:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6426:	f7ff f921 	bl	d566c <_ZN6StringD1Ev>
   d642a:	4668      	mov	r0, sp
   d642c:	f7ff ffec 	bl	d6408 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6430:	b003      	add	sp, #12
   d6432:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6438:	b538      	push	{r3, r4, r5, lr}
   d643a:	2300      	movs	r3, #0
   d643c:	4604      	mov	r4, r0
   d643e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6440:	2014      	movs	r0, #20
   d6442:	460d      	mov	r5, r1
   d6444:	f7fd fe27 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6448:	b128      	cbz	r0, d6456 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d644a:	2301      	movs	r3, #1
   d644c:	6043      	str	r3, [r0, #4]
   d644e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6450:	4b02      	ldr	r3, [pc, #8]	; (d645c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6452:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6454:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6456:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6458:	4620      	mov	r0, r4
   d645a:	bd38      	pop	{r3, r4, r5, pc}
   d645c:	000d7a9c 	.word	0x000d7a9c

000d6460 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6464:	b088      	sub	sp, #32
   d6466:	4605      	mov	r5, r0
   d6468:	461e      	mov	r6, r3
   d646a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d646c:	2300      	movs	r3, #0
   d646e:	460f      	mov	r7, r1
   d6470:	4690      	mov	r8, r2
   d6472:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6474:	9305      	str	r3, [sp, #20]
   d6476:	f7fd fe0e 	bl	d4096 <_Znwj>
   d647a:	f8cd d018 	str.w	sp, [sp, #24]
   d647e:	4604      	mov	r4, r0
   d6480:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6482:	b1b0      	cbz	r0, d64b2 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d6484:	f7ff fb6e 	bl	d5b64 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d6488:	4639      	mov	r1, r7
   d648a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d648e:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d6492:	f7ff f945 	bl	d5720 <_ZN6StringaSEPKc>
        callback_ = callback;
   d6496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6498:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d649a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d649c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d649e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d64a0:	f104 0014 	add.w	r0, r4, #20
   d64a4:	f7ff fa30 	bl	d5908 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d64a8:	990e      	ldr	r1, [sp, #56]	; 0x38
   d64aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d64ae:	f7ff fa2b 	bl	d5908 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64b2:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d64b4:	2600      	movs	r6, #0
   d64b6:	ab01      	add	r3, sp, #4
   d64b8:	aa02      	add	r2, sp, #8
   d64ba:	a803      	add	r0, sp, #12
   d64bc:	9607      	str	r6, [sp, #28]
   d64be:	f7ff ffbb 	bl	d6438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64c2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d64c4:	9a05      	ldr	r2, [sp, #20]
   d64c6:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64c8:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64ca:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d64cc:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64ce:	f7ff fce1 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d64d2:	a806      	add	r0, sp, #24
   d64d4:	f7ff ff98 	bl	d6408 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64d8:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d64da:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64dc:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d64de:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64e0:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64e2:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d64e4:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d64e6:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d64e8:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64ec:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64ee:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64f0:	f7ff fcd0 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64f4:	a805      	add	r0, sp, #20
   d64f6:	f7ff fccd 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d64fa:	6829      	ldr	r1, [r5, #0]
   d64fc:	b919      	cbnz	r1, d6506 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d64fe:	4a03      	ldr	r2, [pc, #12]	; (d650c <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d6500:	200a      	movs	r0, #10
   d6502:	f7fe ff9d 	bl	d5440 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6506:	b008      	add	sp, #32
   d6508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d650c:	000d50bd 	.word	0x000d50bd

000d6510 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6510:	b510      	push	{r4, lr}
   d6512:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	b108      	cbz	r0, d651c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6518:	f7fd fdc1 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d651c:	4620      	mov	r0, r4
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6520:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6522:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6524:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6526:	e88d 0009 	stmia.w	sp, {r0, r3}
   d652a:	4668      	mov	r0, sp
   d652c:	f7ff fff0 	bl	d6510 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6530:	b003      	add	sp, #12
   d6532:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6538:	b538      	push	{r3, r4, r5, lr}
   d653a:	2300      	movs	r3, #0
   d653c:	4604      	mov	r4, r0
   d653e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6540:	2014      	movs	r0, #20
   d6542:	460d      	mov	r5, r1
   d6544:	f7fd fda7 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6548:	b128      	cbz	r0, d6556 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d654a:	2301      	movs	r3, #1
   d654c:	6043      	str	r3, [r0, #4]
   d654e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6550:	4b02      	ldr	r3, [pc, #8]	; (d655c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6552:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6554:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6556:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6558:	4620      	mov	r0, r4
   d655a:	bd38      	pop	{r3, r4, r5, pc}
   d655c:	000d7ab8 	.word	0x000d7ab8

000d6560 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6560:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6562:	2600      	movs	r6, #0
   d6564:	b087      	sub	sp, #28
   d6566:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6568:	6046      	str	r6, [r0, #4]
   d656a:	4604      	mov	r4, r0
   d656c:	2018      	movs	r0, #24
   d656e:	460f      	mov	r7, r1
   d6570:	f7fd fd91 	bl	d4096 <_Znwj>
   d6574:	f8cd d010 	str.w	sp, [sp, #16]
   d6578:	4605      	mov	r5, r0
   d657a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d657c:	b138      	cbz	r0, d658e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d657e:	f7ff f95d 	bl	d583c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6582:	4639      	mov	r1, r7
   d6584:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6586:	82ae      	strh	r6, [r5, #20]
   d6588:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d658a:	f7ff f9bd 	bl	d5908 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d658e:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6590:	4629      	mov	r1, r5
   d6592:	9305      	str	r3, [sp, #20]
   d6594:	aa02      	add	r2, sp, #8
   d6596:	ab01      	add	r3, sp, #4
   d6598:	a803      	add	r0, sp, #12
   d659a:	f7ff ffcd 	bl	d6538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d659e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d65a0:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d65a2:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d65a4:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d65a6:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d65a8:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d65aa:	f7ff fc73 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d65ae:	a804      	add	r0, sp, #16
   d65b0:	f7ff ffae 	bl	d6510 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d65b4:	6823      	ldr	r3, [r4, #0]
   d65b6:	b90b      	cbnz	r3, d65bc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d65b8:	f7ff f8e8 	bl	d578c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d65bc:	4620      	mov	r0, r4
   d65be:	b007      	add	sp, #28
   d65c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d65c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d65c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65c8:	4617      	mov	r7, r2
   d65ca:	b09f      	sub	sp, #124	; 0x7c
   d65cc:	4680      	mov	r8, r0
    WiringBleLock lk;
   d65ce:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d65d0:	460e      	mov	r6, r1
    WiringBleLock lk;
   d65d2:	f7ff f90b 	bl	d57ec <_ZN8particle3ble13WiringBleLockC1Ev>
   d65d6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d65d8:	7923      	ldrb	r3, [r4, #4]
   d65da:	2b00      	cmp	r3, #0
   d65dc:	f000 80f3 	beq.w	d67c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d65e0:	6833      	ldr	r3, [r6, #0]
   d65e2:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65e4:	691b      	ldr	r3, [r3, #16]
   d65e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d65ea:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d65ec:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d65f0:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d65f4:	9b03      	ldr	r3, [sp, #12]
   d65f6:	42ab      	cmp	r3, r5
   d65f8:	d023      	beq.n	d6642 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d65fa:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d65fe:	4650      	mov	r0, sl
   d6600:	f109 0114 	add.w	r1, r9, #20
   d6604:	f7ff f999 	bl	d593a <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6608:	2800      	cmp	r0, #0
   d660a:	f000 80e1 	beq.w	d67d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d660e:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6612:	4658      	mov	r0, fp
   d6614:	f7ff f991 	bl	d593a <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6618:	2800      	cmp	r0, #0
   d661a:	f000 80d9 	beq.w	d67d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d661e:	6823      	ldr	r3, [r4, #0]
   d6620:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d6624:	f8d9 3000 	ldr.w	r3, [r9]
   d6628:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d662c:	4299      	cmp	r1, r3
   d662e:	f040 80cf 	bne.w	d67d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6632:	2320      	movs	r3, #32
   d6634:	4a6b      	ldr	r2, [pc, #428]	; (d67e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d6636:	9313      	str	r3, [sp, #76]	; 0x4c
   d6638:	2300      	movs	r3, #0
   d663a:	9200      	str	r2, [sp, #0]
   d663c:	9314      	str	r3, [sp, #80]	; 0x50
   d663e:	aa13      	add	r2, sp, #76	; 0x4c
   d6640:	e0bd      	b.n	d67be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d6642:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d6646:	4628      	mov	r0, r5
   d6648:	f7ff f945 	bl	d58d6 <_ZNK8particle7BleUuid7isValidEv>
   d664c:	b918      	cbnz	r0, d6656 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d664e:	4966      	ldr	r1, [pc, #408]	; (d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6650:	4628      	mov	r0, r5
   d6652:	f7ff f964 	bl	d591e <_ZN8particle7BleUuidaSEPKh>
   d6656:	6833      	ldr	r3, [r6, #0]
   d6658:	f8d3 9000 	ldr.w	r9, [r3]
   d665c:	685b      	ldr	r3, [r3, #4]
   d665e:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6662:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6664:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6666:	d008      	beq.n	d667a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6668:	f8d9 0000 	ldr.w	r0, [r9]
   d666c:	f7ff f965 	bl	d593a <_ZNK8particle7BleUuideqERKS0_>
   d6670:	2800      	cmp	r0, #0
   d6672:	d137      	bne.n	d66e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6674:	f109 0908 	add.w	r9, r9, #8
   d6678:	e7f3      	b.n	d6662 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d667a:	a806      	add	r0, sp, #24
   d667c:	f7ff ff70 	bl	d6560 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6680:	aa13      	add	r2, sp, #76	; 0x4c
   d6682:	462b      	mov	r3, r5
   d6684:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d6688:	4696      	mov	lr, r2
   d668a:	6818      	ldr	r0, [r3, #0]
   d668c:	6859      	ldr	r1, [r3, #4]
   d668e:	4615      	mov	r5, r2
   d6690:	c503      	stmia	r5!, {r0, r1}
   d6692:	3308      	adds	r3, #8
   d6694:	4563      	cmp	r3, ip
   d6696:	462a      	mov	r2, r5
   d6698:	d1f7      	bne.n	d668a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d669a:	6818      	ldr	r0, [r3, #0]
   d669c:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d669e:	9a06      	ldr	r2, [sp, #24]
   d66a0:	2300      	movs	r3, #0
   d66a2:	3214      	adds	r2, #20
   d66a4:	4671      	mov	r1, lr
   d66a6:	2001      	movs	r0, #1
   d66a8:	f7fe fd42 	bl	d5130 <hal_ble_gatt_server_add_service>
   d66ac:	2800      	cmp	r0, #0
   d66ae:	d17e      	bne.n	d67ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d66b0:	6835      	ldr	r5, [r6, #0]
   d66b2:	a906      	add	r1, sp, #24
   d66b4:	a80b      	add	r0, sp, #44	; 0x2c
   d66b6:	f7ff fbe3 	bl	d5e80 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d66ba:	4628      	mov	r0, r5
   d66bc:	a90b      	add	r1, sp, #44	; 0x2c
   d66be:	f7ff fe0c 	bl	d62da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d66c2:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66c4:	a80c      	add	r0, sp, #48	; 0x30
   d66c6:	f7ff fbe5 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66ca:	2d00      	cmp	r5, #0
   d66cc:	d06f      	beq.n	d67ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d66ce:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d66d0:	6853      	ldr	r3, [r2, #4]
   d66d2:	6812      	ldr	r2, [r2, #0]
   d66d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d66d8:	3b01      	subs	r3, #1
   d66da:	a807      	add	r0, sp, #28
   d66dc:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d66e0:	f7ff fbd8 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d66e4:	f104 0514 	add.w	r5, r4, #20
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7ff f8f4 	bl	d58d6 <_ZNK8particle7BleUuid7isValidEv>
   d66ee:	b968      	cbnz	r0, d670c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d66f0:	4b3e      	ldr	r3, [pc, #248]	; (d67ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d66f2:	493d      	ldr	r1, [pc, #244]	; (d67e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d66f4:	881a      	ldrh	r2, [r3, #0]
   d66f6:	3201      	adds	r2, #1
   d66f8:	b292      	uxth	r2, r2
   d66fa:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d66fc:	a813      	add	r0, sp, #76	; 0x4c
   d66fe:	2301      	movs	r3, #1
   d6700:	f7ff f8d5 	bl	d58ae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6704:	a913      	add	r1, sp, #76	; 0x4c
   d6706:	4628      	mov	r0, r5
   d6708:	f7ff f8fe 	bl	d5908 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d670c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6710:	4652      	mov	r2, sl
   d6712:	2100      	movs	r1, #0
   d6714:	a813      	add	r0, sp, #76	; 0x4c
   d6716:	f000 ff72 	bl	d75fe <memset>
    charInit.version = BLE_API_VERSION;
   d671a:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d671c:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d671e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d6722:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6726:	462b      	mov	r3, r5
   d6728:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d672c:	4615      	mov	r5, r2
   d672e:	6818      	ldr	r0, [r3, #0]
   d6730:	6859      	ldr	r1, [r3, #4]
   d6732:	4696      	mov	lr, r2
   d6734:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6738:	3308      	adds	r3, #8
   d673a:	4563      	cmp	r3, ip
   d673c:	4672      	mov	r2, lr
   d673e:	d1f6      	bne.n	d672e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d6740:	6818      	ldr	r0, [r3, #0]
   d6742:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d6746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6748:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d674c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6750:	682b      	ldr	r3, [r5, #0]
   d6752:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d6756:	7923      	ldrb	r3, [r4, #4]
   d6758:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d675c:	f8d9 3000 	ldr.w	r3, [r9]
   d6760:	8a9b      	ldrh	r3, [r3, #20]
   d6762:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d6766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6768:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d676a:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d676c:	4b20      	ldr	r3, [pc, #128]	; (d67f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d676e:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6770:	1da1      	adds	r1, r4, #6
   d6772:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d6774:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6776:	f7fe fd03 	bl	d5180 <hal_ble_gatt_server_add_characteristic>
   d677a:	bb20      	cbnz	r0, d67c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d677c:	2301      	movs	r3, #1
   d677e:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6780:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6782:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6784:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6786:	a80b      	add	r0, sp, #44	; 0x2c
   d6788:	f7ff fb6c 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d678c:	4620      	mov	r0, r4
   d678e:	a90b      	add	r1, sp, #44	; 0x2c
   d6790:	f7ff fe10 	bl	d63b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6794:	4604      	mov	r4, r0
   d6796:	a80c      	add	r0, sp, #48	; 0x30
   d6798:	f7ff fb7c 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d679c:	b99c      	cbnz	r4, d67c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d679e:	2320      	movs	r3, #32
   d67a0:	930b      	str	r3, [sp, #44]	; 0x2c
   d67a2:	4b14      	ldr	r3, [pc, #80]	; (d67f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d67a4:	9300      	str	r3, [sp, #0]
   d67a6:	940c      	str	r4, [sp, #48]	; 0x30
   d67a8:	4623      	mov	r3, r4
   d67aa:	aa0b      	add	r2, sp, #44	; 0x2c
   d67ac:	e007      	b.n	d67be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d67ae:	4639      	mov	r1, r7
   d67b0:	4640      	mov	r0, r8
   d67b2:	f7ff fb57 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d67b6:	a807      	add	r0, sp, #28
   d67b8:	f7ff fb6c 	bl	d5e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67bc:	e00a      	b.n	d67d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d67be:	490e      	ldr	r1, [pc, #56]	; (d67f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d67c0:	2032      	movs	r0, #50	; 0x32
   d67c2:	f7fe fe45 	bl	d5450 <log_message>
            return characteristic;
   d67c6:	4639      	mov	r1, r7
   d67c8:	4640      	mov	r0, r8
   d67ca:	f7ff fb4b 	bl	d5e64 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d67ce:	e001      	b.n	d67d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d67d0:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d67d2:	e70f      	b.n	d65f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d67d4:	a805      	add	r0, sp, #20
   d67d6:	f7ff f817 	bl	d5808 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d67da:	4640      	mov	r0, r8
   d67dc:	b01f      	add	sp, #124	; 0x7c
   d67de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67e2:	bf00      	nop
   d67e4:	000d7c6d 	.word	0x000d7c6d
   d67e8:	000d7ae8 	.word	0x000d7ae8
   d67ec:	2003e3dc 	.word	0x2003e3dc
   d67f0:	000d5d71 	.word	0x000d5d71
   d67f4:	000d7c46 	.word	0x000d7c46
   d67f8:	000d7af8 	.word	0x000d7af8

000d67fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67fc:	4802      	ldr	r0, [pc, #8]	; (d6808 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d67fe:	2300      	movs	r3, #0
   d6800:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6802:	f7fe bd05 	b.w	d5210 <os_mutex_recursive_create>
   d6806:	bf00      	nop
   d6808:	2003e3e0 	.word	0x2003e3e0

000d680c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d680e:	4606      	mov	r6, r0
   d6810:	460d      	mov	r5, r1
   d6812:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6814:	2400      	movs	r4, #0
  while (size--) {
   d6816:	42bd      	cmp	r5, r7
   d6818:	d00c      	beq.n	d6834 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d681a:	6833      	ldr	r3, [r6, #0]
   d681c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6820:	689b      	ldr	r3, [r3, #8]
   d6822:	4630      	mov	r0, r6
   d6824:	4798      	blx	r3
     if (chunk>=0)
   d6826:	2800      	cmp	r0, #0
   d6828:	db01      	blt.n	d682e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d682a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d682c:	e7f3      	b.n	d6816 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d682e:	2c00      	cmp	r4, #0
   d6830:	bf08      	it	eq
   d6832:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6834:	4620      	mov	r0, r4
   d6836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6838 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6838:	b570      	push	{r4, r5, r6, lr}
   d683a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d683c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d683e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6840:	b149      	cbz	r1, d6856 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6842:	f000 ff0d 	bl	d7660 <strlen>
   d6846:	682b      	ldr	r3, [r5, #0]
   d6848:	4602      	mov	r2, r0
   d684a:	4621      	mov	r1, r4
   d684c:	4628      	mov	r0, r5
   d684e:	68db      	ldr	r3, [r3, #12]
    }
   d6850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6854:	4718      	bx	r3
    }
   d6856:	bd70      	pop	{r4, r5, r6, pc}

000d6858 <_ZN5Print5printEPKc>:
   d6858:	b508      	push	{r3, lr}
   d685a:	f7ff ffed 	bl	d6838 <_ZN5Print5writeEPKc>
   d685e:	bd08      	pop	{r3, pc}

000d6860 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6860:	6803      	ldr	r3, [r0, #0]
   d6862:	689b      	ldr	r3, [r3, #8]
   d6864:	4718      	bx	r3

000d6866 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6866:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6868:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d686a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d686c:	f7ff fff8 	bl	d6860 <_ZN5Print5printEc>
  n += print('\n');
   d6870:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6872:	4604      	mov	r4, r0
  n += print('\n');
   d6874:	4628      	mov	r0, r5
   d6876:	f7ff fff3 	bl	d6860 <_ZN5Print5printEc>
  return n;
}
   d687a:	4420      	add	r0, r4
   d687c:	bd38      	pop	{r3, r4, r5, pc}

000d687e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d687e:	b538      	push	{r3, r4, r5, lr}
   d6880:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6882:	f7ff ffd9 	bl	d6838 <_ZN5Print5writeEPKc>
   d6886:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6888:	4628      	mov	r0, r5
   d688a:	f7ff ffec 	bl	d6866 <_ZN5Print7printlnEv>
  return n;
}
   d688e:	4420      	add	r0, r4
   d6890:	bd38      	pop	{r3, r4, r5, pc}

000d6892 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6892:	b530      	push	{r4, r5, lr}
   d6894:	b08b      	sub	sp, #44	; 0x2c
   d6896:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6898:	2100      	movs	r1, #0
   d689a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d689e:	2a01      	cmp	r2, #1
   d68a0:	bf98      	it	ls
   d68a2:	220a      	movls	r2, #10
   d68a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d68a8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d68ac:	fb05 3312 	mls	r3, r5, r2, r3
   d68b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d68b4:	2b09      	cmp	r3, #9
   d68b6:	bf94      	ite	ls
   d68b8:	3330      	addls	r3, #48	; 0x30
   d68ba:	3337      	addhi	r3, #55	; 0x37
   d68bc:	b2db      	uxtb	r3, r3
   d68be:	4621      	mov	r1, r4
   d68c0:	f804 3901 	strb.w	r3, [r4], #-1
   d68c4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d68c6:	2d00      	cmp	r5, #0
   d68c8:	d1ee      	bne.n	d68a8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d68ca:	f7ff ffb5 	bl	d6838 <_ZN5Print5writeEPKc>
}
   d68ce:	b00b      	add	sp, #44	; 0x2c
   d68d0:	bd30      	pop	{r4, r5, pc}

000d68d2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d68d2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d68d4:	b92a      	cbnz	r2, d68e2 <_ZN5Print5printEmi+0x10>
   d68d6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d68d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d68dc:	689b      	ldr	r3, [r3, #8]
   d68de:	b2c9      	uxtb	r1, r1
   d68e0:	4718      	bx	r3
  else return printNumber(n, base);
   d68e2:	b2d2      	uxtb	r2, r2
}
   d68e4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d68e8:	f7ff bfd3 	b.w	d6892 <_ZN5Print11printNumberEmh>

000d68ec <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d68ec:	f7ff bff1 	b.w	d68d2 <_ZN5Print5printEmi>

000d68f0 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d68f0:	b538      	push	{r3, r4, r5, lr}
   d68f2:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d68f4:	f7ff ffed 	bl	d68d2 <_ZN5Print5printEmi>
   d68f8:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d68fa:	4628      	mov	r0, r5
   d68fc:	f7ff ffb3 	bl	d6866 <_ZN5Print7printlnEv>
  return n;
}
   d6900:	4420      	add	r0, r4
   d6902:	bd38      	pop	{r3, r4, r5, pc}

000d6904 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6908:	4607      	mov	r7, r0
   d690a:	460e      	mov	r6, r1
  if (base == 0) {
   d690c:	4615      	mov	r5, r2
   d690e:	b92a      	cbnz	r2, d691c <_ZN5Print5printEli+0x18>
    return write(n);
   d6910:	6803      	ldr	r3, [r0, #0]
   d6912:	b2c9      	uxtb	r1, r1
   d6914:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d691a:	4718      	bx	r3
  } else if (base == 10) {
   d691c:	2a0a      	cmp	r2, #10
   d691e:	d102      	bne.n	d6926 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6920:	2900      	cmp	r1, #0
   d6922:	da01      	bge.n	d6928 <_ZN5Print5printEli+0x24>
   d6924:	e004      	b.n	d6930 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6926:	b2d2      	uxtb	r2, r2
  }
}
   d6928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d692c:	f7ff bfb1 	b.w	d6892 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6930:	212d      	movs	r1, #45	; 0x2d
   d6932:	f7ff ff95 	bl	d6860 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6936:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6938:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d693a:	4271      	negs	r1, r6
   d693c:	4638      	mov	r0, r7
   d693e:	f7ff ffa8 	bl	d6892 <_ZN5Print11printNumberEmh>
   d6942:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6948 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d6948:	b538      	push	{r3, r4, r5, lr}
   d694a:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d694c:	f7ff ffda 	bl	d6904 <_ZN5Print5printEli>
   d6950:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d6952:	4628      	mov	r0, r5
   d6954:	f7ff ff87 	bl	d6866 <_ZN5Print7printlnEv>
  return n;
}
   d6958:	4420      	add	r0, r4
   d695a:	bd38      	pop	{r3, r4, r5, pc}

000d695c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d695c:	4b01      	ldr	r3, [pc, #4]	; (d6964 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d695e:	4a02      	ldr	r2, [pc, #8]	; (d6968 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6960:	601a      	str	r2, [r3, #0]
   d6962:	4770      	bx	lr
   d6964:	2003e3e4 	.word	0x2003e3e4
   d6968:	000d7d0b 	.word	0x000d7d0b

000d696c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d696c:	4b02      	ldr	r3, [pc, #8]	; (d6978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d696e:	681a      	ldr	r2, [r3, #0]
   d6970:	4b02      	ldr	r3, [pc, #8]	; (d697c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6972:	601a      	str	r2, [r3, #0]
   d6974:	4770      	bx	lr
   d6976:	bf00      	nop
   d6978:	2003e320 	.word	0x2003e320
   d697c:	2003e3e8 	.word	0x2003e3e8

000d6980 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6980:	2100      	movs	r1, #0
   d6982:	f7fe bd75 	b.w	d5470 <system_delay_ms>

000d6986 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6986:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6988:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d698a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d698c:	b113      	cbz	r3, d6994 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d698e:	2203      	movs	r2, #3
   d6990:	4601      	mov	r1, r0
   d6992:	4798      	blx	r3
    }
   d6994:	4620      	mov	r0, r4
   d6996:	bd10      	pop	{r4, pc}

000d6998 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6998:	b510      	push	{r4, lr}
   d699a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d699c:	f7ff fff3 	bl	d6986 <_ZNSt14_Function_baseD1Ev>
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d69a4:	b510      	push	{r4, lr}
   d69a6:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d69a8:	f7fe fd3a 	bl	d5420 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d69ac:	4284      	cmp	r4, r0
   d69ae:	d008      	beq.n	d69c2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d69b0:	b11c      	cbz	r4, d69ba <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d69b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d69b6:	f7fe bd1b 	b.w	d53f0 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d69ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d69be:	f7fe bd1f 	b.w	d5400 <LED_Signaling_Stop>
   d69c2:	bd10      	pop	{r4, pc}

000d69c4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d69c4:	b570      	push	{r4, r5, r6, lr}
   d69c6:	4605      	mov	r5, r0
   d69c8:	460e      	mov	r6, r1
   d69ca:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d69cc:	f7fe fd28 	bl	d5420 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d69d0:	b150      	cbz	r0, d69e8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d69d2:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d69d6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d69da:	f7fe fd01 	bl	d53e0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d69de:	20e7      	movs	r0, #231	; 0xe7
}
   d69e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d69e4:	f7fe bd24 	b.w	d5430 <LED_On>
   d69e8:	bd70      	pop	{r4, r5, r6, pc}

000d69ea <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d69ea:	b510      	push	{r4, lr}
   d69ec:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d69ee:	f7fe fd0f 	bl	d5410 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d69f2:	f7fe fd15 	bl	d5420 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d69f6:	b128      	cbz	r0, d6a04 <_ZN8RGBClass10brightnessEhb+0x1a>
   d69f8:	b124      	cbz	r4, d6a04 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d69fa:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d69fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d6a00:	f7fe bd16 	b.w	d5430 <LED_On>
   d6a04:	bd10      	pop	{r4, pc}
	...

000d6a08 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a08:	4803      	ldr	r0, [pc, #12]	; (d6a18 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6a0a:	4a04      	ldr	r2, [pc, #16]	; (d6a1c <_GLOBAL__sub_I_RGB+0x14>)
   d6a0c:	4904      	ldr	r1, [pc, #16]	; (d6a20 <_GLOBAL__sub_I_RGB+0x18>)
   d6a0e:	2300      	movs	r3, #0
   d6a10:	6083      	str	r3, [r0, #8]
   d6a12:	f000 bc61 	b.w	d72d8 <__aeabi_atexit>
   d6a16:	bf00      	nop
   d6a18:	2003e3ec 	.word	0x2003e3ec
   d6a1c:	2003e388 	.word	0x2003e388
   d6a20:	000d6999 	.word	0x000d6999

000d6a24 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a26:	4b0f      	ldr	r3, [pc, #60]	; (d6a64 <serialEventRun+0x40>)
   d6a28:	b133      	cbz	r3, d6a38 <serialEventRun+0x14>
   d6a2a:	f000 f93d 	bl	d6ca8 <_Z16_fetch_usbserialv>
   d6a2e:	6803      	ldr	r3, [r0, #0]
   d6a30:	691b      	ldr	r3, [r3, #16]
   d6a32:	4798      	blx	r3
   d6a34:	2800      	cmp	r0, #0
   d6a36:	dc0d      	bgt.n	d6a54 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a38:	4b0b      	ldr	r3, [pc, #44]	; (d6a68 <serialEventRun+0x44>)
   d6a3a:	b133      	cbz	r3, d6a4a <serialEventRun+0x26>
   d6a3c:	f000 f9ea 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d6a40:	6803      	ldr	r3, [r0, #0]
   d6a42:	691b      	ldr	r3, [r3, #16]
   d6a44:	4798      	blx	r3
   d6a46:	2800      	cmp	r0, #0
   d6a48:	dc07      	bgt.n	d6a5a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d6a4a:	4b08      	ldr	r3, [pc, #32]	; (d6a6c <serialEventRun+0x48>)
   d6a4c:	b143      	cbz	r3, d6a60 <serialEventRun+0x3c>
   d6a4e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6a52:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a54:	f3af 8000 	nop.w
   d6a58:	e7ee      	b.n	d6a38 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a5a:	f3af 8000 	nop.w
   d6a5e:	e7f4      	b.n	d6a4a <serialEventRun+0x26>
   d6a60:	bd08      	pop	{r3, pc}
   d6a62:	bf00      	nop
	...

000d6a70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a70:	b508      	push	{r3, lr}
	serialEventRun();
   d6a72:	f7ff ffd7 	bl	d6a24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a76:	f7fe fb29 	bl	d50cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6a7a:	4b01      	ldr	r3, [pc, #4]	; (d6a80 <_post_loop+0x10>)
   d6a7c:	6018      	str	r0, [r3, #0]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	2003e734 	.word	0x2003e734

000d6a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6a84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6a86:	2300      	movs	r3, #0
   d6a88:	9300      	str	r3, [sp, #0]
   d6a8a:	461a      	mov	r2, r3
   d6a8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6a90:	f7fe fd00 	bl	d5494 <system_ctrl_set_result>
}
   d6a94:	b003      	add	sp, #12
   d6a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a9c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6a9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6a9e:	8843      	ldrh	r3, [r0, #2]
   d6aa0:	2b0a      	cmp	r3, #10
   d6aa2:	d008      	beq.n	d6ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6aa4:	2b50      	cmp	r3, #80	; 0x50
   d6aa6:	d109      	bne.n	d6abc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6aa8:	4b09      	ldr	r3, [pc, #36]	; (d6ad0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6aaa:	681b      	ldr	r3, [r3, #0]
   d6aac:	b13b      	cbz	r3, d6abe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6aae:	b003      	add	sp, #12
   d6ab0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ab4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6ab6:	f7ff ffe5 	bl	d6a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6aba:	e006      	b.n	d6aca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6abc:	2300      	movs	r3, #0
   d6abe:	9300      	str	r3, [sp, #0]
   d6ac0:	461a      	mov	r2, r3
   d6ac2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ac6:	f7fe fce5 	bl	d5494 <system_ctrl_set_result>
        break;
    }
}
   d6aca:	b003      	add	sp, #12
   d6acc:	f85d fb04 	ldr.w	pc, [sp], #4
   d6ad0:	2003e3fc 	.word	0x2003e3fc

000d6ad4 <module_user_init_hook>:

void module_user_init_hook()
{
   d6ad4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6ad6:	f7fe fae9 	bl	d50ac <HAL_RNG_GetRandomNumber>
   d6ada:	4604      	mov	r4, r0
    srand(seed);
   d6adc:	f000 fd98 	bl	d7610 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ae0:	4b07      	ldr	r3, [pc, #28]	; (d6b00 <module_user_init_hook+0x2c>)
   d6ae2:	b113      	cbz	r3, d6aea <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6aea:	2100      	movs	r1, #0
   d6aec:	4804      	ldr	r0, [pc, #16]	; (d6b00 <module_user_init_hook+0x2c>)
   d6aee:	f7fe fd2b 	bl	d5548 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6af2:	2100      	movs	r1, #0
   d6af4:	4803      	ldr	r0, [pc, #12]	; (d6b04 <module_user_init_hook+0x30>)
}
   d6af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6afa:	f7fe bcc1 	b.w	d5480 <system_ctrl_set_app_request_handler>
   d6afe:	bf00      	nop
   d6b00:	00000000 	.word	0x00000000
   d6b04:	000d6a9d 	.word	0x000d6a9d

000d6b08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b08:	4770      	bx	lr

000d6b0a <_ZN9IPAddressD0Ev>:
   d6b0a:	b510      	push	{r4, lr}
   d6b0c:	2118      	movs	r1, #24
   d6b0e:	4604      	mov	r4, r0
   d6b10:	f000 fbe7 	bl	d72e2 <_ZdlPvj>
   d6b14:	4620      	mov	r0, r4
   d6b16:	bd10      	pop	{r4, pc}

000d6b18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b1a:	7d03      	ldrb	r3, [r0, #20]
   d6b1c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b1e:	b08d      	sub	sp, #52	; 0x34
   d6b20:	460e      	mov	r6, r1
   d6b22:	f100 0704 	add.w	r7, r0, #4
   d6b26:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b2a:	d002      	beq.n	d6b32 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b2c:	f100 0508 	add.w	r5, r0, #8
   d6b30:	e018      	b.n	d6b64 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b32:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b34:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b36:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b3a:	232f      	movs	r3, #47	; 0x2f
   d6b3c:	462a      	mov	r2, r5
   d6b3e:	200a      	movs	r0, #10
   d6b40:	f7fe fb7e 	bl	d5240 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b44:	4628      	mov	r0, r5
   d6b46:	f000 fd8b 	bl	d7660 <strlen>
   d6b4a:	6833      	ldr	r3, [r6, #0]
   d6b4c:	4602      	mov	r2, r0
   d6b4e:	68db      	ldr	r3, [r3, #12]
   d6b50:	4629      	mov	r1, r5
   d6b52:	4630      	mov	r0, r6
   d6b54:	4798      	blx	r3
   d6b56:	e00f      	b.n	d6b78 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6b58:	b124      	cbz	r4, d6b64 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6b5a:	212e      	movs	r1, #46	; 0x2e
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f7ff fe7f 	bl	d6860 <_ZN5Print5printEc>
   d6b62:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6b64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6b68:	220a      	movs	r2, #10
   d6b6a:	4630      	mov	r0, r6
   d6b6c:	f7ff febe 	bl	d68ec <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b70:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b72:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b74:	d1f0      	bne.n	d6b58 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b76:	4620      	mov	r0, r4
    }
    return n;
}
   d6b78:	b00d      	add	sp, #52	; 0x34
   d6b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b7c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6b7c:	b510      	push	{r4, lr}
   d6b7e:	4b05      	ldr	r3, [pc, #20]	; (d6b94 <_ZN9IPAddressC1Ev+0x18>)
   d6b80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b82:	2211      	movs	r2, #17
   d6b84:	f840 3b04 	str.w	r3, [r0], #4
   d6b88:	2100      	movs	r1, #0
   d6b8a:	f000 fd38 	bl	d75fe <memset>
{
    clear();
}
   d6b8e:	4620      	mov	r0, r4
   d6b90:	bd10      	pop	{r4, pc}
   d6b92:	bf00      	nop
   d6b94:	000d7da8 	.word	0x000d7da8

000d6b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b98:	4603      	mov	r3, r0
   d6b9a:	4a07      	ldr	r2, [pc, #28]	; (d6bb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b9c:	b510      	push	{r4, lr}
   d6b9e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6ba2:	f101 0210 	add.w	r2, r1, #16
   d6ba6:	f851 4b04 	ldr.w	r4, [r1], #4
   d6baa:	f843 4b04 	str.w	r4, [r3], #4
   d6bae:	4291      	cmp	r1, r2
   d6bb0:	d1f9      	bne.n	d6ba6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6bb2:	780a      	ldrb	r2, [r1, #0]
   d6bb4:	701a      	strb	r2, [r3, #0]
}
   d6bb6:	bd10      	pop	{r4, pc}
   d6bb8:	000d7da8 	.word	0x000d7da8

000d6bbc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6bbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6bbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6bc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6bc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6bca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6bce:	2304      	movs	r3, #4
   d6bd0:	6041      	str	r1, [r0, #4]
   d6bd2:	7503      	strb	r3, [r0, #20]
   d6bd4:	bd10      	pop	{r4, pc}

000d6bd6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6bd8:	780d      	ldrb	r5, [r1, #0]
   d6bda:	788b      	ldrb	r3, [r1, #2]
   d6bdc:	784a      	ldrb	r2, [r1, #1]
   d6bde:	78c9      	ldrb	r1, [r1, #3]
   d6be0:	9100      	str	r1, [sp, #0]
   d6be2:	4629      	mov	r1, r5
   d6be4:	f7ff ffea 	bl	d6bbc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6be8:	b003      	add	sp, #12
   d6bea:	bd30      	pop	{r4, r5, pc}

000d6bec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bec:	7441      	strb	r1, [r0, #17]
   d6bee:	4770      	bx	lr

000d6bf0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6bf0:	4770      	bx	lr

000d6bf2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6bf2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6bf4:	2100      	movs	r1, #0
   d6bf6:	7c00      	ldrb	r0, [r0, #16]
   d6bf8:	f7fe fbda 	bl	d53b0 <HAL_USB_USART_Receive_Data>
}
   d6bfc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c00:	bf28      	it	cs
   d6c02:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c06:	bd08      	pop	{r3, pc}

000d6c08 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6c08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6c0a:	2101      	movs	r1, #1
   d6c0c:	7c00      	ldrb	r0, [r0, #16]
   d6c0e:	f7fe fbcf 	bl	d53b0 <HAL_USB_USART_Receive_Data>
}
   d6c12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c16:	bf28      	it	cs
   d6c18:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c1c:	bd08      	pop	{r3, pc}

000d6c1e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c20:	7c00      	ldrb	r0, [r0, #16]
   d6c22:	f7fe fbbd 	bl	d53a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6c26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c2a:	bd08      	pop	{r3, pc}

000d6c2c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c2c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c2e:	7c00      	ldrb	r0, [r0, #16]
   d6c30:	f7fe fbae 	bl	d5390 <HAL_USB_USART_Available_Data>
}
   d6c34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c38:	bd08      	pop	{r3, pc}

000d6c3a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c3a:	7c00      	ldrb	r0, [r0, #16]
   d6c3c:	f7fe bbc8 	b.w	d53d0 <HAL_USB_USART_Flush_Data>

000d6c40 <_ZN9USBSerialD0Ev>:
   d6c40:	b510      	push	{r4, lr}
   d6c42:	2114      	movs	r1, #20
   d6c44:	4604      	mov	r4, r0
   d6c46:	f000 fb4c 	bl	d72e2 <_ZdlPvj>
   d6c4a:	4620      	mov	r0, r4
   d6c4c:	bd10      	pop	{r4, pc}

000d6c4e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c4e:	b538      	push	{r3, r4, r5, lr}
   d6c50:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c52:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c54:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c56:	f7fe fba3 	bl	d53a0 <HAL_USB_USART_Available_Data_For_Write>
   d6c5a:	2800      	cmp	r0, #0
   d6c5c:	dc01      	bgt.n	d6c62 <_ZN9USBSerial5writeEh+0x14>
   d6c5e:	7c60      	ldrb	r0, [r4, #17]
   d6c60:	b128      	cbz	r0, d6c6e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6c62:	4629      	mov	r1, r5
   d6c64:	7c20      	ldrb	r0, [r4, #16]
   d6c66:	f7fe fbab 	bl	d53c0 <HAL_USB_USART_Send_Data>
   d6c6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6c6e:	bd38      	pop	{r3, r4, r5, pc}

000d6c70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c70:	b510      	push	{r4, lr}
   d6c72:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6c74:	2300      	movs	r3, #0
   d6c76:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c7c:	60a3      	str	r3, [r4, #8]
   d6c7e:	4b05      	ldr	r3, [pc, #20]	; (d6c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c80:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6c82:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c84:	4608      	mov	r0, r1
{
  _serial = serial;
   d6c86:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6c88:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6c8a:	4611      	mov	r1, r2
   d6c8c:	f7fe fb78 	bl	d5380 <HAL_USB_USART_Init>
}
   d6c90:	4620      	mov	r0, r4
   d6c92:	bd10      	pop	{r4, pc}
   d6c94:	000d7dbc 	.word	0x000d7dbc

000d6c98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c9e:	2100      	movs	r1, #0
   d6ca0:	f000 fcad 	bl	d75fe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	bd10      	pop	{r4, pc}

000d6ca8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6ca8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6caa:	4d0e      	ldr	r5, [pc, #56]	; (d6ce4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6cac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6cae:	a801      	add	r0, sp, #4
   d6cb0:	f7ff fff2 	bl	d6c98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6cb4:	6829      	ldr	r1, [r5, #0]
   d6cb6:	f011 0401 	ands.w	r4, r1, #1
   d6cba:	d110      	bne.n	d6cde <_Z16_fetch_usbserialv+0x36>
   d6cbc:	4628      	mov	r0, r5
   d6cbe:	f7fd f9f2 	bl	d40a6 <__cxa_guard_acquire>
   d6cc2:	b160      	cbz	r0, d6cde <_Z16_fetch_usbserialv+0x36>
   d6cc4:	aa01      	add	r2, sp, #4
   d6cc6:	4621      	mov	r1, r4
   d6cc8:	4807      	ldr	r0, [pc, #28]	; (d6ce8 <_Z16_fetch_usbserialv+0x40>)
   d6cca:	f7ff ffd1 	bl	d6c70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6cce:	4628      	mov	r0, r5
   d6cd0:	f7fd f9ee 	bl	d40b0 <__cxa_guard_release>
   d6cd4:	4a05      	ldr	r2, [pc, #20]	; (d6cec <_Z16_fetch_usbserialv+0x44>)
   d6cd6:	4906      	ldr	r1, [pc, #24]	; (d6cf0 <_Z16_fetch_usbserialv+0x48>)
   d6cd8:	4803      	ldr	r0, [pc, #12]	; (d6ce8 <_Z16_fetch_usbserialv+0x40>)
   d6cda:	f000 fafd 	bl	d72d8 <__aeabi_atexit>
	return _usbserial;
}
   d6cde:	4802      	ldr	r0, [pc, #8]	; (d6ce8 <_Z16_fetch_usbserialv+0x40>)
   d6ce0:	b007      	add	sp, #28
   d6ce2:	bd30      	pop	{r4, r5, pc}
   d6ce4:	2003e400 	.word	0x2003e400
   d6ce8:	2003e404 	.word	0x2003e404
   d6cec:	2003e388 	.word	0x2003e388
   d6cf0:	000d6bf1 	.word	0x000d6bf1

000d6cf4 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d6cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6cf6:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d6cf8:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6cfa:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d6cfc:	460e      	mov	r6, r1
   d6cfe:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6d00:	f000 fa46 	bl	d7190 <pinAvailable>
   d6d04:	b160      	cbz	r0, d6d20 <tone+0x2c>
   d6d06:	2102      	movs	r1, #2
   d6d08:	4628      	mov	r0, r5
   d6d0a:	f7fe f997 	bl	d503c <HAL_Validate_Pin_Function>
   d6d0e:	2802      	cmp	r0, #2
   d6d10:	d106      	bne.n	d6d20 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d6d12:	463a      	mov	r2, r7
   d6d14:	4631      	mov	r1, r6
   d6d16:	4620      	mov	r0, r4
    }
}
   d6d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   d6d1c:	f7fe bb20 	b.w	d5360 <HAL_Tone_Start>
   d6d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d22 <noTone>:
    }
}

void noTone(uint8_t pin)
{
   d6d22:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6d24:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
   d6d26:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6d28:	4628      	mov	r0, r5
   d6d2a:	f000 fa31 	bl	d7190 <pinAvailable>
   d6d2e:	b150      	cbz	r0, d6d46 <noTone+0x24>
   d6d30:	2102      	movs	r1, #2
   d6d32:	4628      	mov	r0, r5
   d6d34:	f7fe f982 	bl	d503c <HAL_Validate_Pin_Function>
   d6d38:	2802      	cmp	r0, #2
   d6d3a:	d104      	bne.n	d6d46 <noTone+0x24>
        HAL_Tone_Stop(pin);
   d6d3c:	4620      	mov	r0, r4
    }
}
   d6d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
   d6d42:	f7fe bb15 	b.w	d5370 <HAL_Tone_Stop>
   d6d46:	bd38      	pop	{r3, r4, r5, pc}

000d6d48 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6d48:	4770      	bx	lr

000d6d4a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d4a:	7441      	strb	r1, [r0, #17]
   d6d4c:	4770      	bx	lr

000d6d4e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6d4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6d50:	7c00      	ldrb	r0, [r0, #16]
   d6d52:	f7fe fabd 	bl	d52d0 <HAL_USART_Available_Data_For_Write>
}
   d6d56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d5a:	bd08      	pop	{r3, pc}

000d6d5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6d5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6d5e:	7c00      	ldrb	r0, [r0, #16]
   d6d60:	f7fe fa8e 	bl	d5280 <HAL_USART_Available_Data>
}
   d6d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d68:	bd08      	pop	{r3, pc}

000d6d6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6d6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6d6c:	7c00      	ldrb	r0, [r0, #16]
   d6d6e:	f7fe fa97 	bl	d52a0 <HAL_USART_Peek_Data>
}
   d6d72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d76:	bf28      	it	cs
   d6d78:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d7c:	bd08      	pop	{r3, pc}

000d6d7e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6d7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6d80:	7c00      	ldrb	r0, [r0, #16]
   d6d82:	f7fe fa85 	bl	d5290 <HAL_USART_Read_Data>
}
   d6d86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d8a:	bf28      	it	cs
   d6d8c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d90:	bd08      	pop	{r3, pc}

000d6d92 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6d92:	7c00      	ldrb	r0, [r0, #16]
   d6d94:	f7fe ba8c 	b.w	d52b0 <HAL_USART_Flush_Data>

000d6d98 <_ZN11USARTSerialD0Ev>:
   d6d98:	b510      	push	{r4, lr}
   d6d9a:	2114      	movs	r1, #20
   d6d9c:	4604      	mov	r4, r0
   d6d9e:	f000 faa0 	bl	d72e2 <_ZdlPvj>
   d6da2:	4620      	mov	r0, r4
   d6da4:	bd10      	pop	{r4, pc}

000d6da6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6da6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6da8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6daa:	4604      	mov	r4, r0
   d6dac:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6dae:	b925      	cbnz	r5, d6dba <_ZN11USARTSerial5writeEh+0x14>
   d6db0:	7c00      	ldrb	r0, [r0, #16]
   d6db2:	f7fe fa8d 	bl	d52d0 <HAL_USART_Available_Data_For_Write>
   d6db6:	2800      	cmp	r0, #0
   d6db8:	dd05      	ble.n	d6dc6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dba:	4631      	mov	r1, r6
   d6dbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dc2:	f7fe ba55 	b.w	d5270 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6dc6:	4628      	mov	r0, r5
   d6dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6dcc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6dcc:	b510      	push	{r4, lr}
   d6dce:	4604      	mov	r4, r0
   d6dd0:	4608      	mov	r0, r1
   d6dd2:	4611      	mov	r1, r2
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	6062      	str	r2, [r4, #4]
   d6dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ddc:	60a2      	str	r2, [r4, #8]
   d6dde:	4a05      	ldr	r2, [pc, #20]	; (d6df4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6de0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6de2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6de4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6de6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6de8:	461a      	mov	r2, r3
   d6dea:	f7fe fa31 	bl	d5250 <HAL_USART_Init>
}
   d6dee:	4620      	mov	r0, r4
   d6df0:	bd10      	pop	{r4, pc}
   d6df2:	bf00      	nop
   d6df4:	000d7dec 	.word	0x000d7dec

000d6df8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6df8:	2300      	movs	r3, #0
   d6dfa:	7c00      	ldrb	r0, [r0, #16]
   d6dfc:	f7fe ba70 	b.w	d52e0 <HAL_USART_BeginConfig>

000d6e00 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6e00:	2200      	movs	r2, #0
   d6e02:	f7ff bff9 	b.w	d6df8 <_ZN11USARTSerial5beginEmm>

000d6e06 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d6e06:	7c00      	ldrb	r0, [r0, #16]
   d6e08:	f7fe ba2a 	b.w	d5260 <HAL_USART_End>

000d6e0c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6e0c:	7c00      	ldrb	r0, [r0, #16]
   d6e0e:	f7fe ba57 	b.w	d52c0 <HAL_USART_Is_Enabled>
	...

000d6e14 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6e14:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6e16:	4d0c      	ldr	r5, [pc, #48]	; (d6e48 <_Z22__fetch_global_Serial1v+0x34>)
   d6e18:	6829      	ldr	r1, [r5, #0]
   d6e1a:	f011 0401 	ands.w	r4, r1, #1
   d6e1e:	d111      	bne.n	d6e44 <_Z22__fetch_global_Serial1v+0x30>
   d6e20:	4628      	mov	r0, r5
   d6e22:	f7fd f940 	bl	d40a6 <__cxa_guard_acquire>
   d6e26:	b168      	cbz	r0, d6e44 <_Z22__fetch_global_Serial1v+0x30>
   d6e28:	4a08      	ldr	r2, [pc, #32]	; (d6e4c <_Z22__fetch_global_Serial1v+0x38>)
   d6e2a:	4b09      	ldr	r3, [pc, #36]	; (d6e50 <_Z22__fetch_global_Serial1v+0x3c>)
   d6e2c:	4809      	ldr	r0, [pc, #36]	; (d6e54 <_Z22__fetch_global_Serial1v+0x40>)
   d6e2e:	4621      	mov	r1, r4
   d6e30:	f7ff ffcc 	bl	d6dcc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6e34:	4628      	mov	r0, r5
   d6e36:	f7fd f93b 	bl	d40b0 <__cxa_guard_release>
   d6e3a:	4a07      	ldr	r2, [pc, #28]	; (d6e58 <_Z22__fetch_global_Serial1v+0x44>)
   d6e3c:	4907      	ldr	r1, [pc, #28]	; (d6e5c <_Z22__fetch_global_Serial1v+0x48>)
   d6e3e:	4805      	ldr	r0, [pc, #20]	; (d6e54 <_Z22__fetch_global_Serial1v+0x40>)
   d6e40:	f000 fa4a 	bl	d72d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6e44:	4803      	ldr	r0, [pc, #12]	; (d6e54 <_Z22__fetch_global_Serial1v+0x40>)
   d6e46:	bd38      	pop	{r3, r4, r5, pc}
   d6e48:	2003e4b0 	.word	0x2003e4b0
   d6e4c:	2003e4b4 	.word	0x2003e4b4
   d6e50:	2003e42c 	.word	0x2003e42c
   d6e54:	2003e418 	.word	0x2003e418
   d6e58:	2003e388 	.word	0x2003e388
   d6e5c:	000d6d49 	.word	0x000d6d49

000d6e60 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6e60:	4770      	bx	lr

000d6e62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e64:	4606      	mov	r6, r0
   d6e66:	4615      	mov	r5, r2
   d6e68:	460c      	mov	r4, r1
   d6e6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e6c:	42bc      	cmp	r4, r7
   d6e6e:	d006      	beq.n	d6e7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6e70:	6833      	ldr	r3, [r6, #0]
   d6e72:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e76:	689b      	ldr	r3, [r3, #8]
   d6e78:	4630      	mov	r0, r6
   d6e7a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e7c:	e7f6      	b.n	d6e6c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6e7e:	4628      	mov	r0, r5
   d6e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e82 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6e82:	2200      	movs	r2, #0
   d6e84:	7c00      	ldrb	r0, [r0, #16]
   d6e86:	f7fe ba33 	b.w	d52f0 <HAL_I2C_Write_Data>

000d6e8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6e8a:	2100      	movs	r1, #0
   d6e8c:	7c00      	ldrb	r0, [r0, #16]
   d6e8e:	f7fe ba37 	b.w	d5300 <HAL_I2C_Available_Data>

000d6e92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6e92:	2100      	movs	r1, #0
   d6e94:	7c00      	ldrb	r0, [r0, #16]
   d6e96:	f7fe ba3b 	b.w	d5310 <HAL_I2C_Read_Data>

000d6e9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6e9a:	2100      	movs	r1, #0
   d6e9c:	7c00      	ldrb	r0, [r0, #16]
   d6e9e:	f7fe ba3f 	b.w	d5320 <HAL_I2C_Peek_Data>

000d6ea2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6ea2:	2100      	movs	r1, #0
   d6ea4:	7c00      	ldrb	r0, [r0, #16]
   d6ea6:	f7fe ba43 	b.w	d5330 <HAL_I2C_Flush_Data>

000d6eaa <_ZN7TwoWireD0Ev>:
   d6eaa:	b510      	push	{r4, lr}
   d6eac:	2114      	movs	r1, #20
   d6eae:	4604      	mov	r4, r0
   d6eb0:	f000 fa17 	bl	d72e2 <_ZdlPvj>
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	bd10      	pop	{r4, pc}

000d6eb8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	4604      	mov	r4, r0
   d6ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ec0:	4608      	mov	r0, r1
   d6ec2:	60a3      	str	r3, [r4, #8]
   d6ec4:	2100      	movs	r1, #0
   d6ec6:	4b04      	ldr	r3, [pc, #16]	; (d6ed8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6ec8:	7420      	strb	r0, [r4, #16]
   d6eca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ecc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6ece:	f7fe fa3f 	bl	d5350 <HAL_I2C_Init>

}
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	bd10      	pop	{r4, pc}
   d6ed6:	bf00      	nop
   d6ed8:	000d7e1c 	.word	0x000d7e1c

000d6edc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6edc:	2100      	movs	r1, #0
   d6ede:	7c00      	ldrb	r0, [r0, #16]
   d6ee0:	f7fe ba2e 	b.w	d5340 <HAL_I2C_Is_Enabled>

000d6ee4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ee4:	2200      	movs	r2, #0
   d6ee6:	4611      	mov	r1, r2
   d6ee8:	6840      	ldr	r0, [r0, #4]
   d6eea:	f7fe bb15 	b.w	d5518 <network_listening>

000d6eee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6eee:	2200      	movs	r2, #0
   d6ef0:	4611      	mov	r1, r2
   d6ef2:	6840      	ldr	r0, [r0, #4]
   d6ef4:	f7fe bb20 	b.w	d5538 <network_get_listen_timeout>

000d6ef8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6ef8:	2200      	movs	r2, #0
   d6efa:	6840      	ldr	r0, [r0, #4]
   d6efc:	f7fe bb14 	b.w	d5528 <network_set_listen_timeout>

000d6f00 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f00:	2200      	movs	r2, #0
   d6f02:	f081 0101 	eor.w	r1, r1, #1
   d6f06:	6840      	ldr	r0, [r0, #4]
   d6f08:	f7fe bafe 	b.w	d5508 <network_listen>

000d6f0c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6f0c:	2300      	movs	r3, #0
   d6f0e:	461a      	mov	r2, r3
   d6f10:	2101      	movs	r1, #1
   d6f12:	6840      	ldr	r0, [r0, #4]
   d6f14:	f7fe baf0 	b.w	d54f8 <network_off>

000d6f18 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f18:	2300      	movs	r3, #0
   d6f1a:	461a      	mov	r2, r3
   d6f1c:	4619      	mov	r1, r3
   d6f1e:	6840      	ldr	r0, [r0, #4]
   d6f20:	f7fe bae2 	b.w	d54e8 <network_on>

000d6f24 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f24:	2200      	movs	r2, #0
   d6f26:	4611      	mov	r1, r2
   d6f28:	6840      	ldr	r0, [r0, #4]
   d6f2a:	f7fe bad5 	b.w	d54d8 <network_ready>

000d6f2e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f2e:	2200      	movs	r2, #0
   d6f30:	4611      	mov	r1, r2
   d6f32:	6840      	ldr	r0, [r0, #4]
   d6f34:	f7fe bac0 	b.w	d54b8 <network_connecting>

000d6f38 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f38:	2200      	movs	r2, #0
   d6f3a:	2102      	movs	r1, #2
   d6f3c:	6840      	ldr	r0, [r0, #4]
   d6f3e:	f7fe bac3 	b.w	d54c8 <network_disconnect>

000d6f42 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f42:	2300      	movs	r3, #0
   d6f44:	461a      	mov	r2, r3
   d6f46:	6840      	ldr	r0, [r0, #4]
   d6f48:	f7fe baae 	b.w	d54a8 <network_connect>

000d6f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f4c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f4e:	4605      	mov	r5, r0
   d6f50:	b188      	cbz	r0, d6f76 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f52:	6804      	ldr	r4, [r0, #0]
   d6f54:	b14c      	cbz	r4, d6f6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6f56:	68a3      	ldr	r3, [r4, #8]
   d6f58:	b11b      	cbz	r3, d6f62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f5a:	2203      	movs	r2, #3
   d6f5c:	4621      	mov	r1, r4
   d6f5e:	4620      	mov	r0, r4
   d6f60:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f62:	2110      	movs	r1, #16
   d6f64:	4620      	mov	r0, r4
   d6f66:	f000 f9bc 	bl	d72e2 <_ZdlPvj>
   d6f6a:	4628      	mov	r0, r5
   d6f6c:	2114      	movs	r1, #20
      }
   d6f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f72:	f000 b9b6 	b.w	d72e2 <_ZdlPvj>
   d6f76:	bd38      	pop	{r3, r4, r5, pc}

000d6f78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6f78:	b110      	cbz	r0, d6f80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6f7a:	6803      	ldr	r3, [r0, #0]
   d6f7c:	685b      	ldr	r3, [r3, #4]
   d6f7e:	4718      	bx	r3
   d6f80:	4770      	bx	lr

000d6f82 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6f82:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f84:	6803      	ldr	r3, [r0, #0]
   d6f86:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6f88:	b1bb      	cbz	r3, d6fba <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6f8a:	6858      	ldr	r0, [r3, #4]
   d6f8c:	f7fe f920 	bl	d51d0 <os_thread_is_current>
   d6f90:	b978      	cbnz	r0, d6fb2 <_ZN6ThreadD1Ev+0x30>
   d6f92:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6f94:	7c5a      	ldrb	r2, [r3, #17]
   d6f96:	b912      	cbnz	r2, d6f9e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6f98:	6858      	ldr	r0, [r3, #4]
   d6f9a:	f7fe f921 	bl	d51e0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6f9e:	6823      	ldr	r3, [r4, #0]
   d6fa0:	6858      	ldr	r0, [r3, #4]
   d6fa2:	f7fe f925 	bl	d51f0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fa6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fa8:	2300      	movs	r3, #0
   d6faa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6fac:	b128      	cbz	r0, d6fba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6fae:	f7ff ffcd 	bl	d6f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fb2:	6820      	ldr	r0, [r4, #0]
   d6fb4:	b108      	cbz	r0, d6fba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6fb6:	f7ff ffc9 	bl	d6f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6fba:	4620      	mov	r0, r4
   d6fbc:	bd10      	pop	{r4, pc}
	...

000d6fc0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6fc0:	b538      	push	{r3, r4, r5, lr}
   d6fc2:	4b0c      	ldr	r3, [pc, #48]	; (d6ff4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6fc4:	6003      	str	r3, [r0, #0]
   d6fc6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fc8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6fcc:	b108      	cbz	r0, d6fd2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6fce:	f7fd f868 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fd2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6fd6:	b135      	cbz	r5, d6fe6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fd8:	4628      	mov	r0, r5
   d6fda:	f7ff ffd2 	bl	d6f82 <_ZN6ThreadD1Ev>
   d6fde:	2104      	movs	r1, #4
   d6fe0:	4628      	mov	r0, r5
   d6fe2:	f000 f97e 	bl	d72e2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fe6:	68a0      	ldr	r0, [r4, #8]
   d6fe8:	b108      	cbz	r0, d6fee <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6fea:	f7ff ffc5 	bl	d6f78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6fee:	4620      	mov	r0, r4
   d6ff0:	bd38      	pop	{r3, r4, r5, pc}
   d6ff2:	bf00      	nop
   d6ff4:	000d7e44 	.word	0x000d7e44

000d6ff8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6ff8:	b538      	push	{r3, r4, r5, lr}
   d6ffa:	4c0e      	ldr	r4, [pc, #56]	; (d7034 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ffc:	4b0e      	ldr	r3, [pc, #56]	; (d7038 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6ffe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7000:	2500      	movs	r5, #0
   d7002:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7004:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7008:	6063      	str	r3, [r4, #4]
   d700a:	60a5      	str	r5, [r4, #8]
   d700c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7010:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7014:	f7fe f8fc 	bl	d5210 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7018:	4b08      	ldr	r3, [pc, #32]	; (d703c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d701a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d701e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7022:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7024:	4620      	mov	r0, r4
   d7026:	4a06      	ldr	r2, [pc, #24]	; (d7040 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7028:	4906      	ldr	r1, [pc, #24]	; (d7044 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d702a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d702e:	f000 b953 	b.w	d72d8 <__aeabi_atexit>
   d7032:	bf00      	nop
   d7034:	2003e538 	.word	0x2003e538
   d7038:	000d7e78 	.word	0x000d7e78
   d703c:	000d7e44 	.word	0x000d7e44
   d7040:	2003e388 	.word	0x2003e388
   d7044:	000d6fc1 	.word	0x000d6fc1

000d7048 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7048:	2300      	movs	r3, #0
   d704a:	461a      	mov	r2, r3
   d704c:	6840      	ldr	r0, [r0, #4]
   d704e:	f7fe ba2b 	b.w	d54a8 <network_connect>

000d7052 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7052:	2200      	movs	r2, #0
   d7054:	2102      	movs	r1, #2
   d7056:	6840      	ldr	r0, [r0, #4]
   d7058:	f7fe ba36 	b.w	d54c8 <network_disconnect>

000d705c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d705c:	2200      	movs	r2, #0
   d705e:	4611      	mov	r1, r2
   d7060:	6840      	ldr	r0, [r0, #4]
   d7062:	f7fe ba29 	b.w	d54b8 <network_connecting>

000d7066 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7066:	2200      	movs	r2, #0
   d7068:	4611      	mov	r1, r2
   d706a:	6840      	ldr	r0, [r0, #4]
   d706c:	f7fe ba34 	b.w	d54d8 <network_ready>

000d7070 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7070:	2300      	movs	r3, #0
   d7072:	461a      	mov	r2, r3
   d7074:	4619      	mov	r1, r3
   d7076:	6840      	ldr	r0, [r0, #4]
   d7078:	f7fe ba36 	b.w	d54e8 <network_on>

000d707c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d707c:	2300      	movs	r3, #0
   d707e:	461a      	mov	r2, r3
   d7080:	4619      	mov	r1, r3
   d7082:	6840      	ldr	r0, [r0, #4]
   d7084:	f7fe ba38 	b.w	d54f8 <network_off>

000d7088 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7088:	2200      	movs	r2, #0
   d708a:	f081 0101 	eor.w	r1, r1, #1
   d708e:	6840      	ldr	r0, [r0, #4]
   d7090:	f7fe ba3a 	b.w	d5508 <network_listen>

000d7094 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7094:	2200      	movs	r2, #0
   d7096:	6840      	ldr	r0, [r0, #4]
   d7098:	f7fe ba46 	b.w	d5528 <network_set_listen_timeout>

000d709c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d709c:	2200      	movs	r2, #0
   d709e:	4611      	mov	r1, r2
   d70a0:	6840      	ldr	r0, [r0, #4]
   d70a2:	f7fe ba49 	b.w	d5538 <network_get_listen_timeout>

000d70a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70a6:	2200      	movs	r2, #0
   d70a8:	4611      	mov	r1, r2
   d70aa:	6840      	ldr	r0, [r0, #4]
   d70ac:	f7fe ba34 	b.w	d5518 <network_listening>

000d70b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d70b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70b4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d70b6:	b095      	sub	sp, #84	; 0x54
   d70b8:	4616      	mov	r6, r2
   d70ba:	460d      	mov	r5, r1
   d70bc:	4607      	mov	r7, r0
    IPAddress addr;
   d70be:	f7ff fd5d 	bl	d6b7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d70c2:	4621      	mov	r1, r4
   d70c4:	2220      	movs	r2, #32
   d70c6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70c8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d70ca:	f000 fa98 	bl	d75fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d70ce:	2340      	movs	r3, #64	; 0x40
   d70d0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d70d2:	4621      	mov	r1, r4
   d70d4:	466b      	mov	r3, sp
   d70d6:	aa0c      	add	r2, sp, #48	; 0x30
   d70d8:	4630      	mov	r0, r6
   d70da:	f7fd ff9f 	bl	d501c <netdb_getaddrinfo>
    if (!r) {
   d70de:	4604      	mov	r4, r0
   d70e0:	2800      	cmp	r0, #0
   d70e2:	d144      	bne.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d70e4:	4602      	mov	r2, r0
   d70e6:	2101      	movs	r1, #1
   d70e8:	6868      	ldr	r0, [r5, #4]
   d70ea:	f7fe f9f5 	bl	d54d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70ee:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d70f0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70f2:	4622      	mov	r2, r4
   d70f4:	6868      	ldr	r0, [r5, #4]
   d70f6:	f7fe f9ef 	bl	d54d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d70fa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70fc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d70fe:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7100:	2e00      	cmp	r6, #0
   d7102:	d034      	beq.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7104:	2900      	cmp	r1, #0
   d7106:	d132      	bne.n	d716e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7108:	6873      	ldr	r3, [r6, #4]
   d710a:	2b02      	cmp	r3, #2
   d710c:	d002      	beq.n	d7114 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d710e:	2b0a      	cmp	r3, #10
   d7110:	d009      	beq.n	d7126 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7112:	e02a      	b.n	d716a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7114:	f1b8 0f00 	cmp.w	r8, #0
   d7118:	d027      	beq.n	d716a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d711a:	6971      	ldr	r1, [r6, #20]
   d711c:	4638      	mov	r0, r7
   d711e:	3104      	adds	r1, #4
   d7120:	f7ff fd59 	bl	d6bd6 <_ZN9IPAddressaSEPKh>
   d7124:	e020      	b.n	d7168 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7126:	f1b9 0f00 	cmp.w	r9, #0
   d712a:	d01e      	beq.n	d716a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d712c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d712e:	2211      	movs	r2, #17
   d7130:	a801      	add	r0, sp, #4
   d7132:	f000 fa64 	bl	d75fe <memset>
                    a.v = 6;
   d7136:	2306      	movs	r3, #6
   d7138:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d713c:	ad01      	add	r5, sp, #4
   d713e:	f104 0308 	add.w	r3, r4, #8
   d7142:	3418      	adds	r4, #24
   d7144:	6818      	ldr	r0, [r3, #0]
   d7146:	6859      	ldr	r1, [r3, #4]
   d7148:	462a      	mov	r2, r5
   d714a:	c203      	stmia	r2!, {r0, r1}
   d714c:	3308      	adds	r3, #8
   d714e:	42a3      	cmp	r3, r4
   d7150:	4615      	mov	r5, r2
   d7152:	d1f7      	bne.n	d7144 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7154:	a901      	add	r1, sp, #4
   d7156:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7158:	ad07      	add	r5, sp, #28
   d715a:	f7ff fd1d 	bl	d6b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d715e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7160:	1d3c      	adds	r4, r7, #4
   d7162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7164:	682b      	ldr	r3, [r5, #0]
   d7166:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7168:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d716a:	69f6      	ldr	r6, [r6, #28]
   d716c:	e7c8      	b.n	d7100 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d716e:	9800      	ldr	r0, [sp, #0]
   d7170:	f7fd ff4c 	bl	d500c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7174:	4638      	mov	r0, r7
   d7176:	b015      	add	sp, #84	; 0x54
   d7178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d717c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d717c:	4b02      	ldr	r3, [pc, #8]	; (d7188 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d717e:	4a03      	ldr	r2, [pc, #12]	; (d718c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7180:	601a      	str	r2, [r3, #0]
   d7182:	2200      	movs	r2, #0
   d7184:	605a      	str	r2, [r3, #4]
   d7186:	4770      	bx	lr
   d7188:	2003e70c 	.word	0x2003e70c
   d718c:	000d7e78 	.word	0x000d7e78

000d7190 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7190:	b510      	push	{r4, lr}
   d7192:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7194:	480f      	ldr	r0, [pc, #60]	; (d71d4 <pinAvailable+0x44>)
   d7196:	f7fe fa59 	bl	d564c <_ZN8SPIClass9isEnabledEv>
   d719a:	b128      	cbz	r0, d71a8 <pinAvailable+0x18>
   d719c:	f1a4 030b 	sub.w	r3, r4, #11
   d71a0:	2b02      	cmp	r3, #2
   d71a2:	d801      	bhi.n	d71a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d71a4:	2000      	movs	r0, #0
   d71a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d71a8:	f000 f876 	bl	d7298 <_Z19__fetch_global_Wirev>
   d71ac:	f7ff fe96 	bl	d6edc <_ZN7TwoWire9isEnabledEv>
   d71b0:	b108      	cbz	r0, d71b6 <pinAvailable+0x26>
   d71b2:	2c01      	cmp	r4, #1
   d71b4:	d9f6      	bls.n	d71a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d71b6:	f7ff fe2d 	bl	d6e14 <_Z22__fetch_global_Serial1v>
   d71ba:	f7ff fe27 	bl	d6e0c <_ZN11USARTSerial9isEnabledEv>
   d71be:	b118      	cbz	r0, d71c8 <pinAvailable+0x38>
   d71c0:	f1a4 0309 	sub.w	r3, r4, #9
   d71c4:	2b01      	cmp	r3, #1
   d71c6:	d9ed      	bls.n	d71a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d71c8:	2c1e      	cmp	r4, #30
   d71ca:	bf8c      	ite	hi
   d71cc:	2000      	movhi	r0, #0
   d71ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d71d0:	bd10      	pop	{r4, pc}
   d71d2:	bf00      	nop
   d71d4:	2003e714 	.word	0x2003e714

000d71d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71d8:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d71da:	b538      	push	{r3, r4, r5, lr}
   d71dc:	4604      	mov	r4, r0
   d71de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71e0:	d80a      	bhi.n	d71f8 <pinMode+0x20>
   d71e2:	29ff      	cmp	r1, #255	; 0xff
   d71e4:	d008      	beq.n	d71f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d71e6:	f7ff ffd3 	bl	d7190 <pinAvailable>
   d71ea:	b128      	cbz	r0, d71f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d71ec:	4629      	mov	r1, r5
   d71ee:	4620      	mov	r0, r4
}
   d71f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d71f4:	f7fd bf2a 	b.w	d504c <HAL_Pin_Mode>
   d71f8:	bd38      	pop	{r3, r4, r5, pc}

000d71fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d71fa:	b538      	push	{r3, r4, r5, lr}
   d71fc:	4604      	mov	r4, r0
   d71fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7200:	f7fd ff2c 	bl	d505c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7204:	28ff      	cmp	r0, #255	; 0xff
   d7206:	d010      	beq.n	d722a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7208:	2806      	cmp	r0, #6
   d720a:	d804      	bhi.n	d7216 <digitalWrite+0x1c>
   d720c:	234d      	movs	r3, #77	; 0x4d
   d720e:	fa23 f000 	lsr.w	r0, r3, r0
   d7212:	07c3      	lsls	r3, r0, #31
   d7214:	d409      	bmi.n	d722a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7216:	4620      	mov	r0, r4
   d7218:	f7ff ffba 	bl	d7190 <pinAvailable>
   d721c:	b128      	cbz	r0, d722a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d721e:	4629      	mov	r1, r5
   d7220:	4620      	mov	r0, r4
}
   d7222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7226:	f7fd bf21 	b.w	d506c <HAL_GPIO_Write>
   d722a:	bd38      	pop	{r3, r4, r5, pc}

000d722c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d722c:	b510      	push	{r4, lr}
   d722e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7230:	f7fd ff14 	bl	d505c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7234:	3804      	subs	r0, #4
   d7236:	b2c0      	uxtb	r0, r0
   d7238:	2801      	cmp	r0, #1
   d723a:	d908      	bls.n	d724e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d723c:	4620      	mov	r0, r4
   d723e:	f7ff ffa7 	bl	d7190 <pinAvailable>
   d7242:	b120      	cbz	r0, d724e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7244:	4620      	mov	r0, r4
}
   d7246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d724a:	f7fd bf17 	b.w	d507c <HAL_GPIO_Read>
}
   d724e:	2000      	movs	r0, #0
   d7250:	bd10      	pop	{r4, pc}
	...

000d7254 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7254:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7256:	4c0c      	ldr	r4, [pc, #48]	; (d7288 <_GLOBAL__sub_I_SPI+0x34>)
   d7258:	4e0c      	ldr	r6, [pc, #48]	; (d728c <_GLOBAL__sub_I_SPI+0x38>)
   d725a:	4d0d      	ldr	r5, [pc, #52]	; (d7290 <_GLOBAL__sub_I_SPI+0x3c>)
   d725c:	2100      	movs	r1, #0
   d725e:	4620      	mov	r0, r4
   d7260:	f7fe f9e0 	bl	d5624 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7264:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7266:	4c0b      	ldr	r4, [pc, #44]	; (d7294 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7268:	4632      	mov	r2, r6
   d726a:	4629      	mov	r1, r5
   d726c:	f000 f834 	bl	d72d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7270:	2101      	movs	r1, #1
   d7272:	4620      	mov	r0, r4
   d7274:	f7fe f9d6 	bl	d5624 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7278:	4632      	mov	r2, r6
   d727a:	4629      	mov	r1, r5
   d727c:	4620      	mov	r0, r4
   d727e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7282:	f000 b829 	b.w	d72d8 <__aeabi_atexit>
   d7286:	bf00      	nop
   d7288:	2003e714 	.word	0x2003e714
   d728c:	2003e388 	.word	0x2003e388
   d7290:	000d5615 	.word	0x000d5615
   d7294:	2003e724 	.word	0x2003e724

000d7298 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7298:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d729a:	4d0b      	ldr	r5, [pc, #44]	; (d72c8 <_Z19__fetch_global_Wirev+0x30>)
   d729c:	6829      	ldr	r1, [r5, #0]
   d729e:	f011 0401 	ands.w	r4, r1, #1
   d72a2:	d10f      	bne.n	d72c4 <_Z19__fetch_global_Wirev+0x2c>
   d72a4:	4628      	mov	r0, r5
   d72a6:	f7fc fefe 	bl	d40a6 <__cxa_guard_acquire>
   d72aa:	b158      	cbz	r0, d72c4 <_Z19__fetch_global_Wirev+0x2c>
   d72ac:	4621      	mov	r1, r4
   d72ae:	4807      	ldr	r0, [pc, #28]	; (d72cc <_Z19__fetch_global_Wirev+0x34>)
   d72b0:	f7ff fe02 	bl	d6eb8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d72b4:	4628      	mov	r0, r5
   d72b6:	f7fc fefb 	bl	d40b0 <__cxa_guard_release>
   d72ba:	4a05      	ldr	r2, [pc, #20]	; (d72d0 <_Z19__fetch_global_Wirev+0x38>)
   d72bc:	4905      	ldr	r1, [pc, #20]	; (d72d4 <_Z19__fetch_global_Wirev+0x3c>)
   d72be:	4803      	ldr	r0, [pc, #12]	; (d72cc <_Z19__fetch_global_Wirev+0x34>)
   d72c0:	f000 f80a 	bl	d72d8 <__aeabi_atexit>
	return wire;
}
   d72c4:	4801      	ldr	r0, [pc, #4]	; (d72cc <_Z19__fetch_global_Wirev+0x34>)
   d72c6:	bd38      	pop	{r3, r4, r5, pc}
   d72c8:	2003e738 	.word	0x2003e738
   d72cc:	2003e73c 	.word	0x2003e73c
   d72d0:	2003e388 	.word	0x2003e388
   d72d4:	000d6e61 	.word	0x000d6e61

000d72d8 <__aeabi_atexit>:
   d72d8:	460b      	mov	r3, r1
   d72da:	4601      	mov	r1, r0
   d72dc:	4618      	mov	r0, r3
   d72de:	f000 b94b 	b.w	d7578 <__cxa_atexit>

000d72e2 <_ZdlPvj>:
   d72e2:	f7fc bedc 	b.w	d409e <_ZdlPv>
	...

000d72e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d72e8:	4b18      	ldr	r3, [pc, #96]	; (d734c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d72ea:	681a      	ldr	r2, [r3, #0]
   d72ec:	07d1      	lsls	r1, r2, #31
   d72ee:	bf5c      	itt	pl
   d72f0:	2201      	movpl	r2, #1
   d72f2:	601a      	strpl	r2, [r3, #0]
   d72f4:	4b16      	ldr	r3, [pc, #88]	; (d7350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d72f6:	681a      	ldr	r2, [r3, #0]
   d72f8:	07d2      	lsls	r2, r2, #31
   d72fa:	bf5c      	itt	pl
   d72fc:	2201      	movpl	r2, #1
   d72fe:	601a      	strpl	r2, [r3, #0]
   d7300:	4b14      	ldr	r3, [pc, #80]	; (d7354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7302:	681a      	ldr	r2, [r3, #0]
   d7304:	07d0      	lsls	r0, r2, #31
   d7306:	bf5c      	itt	pl
   d7308:	2201      	movpl	r2, #1
   d730a:	601a      	strpl	r2, [r3, #0]
   d730c:	4b12      	ldr	r3, [pc, #72]	; (d7358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d730e:	681a      	ldr	r2, [r3, #0]
   d7310:	07d1      	lsls	r1, r2, #31
   d7312:	bf5c      	itt	pl
   d7314:	2201      	movpl	r2, #1
   d7316:	601a      	strpl	r2, [r3, #0]
   d7318:	4b10      	ldr	r3, [pc, #64]	; (d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d731a:	681a      	ldr	r2, [r3, #0]
   d731c:	07d2      	lsls	r2, r2, #31
   d731e:	bf5c      	itt	pl
   d7320:	2201      	movpl	r2, #1
   d7322:	601a      	strpl	r2, [r3, #0]
   d7324:	4b0e      	ldr	r3, [pc, #56]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7326:	681a      	ldr	r2, [r3, #0]
   d7328:	07d0      	lsls	r0, r2, #31
   d732a:	bf5c      	itt	pl
   d732c:	2201      	movpl	r2, #1
   d732e:	601a      	strpl	r2, [r3, #0]
   d7330:	4b0c      	ldr	r3, [pc, #48]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7332:	681a      	ldr	r2, [r3, #0]
   d7334:	07d1      	lsls	r1, r2, #31
   d7336:	bf5c      	itt	pl
   d7338:	2201      	movpl	r2, #1
   d733a:	601a      	strpl	r2, [r3, #0]
   d733c:	4b0a      	ldr	r3, [pc, #40]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d733e:	681a      	ldr	r2, [r3, #0]
   d7340:	07d2      	lsls	r2, r2, #31
   d7342:	bf5c      	itt	pl
   d7344:	2201      	movpl	r2, #1
   d7346:	601a      	strpl	r2, [r3, #0]
   d7348:	4770      	bx	lr
   d734a:	bf00      	nop
   d734c:	2003e76c 	.word	0x2003e76c
   d7350:	2003e768 	.word	0x2003e768
   d7354:	2003e764 	.word	0x2003e764
   d7358:	2003e760 	.word	0x2003e760
   d735c:	2003e75c 	.word	0x2003e75c
   d7360:	2003e758 	.word	0x2003e758
   d7364:	2003e754 	.word	0x2003e754
   d7368:	2003e750 	.word	0x2003e750

000d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d736c:	4b24      	ldr	r3, [pc, #144]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d736e:	681a      	ldr	r2, [r3, #0]
   d7370:	07d0      	lsls	r0, r2, #31
   d7372:	bf5c      	itt	pl
   d7374:	2201      	movpl	r2, #1
   d7376:	601a      	strpl	r2, [r3, #0]
   d7378:	4b22      	ldr	r3, [pc, #136]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d737a:	681a      	ldr	r2, [r3, #0]
   d737c:	07d1      	lsls	r1, r2, #31
   d737e:	bf5c      	itt	pl
   d7380:	2201      	movpl	r2, #1
   d7382:	601a      	strpl	r2, [r3, #0]
   d7384:	4b20      	ldr	r3, [pc, #128]	; (d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7386:	681a      	ldr	r2, [r3, #0]
   d7388:	07d2      	lsls	r2, r2, #31
   d738a:	bf5c      	itt	pl
   d738c:	2201      	movpl	r2, #1
   d738e:	601a      	strpl	r2, [r3, #0]
   d7390:	4b1e      	ldr	r3, [pc, #120]	; (d740c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7392:	681a      	ldr	r2, [r3, #0]
   d7394:	07d0      	lsls	r0, r2, #31
   d7396:	bf5c      	itt	pl
   d7398:	2201      	movpl	r2, #1
   d739a:	601a      	strpl	r2, [r3, #0]
   d739c:	4b1c      	ldr	r3, [pc, #112]	; (d7410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d1      	lsls	r1, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b1a      	ldr	r3, [pc, #104]	; (d7414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d2      	lsls	r2, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b18      	ldr	r3, [pc, #96]	; (d7418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d0      	lsls	r0, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b16      	ldr	r3, [pc, #88]	; (d741c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d1      	lsls	r1, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b14      	ldr	r3, [pc, #80]	; (d7420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d2      	lsls	r2, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b12      	ldr	r3, [pc, #72]	; (d7424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d0      	lsls	r0, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4b10      	ldr	r3, [pc, #64]	; (d7428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d1      	lsls	r1, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4b0e      	ldr	r3, [pc, #56]	; (d742c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d73f2:	681a      	ldr	r2, [r3, #0]
   d73f4:	07d2      	lsls	r2, r2, #31
   d73f6:	bf5c      	itt	pl
   d73f8:	2201      	movpl	r2, #1
   d73fa:	601a      	strpl	r2, [r3, #0]
   d73fc:	4770      	bx	lr
   d73fe:	bf00      	nop
   d7400:	2003e79c 	.word	0x2003e79c
   d7404:	2003e798 	.word	0x2003e798
   d7408:	2003e794 	.word	0x2003e794
   d740c:	2003e790 	.word	0x2003e790
   d7410:	2003e78c 	.word	0x2003e78c
   d7414:	2003e788 	.word	0x2003e788
   d7418:	2003e784 	.word	0x2003e784
   d741c:	2003e780 	.word	0x2003e780
   d7420:	2003e77c 	.word	0x2003e77c
   d7424:	2003e778 	.word	0x2003e778
   d7428:	2003e774 	.word	0x2003e774
   d742c:	2003e770 	.word	0x2003e770

000d7430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7430:	4b24      	ldr	r3, [pc, #144]	; (d74c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7432:	681a      	ldr	r2, [r3, #0]
   d7434:	07d0      	lsls	r0, r2, #31
   d7436:	bf5c      	itt	pl
   d7438:	2201      	movpl	r2, #1
   d743a:	601a      	strpl	r2, [r3, #0]
   d743c:	4b22      	ldr	r3, [pc, #136]	; (d74c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d743e:	681a      	ldr	r2, [r3, #0]
   d7440:	07d1      	lsls	r1, r2, #31
   d7442:	bf5c      	itt	pl
   d7444:	2201      	movpl	r2, #1
   d7446:	601a      	strpl	r2, [r3, #0]
   d7448:	4b20      	ldr	r3, [pc, #128]	; (d74cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d744a:	681a      	ldr	r2, [r3, #0]
   d744c:	07d2      	lsls	r2, r2, #31
   d744e:	bf5c      	itt	pl
   d7450:	2201      	movpl	r2, #1
   d7452:	601a      	strpl	r2, [r3, #0]
   d7454:	4b1e      	ldr	r3, [pc, #120]	; (d74d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7456:	681a      	ldr	r2, [r3, #0]
   d7458:	07d0      	lsls	r0, r2, #31
   d745a:	bf5c      	itt	pl
   d745c:	2201      	movpl	r2, #1
   d745e:	601a      	strpl	r2, [r3, #0]
   d7460:	4b1c      	ldr	r3, [pc, #112]	; (d74d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7462:	681a      	ldr	r2, [r3, #0]
   d7464:	07d1      	lsls	r1, r2, #31
   d7466:	bf5c      	itt	pl
   d7468:	2201      	movpl	r2, #1
   d746a:	601a      	strpl	r2, [r3, #0]
   d746c:	4b1a      	ldr	r3, [pc, #104]	; (d74d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d746e:	681a      	ldr	r2, [r3, #0]
   d7470:	07d2      	lsls	r2, r2, #31
   d7472:	bf5c      	itt	pl
   d7474:	2201      	movpl	r2, #1
   d7476:	601a      	strpl	r2, [r3, #0]
   d7478:	4b18      	ldr	r3, [pc, #96]	; (d74dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d747a:	681a      	ldr	r2, [r3, #0]
   d747c:	07d0      	lsls	r0, r2, #31
   d747e:	bf5c      	itt	pl
   d7480:	2201      	movpl	r2, #1
   d7482:	601a      	strpl	r2, [r3, #0]
   d7484:	4b16      	ldr	r3, [pc, #88]	; (d74e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7486:	681a      	ldr	r2, [r3, #0]
   d7488:	07d1      	lsls	r1, r2, #31
   d748a:	bf5c      	itt	pl
   d748c:	2201      	movpl	r2, #1
   d748e:	601a      	strpl	r2, [r3, #0]
   d7490:	4b14      	ldr	r3, [pc, #80]	; (d74e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7492:	681a      	ldr	r2, [r3, #0]
   d7494:	07d2      	lsls	r2, r2, #31
   d7496:	bf5c      	itt	pl
   d7498:	2201      	movpl	r2, #1
   d749a:	601a      	strpl	r2, [r3, #0]
   d749c:	4b12      	ldr	r3, [pc, #72]	; (d74e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d749e:	681a      	ldr	r2, [r3, #0]
   d74a0:	07d0      	lsls	r0, r2, #31
   d74a2:	bf5c      	itt	pl
   d74a4:	2201      	movpl	r2, #1
   d74a6:	601a      	strpl	r2, [r3, #0]
   d74a8:	4b10      	ldr	r3, [pc, #64]	; (d74ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d74aa:	681a      	ldr	r2, [r3, #0]
   d74ac:	07d1      	lsls	r1, r2, #31
   d74ae:	bf5c      	itt	pl
   d74b0:	2201      	movpl	r2, #1
   d74b2:	601a      	strpl	r2, [r3, #0]
   d74b4:	4b0e      	ldr	r3, [pc, #56]	; (d74f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d74b6:	681a      	ldr	r2, [r3, #0]
   d74b8:	07d2      	lsls	r2, r2, #31
   d74ba:	bf5c      	itt	pl
   d74bc:	2201      	movpl	r2, #1
   d74be:	601a      	strpl	r2, [r3, #0]
   d74c0:	4770      	bx	lr
   d74c2:	bf00      	nop
   d74c4:	2003e7cc 	.word	0x2003e7cc
   d74c8:	2003e7c8 	.word	0x2003e7c8
   d74cc:	2003e7c4 	.word	0x2003e7c4
   d74d0:	2003e7c0 	.word	0x2003e7c0
   d74d4:	2003e7bc 	.word	0x2003e7bc
   d74d8:	2003e7b8 	.word	0x2003e7b8
   d74dc:	2003e7b4 	.word	0x2003e7b4
   d74e0:	2003e7b0 	.word	0x2003e7b0
   d74e4:	2003e7ac 	.word	0x2003e7ac
   d74e8:	2003e7a8 	.word	0x2003e7a8
   d74ec:	2003e7a4 	.word	0x2003e7a4
   d74f0:	2003e7a0 	.word	0x2003e7a0

000d74f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d74f4:	4b18      	ldr	r3, [pc, #96]	; (d7558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d74f6:	681a      	ldr	r2, [r3, #0]
   d74f8:	07d1      	lsls	r1, r2, #31
   d74fa:	bf5c      	itt	pl
   d74fc:	2201      	movpl	r2, #1
   d74fe:	601a      	strpl	r2, [r3, #0]
   d7500:	4b16      	ldr	r3, [pc, #88]	; (d755c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7502:	681a      	ldr	r2, [r3, #0]
   d7504:	07d2      	lsls	r2, r2, #31
   d7506:	bf5c      	itt	pl
   d7508:	2201      	movpl	r2, #1
   d750a:	601a      	strpl	r2, [r3, #0]
   d750c:	4b14      	ldr	r3, [pc, #80]	; (d7560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d750e:	681a      	ldr	r2, [r3, #0]
   d7510:	07d0      	lsls	r0, r2, #31
   d7512:	bf5c      	itt	pl
   d7514:	2201      	movpl	r2, #1
   d7516:	601a      	strpl	r2, [r3, #0]
   d7518:	4b12      	ldr	r3, [pc, #72]	; (d7564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d751a:	681a      	ldr	r2, [r3, #0]
   d751c:	07d1      	lsls	r1, r2, #31
   d751e:	bf5c      	itt	pl
   d7520:	2201      	movpl	r2, #1
   d7522:	601a      	strpl	r2, [r3, #0]
   d7524:	4b10      	ldr	r3, [pc, #64]	; (d7568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7526:	681a      	ldr	r2, [r3, #0]
   d7528:	07d2      	lsls	r2, r2, #31
   d752a:	bf5c      	itt	pl
   d752c:	2201      	movpl	r2, #1
   d752e:	601a      	strpl	r2, [r3, #0]
   d7530:	4b0e      	ldr	r3, [pc, #56]	; (d756c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7532:	681a      	ldr	r2, [r3, #0]
   d7534:	07d0      	lsls	r0, r2, #31
   d7536:	bf5c      	itt	pl
   d7538:	2201      	movpl	r2, #1
   d753a:	601a      	strpl	r2, [r3, #0]
   d753c:	4b0c      	ldr	r3, [pc, #48]	; (d7570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d753e:	681a      	ldr	r2, [r3, #0]
   d7540:	07d1      	lsls	r1, r2, #31
   d7542:	bf5c      	itt	pl
   d7544:	2201      	movpl	r2, #1
   d7546:	601a      	strpl	r2, [r3, #0]
   d7548:	4b0a      	ldr	r3, [pc, #40]	; (d7574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d754a:	681a      	ldr	r2, [r3, #0]
   d754c:	07d2      	lsls	r2, r2, #31
   d754e:	bf5c      	itt	pl
   d7550:	2201      	movpl	r2, #1
   d7552:	601a      	strpl	r2, [r3, #0]
   d7554:	4770      	bx	lr
   d7556:	bf00      	nop
   d7558:	2003e7ec 	.word	0x2003e7ec
   d755c:	2003e7e8 	.word	0x2003e7e8
   d7560:	2003e7e4 	.word	0x2003e7e4
   d7564:	2003e7e0 	.word	0x2003e7e0
   d7568:	2003e7dc 	.word	0x2003e7dc
   d756c:	2003e7d8 	.word	0x2003e7d8
   d7570:	2003e7d4 	.word	0x2003e7d4
   d7574:	2003e7d0 	.word	0x2003e7d0

000d7578 <__cxa_atexit>:
   d7578:	b510      	push	{r4, lr}
   d757a:	4c05      	ldr	r4, [pc, #20]	; (d7590 <__cxa_atexit+0x18>)
   d757c:	4613      	mov	r3, r2
   d757e:	b12c      	cbz	r4, d758c <__cxa_atexit+0x14>
   d7580:	460a      	mov	r2, r1
   d7582:	4601      	mov	r1, r0
   d7584:	2002      	movs	r0, #2
   d7586:	f3af 8000 	nop.w
   d758a:	bd10      	pop	{r4, pc}
   d758c:	4620      	mov	r0, r4
   d758e:	bd10      	pop	{r4, pc}
   d7590:	00000000 	.word	0x00000000

000d7594 <memcmp>:
   d7594:	b510      	push	{r4, lr}
   d7596:	3901      	subs	r1, #1
   d7598:	4402      	add	r2, r0
   d759a:	4290      	cmp	r0, r2
   d759c:	d007      	beq.n	d75ae <memcmp+0x1a>
   d759e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d75a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d75a6:	42a3      	cmp	r3, r4
   d75a8:	d0f7      	beq.n	d759a <memcmp+0x6>
   d75aa:	1b18      	subs	r0, r3, r4
   d75ac:	bd10      	pop	{r4, pc}
   d75ae:	2000      	movs	r0, #0
   d75b0:	bd10      	pop	{r4, pc}

000d75b2 <memcpy>:
   d75b2:	b510      	push	{r4, lr}
   d75b4:	1e43      	subs	r3, r0, #1
   d75b6:	440a      	add	r2, r1
   d75b8:	4291      	cmp	r1, r2
   d75ba:	d004      	beq.n	d75c6 <memcpy+0x14>
   d75bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d75c0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d75c4:	e7f8      	b.n	d75b8 <memcpy+0x6>
   d75c6:	bd10      	pop	{r4, pc}

000d75c8 <memmove>:
   d75c8:	4288      	cmp	r0, r1
   d75ca:	b510      	push	{r4, lr}
   d75cc:	eb01 0302 	add.w	r3, r1, r2
   d75d0:	d801      	bhi.n	d75d6 <memmove+0xe>
   d75d2:	1e42      	subs	r2, r0, #1
   d75d4:	e00b      	b.n	d75ee <memmove+0x26>
   d75d6:	4298      	cmp	r0, r3
   d75d8:	d2fb      	bcs.n	d75d2 <memmove+0xa>
   d75da:	1881      	adds	r1, r0, r2
   d75dc:	1ad2      	subs	r2, r2, r3
   d75de:	42d3      	cmn	r3, r2
   d75e0:	d004      	beq.n	d75ec <memmove+0x24>
   d75e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d75e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d75ea:	e7f8      	b.n	d75de <memmove+0x16>
   d75ec:	bd10      	pop	{r4, pc}
   d75ee:	4299      	cmp	r1, r3
   d75f0:	d004      	beq.n	d75fc <memmove+0x34>
   d75f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d75f6:	f802 4f01 	strb.w	r4, [r2, #1]!
   d75fa:	e7f8      	b.n	d75ee <memmove+0x26>
   d75fc:	bd10      	pop	{r4, pc}

000d75fe <memset>:
   d75fe:	4402      	add	r2, r0
   d7600:	4603      	mov	r3, r0
   d7602:	4293      	cmp	r3, r2
   d7604:	d002      	beq.n	d760c <memset+0xe>
   d7606:	f803 1b01 	strb.w	r1, [r3], #1
   d760a:	e7fa      	b.n	d7602 <memset+0x4>
   d760c:	4770      	bx	lr
	...

000d7610 <srand>:
   d7610:	b538      	push	{r3, r4, r5, lr}
   d7612:	4b12      	ldr	r3, [pc, #72]	; (d765c <srand+0x4c>)
   d7614:	681c      	ldr	r4, [r3, #0]
   d7616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7618:	4605      	mov	r5, r0
   d761a:	b9d3      	cbnz	r3, d7652 <srand+0x42>
   d761c:	2018      	movs	r0, #24
   d761e:	f7fd ff9b 	bl	d5558 <malloc>
   d7622:	f243 330e 	movw	r3, #13070	; 0x330e
   d7626:	63a0      	str	r0, [r4, #56]	; 0x38
   d7628:	8003      	strh	r3, [r0, #0]
   d762a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d762e:	8043      	strh	r3, [r0, #2]
   d7630:	f241 2334 	movw	r3, #4660	; 0x1234
   d7634:	8083      	strh	r3, [r0, #4]
   d7636:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d763a:	80c3      	strh	r3, [r0, #6]
   d763c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7640:	8103      	strh	r3, [r0, #8]
   d7642:	2305      	movs	r3, #5
   d7644:	8143      	strh	r3, [r0, #10]
   d7646:	230b      	movs	r3, #11
   d7648:	8183      	strh	r3, [r0, #12]
   d764a:	2201      	movs	r2, #1
   d764c:	2300      	movs	r3, #0
   d764e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7654:	2200      	movs	r2, #0
   d7656:	611d      	str	r5, [r3, #16]
   d7658:	615a      	str	r2, [r3, #20]
   d765a:	bd38      	pop	{r3, r4, r5, pc}
   d765c:	2003e384 	.word	0x2003e384

000d7660 <strlen>:
   d7660:	4603      	mov	r3, r0
   d7662:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7666:	2a00      	cmp	r2, #0
   d7668:	d1fb      	bne.n	d7662 <strlen+0x2>
   d766a:	1a18      	subs	r0, r3, r0
   d766c:	3801      	subs	r0, #1
   d766e:	4770      	bx	lr

000d7670 <strnlen>:
   d7670:	b510      	push	{r4, lr}
   d7672:	4603      	mov	r3, r0
   d7674:	4401      	add	r1, r0
   d7676:	428b      	cmp	r3, r1
   d7678:	d004      	beq.n	d7684 <strnlen+0x14>
   d767a:	781a      	ldrb	r2, [r3, #0]
   d767c:	1c5c      	adds	r4, r3, #1
   d767e:	b10a      	cbz	r2, d7684 <strnlen+0x14>
   d7680:	4623      	mov	r3, r4
   d7682:	e7f8      	b.n	d7676 <strnlen+0x6>
   d7684:	1a18      	subs	r0, r3, r0
   d7686:	bd10      	pop	{r4, pc}

000d7688 <dynalib_user>:
   d7688:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7698:	0000 0000 6556 6972 6966 6465 4920 3a44     ....Verified ID:
   d76a8:	4600 6e69 6567 2072 6f6e 2074 6f66 6e75     .Finger not foun
   d76b8:	0064 6552 6f6d 6576 6620 6e69 6567 0072     d.Remove finger.
   d76c8:	7250 7365 2073 6173 656d 6620 6e69 6567     Press same finge
   d76d8:	2072 6761 6961 006e 7250 7365 2073 6173     r again.Press sa
   d76e8:	656d 6620 6e69 6567 2072 6579 2074 6761     me finger yet ag
   d76f8:	6961 006e 6e45 6f72 6c6c 6e69 2067 7553     ain.Enrolling Su
   d7708:	6363 7365 6673 6c75 4500 726e 6c6f 696c     ccessful.Enrolli
   d7718:	676e 4620 6961 656c 2064 6977 6874 6520     ng Failed with e
   d7728:	7272 726f 6320 646f 3a65 4600 6961 656c     rror code:.Faile
   d7738:	2064 6f74 6320 7061 7574 6572 7420 6968     d to capture thi
   d7748:	6472 6620 6e69 6567 0072 6146 6c69 6465     rd finger.Failed
   d7758:	7420 206f 6163 7470 7275 2065 6573 6f63      to capture seco
   d7768:	646e 6620 6e69 6567 0072 6146 6c69 6465     nd finger.Failed
   d7778:	7420 206f 6163 7470 7275 2065 6966 7372      to capture firs
   d7788:	2074 6966 676e 7265 5000 6572 7373 6620     t finger.Press f
   d7798:	6e69 6567 2072 6f74 4520 726e 6c6f 206c     inger to Enroll 
   d77a8:	0023 6c42 6575 6f74 746f 2068 6f43 6e6e     #.Bluetooth Conn
   d77b8:	6365 6574 2164 4200 756c 7465 6f6f 6874     ected!.Bluetooth
   d77c8:	4420 7369 6f63 6e6e 6365 6574 2e64 3600      Disconnected..6
   d77d8:	3445 3030 3030 2d30 3542 3341 462d 3933     E400000-B5A3-F39
   d77e8:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d77f8:	3941 0045 6572 6563 7669 0065 4536 3034     A9E.receive.6E40
   d7808:	3030 3230 422d 4135 2d33 3346 3339 452d     0002-B5A3-F393-E
   d7818:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   d7828:	7400 6172 736e 696d 0074 4536 3034 3030     .transmit.6E4000
   d7838:	3130 422d 4135 2d33 3346 3339 452d 4130     01-B5A3-F393-E0A
   d7848:	2d39 3545 4530 3432 4344 4143 4539 0000     9-E50E24DCCA9E..

000d7858 <CSWTCH.51>:
   d7858:	0000 1001 1002 1003 1004 1005 1006 1007     ................
   d7868:	1008 1009 100a 100b 100c 100d 100e 100f     ................
   d7878:	1010 1011 1012 6552 7073 6e6f 6573 505f     ......Response_P
   d7888:	6361 656b 2074 6170 7372 6e69 2067 7265     acket parsing er
   d7898:	6f72 2072 2000 7c7c 0020 2120 203d 4300     ror . || . != .C
   d78a8:	4d4f 414d 444e 535f 4154 5452 435f 444f     OMMAND_START_COD
   d78b8:	5f45 0031 4f43 4d4d 4e41 5f44 5453 5241     E_1.COMMAND_STAR
   d78c8:	5f54 4f43 4544 325f 4300 4d4f 414d 444e     T_CODE_2.COMMAND
   d78d8:	445f 5645 4349 5f45 4449 315f 4300 4d4f     _DEVICE_ID_1.COM
   d78e8:	414d 444e 445f 5645 4349 5f45 4449 325f     MAND_DEVICE_ID_2
   d78f8:	4100 6b63 614e 5f6b 4f4c 0057 6341 4e6b     .AckNak_LOW.AckN
   d7908:	6b61 485f 4749 0048 6843 6365 736b 6d75     ak_HIGH.Checksum
   d7918:	4c5f 574f 4300 6568 6b63 7573 5f6d 4948     _LOW.Checksum_HI
   d7928:	4847 2500 322e 0058 0022 5046 2053 202d     GH.%.2X.".FPS - 
   d7938:	4553 444e 203a 4600 5350 2d20 5220 4345     SEND: .FPS - REC
   d7948:	3a56 0020 5046 2053 202d 704f 6e65 4600     V: .FPS - Open.F
   d7958:	5350 2d20 4320 6f6c 6573 4600 5350 2d20     PS - Close.FPS -
   d7968:	4c20 4445 6f20 006e 5046 2053 202d 454c      LED on.FPS - LE
   d7978:	2044 666f 0066 5046 2053 202d 6843 6e61     D off.FPS - Chan
   d7988:	6567 6142 6475 6152 6574 4600 5350 2d20     geBaudRate.FPS -
   d7998:	4720 7465 6e45 6f72 6c6c 6465 6f43 6e75      GetEnrolledCoun
   d79a8:	0074 5046 2053 202d 6843 6365 456b 726e     t.FPS - CheckEnr
   d79b8:	6c6f 656c 0064 5046 2053 202d 6e45 6f72     olled.FPS - Enro
   d79c8:	6c6c 7453 7261 0074 5046 2053 202d 6e45     llStart.FPS - En
   d79d8:	6f72 6c6c 0031 5046 2053 202d 6e45 6f72     roll1.FPS - Enro
   d79e8:	6c6c 0032 5046 2053 202d 6e45 6f72 6c6c     ll2.FPS - Enroll
   d79f8:	0033 5046 2053 202d 6544 656c 6574 4449     3.FPS - DeleteID
   d7a08:	4600 5350 2d20 4420 6c65 7465 4165 6c6c     .FPS - DeleteAll
   d7a18:	4600 5350 2d20 5620 7265 6669 3179 315f     .FPS - Verify1_1
   d7a28:	4600 5350 2d20 4920 6564 746e 6669 3179     .FPS - Identify1
   d7a38:	4e5f 4600 5350 2d20 4320 7061 7574 6572     _N.FPS - Capture
   d7a48:	6946 676e 7265 0000                         Finger..

000d7a50 <_ZTVN5spark13EthernetClassE>:
	...
   d7a58:	55f7 000d 55ed 000d 55e3 000d 55d9 000d     .U...U...U...U..
   d7a68:	55cd 000d 55c1 000d 55b5 000d 55ad 000d     .U...U...U...U..
   d7a78:	55a3 000d 5599 000d 70b1 000d               .U...U...p..

000d7a84 <_ZTV8SPIClass>:
	...
   d7a8c:	5615 000d 5617 000d                         .V...V..

000d7a94 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7a9c:	574f 000d 5755 000d 6419 000d 577f 000d     OW..UW...d...W..
   d7aac:	5751 000d                                   QW..

000d7ab0 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7ab8:	5749 000d 5763 000d 6521 000d 5783 000d     IW..cW..!e...W..
   d7ac8:	574b 000d                                   KW..

000d7acc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7ad4:	5743 000d 5771 000d 5f03 000d 5787 000d     CW..qW..._...W..
   d7ae4:	5745 000d                                   EW..

000d7ae8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d7ae8:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d7af8:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d7b08:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d7b18:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d7b28:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d7b38:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d7b48:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d7b58:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d7b68:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d7b78:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d7b88:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d7b98:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d7ba8:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d7bb8:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d7bc8:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d7bd8:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d7be8:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d7bf8:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d7c08:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d7c18:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d7c28:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d7c38:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d7c48:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d7c58:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d7c68:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d7c78:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d7c88:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d7c98:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d7ca8:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d7cb8:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d7cc8:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d7cd8:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d7ce8:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d7cf8:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d7d08:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d7d18:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d7d28:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d7d38:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
   d7d48:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   d7d58:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   d7d68:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
   d7d78:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   d7d88:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7d98:	7361 7463 6d69 0065                         asctime.

000d7da0 <_ZTV9IPAddress>:
	...
   d7da8:	6b19 000d 6b09 000d 6b0b 000d               .k...k...k..

000d7db4 <_ZTV9USBSerial>:
	...
   d7dbc:	6bf1 000d 6c41 000d 6c4f 000d 680d 000d     .k..Al..Ol...h..
   d7dcc:	6c2d 000d 6bf3 000d 6c09 000d 6c3b 000d     -l...k...l..;l..
   d7ddc:	6c1f 000d 6bed 000d                         .l...k..

000d7de4 <_ZTV11USARTSerial>:
	...
   d7dec:	6d49 000d 6d99 000d 6da7 000d 680d 000d     Im...m...m...h..
   d7dfc:	6d5d 000d 6d7f 000d 6d6b 000d 6d93 000d     ]m...m..km...m..
   d7e0c:	6d4b 000d 6d4f 000d                         Km..Om..

000d7e14 <_ZTV7TwoWire>:
	...
   d7e1c:	6e61 000d 6eab 000d 6e83 000d 6e63 000d     an...n...n..cn..
   d7e2c:	6e8b 000d 6e93 000d 6e9b 000d 6ea3 000d     .n...n...n...n..

000d7e3c <_ZTVN5spark9MeshClassE>:
	...
   d7e44:	6f43 000d 6f39 000d 6f2f 000d 6f25 000d     Co..9o../o..%o..
   d7e54:	6f19 000d 6f0d 000d 6f01 000d 6ef9 000d     .o...o...o...n..
   d7e64:	6eef 000d 6ee5 000d 70b1 000d               .n...n...p..

000d7e70 <_ZTVN5spark12NetworkClassE>:
	...
   d7e78:	7049 000d 7053 000d 705d 000d 7067 000d     Ip..Sp..]p..gp..
   d7e88:	7071 000d 707d 000d 7089 000d 7095 000d     qp..}p...p...p..
   d7e98:	709d 000d 70a7 000d 70b1 000d               .p...p...p..

000d7ea4 <__sf_fake_stdin>:
	...

000d7ec4 <__sf_fake_stdout>:
	...

000d7ee4 <__sf_fake_stderr>:
	...
   d7f04:	0043                                        C.

000d7f06 <link_const_variable_data_end>:
	...

000d7f08 <link_constructors_location>:
   d7f08:	000d410d 	.word	0x000d410d
   d7f0c:	000d46c5 	.word	0x000d46c5
   d7f10:	000d5009 	.word	0x000d5009
   d7f14:	000d5601 	.word	0x000d5601
   d7f18:	000d5655 	.word	0x000d5655
   d7f1c:	000d67fd 	.word	0x000d67fd
   d7f20:	000d695d 	.word	0x000d695d
   d7f24:	000d696d 	.word	0x000d696d
   d7f28:	000d6a09 	.word	0x000d6a09
   d7f2c:	000d6ff9 	.word	0x000d6ff9
   d7f30:	000d717d 	.word	0x000d717d
   d7f34:	000d7255 	.word	0x000d7255
   d7f38:	000d72e9 	.word	0x000d72e9
   d7f3c:	000d736d 	.word	0x000d736d
   d7f40:	000d7431 	.word	0x000d7431
   d7f44:	000d74f5 	.word	0x000d74f5

000d7f48 <link_constructors_end>:
	...
