
a:/Documents/Programming/GitHub/CoolSafe/Microcontroller/cool_safe_code/target/1.4.4/xenon/cool_safe_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003904  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017a1c  2**0
                  CONTENTS
  4 .data         000000d0  2003e2bc  000d7920  0000e2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000464  2003e38c  2003e38c  0001e38c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d79f0  000d79f0  000179f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7a18  000d7a18  00017a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d14fe  00000000  00000000  00017a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011097  00000000  00000000  000e8f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d8a6  00000000  00000000  000f9fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002860  00000000  00000000  00117857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004710  00000000  00000000  0011a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000382e6  00000000  00000000  0011e7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ae8c  00000000  00000000  00156aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffe60  00000000  00000000  00181939  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d2c4  00000000  00000000  0028179c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f81e 	bl	d706e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f83e 	bl	d70ba <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2bc 	.word	0x2003e2bc
   d4048:	000d7920 	.word	0x000d7920
   d404c:	2003e38c 	.word	0x2003e38c
   d4050:	2003e38c 	.word	0x2003e38c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fa95 	bl	d6588 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7914 	.word	0x000d7914
   d4080:	000d78d4 	.word	0x000d78d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ae 	b.w	d41e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f93b 	bl	d4304 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 ba47 	b.w	d6524 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bfb9 	b.w	d500c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bfb7 	b.w	d500c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bfbd 	b.w	d501c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bfbb 	b.w	d501c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z4playiiPiS_>:
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40bc:	f8df b048 	ldr.w	fp, [pc, #72]	; d4108 <_Z4playiiPiS_+0x50>
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40c0:	460f      	mov	r7, r1
   d40c2:	4690      	mov	r8, r2
   d40c4:	4699      	mov	r9, r3
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40c6:	2400      	movs	r4, #0
   d40c8:	b2c6      	uxtb	r6, r0

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40ca:	f44f 7a16 	mov.w	sl, #600	; 0x258

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40ce:	42bc      	cmp	r4, r7
   d40d0:	da15      	bge.n	d40fe <_Z4playiiPiS_+0x46>

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40d2:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40d6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
   d40da:	fb9a f5f5 	sdiv	r5, sl, r5
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40de:	b109      	cbz	r1, d40e4 <_Z4playiiPiS_+0x2c>
   d40e0:	fb9b f1f1 	sdiv	r1, fp, r1
   d40e4:	f1a5 0214 	sub.w	r2, r5, #20
   d40e8:	4630      	mov	r0, r6
   d40ea:	f002 fb61 	bl	d67b0 <tone>

    // blocking delay needed because tone() does not block
    delay(noteDuration);
   d40ee:	4628      	mov	r0, r5
   d40f0:	f002 f9a0 	bl	d6434 <delay>

    noTone(speakerPin);
   d40f4:	4630      	mov	r0, r6
   d40f6:	f002 fb72 	bl	d67de <noTone>

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40fa:	3401      	adds	r4, #1
   d40fc:	e7e7      	b.n	d40ce <_Z4playiiPiS_+0x16>
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d40fe:	4630      	mov	r0, r6
   d4100:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d4104:	f002 bb6b 	b.w	d67de <noTone>
   d4108:	0007a120 	.word	0x0007a120

000d410c <_GLOBAL__sub_I__Z4playiiPiS_>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d410c:	f000 bce0 	b.w	d4ad0 <HAL_Pin_Map>

000d4110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
int goodSound[] = {NOTE_C3, NOTE_E3, NOTE_G3};
int goodDuration[] = {4, 4, 1};
int badSound[] = {NOTE_G3, NOTE_E3, NOTE_C3};
int badDuration[] = {4, 4, 1};

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4110:	b570      	push	{r4, r5, r6, lr}
   d4112:	4604      	mov	r4, r0
  // when data for when data is recieved through the RxBLE characteristic
  const char * dataChars = (char *) data;
  Serial.write(dataChars);
   d4114:	f002 fb26 	bl	d6764 <_Z16_fetch_usbserialv>
   d4118:	4605      	mov	r5, r0
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d411a:	b144      	cbz	r4, d412e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d411c:	4620      	mov	r0, r4
   d411e:	f002 fffd 	bl	d711c <strlen>
   d4122:	682b      	ldr	r3, [r5, #0]
   d4124:	4602      	mov	r2, r0
   d4126:	68db      	ldr	r3, [r3, #12]
   d4128:	4621      	mov	r1, r4
   d412a:	4628      	mov	r0, r5
   d412c:	4798      	blx	r3
  Serial.write('\n');
   d412e:	f002 fb19 	bl	d6764 <_Z16_fetch_usbserialv>
   d4132:	6803      	ldr	r3, [r0, #0]
   d4134:	210a      	movs	r1, #10
   d4136:	689b      	ldr	r3, [r3, #8]
  // Hex code in to change LED color
  //uint8_t red = dataToHex(data[0], data[1]);
  //uint8_t green = dataToHex(data[2], data[3]);
  //uint8_t blue = dataToHex(data[4], data[5]);
  //RGB.color(red, green, blue);
}
   d4138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
  // when data for when data is recieved through the RxBLE characteristic
  const char * dataChars = (char *) data;
  Serial.write(dataChars);
  Serial.write('\n');
   d413c:	4718      	bx	r3
	...

000d4140 <_Z12goodFeedbackv>:
  goodFeedback();
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(Relay, LOW);
}

void goodFeedback() {
   d4140:	b508      	push	{r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);
   d4142:	2101      	movs	r1, #1
   d4144:	2006      	movs	r0, #6
   d4146:	f002 fdb6 	bl	d6cb6 <digitalWrite>
  RGB.color(0, 255, 0);
   d414a:	2200      	movs	r2, #0
   d414c:	4610      	mov	r0, r2
   d414e:	21ff      	movs	r1, #255	; 0xff
   d4150:	f002 f992 	bl	d6478 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);
   d4154:	4b08      	ldr	r3, [pc, #32]	; (d4178 <_Z12goodFeedbackv+0x38>)
   d4156:	4a09      	ldr	r2, [pc, #36]	; (d417c <_Z12goodFeedbackv+0x3c>)
   d4158:	2103      	movs	r1, #3
   d415a:	2013      	movs	r0, #19
   d415c:	f7ff ffac 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(greenLED, LOW);
   d4160:	2100      	movs	r1, #0
   d4162:	2006      	movs	r0, #6
   d4164:	f002 fda7 	bl	d6cb6 <digitalWrite>
  RGB.color(0, 0, 0);
   d4168:	2200      	movs	r2, #0
   d416a:	4611      	mov	r1, r2
   d416c:	4610      	mov	r0, r2
}
   d416e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);
  RGB.color(0, 255, 0);
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);
  digitalWrite(greenLED, LOW);
  RGB.color(0, 0, 0);
   d4172:	f002 b981 	b.w	d6478 <_ZN8RGBClass5colorEiii>
   d4176:	bf00      	nop
   d4178:	2003e314 	.word	0x2003e314
   d417c:	2003e308 	.word	0x2003e308

000d4180 <_Z7openBinv>:
  //uint8_t green = dataToHex(data[2], data[3]);
  //uint8_t blue = dataToHex(data[4], data[5]);
  //RGB.color(red, green, blue);
}

void openBin() {
   d4180:	b508      	push	{r3, lr}
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(Relay, HIGH);
   d4182:	2101      	movs	r1, #1
   d4184:	200f      	movs	r0, #15
   d4186:	f002 fd96 	bl	d6cb6 <digitalWrite>
  goodFeedback();
   d418a:	f7ff ffd9 	bl	d4140 <_Z12goodFeedbackv>
  delay(unlockTime);                // How long the solenoid stays pulled in
   d418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4192:	f002 f94f 	bl	d6434 <delay>
  digitalWrite(Relay, LOW);
   d4196:	2100      	movs	r1, #0
   d4198:	200f      	movs	r0, #15
}
   d419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void openBin() {
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(Relay, HIGH);
  goodFeedback();
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(Relay, LOW);
   d419e:	f002 bd8a 	b.w	d6cb6 <digitalWrite>
	...

000d41a4 <_Z11badFeedbackv>:
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);
  digitalWrite(greenLED, LOW);
  RGB.color(0, 0, 0);
}

void badFeedback() {
   d41a4:	b508      	push	{r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);
   d41a6:	2101      	movs	r1, #1
   d41a8:	2008      	movs	r0, #8
   d41aa:	f002 fd84 	bl	d6cb6 <digitalWrite>
  RGB.color(255, 0, 0);
   d41ae:	2200      	movs	r2, #0
   d41b0:	4611      	mov	r1, r2
   d41b2:	20ff      	movs	r0, #255	; 0xff
   d41b4:	f002 f960 	bl	d6478 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(badSound), badSound, badDuration);
   d41b8:	4b08      	ldr	r3, [pc, #32]	; (d41dc <_Z11badFeedbackv+0x38>)
   d41ba:	4a09      	ldr	r2, [pc, #36]	; (d41e0 <_Z11badFeedbackv+0x3c>)
   d41bc:	2103      	movs	r1, #3
   d41be:	2013      	movs	r0, #19
   d41c0:	f7ff ff7a 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(redLED, LOW);
   d41c4:	2100      	movs	r1, #0
   d41c6:	2008      	movs	r0, #8
   d41c8:	f002 fd75 	bl	d6cb6 <digitalWrite>
  RGB.color(0, 0, 0);
   d41cc:	2200      	movs	r2, #0
   d41ce:	4611      	mov	r1, r2
   d41d0:	4610      	mov	r0, r2
}
   d41d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);
  RGB.color(255, 0, 0);
  play(buzzer, arraySize(badSound), badSound, badDuration);
  digitalWrite(redLED, LOW);
  RGB.color(0, 0, 0);
   d41d6:	f002 b94f 	b.w	d6478 <_ZN8RGBClass5colorEiii>
   d41da:	bf00      	nop
   d41dc:	2003e2fc 	.word	0x2003e2fc
   d41e0:	2003e2f0 	.word	0x2003e2f0

000d41e4 <setup>:
    else Serial.println("Failed to capture second finger");
  }
  else Serial.println("Failed to capture first finger");
}
*/
void setup() {
   d41e4:	b510      	push	{r4, lr}
   d41e6:	b096      	sub	sp, #88	; 0x58
  // BLE ///////////////////////////////////
  // Attach characteristics
  BLE.addCharacteristic(TxBLE);
   d41e8:	f001 fafe 	bl	d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ec:	4a3e      	ldr	r2, [pc, #248]	; (d42e8 <setup+0x104>)
   d41ee:	4601      	mov	r1, r0
   d41f0:	a80d      	add	r0, sp, #52	; 0x34
   d41f2:	f001 ff41 	bl	d6078 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41f6:	a80d      	add	r0, sp, #52	; 0x34
   d41f8:	f001 fbb2 	bl	d5960 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(RxBLE);
   d41fc:	f001 faf4 	bl	d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4200:	4a3a      	ldr	r2, [pc, #232]	; (d42ec <setup+0x108>)
   d4202:	4601      	mov	r1, r0
   d4204:	a80d      	add	r0, sp, #52	; 0x34
   d4206:	f001 ff37 	bl	d6078 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d420a:	a80d      	add	r0, sp, #52	; 0x34
   d420c:	f001 fba8 	bl	d5960 <_ZN8particle17BleCharacteristicD1Ev>
  RxBLE.onDataReceived(onDataReceived, NULL);
   d4210:	2200      	movs	r2, #0
   d4212:	4937      	ldr	r1, [pc, #220]	; (d42f0 <setup+0x10c>)
   d4214:	4835      	ldr	r0, [pc, #212]	; (d42ec <setup+0x108>)
   d4216:	f001 fa93 	bl	d5740 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  // Start advertising service
  BleAdvertisingData adverData;
   d421a:	a80d      	add	r0, sp, #52	; 0x34
   d421c:	f001 f9c5 	bl	d55aa <_ZN8particle18BleAdvertisingDataC1Ev>
  adverData.appendServiceUUID(serviceUuid);
   d4220:	4934      	ldr	r1, [pc, #208]	; (d42f4 <setup+0x110>)
   d4222:	a803      	add	r0, sp, #12
   d4224:	f001 f86c 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4228:	a903      	add	r1, sp, #12
   d422a:	a808      	add	r0, sp, #32
   d422c:	f001 f868 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4230:	a808      	add	r0, sp, #32
   d4232:	f001 f8a3 	bl	d537c <_ZNK8particle7BleUuid4typeEv>
   d4236:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4238:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d423a:	b944      	cbnz	r4, d424e <setup+0x6a>
            uint16_t uuid16 = tempUUID.shorted();
   d423c:	f001 f8bb 	bl	d53b6 <_ZNK8particle7BleUuid7shortedEv>
   d4240:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4242:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4244:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4248:	2103      	movs	r1, #3
   d424a:	9400      	str	r4, [sp, #0]
   d424c:	e006      	b.n	d425c <setup+0x78>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d424e:	f001 f8b4 	bl	d53ba <_ZNK8particle7BleUuid8rawBytesEv>
   d4252:	2300      	movs	r3, #0
   d4254:	9300      	str	r3, [sp, #0]
   d4256:	4602      	mov	r2, r0
   d4258:	2310      	movs	r3, #16
   d425a:	2107      	movs	r1, #7
   d425c:	a80d      	add	r0, sp, #52	; 0x34
   d425e:	f001 f95d 	bl	d551c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&adverData);
   d4262:	f001 fac1 	bl	d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4266:	2200      	movs	r2, #0
   d4268:	a90d      	add	r1, sp, #52	; 0x34
   d426a:	f001 fb2a 	bl	d58c2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  //////////////////////////////////////////

  // Device I/O ////////////////////////////
  //Serial1.begin(9600);          // FPS UART uses Rx (pin 14) & Tx (pin 15) on Particle Xenon
  //fps.UseSerialDebug = true;    // Sends messages to USB Serial for debugging
	fps.Open();                   // send serial command to initialize fps. Make sure FPS is connected or the program won't go past this part
   d426e:	4822      	ldr	r0, [pc, #136]	; (d42f8 <setup+0x114>)
   d4270:	f000 fb1a 	bl	d48a8 <_ZN11FPS_GT511C34OpenEv>
  fps.SetLED(true);             // visual test to make sure the fps is connected. Leave on for being able to detect fingerprints
   d4274:	2101      	movs	r1, #1
   d4276:	4820      	ldr	r0, [pc, #128]	; (d42f8 <setup+0x114>)
   d4278:	f000 fb44 	bl	d4904 <_ZN11FPS_GT511C36SetLEDEb>
  //delay(500);
  //fps.SetLED(false);

  pinMode(keySwitch, INPUT);    // electro-mechanical switch w/ a key
   d427c:	2100      	movs	r1, #0
   d427e:	2005      	movs	r0, #5
   d4280:	f002 fd08 	bl	d6c94 <pinMode>
  pinMode(Relay, OUTPUT);       // signal to relay for switching solenoid
   d4284:	2101      	movs	r1, #1
   d4286:	200f      	movs	r0, #15
   d4288:	f002 fd04 	bl	d6c94 <pinMode>
  pinMode(buzzer, OUTPUT);      // sound buzzer, not necessary for using tone()
   d428c:	2101      	movs	r1, #1
   d428e:	2013      	movs	r0, #19
   d4290:	f002 fd00 	bl	d6c94 <pinMode>
  pinMode(orLED, OUTPUT);       // amber registration mode LED
   d4294:	2101      	movs	r1, #1
   d4296:	2007      	movs	r0, #7
   d4298:	f002 fcfc 	bl	d6c94 <pinMode>
  pinMode(redLED, OUTPUT);      // red access denied LED
   d429c:	2101      	movs	r1, #1
   d429e:	2008      	movs	r0, #8
   d42a0:	f002 fcf8 	bl	d6c94 <pinMode>
  pinMode(greenLED, OUTPUT);    // green access permitted LED
   d42a4:	2101      	movs	r1, #1
   d42a6:	2006      	movs	r0, #6
   d42a8:	f002 fcf4 	bl	d6c94 <pinMode>
  //////////////////////////////////////////

  // Debugging /////////////////////////////
  // Setup USB Serial port
  Serial.begin(); // defaults to 9600 baud rate
   d42ac:	f002 fa5a 	bl	d6764 <_Z16_fetch_usbserialv>
   d42b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42b4:	f002 fa4a 	bl	d674c <_ZN9USBSerial5beginEl>
  // On-board LED control
  //pinMode(smdLED, OUTPUT);      // blue on-board LED attached to pin 7
  //digitalWrite(smdLED, HIGH);
  RGB.control(true);            // take control of the On-Board RGB LED
   d42b8:	2001      	movs	r0, #1
   d42ba:	f002 f8cd 	bl	d6458 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);     // Format red, green, blue, from 0 to 255
   d42be:	22ff      	movs	r2, #255	; 0xff
   d42c0:	4611      	mov	r1, r2
   d42c2:	4610      	mov	r0, r2
   d42c4:	f002 f8d8 	bl	d6478 <_ZN8RGBClass5colorEiii>
  RGB.brightness(64);           // scales brightness of all three colors, 0-255
   d42c8:	2101      	movs	r1, #1
   d42ca:	2040      	movs	r0, #64	; 0x40
   d42cc:	f002 f8e7 	bl	d649e <_ZN8RGBClass10brightnessEhb>
  //Serial.print("EEPROM Available: ");
  //Serial.println(EEPROM.length());    // 4096 available
  //goodFeedback();
  //badFeedback();
  //play(buzzer, arraySize(Tetris), Tetris, TetrisDuration);  // Play Tetris-ish sound
  play(buzzer, arraySize(startDuration), startSound, startDuration); // setup feedback
   d42d0:	4b0a      	ldr	r3, [pc, #40]	; (d42fc <setup+0x118>)
   d42d2:	4a0b      	ldr	r2, [pc, #44]	; (d4300 <setup+0x11c>)
   d42d4:	2106      	movs	r1, #6
   d42d6:	2013      	movs	r0, #19
   d42d8:	f7ff feee 	bl	d40b8 <_Z4playiiPiS_>
  delay(1000);
   d42dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42e0:	f002 f8a8 	bl	d6434 <delay>
  //////////////////////////////////////////
}
   d42e4:	b016      	add	sp, #88	; 0x58
   d42e6:	bd10      	pop	{r4, pc}
   d42e8:	2003e390 	.word	0x2003e390
   d42ec:	2003e3b8 	.word	0x2003e3b8
   d42f0:	000d4111 	.word	0x000d4111
   d42f4:	2003e39e 	.word	0x2003e39e
   d42f8:	2003e3c0 	.word	0x2003e3c0
   d42fc:	2003e2bc 	.word	0x2003e2bc
   d4300:	2003e2d4 	.word	0x2003e2d4

000d4304 <loop>:

 uint8_t a = (uint8_t) 1;  // variable for testing BLE incrementing data
void loop() {
  RGB.color(0, 0, 255);
   d4304:	2100      	movs	r1, #0
  delay(1000);
  //////////////////////////////////////////
}

 uint8_t a = (uint8_t) 1;  // variable for testing BLE incrementing data
void loop() {
   d4306:	b538      	push	{r3, r4, r5, lr}
  RGB.color(0, 0, 255);
   d4308:	22ff      	movs	r2, #255	; 0xff
   d430a:	4608      	mov	r0, r1
 
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
   d430c:	4c31      	ldr	r4, [pc, #196]	; (d43d4 <loop+0xd0>)
  //////////////////////////////////////////
}

 uint8_t a = (uint8_t) 1;  // variable for testing BLE incrementing data
void loop() {
  RGB.color(0, 0, 255);
   d430e:	f002 f8b3 	bl	d6478 <_ZN8RGBClass5colorEiii>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4312:	f000 fc2d 	bl	d4b70 <HAL_Timer_Get_Milli_Seconds>
 
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
   d4316:	6823      	ldr	r3, [r4, #0]
   d4318:	1ac0      	subs	r0, r0, r3
   d431a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d431e:	d358      	bcc.n	d43d2 <loop+0xce>
   d4320:	f000 fc26 	bl	d4b70 <HAL_Timer_Get_Milli_Seconds>
	  lastUpdate = millis();
   d4324:	6020      	str	r0, [r4, #0]

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d4326:	f001 fa5f 	bl	d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d432a:	f001 fae7 	bl	d58fc <_ZNK8particle14BleLocalDevice9connectedEv>
   d432e:	4c2a      	ldr	r4, [pc, #168]	; (d43d8 <loop+0xd4>)
   d4330:	4605      	mov	r5, r0
        if (connectionFlag == false) {
   d4332:	7823      	ldrb	r3, [r4, #0]
 
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
	  lastUpdate = millis();

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d4334:	b188      	cbz	r0, d435a <loop+0x56>
        if (connectionFlag == false) {
   d4336:	b933      	cbnz	r3, d4346 <loop+0x42>
          Serial.println("Bluetooth Connected!");
   d4338:	f002 fa14 	bl	d6764 <_Z16_fetch_usbserialv>
   d433c:	4927      	ldr	r1, [pc, #156]	; (d43dc <loop+0xd8>)
   d433e:	f001 fff8 	bl	d6332 <_ZN5Print7printlnEPKc>
          connectionFlag = true;
   d4342:	2301      	movs	r3, #1
   d4344:	7023      	strb	r3, [r4, #0]
          // TODO: update / send users to mobile app
        }
        a++;                // increment testing variable
   d4346:	4926      	ldr	r1, [pc, #152]	; (d43e0 <loop+0xdc>)
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4348:	4826      	ldr	r0, [pc, #152]	; (d43e4 <loop+0xe0>)
   d434a:	780b      	ldrb	r3, [r1, #0]
   d434c:	3301      	adds	r3, #1
   d434e:	700b      	strb	r3, [r1, #0]
   d4350:	2201      	movs	r2, #1
   d4352:	2300      	movs	r3, #0
   d4354:	f001 f992 	bl	d567c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d4358:	e006      	b.n	d4368 <loop+0x64>
        TxBLE.setValue(a);  // send test data messages
    }
    else {  // No Bluetooth connection
      if (connectionFlag == true) { // Make sure flag is set correctly
   d435a:	b12b      	cbz	r3, d4368 <loop+0x64>
        Serial.println("Bluetooth Disconnected.");
   d435c:	f002 fa02 	bl	d6764 <_Z16_fetch_usbserialv>
   d4360:	4921      	ldr	r1, [pc, #132]	; (d43e8 <loop+0xe4>)
   d4362:	f001 ffe6 	bl	d6332 <_ZN5Print7printlnEPKc>
        connectionFlag = false;
   d4366:	7025      	strb	r5, [r4, #0]
      }
    }
    
    // Check for users trying to access using a fingerprint
    if(fps.IsPressFinger()) {
   d4368:	4820      	ldr	r0, [pc, #128]	; (d43ec <loop+0xe8>)
   d436a:	f000 fb09 	bl	d4980 <_ZN11FPS_GT511C313IsPressFingerEv>
   d436e:	b318      	cbz	r0, d43b8 <loop+0xb4>
      RGB.color(255, 255, 255);   // white LED
   d4370:	22ff      	movs	r2, #255	; 0xff
   d4372:	4611      	mov	r1, r2
   d4374:	4610      	mov	r0, r2
   d4376:	f002 f87f 	bl	d6478 <_ZN8RGBClass5colorEiii>
      
      fps.CaptureFinger(false);   // take a low quality image (faster)
   d437a:	2100      	movs	r1, #0
   d437c:	481b      	ldr	r0, [pc, #108]	; (d43ec <loop+0xe8>)
   d437e:	f000 fb5d 	bl	d4a3c <_ZN11FPS_GT511C313CaptureFingerEb>
      int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d4382:	481a      	ldr	r0, [pc, #104]	; (d43ec <loop+0xe8>)
   d4384:	f000 fb28 	bl	d49d8 <_ZN11FPS_GT511C311Identify1_NEv>

      if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d4388:	28c7      	cmp	r0, #199	; 0xc7
    // Check for users trying to access using a fingerprint
    if(fps.IsPressFinger()) {
      RGB.color(255, 255, 255);   // white LED
      
      fps.CaptureFinger(false);   // take a low quality image (faster)
      int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d438a:	4604      	mov	r4, r0

      if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d438c:	d80d      	bhi.n	d43aa <loop+0xa6>
        Serial.print("Verified ID:");
   d438e:	f002 f9e9 	bl	d6764 <_Z16_fetch_usbserialv>
   d4392:	4917      	ldr	r1, [pc, #92]	; (d43f0 <loop+0xec>)
   d4394:	f001 ffba 	bl	d630c <_ZN5Print5printEPKc>
        Serial.println(id);
   d4398:	f002 f9e4 	bl	d6764 <_Z16_fetch_usbserialv>
   d439c:	220a      	movs	r2, #10
   d439e:	4621      	mov	r1, r4
   d43a0:	f002 f82c 	bl	d63fc <_ZN5Print7printlnEii>
        // TODO: Check if user is allowed access (or is disabled)
        openBin();  // includes good feedback
   d43a4:	f7ff feec 	bl	d4180 <_Z7openBinv>
   d43a8:	e006      	b.n	d43b8 <loop+0xb4>
      }
      else {//if unable to recognize
        Serial.println("Finger not found");
   d43aa:	f002 f9db 	bl	d6764 <_Z16_fetch_usbserialv>
   d43ae:	4911      	ldr	r1, [pc, #68]	; (d43f4 <loop+0xf0>)
   d43b0:	f001 ffbf 	bl	d6332 <_ZN5Print7printlnEPKc>
        badFeedback();
   d43b4:	f7ff fef6 	bl	d41a4 <_Z11badFeedbackv>
      }
    }
    
    // Check for users trying to access using the electro-mechanical tumbler lock switch
    if (digitalRead(keySwitch) == HIGH) {
   d43b8:	2005      	movs	r0, #5
   d43ba:	f002 fc95 	bl	d6ce8 <digitalRead>
   d43be:	2801      	cmp	r0, #1
   d43c0:	d107      	bne.n	d43d2 <loop+0xce>
      openBin();  // includes goodFeedback();
   d43c2:	f7ff fedd 	bl	d4180 <_Z7openBinv>
      delay(2000);
   d43c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    }

  } // end update
  //RGB.color(0, 0, 255);
  //delay(1000);
}
   d43ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }
    
    // Check for users trying to access using the electro-mechanical tumbler lock switch
    if (digitalRead(keySwitch) == HIGH) {
      openBin();  // includes goodFeedback();
      delay(2000);
   d43ce:	f002 b831 	b.w	d6434 <delay>
   d43d2:	bd38      	pop	{r3, r4, r5, pc}
   d43d4:	2003e3b4 	.word	0x2003e3b4
   d43d8:	2003e3c3 	.word	0x2003e3c3
   d43dc:	000d7158 	.word	0x000d7158
   d43e0:	2003e2ec 	.word	0x2003e2ec
   d43e4:	2003e390 	.word	0x2003e390
   d43e8:	000d716d 	.word	0x000d716d
   d43ec:	2003e3c0 	.word	0x2003e3c0
   d43f0:	000d7185 	.word	0x000d7185
   d43f4:	000d7192 	.word	0x000d7192

000d43f8 <_GLOBAL__sub_I_SystemMode>:
    }

  } // end update
  //RGB.color(0, 0, 255);
  //delay(1000);
}
   d43f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d43fc:	b099      	sub	sp, #100	; 0x64
   d43fe:	f000 fb67 	bl	d4ad0 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4402:	4b30      	ldr	r3, [pc, #192]	; (d44c4 <_GLOBAL__sub_I_SystemMode+0xcc>)
const int unlockTime = 1000;                  // milliseconds to keep solenoid powered (pulled in) when opening the lock-bin
const unsigned long UPDATE_INTERVAL = 1000;   // milliseconds between updating BLE data
unsigned long lastUpdate = 0;                 // used for tracking BLE update interval

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d4404:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d44f4 <_GLOBAL__sub_I_SystemMode+0xfc>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4408:	4d2f      	ldr	r5, [pc, #188]	; (d44c8 <_GLOBAL__sub_I_SystemMode+0xd0>)
//BleCharacteristic characteristicFirstName("First Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A8A"), serviceUuid);
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
//BleCharacteristic characteristicNameOut("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
//BleCharacteristic characteristicID("User Index", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A9A"), serviceUuid);  // 0xFF for "Unknown User"
const char* writeUUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic RxBLE("receive", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUuid, onDataReceived, (void*)writeUUID);
   d440a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d44f8 <_GLOBAL__sub_I_SystemMode+0x100>
   d440e:	2400      	movs	r4, #0
   d4410:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4414:	809a      	strh	r2, [r3, #4]
   d4416:	701c      	strb	r4, [r3, #0]
   d4418:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d441a:	2003      	movs	r0, #3
   d441c:	f000 fd7a 	bl	d4f14 <set_system_mode>
const int unlockTime = 1000;                  // milliseconds to keep solenoid powered (pulled in) when opening the lock-bin
const unsigned long UPDATE_INTERVAL = 1000;   // milliseconds between updating BLE data
unsigned long lastUpdate = 0;                 // used for tracking BLE update interval

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d4420:	492a      	ldr	r1, [pc, #168]	; (d44cc <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4422:	4640      	mov	r0, r8
   d4424:	f001 f857 	bl	d54d6 <_ZN8particle7BleUuidC1EPKc>
//BleCharacteristic characteristicFirstName("First Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A8A"), serviceUuid);
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
//BleCharacteristic characteristicNameOut("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
//BleCharacteristic characteristicID("User Index", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A9A"), serviceUuid);  // 0xFF for "Unknown User"
const char* writeUUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic RxBLE("receive", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUuid, onDataReceived, (void*)writeUUID);
   d4428:	4641      	mov	r1, r8
   d442a:	a809      	add	r0, sp, #36	; 0x24
   d442c:	f000 ff68 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
   d4430:	4b27      	ldr	r3, [pc, #156]	; (d44d0 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d4432:	602c      	str	r4, [r5, #0]
   d4434:	681f      	ldr	r7, [r3, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4436:	606c      	str	r4, [r5, #4]
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4438:	ae13      	add	r6, sp, #76	; 0x4c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d443a:	4639      	mov	r1, r7
   d443c:	a80e      	add	r0, sp, #56	; 0x38
   d443e:	f001 f84a 	bl	d54d6 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4442:	a909      	add	r1, sp, #36	; 0x24
   d4444:	4630      	mov	r0, r6
   d4446:	f000 ff5b 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d444a:	9702      	str	r7, [sp, #8]
   d444c:	4b21      	ldr	r3, [pc, #132]	; (d44d4 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d444e:	4f22      	ldr	r7, [pc, #136]	; (d44d8 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	4628      	mov	r0, r5
   d4454:	ab0e      	add	r3, sp, #56	; 0x38
   d4456:	9600      	str	r6, [sp, #0]
   d4458:	2204      	movs	r2, #4
   d445a:	4920      	ldr	r1, [pc, #128]	; (d44dc <_GLOBAL__sub_I_SystemMode+0xe4>)
   d445c:	f001 fd5a 	bl	d5f14 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4460:	463a      	mov	r2, r7
   d4462:	4649      	mov	r1, r9
   d4464:	4628      	mov	r0, r5
   d4466:	f002 fc95 	bl	d6d94 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d446a:	4d1d      	ldr	r5, [pc, #116]	; (d44e0 <_GLOBAL__sub_I_SystemMode+0xe8>)
BleCharacteristic TxBLE("transmit", BleCharacteristicProperty::NOTIFY, BleUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d446c:	491d      	ldr	r1, [pc, #116]	; (d44e4 <_GLOBAL__sub_I_SystemMode+0xec>)
   d446e:	a804      	add	r0, sp, #16
   d4470:	f001 f831 	bl	d54d6 <_ZN8particle7BleUuidC1EPKc>
   d4474:	4641      	mov	r1, r8
   d4476:	a809      	add	r0, sp, #36	; 0x24
   d4478:	f000 ff42 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
   d447c:	602c      	str	r4, [r5, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d447e:	606c      	str	r4, [r5, #4]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4480:	a904      	add	r1, sp, #16
   d4482:	a80e      	add	r0, sp, #56	; 0x38
   d4484:	f000 ff3c 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4488:	a909      	add	r1, sp, #36	; 0x24
   d448a:	4630      	mov	r0, r6
   d448c:	f000 ff38 	bl	d5300 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4490:	ab0e      	add	r3, sp, #56	; 0x38
   d4492:	9402      	str	r4, [sp, #8]
   d4494:	9401      	str	r4, [sp, #4]
   d4496:	4628      	mov	r0, r5
uint8_t newUser = 0x01;       // start the process for adding a new user
uint8_t deleteUser = 0x02;    // remove user and biometric
uint8_t disableUser = 0x03;   // remove user from group of authorized users
uint8_t editUser = 0x04;      // change user name or other property

FPS_GT511C3 fps;              // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d4498:	4c13      	ldr	r4, [pc, #76]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d449a:	9600      	str	r6, [sp, #0]
   d449c:	2210      	movs	r2, #16
   d449e:	4913      	ldr	r1, [pc, #76]	; (d44ec <_GLOBAL__sub_I_SystemMode+0xf4>)
   d44a0:	f001 fd38 	bl	d5f14 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
//BleCharacteristic characteristicNameOut("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
//BleCharacteristic characteristicID("User Index", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A9A"), serviceUuid);  // 0xFF for "Unknown User"
const char* writeUUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic RxBLE("receive", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUuid, onDataReceived, (void*)writeUUID);
BleCharacteristic TxBLE("transmit", BleCharacteristicProperty::NOTIFY, BleUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d44a4:	463a      	mov	r2, r7
   d44a6:	4649      	mov	r1, r9
   d44a8:	4628      	mov	r0, r5
   d44aa:	f002 fc73 	bl	d6d94 <__aeabi_atexit>
uint8_t newUser = 0x01;       // start the process for adding a new user
uint8_t deleteUser = 0x02;    // remove user and biometric
uint8_t disableUser = 0x03;   // remove user from group of authorized users
uint8_t editUser = 0x04;      // change user name or other property

FPS_GT511C3 fps;              // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d44ae:	4620      	mov	r0, r4
   d44b0:	f000 f940 	bl	d4734 <_ZN11FPS_GT511C3C1Ev>
   d44b4:	463a      	mov	r2, r7
   d44b6:	490e      	ldr	r1, [pc, #56]	; (d44f0 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d44b8:	4620      	mov	r0, r4
   d44ba:	f002 fc6b 	bl	d6d94 <__aeabi_atexit>
    }

  } // end update
  //RGB.color(0, 0, 255);
  //delay(1000);
}
   d44be:	b019      	add	sp, #100	; 0x64
   d44c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44c4:	2003e398 	.word	0x2003e398
   d44c8:	2003e3b8 	.word	0x2003e3b8
   d44cc:	000d71a3 	.word	0x000d71a3
   d44d0:	2003e320 	.word	0x2003e320
   d44d4:	000d4111 	.word	0x000d4111
   d44d8:	2003e38c 	.word	0x2003e38c
   d44dc:	000d71c8 	.word	0x000d71c8
   d44e0:	2003e390 	.word	0x2003e390
   d44e4:	000d71d0 	.word	0x000d71d0
   d44e8:	2003e3c0 	.word	0x2003e3c0
   d44ec:	000d71f5 	.word	0x000d71f5
   d44f0:	000d474d 	.word	0x000d474d
   d44f4:	2003e39e 	.word	0x2003e39e
   d44f8:	000d5961 	.word	0x000d5961

000d44fc <_ZN14Command_Packet18_CalculateChecksumEv>:
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d44fc:	7842      	ldrb	r2, [r0, #1]
   d44fe:	7883      	ldrb	r3, [r0, #2]
   d4500:	4413      	add	r3, r2
	w += Parameter[2];
   d4502:	78c2      	ldrb	r2, [r0, #3]
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d4504:	f503 7380 	add.w	r3, r3, #256	; 0x100
	w += Parameter[2];
   d4508:	4413      	add	r3, r2
	w += Parameter[3];
   d450a:	7902      	ldrb	r2, [r0, #4]
   d450c:	4413      	add	r3, r2
	w += command[0];
   d450e:	7942      	ldrb	r2, [r0, #5]
	w += command[1];

	return w;
   d4510:	7980      	ldrb	r0, [r0, #6]
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
	w += Parameter[2];
	w += Parameter[3];
	w += command[0];
   d4512:	4413      	add	r3, r2
	w += command[1];

	return w;
}
   d4514:	4418      	add	r0, r3
   d4516:	4770      	bx	lr

000d4518 <_ZN14Command_Packet14GetPacketBytesEv>:
#endif  //__GNUC__

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
   d4518:	b570      	push	{r4, r5, r6, lr}
   d451a:	4604      	mov	r4, r0
	byte* packetbytes= new byte[12];
   d451c:	200c      	movs	r0, #12
   d451e:	f7ff fdbc 	bl	d409a <_Znaj>

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d4522:	2500      	movs	r5, #0
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];

	// update command before calculating checksum (important!)
	word cmd = Command;
   d4524:	7826      	ldrb	r6, [r4, #0]
	command[0] = GetLowByte(cmd);
   d4526:	7166      	strb	r6, [r4, #5]

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];
   d4528:	4601      	mov	r1, r0

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d452a:	71a5      	strb	r5, [r4, #6]

	word checksum = _CalculateChecksum();
   d452c:	4620      	mov	r0, r4
   d452e:	f7ff ffe5 	bl	d44fc <_ZN14Command_Packet18_CalculateChecksumEv>

	packetbytes[0] = COMMAND_START_CODE_1;
   d4532:	2355      	movs	r3, #85	; 0x55
   d4534:	700b      	strb	r3, [r1, #0]
	packetbytes[1] = COMMAND_START_CODE_2;
   d4536:	23aa      	movs	r3, #170	; 0xaa
   d4538:	704b      	strb	r3, [r1, #1]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
   d453a:	2301      	movs	r3, #1
   d453c:	708b      	strb	r3, [r1, #2]
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
   d453e:	7863      	ldrb	r3, [r4, #1]
   d4540:	710b      	strb	r3, [r1, #4]
	packetbytes[5] = Parameter[1];
   d4542:	78a3      	ldrb	r3, [r4, #2]
   d4544:	714b      	strb	r3, [r1, #5]
	packetbytes[6] = Parameter[2];
   d4546:	78e3      	ldrb	r3, [r4, #3]
   d4548:	718b      	strb	r3, [r1, #6]
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
   d454a:	7288      	strb	r0, [r1, #10]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d454c:	7923      	ldrb	r3, [r4, #4]
	word checksum = _CalculateChecksum();

	packetbytes[0] = COMMAND_START_CODE_1;
	packetbytes[1] = COMMAND_START_CODE_2;
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
   d454e:	70cd      	strb	r5, [r1, #3]
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);
   d4550:	0a00      	lsrs	r0, r0, #8
   d4552:	72c8      	strb	r0, [r1, #11]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4554:	71cb      	strb	r3, [r1, #7]
	packetbytes[8] = command[0];
   d4556:	720e      	strb	r6, [r1, #8]
	packetbytes[9] = command[1];
   d4558:	724d      	strb	r5, [r1, #9]
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);

	return packetbytes;
}
   d455a:	4608      	mov	r0, r1
   d455c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4560 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
	if (high == 0x00)
   d4560:	b128      	cbz	r0, d456e <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4562:	2912      	cmp	r1, #18
   d4564:	d803      	bhi.n	d456e <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4566:	4b03      	ldr	r3, [pc, #12]	; (d4574 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x14>)
   d4568:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   d456c:	4770      	bx	lr
}

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
   d456e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			case 0x11: e = NACK_INVALID_PARAM; break;
			case 0x12: e = NACK_FINGER_IS_NOT_PRESSED; break;
		}
	}
	return e;
}
   d4572:	4770      	bx	lr
   d4574:	000d7224 	.word	0x000d7224

000d4578 <_ZN15Response_Packet16IntFromParameterEv>:
int Response_Packet::IntFromParameter()
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
   d4578:	7c03      	ldrb	r3, [r0, #16]
   d457a:	7c42      	ldrb	r2, [r0, #17]
   d457c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
	retval = (retval << 8) + ParameterBytes[0];
   d4580:	7bc3      	ldrb	r3, [r0, #15]
	return retval;
   d4582:	7b80      	ldrb	r0, [r0, #14]
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
	retval = (retval << 8) + ParameterBytes[0];
   d4584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return retval;
}
   d4588:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   d458c:	4770      	bx	lr

000d458e <_ZN15Response_Packet17CalculateChecksumEPhi>:

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
   d458e:	b510      	push	{r4, lr}
   d4590:	460b      	mov	r3, r1
	word checksum = 0;
   d4592:	2000      	movs	r0, #0
	for (int i=0; i<length; i++)
   d4594:	1a5c      	subs	r4, r3, r1
   d4596:	42a2      	cmp	r2, r4
   d4598:	dd03      	ble.n	d45a2 <_ZN15Response_Packet17CalculateChecksumEPhi+0x14>
	{
		checksum +=buffer[i];
   d459a:	f813 4b01 	ldrb.w	r4, [r3], #1
   d459e:	4420      	add	r0, r4

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
	word checksum = 0;
	for (int i=0; i<length; i++)
   d45a0:	e7f8      	b.n	d4594 <_ZN15Response_Packet17CalculateChecksumEPhi+0x6>
	{
		checksum +=buffer[i];
	}
	return checksum;
}
   d45a2:	bd10      	pop	{r4, pc}

000d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>:
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d45a4:	4291      	cmp	r1, r2
	return (byte)w&0x00FF;
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
   d45a6:	b570      	push	{r4, r5, r6, lr}
   d45a8:	460c      	mov	r4, r1
   d45aa:	4615      	mov	r5, r2
   d45ac:	461e      	mov	r6, r3
	bool retval = (b != propervalue) && (b != alternatevalue);
   d45ae:	d001      	beq.n	d45b4 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x10>
   d45b0:	4299      	cmp	r1, r3
   d45b2:	d101      	bne.n	d45b8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x14>
   d45b4:	2000      	movs	r0, #0
   d45b6:	bd70      	pop	{r4, r5, r6, pc}
	if ((UseSerialDebug) && (retval))
   d45b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d45bc:	b353      	cbz	r3, d4614 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x70>
	{
		Serial.print("Response_Packet parsing error ");
   d45be:	f002 f8d1 	bl	d6764 <_Z16_fetch_usbserialv>
   d45c2:	4915      	ldr	r1, [pc, #84]	; (d4618 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x74>)
   d45c4:	f001 fea2 	bl	d630c <_ZN5Print5printEPKc>
		Serial.print(varname);
   d45c8:	f002 f8cc 	bl	d6764 <_Z16_fetch_usbserialv>
   d45cc:	9904      	ldr	r1, [sp, #16]
   d45ce:	f001 fe9d 	bl	d630c <_ZN5Print5printEPKc>
		Serial.print(" ");
   d45d2:	f002 f8c7 	bl	d6764 <_Z16_fetch_usbserialv>
   d45d6:	4911      	ldr	r1, [pc, #68]	; (d461c <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x78>)
   d45d8:	f001 fe98 	bl	d630c <_ZN5Print5printEPKc>
		Serial.print(propervalue, HEX);
   d45dc:	f002 f8c2 	bl	d6764 <_Z16_fetch_usbserialv>
   d45e0:	2210      	movs	r2, #16
   d45e2:	4629      	mov	r1, r5
   d45e4:	f001 fedc 	bl	d63a0 <_ZN5Print5printEhi>
		Serial.print(" || ");
   d45e8:	f002 f8bc 	bl	d6764 <_Z16_fetch_usbserialv>
   d45ec:	490c      	ldr	r1, [pc, #48]	; (d4620 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x7c>)
   d45ee:	f001 fe8d 	bl	d630c <_ZN5Print5printEPKc>
		Serial.print(alternatevalue, HEX);
   d45f2:	f002 f8b7 	bl	d6764 <_Z16_fetch_usbserialv>
   d45f6:	2210      	movs	r2, #16
   d45f8:	4631      	mov	r1, r6
   d45fa:	f001 fed1 	bl	d63a0 <_ZN5Print5printEhi>
		Serial.print(" != ");
   d45fe:	f002 f8b1 	bl	d6764 <_Z16_fetch_usbserialv>
   d4602:	4908      	ldr	r1, [pc, #32]	; (d4624 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x80>)
   d4604:	f001 fe82 	bl	d630c <_ZN5Print5printEPKc>
		Serial.println(b, HEX);
   d4608:	f002 f8ac 	bl	d6764 <_Z16_fetch_usbserialv>
   d460c:	2210      	movs	r2, #16
   d460e:	4621      	mov	r1, r4
   d4610:	f001 fec8 	bl	d63a4 <_ZN5Print7printlnEhi>
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4614:	2001      	movs	r0, #1
		Serial.print(alternatevalue, HEX);
		Serial.print(" != ");
		Serial.println(b, HEX);
	}
  return retval;
}
   d4616:	bd70      	pop	{r4, r5, r6, pc}
   d4618:	000d724a 	.word	0x000d724a
   d461c:	000d76e9 	.word	0x000d76e9
   d4620:	000d7269 	.word	0x000d7269
   d4624:	000d726e 	.word	0x000d726e

000d4628 <_ZN15Response_PacketC1EPhb>:

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d462a:	4b3a      	ldr	r3, [pc, #232]	; (d4714 <_ZN15Response_PacketC1EPhb+0xec>)

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d462c:	460c      	mov	r4, r1
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d462e:	7809      	ldrb	r1, [r1, #0]
   d4630:	9300      	str	r3, [sp, #0]
   d4632:	2355      	movs	r3, #85	; 0x55

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4634:	4616      	mov	r6, r2
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4636:	9201      	str	r2, [sp, #4]
   d4638:	461a      	mov	r2, r3

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d463a:	4605      	mov	r5, r0
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d463c:	f7ff ffb2 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[1], COMMAND_START_CODE_2, COMMAND_START_CODE_2, "COMMAND_START_CODE_2", UseSerialDebug);
   d4640:	4b35      	ldr	r3, [pc, #212]	; (d4718 <_ZN15Response_PacketC1EPhb+0xf0>)
   d4642:	7861      	ldrb	r1, [r4, #1]
   d4644:	9300      	str	r3, [sp, #0]
   d4646:	23aa      	movs	r3, #170	; 0xaa
   d4648:	461a      	mov	r2, r3
   d464a:	9601      	str	r6, [sp, #4]
   d464c:	4628      	mov	r0, r5
   d464e:	f7ff ffa9 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[2], COMMAND_DEVICE_ID_1, COMMAND_DEVICE_ID_1, "COMMAND_DEVICE_ID_1", UseSerialDebug);
   d4652:	4b32      	ldr	r3, [pc, #200]	; (d471c <_ZN15Response_PacketC1EPhb+0xf4>)
   d4654:	78a1      	ldrb	r1, [r4, #2]
   d4656:	9300      	str	r3, [sp, #0]
   d4658:	2301      	movs	r3, #1
   d465a:	461a      	mov	r2, r3
   d465c:	9601      	str	r6, [sp, #4]
   d465e:	4628      	mov	r0, r5
   d4660:	f7ff ffa0 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[3], COMMAND_DEVICE_ID_2, COMMAND_DEVICE_ID_2, "COMMAND_DEVICE_ID_2", UseSerialDebug);
   d4664:	4b2e      	ldr	r3, [pc, #184]	; (d4720 <_ZN15Response_PacketC1EPhb+0xf8>)
   d4666:	78e1      	ldrb	r1, [r4, #3]
   d4668:	9300      	str	r3, [sp, #0]
   d466a:	2300      	movs	r3, #0
   d466c:	461a      	mov	r2, r3
   d466e:	9601      	str	r6, [sp, #4]
   d4670:	4628      	mov	r0, r5
   d4672:	f7ff ff97 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[8], 0x30, 0x31, "AckNak_LOW", UseSerialDebug);
   d4676:	4b2b      	ldr	r3, [pc, #172]	; (d4724 <_ZN15Response_PacketC1EPhb+0xfc>)
   d4678:	7a21      	ldrb	r1, [r4, #8]
   d467a:	9300      	str	r3, [sp, #0]
   d467c:	2230      	movs	r2, #48	; 0x30
   d467e:	2331      	movs	r3, #49	; 0x31
   d4680:	9601      	str	r6, [sp, #4]
   d4682:	4628      	mov	r0, r5
   d4684:	f7ff ff8e 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	if (buffer[8] == 0x30) ACK = true; else ACK = false;
   d4688:	7a23      	ldrb	r3, [r4, #8]
   d468a:	2b30      	cmp	r3, #48	; 0x30
   d468c:	bf0c      	ite	eq
   d468e:	2301      	moveq	r3, #1
   d4690:	2300      	movne	r3, #0
   d4692:	752b      	strb	r3, [r5, #20]
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);
   d4694:	4b24      	ldr	r3, [pc, #144]	; (d4728 <_ZN15Response_PacketC1EPhb+0x100>)
   d4696:	7a61      	ldrb	r1, [r4, #9]
   d4698:	9300      	str	r3, [sp, #0]
   d469a:	2300      	movs	r3, #0
   d469c:	461a      	mov	r2, r3
   d469e:	9601      	str	r6, [sp, #4]
   d46a0:	4628      	mov	r0, r5
   d46a2:	f7ff ff7f 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	word checksum = CalculateChecksum(buffer, 10);
   d46a6:	4621      	mov	r1, r4
   d46a8:	220a      	movs	r2, #10
   d46aa:	4628      	mov	r0, r5
   d46ac:	f7ff ff6f 	bl	d458e <_ZN15Response_Packet17CalculateChecksumEPhi>
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d46b0:	4a1e      	ldr	r2, [pc, #120]	; (d472c <_ZN15Response_PacketC1EPhb+0x104>)
   d46b2:	7aa1      	ldrb	r1, [r4, #10]
   d46b4:	9200      	str	r2, [sp, #0]
}

// Returns the low byte from a word
byte Response_Packet::GetLowByte(word w)
{
	return (byte)w&0x00FF;
   d46b6:	b2c3      	uxtb	r3, r0
}

// Returns the high byte from a word
byte Response_Packet::GetHighByte(word w)
{
	return (byte)(w>>8)&0x00FF;
   d46b8:	f3c0 2707 	ubfx	r7, r0, #8, #8
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);

	word checksum = CalculateChecksum(buffer, 10);
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d46bc:	461a      	mov	r2, r3
   d46be:	9601      	str	r6, [sp, #4]
   d46c0:	4628      	mov	r0, r5
   d46c2:	f7ff ff6f 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[11], checksum_high, checksum_high, "Checksum_HIGH", UseSerialDebug);
   d46c6:	4b1a      	ldr	r3, [pc, #104]	; (d4730 <_ZN15Response_PacketC1EPhb+0x108>)
   d46c8:	7ae1      	ldrb	r1, [r4, #11]
   d46ca:	9300      	str	r3, [sp, #0]
   d46cc:	463a      	mov	r2, r7
   d46ce:	463b      	mov	r3, r7
   d46d0:	9601      	str	r6, [sp, #4]
   d46d2:	4628      	mov	r0, r5
   d46d4:	f7ff ff66 	bl	d45a4 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	Error = ErrorCodes::ParseFromBytes(buffer[5], buffer[4]);
   d46d8:	7921      	ldrb	r1, [r4, #4]
   d46da:	7960      	ldrb	r0, [r4, #5]
   d46dc:	f7ff ff40 	bl	d4560 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
   d46e0:	8028      	strh	r0, [r5, #0]

	ParameterBytes[0] = buffer[4];
   d46e2:	7923      	ldrb	r3, [r4, #4]
   d46e4:	73ab      	strb	r3, [r5, #14]
	ParameterBytes[1] = buffer[5];
   d46e6:	7963      	ldrb	r3, [r4, #5]
   d46e8:	73eb      	strb	r3, [r5, #15]
	ParameterBytes[2] = buffer[6];
   d46ea:	79a3      	ldrb	r3, [r4, #6]
   d46ec:	742b      	strb	r3, [r5, #16]
	ParameterBytes[3] = buffer[7];
   d46ee:	79e3      	ldrb	r3, [r4, #7]
   d46f0:	746b      	strb	r3, [r5, #17]
	ResponseBytes[0]=buffer[8];
   d46f2:	7a23      	ldrb	r3, [r4, #8]
   d46f4:	74ab      	strb	r3, [r5, #18]
	ResponseBytes[1]=buffer[9];
   d46f6:	7a63      	ldrb	r3, [r4, #9]
   d46f8:	74eb      	strb	r3, [r5, #19]
   d46fa:	3c01      	subs	r4, #1
   d46fc:	1c6b      	adds	r3, r5, #1
   d46fe:	f105 020d 	add.w	r2, r5, #13
	for (int i=0; i < 12; i++)
	{
		RawBytes[i]=buffer[i];
   d4702:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d4706:	f803 1f01 	strb.w	r1, [r3, #1]!
	ParameterBytes[1] = buffer[5];
	ParameterBytes[2] = buffer[6];
	ParameterBytes[3] = buffer[7];
	ResponseBytes[0]=buffer[8];
	ResponseBytes[1]=buffer[9];
	for (int i=0; i < 12; i++)
   d470a:	4293      	cmp	r3, r2
   d470c:	d1f9      	bne.n	d4702 <_ZN15Response_PacketC1EPhb+0xda>
	{
		RawBytes[i]=buffer[i];
	}
}
   d470e:	4628      	mov	r0, r5
   d4710:	b003      	add	sp, #12
   d4712:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4714:	000d7273 	.word	0x000d7273
   d4718:	000d7288 	.word	0x000d7288
   d471c:	000d729d 	.word	0x000d729d
   d4720:	000d72b1 	.word	0x000d72b1
   d4724:	000d72c5 	.word	0x000d72c5
   d4728:	000d72d0 	.word	0x000d72d0
   d472c:	000d72dc 	.word	0x000d72dc
   d4730:	000d72e9 	.word	0x000d72e9

000d4734 <_ZN11FPS_GT511C3C1Ev>:
#ifndef __GNUC__
#pragma region -= Constructor/Destructor =-
#endif  //__GNUC__
// Creates a new object to interface with the fingerprint scanner
//FPS_GT511C3::FPS_GT511C3(uint8_t rx, uint8_t tx)
FPS_GT511C3::FPS_GT511C3()	// Serial pins pre-defined
   d4734:	b510      	push	{r4, lr}
   d4736:	4604      	mov	r4, r0
	//pin_RX = rx;
	//pin_TX = tx;
	//pin_RX = 14;
	//pin_TX = 15;
	//_serial.begin(9600);
	Serial1.begin(9600);
   d4738:	f002 f8ca 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d473c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4740:	f002 f8bc 	bl	d68bc <_ZN11USARTSerial5beginEm>
	this->UseSerialDebug = false;
   d4744:	2300      	movs	r3, #0
   d4746:	7023      	strb	r3, [r4, #0]
};
   d4748:	4620      	mov	r0, r4
   d474a:	bd10      	pop	{r4, pc}

000d474c <_ZN11FPS_GT511C3D1Ev>:

// destructor
FPS_GT511C3::~FPS_GT511C3()
   d474c:	b510      	push	{r4, lr}
   d474e:	4604      	mov	r4, r0
{
	//_serial.~SoftwareSerial();
	Serial1.~USARTSerial();
   d4750:	f002 f8be 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d4754:	6803      	ldr	r3, [r0, #0]
   d4756:	681b      	ldr	r3, [r3, #0]
   d4758:	4798      	blx	r3
	Serial1.end();
   d475a:	f002 f8b9 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d475e:	f002 f8b0 	bl	d68c2 <_ZN11USARTSerial3endEv>
}
   d4762:	4620      	mov	r0, r4
   d4764:	bd10      	pop	{r4, pc}
	...

000d4768 <_ZN11FPS_GT511C314serialPrintHexEh>:
  Serial.print("\"");
}

// sends a byte to the serial debugger in the hex format we want EX "0F"
void FPS_GT511C3::serialPrintHex(byte data)
{
   d4768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char tmp[16];
  sprintf(tmp, "%.2X",data);
   d476a:	460a      	mov	r2, r1
   d476c:	4668      	mov	r0, sp
   d476e:	4905      	ldr	r1, [pc, #20]	; (d4784 <_ZN11FPS_GT511C314serialPrintHexEh+0x1c>)
   d4770:	f000 fc64 	bl	d503c <sprintf>
  Serial.print(tmp);
   d4774:	f001 fff6 	bl	d6764 <_Z16_fetch_usbserialv>
   d4778:	4669      	mov	r1, sp
   d477a:	f001 fdc7 	bl	d630c <_ZN5Print5printEPKc>
}
   d477e:	b005      	add	sp, #20
   d4780:	f85d fb04 	ldr.w	pc, [sp], #4
   d4784:	000d72f7 	.word	0x000d72f7

000d4788 <_ZN11FPS_GT511C312SendToSerialEPhi>:
	return rp;
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
   d4788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d478a:	460d      	mov	r5, r1
   d478c:	4617      	mov	r7, r2
   d478e:	4606      	mov	r6, r0
  boolean first=true;
  Serial.print("\"");
   d4790:	f001 ffe8 	bl	d6764 <_Z16_fetch_usbserialv>
   d4794:	490d      	ldr	r1, [pc, #52]	; (d47cc <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
   d4796:	f001 fdb9 	bl	d630c <_ZN5Print5printEPKc>
   d479a:	462c      	mov	r4, r5
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
   d479c:	2301      	movs	r3, #1
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d479e:	1b62      	subs	r2, r4, r5
   d47a0:	4297      	cmp	r7, r2
   d47a2:	dd0c      	ble.n	d47be <_ZN11FPS_GT511C312SendToSerialEPhi+0x36>
  {
	if (first) first=false; else Serial.print(" ");
   d47a4:	b923      	cbnz	r3, d47b0 <_ZN11FPS_GT511C312SendToSerialEPhi+0x28>
   d47a6:	f001 ffdd 	bl	d6764 <_Z16_fetch_usbserialv>
   d47aa:	4909      	ldr	r1, [pc, #36]	; (d47d0 <_ZN11FPS_GT511C312SendToSerialEPhi+0x48>)
   d47ac:	f001 fdae 	bl	d630c <_ZN5Print5printEPKc>
	serialPrintHex(data[i]);
   d47b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   d47b4:	4630      	mov	r0, r6
   d47b6:	f7ff ffd7 	bl	d4768 <_ZN11FPS_GT511C314serialPrintHexEh>
   d47ba:	2300      	movs	r3, #0
// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d47bc:	e7ef      	b.n	d479e <_ZN11FPS_GT511C312SendToSerialEPhi+0x16>
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d47be:	f001 ffd1 	bl	d6764 <_Z16_fetch_usbserialv>
   d47c2:	4902      	ldr	r1, [pc, #8]	; (d47cc <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
}
   d47c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for(int i=0; i<length; i++)
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d47c8:	f001 bda0 	b.w	d630c <_ZN5Print5printEPKc>
   d47cc:	000d72fc 	.word	0x000d72fc
   d47d0:	000d76e9 	.word	0x000d76e9

000d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>:
#ifndef __GNUC__
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT511C3::SendCommand(byte cmd[], int length)
{
   d47d4:	b570      	push	{r4, r5, r6, lr}
   d47d6:	4604      	mov	r4, r0
   d47d8:	460d      	mov	r5, r1
   d47da:	4616      	mov	r6, r2
	//_serial.write(cmd, length);
	Serial1.write(cmd, length);
   d47dc:	f002 f878 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d47e0:	6803      	ldr	r3, [r0, #0]
   d47e2:	4632      	mov	r2, r6
   d47e4:	68db      	ldr	r3, [r3, #12]
   d47e6:	4629      	mov	r1, r5
   d47e8:	4798      	blx	r3
	if (UseSerialDebug)
   d47ea:	7823      	ldrb	r3, [r4, #0]
   d47ec:	b17b      	cbz	r3, d480e <_ZN11FPS_GT511C311SendCommandEPhi+0x3a>
	{
		Serial.print("FPS - SEND: ");
   d47ee:	f001 ffb9 	bl	d6764 <_Z16_fetch_usbserialv>
   d47f2:	4907      	ldr	r1, [pc, #28]	; (d4810 <_ZN11FPS_GT511C311SendCommandEPhi+0x3c>)
   d47f4:	f001 fd8a 	bl	d630c <_ZN5Print5printEPKc>
		SendToSerial(cmd, length);
   d47f8:	4632      	mov	r2, r6
   d47fa:	4629      	mov	r1, r5
   d47fc:	4620      	mov	r0, r4
   d47fe:	f7ff ffc3 	bl	d4788 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d4802:	f001 ffaf 	bl	d6764 <_Z16_fetch_usbserialv>
	}
};
   d4806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial1.write(cmd, length);
	if (UseSerialDebug)
	{
		Serial.print("FPS - SEND: ");
		SendToSerial(cmd, length);
		Serial.println();
   d480a:	f001 bd86 	b.w	d631a <_ZN5Print7printlnEv>
   d480e:	bd70      	pop	{r4, r5, r6, pc}
   d4810:	000d72fe 	.word	0x000d72fe

000d4814 <_ZN11FPS_GT511C311GetResponseEv>:
	}
};

// Gets the response to the command from the software serial channel (and waits for it)
Response_Packet* FPS_GT511C3::GetResponse()
{
   d4814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4816:	4605      	mov	r5, r0
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
	{
		//firstbyte = (byte)_serial.read();
		firstbyte = (byte)Serial1.read();
   d4818:	f002 f85a 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d481c:	6803      	ldr	r3, [r0, #0]
   d481e:	695b      	ldr	r3, [r3, #20]
   d4820:	4798      	blx	r3
{
	byte firstbyte = 0;
	bool done = false;
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
   d4822:	b2c6      	uxtb	r6, r0
   d4824:	2e55      	cmp	r6, #85	; 0x55
   d4826:	d1f7      	bne.n	d4818 <_ZN11FPS_GT511C311GetResponseEv+0x4>
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4828:	200c      	movs	r0, #12
   d482a:	f7ff fc36 	bl	d409a <_Znaj>
	resp[0] = firstbyte;
   d482e:	7006      	strb	r6, [r0, #0]
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4830:	4604      	mov	r4, r0
   d4832:	4606      	mov	r6, r0
   d4834:	f100 070b 	add.w	r7, r0, #11
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
	{
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
   d4838:	f002 f84a 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d483c:	6803      	ldr	r3, [r0, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	4798      	blx	r3
   d4842:	b918      	cbnz	r0, d484c <_ZN11FPS_GT511C311GetResponseEv+0x38>
   d4844:	200a      	movs	r0, #10
   d4846:	f001 fdf5 	bl	d6434 <delay>
   d484a:	e7f5      	b.n	d4838 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		resp[i]= (byte) Serial1.read();
   d484c:	f002 f840 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d4850:	6803      	ldr	r3, [r0, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	4798      	blx	r3
   d4856:	f806 0f01 	strb.w	r0, [r6, #1]!
			done = true;
		}
	}
	byte* resp = new byte[12];
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
   d485a:	42b7      	cmp	r7, r6
   d485c:	d1ec      	bne.n	d4838 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
		resp[i]= (byte) Serial1.read();
	}
	Response_Packet* rp = new Response_Packet(resp, UseSerialDebug);
   d485e:	2016      	movs	r0, #22
   d4860:	f7ff fc19 	bl	d4096 <_Znwj>
   d4864:	4606      	mov	r6, r0
   d4866:	b118      	cbz	r0, d4870 <_ZN11FPS_GT511C311GetResponseEv+0x5c>
   d4868:	782a      	ldrb	r2, [r5, #0]
   d486a:	4621      	mov	r1, r4
   d486c:	f7ff fedc 	bl	d4628 <_ZN15Response_PacketC1EPhb>
	delete resp;
   d4870:	2101      	movs	r1, #1
   d4872:	4620      	mov	r0, r4
   d4874:	f002 fa93 	bl	d6d9e <_ZdlPvj>
	if (UseSerialDebug)
   d4878:	782b      	ldrb	r3, [r5, #0]
   d487a:	b18b      	cbz	r3, d48a0 <_ZN11FPS_GT511C311GetResponseEv+0x8c>
	{
		Serial.print("FPS - RECV: ");
   d487c:	f001 ff72 	bl	d6764 <_Z16_fetch_usbserialv>
   d4880:	4908      	ldr	r1, [pc, #32]	; (d48a4 <_ZN11FPS_GT511C311GetResponseEv+0x90>)
   d4882:	f001 fd43 	bl	d630c <_ZN5Print5printEPKc>
		SendToSerial(rp->RawBytes, 12);
   d4886:	220c      	movs	r2, #12
   d4888:	1cb1      	adds	r1, r6, #2
   d488a:	4628      	mov	r0, r5
   d488c:	f7ff ff7c 	bl	d4788 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d4890:	f001 ff68 	bl	d6764 <_Z16_fetch_usbserialv>
   d4894:	f001 fd41 	bl	d631a <_ZN5Print7printlnEv>
		Serial.println();
   d4898:	f001 ff64 	bl	d6764 <_Z16_fetch_usbserialv>
   d489c:	f001 fd3d 	bl	d631a <_ZN5Print7printlnEv>
	}
	return rp;
};
   d48a0:	4630      	mov	r0, r6
   d48a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48a4:	000d730b 	.word	0x000d730b

000d48a8 <_ZN11FPS_GT511C34OpenEv>:
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d48a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UseSerialDebug) Serial.println("FPS - Open");
   d48aa:	7803      	ldrb	r3, [r0, #0]
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d48ac:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - Open");
   d48ae:	b123      	cbz	r3, d48ba <_ZN11FPS_GT511C34OpenEv+0x12>
   d48b0:	f001 ff58 	bl	d6764 <_Z16_fetch_usbserialv>
   d48b4:	4912      	ldr	r1, [pc, #72]	; (d4900 <_ZN11FPS_GT511C34OpenEv+0x58>)
   d48b6:	f001 fd3c 	bl	d6332 <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d48ba:	2007      	movs	r0, #7
   d48bc:	f7ff fbeb 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Open;
   d48c0:	2701      	movs	r7, #1
	cp->Parameter[0] = 0x00;
   d48c2:	2300      	movs	r3, #0
   d48c4:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d48c6:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d48c8:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d48ca:	7103      	strb	r3, [r0, #4]
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Open;
   d48cc:	7007      	strb	r7, [r0, #0]
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
   d48ce:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d48d0:	f7ff fe22 	bl	d4518 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d48d4:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d48d6:	4606      	mov	r6, r0
	delete cp;
   d48d8:	4620      	mov	r0, r4
   d48da:	f002 fa60 	bl	d6d9e <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d48de:	4631      	mov	r1, r6
   d48e0:	220c      	movs	r2, #12
   d48e2:	4628      	mov	r0, r5
   d48e4:	f7ff ff76 	bl	d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d48e8:	4628      	mov	r0, r5
   d48ea:	f7ff ff93 	bl	d4814 <_ZN11FPS_GT511C311GetResponseEv>
	delete rp;
   d48ee:	2116      	movs	r1, #22
   d48f0:	f002 fa55 	bl	d6d9e <_ZdlPvj>
	delete packetbytes;
   d48f4:	4639      	mov	r1, r7
   d48f6:	4630      	mov	r0, r6
}
   d48f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	delete rp;
	delete packetbytes;
   d48fc:	f002 ba4f 	b.w	d6d9e <_ZdlPvj>
   d4900:	000d7318 	.word	0x000d7318

000d4904 <_ZN11FPS_GT511C36SetLEDEb>:

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d4904:	b570      	push	{r4, r5, r6, lr}
   d4906:	4605      	mov	r5, r0
	Command_Packet* cp = new Command_Packet();
   d4908:	2007      	movs	r0, #7

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d490a:	460e      	mov	r6, r1
	Command_Packet* cp = new Command_Packet();
   d490c:	f7ff fbc3 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CmosLed;
   d4910:	2312      	movs	r3, #18
   d4912:	7003      	strb	r3, [r0, #0]
// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
	Command_Packet* cp = new Command_Packet();
   d4914:	4604      	mov	r4, r0
   d4916:	782b      	ldrb	r3, [r5, #0]
	cp->Command = Command_Packet::Commands::CmosLed;
	if (on)
   d4918:	b13e      	cbz	r6, d492a <_ZN11FPS_GT511C36SetLEDEb+0x26>
	{
		if (UseSerialDebug) Serial.println("FPS - LED on");
   d491a:	b123      	cbz	r3, d4926 <_ZN11FPS_GT511C36SetLEDEb+0x22>
   d491c:	f001 ff22 	bl	d6764 <_Z16_fetch_usbserialv>
   d4920:	4915      	ldr	r1, [pc, #84]	; (d4978 <_ZN11FPS_GT511C36SetLEDEb+0x74>)
   d4922:	f001 fd06 	bl	d6332 <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x01;
   d4926:	2301      	movs	r3, #1
   d4928:	e006      	b.n	d4938 <_ZN11FPS_GT511C36SetLEDEb+0x34>
	}
	else
	{
		if (UseSerialDebug) Serial.println("FPS - LED off");
   d492a:	b123      	cbz	r3, d4936 <_ZN11FPS_GT511C36SetLEDEb+0x32>
   d492c:	f001 ff1a 	bl	d6764 <_Z16_fetch_usbserialv>
   d4930:	4912      	ldr	r1, [pc, #72]	; (d497c <_ZN11FPS_GT511C36SetLEDEb+0x78>)
   d4932:	f001 fcfe 	bl	d6332 <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x00;
   d4936:	2300      	movs	r3, #0
   d4938:	7063      	strb	r3, [r4, #1]
	}
	cp->Parameter[1] = 0x00;
   d493a:	2300      	movs	r3, #0
   d493c:	70a3      	strb	r3, [r4, #2]
	cp->Parameter[2] = 0x00;
   d493e:	70e3      	strb	r3, [r4, #3]
	cp->Parameter[3] = 0x00;
   d4940:	7123      	strb	r3, [r4, #4]
	byte* packetbytes = cp->GetPacketBytes();
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff fde8 	bl	d4518 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4948:	2107      	movs	r1, #7
		cp->Parameter[0] = 0x00;
	}
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d494a:	4606      	mov	r6, r0
	delete cp;
   d494c:	4620      	mov	r0, r4
   d494e:	f002 fa26 	bl	d6d9e <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4952:	220c      	movs	r2, #12
   d4954:	4631      	mov	r1, r6
   d4956:	4628      	mov	r0, r5
   d4958:	f7ff ff3c 	bl	d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d495c:	4628      	mov	r0, r5
   d495e:	f7ff ff59 	bl	d4814 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = true;
	if (rp->ACK == false) retval = false;
	delete rp;
   d4962:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = true;
	if (rp->ACK == false) retval = false;
   d4964:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4966:	f002 fa1a 	bl	d6d9e <_ZdlPvj>
	delete packetbytes;
   d496a:	4630      	mov	r0, r6
   d496c:	2101      	movs	r1, #1
   d496e:	f002 fa16 	bl	d6d9e <_ZdlPvj>
	return retval;
};
   d4972:	4620      	mov	r0, r4
   d4974:	bd70      	pop	{r4, r5, r6, pc}
   d4976:	bf00      	nop
   d4978:	000d732f 	.word	0x000d732f
   d497c:	000d733c 	.word	0x000d733c

000d4980 <_ZN11FPS_GT511C313IsPressFingerEv>:
}

// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT511C3::IsPressFinger()
{
   d4980:	b570      	push	{r4, r5, r6, lr}
   d4982:	4605      	mov	r5, r0
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d4984:	2007      	movs	r0, #7
   d4986:	f7ff fb86 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::IsPressFinger;
   d498a:	2326      	movs	r3, #38	; 0x26
   d498c:	7003      	strb	r3, [r0, #0]
// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT511C3::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d498e:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4990:	f7ff fdc2 	bl	d4518 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4994:	2107      	movs	r1, #7
bool FPS_GT511C3::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4996:	4604      	mov	r4, r0
	delete cp;
   d4998:	4630      	mov	r0, r6
   d499a:	f002 fa00 	bl	d6d9e <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d499e:	4628      	mov	r0, r5
   d49a0:	4621      	mov	r1, r4
   d49a2:	220c      	movs	r2, #12
   d49a4:	f7ff ff16 	bl	d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d49a8:	4628      	mov	r0, r5
   d49aa:	f7ff ff33 	bl	d4814 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d49ae:	7bc1      	ldrb	r1, [r0, #15]
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
   d49b0:	7b83      	ldrb	r3, [r0, #14]
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d49b2:	7c42      	ldrb	r2, [r0, #17]
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d49b4:	440b      	add	r3, r1
	pval += rp->ParameterBytes[2];
   d49b6:	7c01      	ldrb	r1, [r0, #16]
   d49b8:	440b      	add	r3, r1
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d49ba:	42da      	cmn	r2, r3
	delete rp;
   d49bc:	f04f 0116 	mov.w	r1, #22
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d49c0:	bf0c      	ite	eq
   d49c2:	2501      	moveq	r5, #1
   d49c4:	2500      	movne	r5, #0
	delete rp;
   d49c6:	f002 f9ea 	bl	d6d9e <_ZdlPvj>
	delete packetbytes;
   d49ca:	4620      	mov	r0, r4
   d49cc:	2101      	movs	r1, #1
   d49ce:	f002 f9e6 	bl	d6d9e <_ZdlPvj>
	return retval;
}
   d49d2:	4628      	mov	r0, r5
   d49d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d49d8 <_ZN11FPS_GT511C311Identify1_NEv>:
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
   d49d8:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d49da:	7803      	ldrb	r3, [r0, #0]
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
   d49dc:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d49de:	b123      	cbz	r3, d49ea <_ZN11FPS_GT511C311Identify1_NEv+0x12>
   d49e0:	f001 fec0 	bl	d6764 <_Z16_fetch_usbserialv>
   d49e4:	4914      	ldr	r1, [pc, #80]	; (d4a38 <_ZN11FPS_GT511C311Identify1_NEv+0x60>)
   d49e6:	f001 fca4 	bl	d6332 <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d49ea:	2007      	movs	r0, #7
   d49ec:	f7ff fb53 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Identify1_N;
   d49f0:	2351      	movs	r3, #81	; 0x51
   d49f2:	7003      	strb	r3, [r0, #0]
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT511C3::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
   d49f4:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d49f6:	f7ff fd8f 	bl	d4518 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d49fa:	2107      	movs	r1, #7
int FPS_GT511C3::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d49fc:	4605      	mov	r5, r0
	delete cp;
   d49fe:	4630      	mov	r0, r6
   d4a00:	f002 f9cd 	bl	d6d9e <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4a04:	220c      	movs	r2, #12
   d4a06:	4629      	mov	r1, r5
   d4a08:	4620      	mov	r0, r4
   d4a0a:	f7ff fee3 	bl	d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4a0e:	4620      	mov	r0, r4
   d4a10:	f7ff ff00 	bl	d4814 <_ZN11FPS_GT511C311GetResponseEv>
   d4a14:	4606      	mov	r6, r0
	int retval = rp->IntFromParameter();
   d4a16:	f7ff fdaf 	bl	d4578 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4a1a:	2116      	movs	r1, #22
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
   d4a1c:	4604      	mov	r4, r0
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4a1e:	4630      	mov	r0, r6
   d4a20:	f002 f9bd 	bl	d6d9e <_ZdlPvj>
	delete packetbytes;
   d4a24:	4628      	mov	r0, r5
   d4a26:	2101      	movs	r1, #1
   d4a28:	f002 f9b9 	bl	d6d9e <_ZdlPvj>
	return retval;
}
   d4a2c:	2cc8      	cmp	r4, #200	; 0xc8
   d4a2e:	4620      	mov	r0, r4
   d4a30:	bfa8      	it	ge
   d4a32:	20c8      	movge	r0, #200	; 0xc8
   d4a34:	bd70      	pop	{r4, r5, r6, pc}
   d4a36:	bf00      	nop
   d4a38:	000d73f5 	.word	0x000d73f5

000d4a3c <_ZN11FPS_GT511C313CaptureFingerEb>:
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
   d4a3c:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4a3e:	7803      	ldrb	r3, [r0, #0]
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
   d4a40:	4606      	mov	r6, r0
   d4a42:	460d      	mov	r5, r1
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4a44:	b123      	cbz	r3, d4a50 <_ZN11FPS_GT511C313CaptureFingerEb+0x14>
   d4a46:	f001 fe8d 	bl	d6764 <_Z16_fetch_usbserialv>
   d4a4a:	4917      	ldr	r1, [pc, #92]	; (d4aa8 <_ZN11FPS_GT511C313CaptureFingerEb+0x6c>)
   d4a4c:	f001 fc71 	bl	d6332 <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4a50:	2007      	movs	r0, #7
   d4a52:	f7ff fb20 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4a56:	2360      	movs	r3, #96	; 0x60
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT511C3::CaptureFinger(bool highquality)
{
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
	Command_Packet* cp = new Command_Packet();
   d4a58:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4a5a:	7003      	strb	r3, [r0, #0]
	if (highquality)
   d4a5c:	b135      	cbz	r5, d4a6c <_ZN11FPS_GT511C313CaptureFingerEb+0x30>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4a5e:	2301      	movs	r3, #1
   d4a60:	7043      	strb	r3, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4a62:	2300      	movs	r3, #0
   d4a64:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4a66:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4a68:	7103      	strb	r3, [r0, #4]
   d4a6a:	e003      	b.n	d4a74 <_ZN11FPS_GT511C313CaptureFingerEb+0x38>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4a6c:	7045      	strb	r5, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4a6e:	7085      	strb	r5, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4a70:	70c5      	strb	r5, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4a72:	7105      	strb	r5, [r0, #4]
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4a74:	4620      	mov	r0, r4
   d4a76:	f7ff fd4f 	bl	d4518 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4a7a:	2107      	movs	r1, #7
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4a7c:	4605      	mov	r5, r0
	delete cp;
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f002 f98d 	bl	d6d9e <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4a84:	220c      	movs	r2, #12
   d4a86:	4629      	mov	r1, r5
   d4a88:	4630      	mov	r0, r6
   d4a8a:	f7ff fea3 	bl	d47d4 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4a8e:	4630      	mov	r0, r6
   d4a90:	f7ff fec0 	bl	d4814 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = rp->ACK;
	delete rp;
   d4a94:	2116      	movs	r1, #22
	}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = rp->ACK;
   d4a96:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4a98:	f002 f981 	bl	d6d9e <_ZdlPvj>
	delete packetbytes;
   d4a9c:	4628      	mov	r0, r5
   d4a9e:	2101      	movs	r1, #1
   d4aa0:	f002 f97d 	bl	d6d9e <_ZdlPvj>
	return retval;

}
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	bd70      	pop	{r4, r5, r6, pc}
   d4aa8:	000d7407 	.word	0x000d7407

000d4aac <_GLOBAL__sub_I__ZN14Command_Packet14GetPacketBytesEv>:
   d4aac:	f000 b810 	b.w	d4ad0 <HAL_Pin_Map>

000d4ab0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <netdb_freeaddrinfo+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	689b      	ldr	r3, [r3, #8]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030268 	.word	0x00030268

000d4ac0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <netdb_getaddrinfo+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	68db      	ldr	r3, [r3, #12]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030268 	.word	0x00030268

000d4ad0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_Pin_Map+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	681b      	ldr	r3, [r3, #0]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003022c 	.word	0x0003022c

000d4ae0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_Validate_Pin_Function+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003022c 	.word	0x0003022c

000d4af0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_Pin_Mode+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003022c 	.word	0x0003022c

000d4b00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_Get_Pin_Mode+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	68db      	ldr	r3, [r3, #12]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003022c 	.word	0x0003022c

000d4b10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_GPIO_Write+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	691b      	ldr	r3, [r3, #16]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003022c 	.word	0x0003022c

000d4b20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_GPIO_Read+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	695b      	ldr	r3, [r3, #20]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003022c 	.word	0x0003022c

000d4b30 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_SPI_Init+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	69db      	ldr	r3, [r3, #28]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030230 	.word	0x00030230

000d4b40 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_SPI_Is_Enabled+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6a1b      	ldr	r3, [r3, #32]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030230 	.word	0x00030230

000d4b50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <HAL_RNG_GetRandomNumber+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	685b      	ldr	r3, [r3, #4]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030218 	.word	0x00030218

000d4b60 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <HAL_Delay_Microseconds+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	68db      	ldr	r3, [r3, #12]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030218 	.word	0x00030218

000d4b70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	695b      	ldr	r3, [r3, #20]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030218 	.word	0x00030218

000d4b80 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <hal_ble_stack_init+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	689b      	ldr	r3, [r3, #8]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030274 	.word	0x00030274

000d4b90 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <hal_ble_gap_set_advertising_data+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030274 	.word	0x00030274

000d4ba0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <hal_ble_gap_set_scan_response_data+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030274 	.word	0x00030274

000d4bb0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <hal_ble_gap_start_advertising+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030274 	.word	0x00030274

000d4bc0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b03      	ldr	r3, [pc, #12]	; (d4bd0 <hal_ble_gap_disconnect+0x10>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4bca:	9301      	str	r3, [sp, #4]
   d4bcc:	bd08      	pop	{r3, pc}
   d4bce:	0000      	.short	0x0000
   d4bd0:	00030274 	.word	0x00030274

000d4bd4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b03      	ldr	r3, [pc, #12]	; (d4be4 <hal_ble_gatt_server_add_service+0x10>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4bde:	9301      	str	r3, [sp, #4]
   d4be0:	bd08      	pop	{r3, pc}
   d4be2:	0000      	.short	0x0000
   d4be4:	00030274 	.word	0x00030274

000d4be8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b03      	ldr	r3, [pc, #12]	; (d4bf8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4bf2:	9301      	str	r3, [sp, #4]
   d4bf4:	bd08      	pop	{r3, pc}
   d4bf6:	0000      	.short	0x0000
   d4bf8:	00030274 	.word	0x00030274

000d4bfc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b03      	ldr	r3, [pc, #12]	; (d4c0c <hal_ble_gatt_client_write_with_response+0x10>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4c06:	9301      	str	r3, [sp, #4]
   d4c08:	bd08      	pop	{r3, pc}
   d4c0a:	0000      	.short	0x0000
   d4c0c:	00030274 	.word	0x00030274

000d4c10 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b03      	ldr	r3, [pc, #12]	; (d4c20 <hal_ble_gatt_client_write_without_response+0x10>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4c1a:	9301      	str	r3, [sp, #4]
   d4c1c:	bd08      	pop	{r3, pc}
   d4c1e:	0000      	.short	0x0000
   d4c20:	00030274 	.word	0x00030274

000d4c24 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b03      	ldr	r3, [pc, #12]	; (d4c34 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4c2e:	9301      	str	r3, [sp, #4]
   d4c30:	bd08      	pop	{r3, pc}
   d4c32:	0000      	.short	0x0000
   d4c34:	00030274 	.word	0x00030274

000d4c38 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b03      	ldr	r3, [pc, #12]	; (d4c48 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4c42:	9301      	str	r3, [sp, #4]
   d4c44:	bd08      	pop	{r3, pc}
   d4c46:	0000      	.short	0x0000
   d4c48:	00030274 	.word	0x00030274

000d4c4c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b03      	ldr	r3, [pc, #12]	; (d4c5c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4c56:	9301      	str	r3, [sp, #4]
   d4c58:	bd08      	pop	{r3, pc}
   d4c5a:	0000      	.short	0x0000
   d4c5c:	00030274 	.word	0x00030274

000d4c60 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b03      	ldr	r3, [pc, #12]	; (d4c70 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4c6a:	9301      	str	r3, [sp, #4]
   d4c6c:	bd08      	pop	{r3, pc}
   d4c6e:	0000      	.short	0x0000
   d4c70:	00030274 	.word	0x00030274

000d4c74 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <os_thread_is_current+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	689b      	ldr	r3, [r3, #8]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030248 	.word	0x00030248

000d4c84 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <os_thread_join+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	691b      	ldr	r3, [r3, #16]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030248 	.word	0x00030248

000d4c94 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <os_thread_cleanup+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	695b      	ldr	r3, [r3, #20]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030248 	.word	0x00030248

000d4ca4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <os_mutex_create+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030248 	.word	0x00030248

000d4cb4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <os_mutex_recursive_create+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030248 	.word	0x00030248

000d4cc4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <os_mutex_recursive_lock+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030248 	.word	0x00030248

000d4cd4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <os_mutex_recursive_unlock+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030248 	.word	0x00030248

000d4ce4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <inet_inet_ntop+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	695b      	ldr	r3, [r3, #20]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030264 	.word	0x00030264

000d4cf4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_USART_Init+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	681b      	ldr	r3, [r3, #0]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003023c 	.word	0x0003023c

000d4d04 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_USART_End+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	689b      	ldr	r3, [r3, #8]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003023c 	.word	0x0003023c

000d4d14 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_USART_Write_Data+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	68db      	ldr	r3, [r3, #12]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003023c 	.word	0x0003023c

000d4d24 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_USART_Available_Data+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	691b      	ldr	r3, [r3, #16]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003023c 	.word	0x0003023c

000d4d34 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_USART_Read_Data+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003023c 	.word	0x0003023c

000d4d44 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_USART_Peek_Data+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	699b      	ldr	r3, [r3, #24]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003023c 	.word	0x0003023c

000d4d54 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_USART_Flush_Data+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	69db      	ldr	r3, [r3, #28]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003023c 	.word	0x0003023c

000d4d64 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USART_Is_Enabled+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6a1b      	ldr	r3, [r3, #32]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USART_Available_Data_For_Write+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USART_BeginConfig+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_I2C_Write_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6a1b      	ldr	r3, [r3, #32]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030228 	.word	0x00030228

000d4da4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_I2C_Available_Data+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030228 	.word	0x00030228

000d4db4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_I2C_Read_Data+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030228 	.word	0x00030228

000d4dc4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_I2C_Peek_Data+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030228 	.word	0x00030228

000d4dd4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_I2C_Flush_Data+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030228 	.word	0x00030228

000d4de4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_I2C_Is_Enabled+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030228 	.word	0x00030228

000d4df4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_I2C_Init+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030228 	.word	0x00030228

000d4e04 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_Tone_Start+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	681b      	ldr	r3, [r3, #0]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030224 	.word	0x00030224

000d4e14 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_Tone_Stop+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	685b      	ldr	r3, [r3, #4]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030224 	.word	0x00030224

000d4e24 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_USB_USART_Init+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	681b      	ldr	r3, [r3, #0]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003024c 	.word	0x0003024c

000d4e34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_USB_USART_Begin+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	685b      	ldr	r3, [r3, #4]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003024c 	.word	0x0003024c

000d4e44 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_USB_USART_Available_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	691b      	ldr	r3, [r3, #16]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003024c 	.word	0x0003024c

000d4e54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	695b      	ldr	r3, [r3, #20]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003024c 	.word	0x0003024c

000d4e64 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_USB_USART_Receive_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	699b      	ldr	r3, [r3, #24]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003024c 	.word	0x0003024c

000d4e74 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_USB_USART_Send_Data+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	69db      	ldr	r3, [r3, #28]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003024c 	.word	0x0003024c

000d4e84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_USB_USART_Flush_Data+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a1b      	ldr	r3, [r3, #32]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003024c 	.word	0x0003024c

000d4e94 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <LED_SetSignalingColor+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	685b      	ldr	r3, [r3, #4]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030260 	.word	0x00030260

000d4ea4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <LED_Signaling_Start+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030260 	.word	0x00030260

000d4eb4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <LED_Signaling_Stop+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	68db      	ldr	r3, [r3, #12]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030260 	.word	0x00030260

000d4ec4 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <LED_SetBrightness+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	691b      	ldr	r3, [r3, #16]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030260 	.word	0x00030260

000d4ed4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <LED_RGB_IsOverRidden+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	699b      	ldr	r3, [r3, #24]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030260 	.word	0x00030260

000d4ee4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <LED_On+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	69db      	ldr	r3, [r3, #28]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030260 	.word	0x00030260

000d4ef4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <panic_+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030260 	.word	0x00030260

000d4f04 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <log_message+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030260 	.word	0x00030260

000d4f14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <set_system_mode+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	685b      	ldr	r3, [r3, #4]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030220 	.word	0x00030220

000d4f24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <system_delay_ms+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	695b      	ldr	r3, [r3, #20]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030220 	.word	0x00030220

000d4f34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b03      	ldr	r3, [pc, #12]	; (d4f44 <system_ctrl_set_app_request_handler+0x10>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f3e:	9301      	str	r3, [sp, #4]
   d4f40:	bd08      	pop	{r3, pc}
   d4f42:	0000      	.short	0x0000
   d4f44:	00030220 	.word	0x00030220

000d4f48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b03      	ldr	r3, [pc, #12]	; (d4f58 <system_ctrl_set_result+0x10>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f52:	9301      	str	r3, [sp, #4]
   d4f54:	bd08      	pop	{r3, pc}
   d4f56:	0000      	.short	0x0000
   d4f58:	00030220 	.word	0x00030220

000d4f5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <network_connect+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	685b      	ldr	r3, [r3, #4]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030240 	.word	0x00030240

000d4f6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <network_connecting+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	689b      	ldr	r3, [r3, #8]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030240 	.word	0x00030240

000d4f7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <network_disconnect+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	68db      	ldr	r3, [r3, #12]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030240 	.word	0x00030240

000d4f8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <network_ready+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	691b      	ldr	r3, [r3, #16]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030240 	.word	0x00030240

000d4f9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <network_on+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	695b      	ldr	r3, [r3, #20]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030240 	.word	0x00030240

000d4fac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <network_off+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	699b      	ldr	r3, [r3, #24]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030240 	.word	0x00030240

000d4fbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <network_listen+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	69db      	ldr	r3, [r3, #28]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030240 	.word	0x00030240

000d4fcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <network_listening+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6a1b      	ldr	r3, [r3, #32]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030240 	.word	0x00030240

000d4fdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <network_set_listen_timeout+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030240 	.word	0x00030240

000d4fec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <network_get_listen_timeout+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030240 	.word	0x00030240

000d4ffc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030244 	.word	0x00030244

000d500c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <malloc+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	681b      	ldr	r3, [r3, #0]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003021c 	.word	0x0003021c

000d501c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <free+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	685b      	ldr	r3, [r3, #4]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003021c 	.word	0x0003021c

000d502c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <realloc+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	689b      	ldr	r3, [r3, #8]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	0003021c 	.word	0x0003021c

000d503c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <sprintf+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	68db      	ldr	r3, [r3, #12]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	0003021c 	.word	0x0003021c

000d504c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d504c:	2200      	movs	r2, #0
   d504e:	4611      	mov	r1, r2
   d5050:	6840      	ldr	r0, [r0, #4]
   d5052:	f7ff bfbb 	b.w	d4fcc <network_listening>

000d5056 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5056:	2200      	movs	r2, #0
   d5058:	4611      	mov	r1, r2
   d505a:	6840      	ldr	r0, [r0, #4]
   d505c:	f7ff bfc6 	b.w	d4fec <network_get_listen_timeout>

000d5060 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5060:	2200      	movs	r2, #0
   d5062:	6840      	ldr	r0, [r0, #4]
   d5064:	f7ff bfba 	b.w	d4fdc <network_set_listen_timeout>

000d5068 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5068:	2200      	movs	r2, #0
   d506a:	f081 0101 	eor.w	r1, r1, #1
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bfa4 	b.w	d4fbc <network_listen>

000d5074 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5074:	2300      	movs	r3, #0
   d5076:	461a      	mov	r2, r3
   d5078:	4619      	mov	r1, r3
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bf96 	b.w	d4fac <network_off>

000d5080 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5080:	2300      	movs	r3, #0
   d5082:	461a      	mov	r2, r3
   d5084:	4619      	mov	r1, r3
   d5086:	6840      	ldr	r0, [r0, #4]
   d5088:	f7ff bf88 	b.w	d4f9c <network_on>

000d508c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d508c:	2200      	movs	r2, #0
   d508e:	4611      	mov	r1, r2
   d5090:	6840      	ldr	r0, [r0, #4]
   d5092:	f7ff bf7b 	b.w	d4f8c <network_ready>

000d5096 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5096:	2200      	movs	r2, #0
   d5098:	4611      	mov	r1, r2
   d509a:	6840      	ldr	r0, [r0, #4]
   d509c:	f7ff bf66 	b.w	d4f6c <network_connecting>

000d50a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50a0:	2200      	movs	r2, #0
   d50a2:	2102      	movs	r1, #2
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bf69 	b.w	d4f7c <network_disconnect>

000d50aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50aa:	2300      	movs	r3, #0
   d50ac:	461a      	mov	r2, r3
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bf54 	b.w	d4f5c <network_connect>

000d50b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50b4:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50b6:	2203      	movs	r2, #3
   d50b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50ba:	4a02      	ldr	r2, [pc, #8]	; (d50c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50bc:	601a      	str	r2, [r3, #0]
   d50be:	4770      	bx	lr
   d50c0:	2003e3c4 	.word	0x2003e3c4
   d50c4:	000d7424 	.word	0x000d7424

000d50c8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d50c8:	4770      	bx	lr

000d50ca <_ZN8SPIClassD0Ev>:
   d50ca:	b510      	push	{r4, lr}
   d50cc:	2110      	movs	r1, #16
   d50ce:	4604      	mov	r4, r0
   d50d0:	f001 fe65 	bl	d6d9e <_ZdlPvj>
   d50d4:	4620      	mov	r0, r4
   d50d6:	bd10      	pop	{r4, pc}

000d50d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d50d8:	b570      	push	{r4, r5, r6, lr}
   d50da:	4b08      	ldr	r3, [pc, #32]	; (d50fc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d50dc:	6003      	str	r3, [r0, #0]
   d50de:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d50e0:	2500      	movs	r5, #0
   d50e2:	460e      	mov	r6, r1
   d50e4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d50e8:	f7ff fddc 	bl	d4ca4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d50ec:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d50ee:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d50f0:	f7ff fd1e 	bl	d4b30 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d50f4:	60a5      	str	r5, [r4, #8]
}
   d50f6:	4620      	mov	r0, r4
   d50f8:	bd70      	pop	{r4, r5, r6, pc}
   d50fa:	bf00      	nop
   d50fc:	000d7458 	.word	0x000d7458

000d5100 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5100:	7900      	ldrb	r0, [r0, #4]
   d5102:	f7ff bd1d 	b.w	d4b40 <HAL_SPI_Is_Enabled>
	...

000d5108 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5108:	4b04      	ldr	r3, [pc, #16]	; (d511c <_GLOBAL__sub_I_System+0x14>)
   d510a:	2000      	movs	r0, #0
   d510c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5110:	7018      	strb	r0, [r3, #0]
   d5112:	8058      	strh	r0, [r3, #2]
   d5114:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5116:	f7ff befd 	b.w	d4f14 <set_system_mode>
   d511a:	bf00      	nop
   d511c:	2003e3cc 	.word	0x2003e3cc

000d5120 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5120:	b510      	push	{r4, lr}
   d5122:	4604      	mov	r4, r0
{
	free(buffer);
   d5124:	6800      	ldr	r0, [r0, #0]
   d5126:	f7ff ff79 	bl	d501c <free>
}
   d512a:	4620      	mov	r0, r4
   d512c:	bd10      	pop	{r4, pc}

000d512e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d512e:	b510      	push	{r4, lr}
   d5130:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5132:	6800      	ldr	r0, [r0, #0]
   d5134:	b108      	cbz	r0, d513a <_ZN6String10invalidateEv+0xc>
   d5136:	f7ff ff71 	bl	d501c <free>
	buffer = NULL;
   d513a:	2300      	movs	r3, #0
   d513c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d513e:	60a3      	str	r3, [r4, #8]
   d5140:	6063      	str	r3, [r4, #4]
   d5142:	bd10      	pop	{r4, pc}

000d5144 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5144:	b538      	push	{r3, r4, r5, lr}
   d5146:	4604      	mov	r4, r0
   d5148:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d514a:	6800      	ldr	r0, [r0, #0]
   d514c:	3101      	adds	r1, #1
   d514e:	f7ff ff6d 	bl	d502c <realloc>
	if (newbuffer) {
   d5152:	b110      	cbz	r0, d515a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5154:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5158:	2001      	movs	r0, #1
	}
	return 0;
}
   d515a:	bd38      	pop	{r3, r4, r5, pc}

000d515c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d515c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d515e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5160:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5162:	b113      	cbz	r3, d516a <_ZN6String7reserveEj+0xe>
   d5164:	6843      	ldr	r3, [r0, #4]
   d5166:	428b      	cmp	r3, r1
   d5168:	d207      	bcs.n	d517a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d516a:	4620      	mov	r0, r4
   d516c:	f7ff ffea 	bl	d5144 <_ZN6String12changeBufferEj>
   d5170:	b120      	cbz	r0, d517c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5172:	68a3      	ldr	r3, [r4, #8]
   d5174:	b90b      	cbnz	r3, d517a <_ZN6String7reserveEj+0x1e>
   d5176:	6822      	ldr	r2, [r4, #0]
   d5178:	7013      	strb	r3, [r2, #0]
   d517a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d517c:	bd10      	pop	{r4, pc}

000d517e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d517e:	b570      	push	{r4, r5, r6, lr}
   d5180:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5182:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5184:	4604      	mov	r4, r0
   d5186:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5188:	f7ff ffe8 	bl	d515c <_ZN6String7reserveEj>
   d518c:	b918      	cbnz	r0, d5196 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff ffcd 	bl	d512e <_ZN6String10invalidateEv>
		return *this;
   d5194:	e009      	b.n	d51aa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5196:	462a      	mov	r2, r5
   d5198:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d519a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d519c:	6820      	ldr	r0, [r4, #0]
   d519e:	f001 ff66 	bl	d706e <memcpy>
	buffer[len] = 0;
   d51a2:	6822      	ldr	r2, [r4, #0]
   d51a4:	68a3      	ldr	r3, [r4, #8]
   d51a6:	2100      	movs	r1, #0
   d51a8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d51aa:	4620      	mov	r0, r4
   d51ac:	bd70      	pop	{r4, r5, r6, pc}

000d51ae <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d51ae:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51b0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d51b2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51b6:	6043      	str	r3, [r0, #4]
	len = 0;
   d51b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51ba:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d51bc:	460d      	mov	r5, r1
   d51be:	b139      	cbz	r1, d51d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d51c0:	4608      	mov	r0, r1
   d51c2:	f001 ffab 	bl	d711c <strlen>
   d51c6:	4629      	mov	r1, r5
   d51c8:	4602      	mov	r2, r0
   d51ca:	4620      	mov	r0, r4
   d51cc:	f7ff ffd7 	bl	d517e <_ZN6String4copyEPKcj>
}
   d51d0:	4620      	mov	r0, r4
   d51d2:	bd38      	pop	{r3, r4, r5, pc}

000d51d4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d51d4:	b538      	push	{r3, r4, r5, lr}
   d51d6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d51d8:	460c      	mov	r4, r1
   d51da:	b141      	cbz	r1, d51ee <_ZN6StringaSEPKc+0x1a>
   d51dc:	4608      	mov	r0, r1
   d51de:	f001 ff9d 	bl	d711c <strlen>
   d51e2:	4621      	mov	r1, r4
   d51e4:	4602      	mov	r2, r0
   d51e6:	4628      	mov	r0, r5
   d51e8:	f7ff ffc9 	bl	d517e <_ZN6String4copyEPKcj>
   d51ec:	e001      	b.n	d51f2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d51ee:	f7ff ff9e 	bl	d512e <_ZN6String10invalidateEv>

	return *this;
}
   d51f2:	4628      	mov	r0, r5
   d51f4:	bd38      	pop	{r3, r4, r5, pc}

000d51f6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d51f6:	4770      	bx	lr

000d51f8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d51f8:	2000      	movs	r0, #0
   d51fa:	4770      	bx	lr

000d51fc <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d51fc:	4770      	bx	lr

000d51fe <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d51fe:	2000      	movs	r0, #0
   d5200:	4770      	bx	lr

000d5202 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5202:	4770      	bx	lr

000d5204 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5204:	2000      	movs	r0, #0
   d5206:	4770      	bx	lr

000d5208 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5208:	b510      	push	{r4, lr}
   d520a:	2114      	movs	r1, #20
   d520c:	4604      	mov	r4, r0
   d520e:	f001 fdc6 	bl	d6d9e <_ZdlPvj>
   d5212:	4620      	mov	r0, r4
   d5214:	bd10      	pop	{r4, pc}

000d5216 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5216:	b510      	push	{r4, lr}
   d5218:	2114      	movs	r1, #20
   d521a:	4604      	mov	r4, r0
   d521c:	f001 fdbf 	bl	d6d9e <_ZdlPvj>
   d5220:	4620      	mov	r0, r4
   d5222:	bd10      	pop	{r4, pc}

000d5224 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5224:	b510      	push	{r4, lr}
   d5226:	2114      	movs	r1, #20
   d5228:	4604      	mov	r4, r0
   d522a:	f001 fdb8 	bl	d6d9e <_ZdlPvj>
   d522e:	4620      	mov	r0, r4
   d5230:	bd10      	pop	{r4, pc}

000d5232 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5232:	f7fe bf34 	b.w	d409e <_ZdlPv>

000d5236 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5236:	f7fe bf32 	b.w	d409e <_ZdlPv>

000d523a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d523a:	f7fe bf30 	b.w	d409e <_ZdlPv>
	...

000d5240 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5240:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5242:	200a      	movs	r0, #10
   d5244:	4a02      	ldr	r2, [pc, #8]	; (d5250 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d5246:	2100      	movs	r1, #0
   d5248:	f7ff fe54 	bl	d4ef4 <panic_>
    }
}
   d524c:	bd08      	pop	{r3, pc}
   d524e:	bf00      	nop
   d5250:	000d4b61 	.word	0x000d4b61

000d5254 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5254:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5256:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5258:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d525a:	689b      	ldr	r3, [r3, #8]
   d525c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d525e:	68a3      	ldr	r3, [r4, #8]
   d5260:	3b01      	subs	r3, #1
   d5262:	60a3      	str	r3, [r4, #8]
   d5264:	b92b      	cbnz	r3, d5272 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d5266:	6823      	ldr	r3, [r4, #0]
   d5268:	4620      	mov	r0, r4
   d526a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5270:	4718      	bx	r3
   d5272:	bd10      	pop	{r4, pc}

000d5274 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5274:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5278:	b2da      	uxtb	r2, r3
   d527a:	2a09      	cmp	r2, #9
   d527c:	d801      	bhi.n	d5282 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d527e:	4618      	mov	r0, r3
   d5280:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5282:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5286:	2b05      	cmp	r3, #5
   d5288:	d801      	bhi.n	d528e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d528a:	3857      	subs	r0, #87	; 0x57
   d528c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d528e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5292:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5294:	bf94      	ite	ls
   d5296:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5298:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d529c:	4770      	bx	lr
	...

000d52a0 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d52a0:	b510      	push	{r4, lr}
            locked_(false) {
   d52a2:	2300      	movs	r3, #0
   d52a4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d52a6:	4b04      	ldr	r3, [pc, #16]	; (d52b8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d52a8:	4604      	mov	r4, r0
   d52aa:	6818      	ldr	r0, [r3, #0]
   d52ac:	f7ff fd0a 	bl	d4cc4 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d52b0:	2301      	movs	r3, #1
   d52b2:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d52b4:	4620      	mov	r0, r4
   d52b6:	bd10      	pop	{r4, pc}
   d52b8:	2003e3e0 	.word	0x2003e3e0

000d52bc <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d52bc:	b510      	push	{r4, lr}
        if (locked_) {
   d52be:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d52c0:	4604      	mov	r4, r0
        if (locked_) {
   d52c2:	b11b      	cbz	r3, d52cc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d52c4:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d52c6:	6818      	ldr	r0, [r3, #0]
   d52c8:	f7ff fd04 	bl	d4cd4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d52cc:	4620      	mov	r0, r4
   d52ce:	bd10      	pop	{r4, pc}
   d52d0:	2003e3e0 	.word	0x2003e3e0

000d52d4 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d52d4:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d52d6:	7982      	ldrb	r2, [r0, #6]
   d52d8:	798b      	ldrb	r3, [r1, #6]
   d52da:	429a      	cmp	r2, r3
   d52dc:	d106      	bne.n	d52ec <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d52de:	2206      	movs	r2, #6
   d52e0:	f001 feb6 	bl	d7050 <memcmp>
   d52e4:	fab0 f080 	clz	r0, r0
   d52e8:	0940      	lsrs	r0, r0, #5
   d52ea:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d52ec:	2000      	movs	r0, #0
}
   d52ee:	bd08      	pop	{r3, pc}

000d52f0 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d52f0:	b510      	push	{r4, lr}
        : uuid_() {
   d52f2:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d52f4:	4604      	mov	r4, r0
        : uuid_() {
   d52f6:	2100      	movs	r1, #0
   d52f8:	f001 fedf 	bl	d70ba <memset>
}
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd10      	pop	{r4, pc}

000d5300 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d5300:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d5302:	4603      	mov	r3, r0
   d5304:	f101 0214 	add.w	r2, r1, #20
   d5308:	f851 4b04 	ldr.w	r4, [r1], #4
   d530c:	f843 4b04 	str.w	r4, [r3], #4
   d5310:	4291      	cmp	r1, r2
   d5312:	d1f9      	bne.n	d5308 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d5314:	bd10      	pop	{r4, pc}

000d5316 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d5316:	b570      	push	{r4, r5, r6, lr}
   d5318:	460c      	mov	r4, r1
   d531a:	4605      	mov	r5, r0
   d531c:	4616      	mov	r6, r2
        : BleUuid() {
   d531e:	f7ff ffe7 	bl	d52f0 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d5322:	b92c      	cbnz	r4, d5330 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5324:	2210      	movs	r2, #16
   d5326:	4621      	mov	r1, r4
   d5328:	4628      	mov	r0, r5
   d532a:	f001 fec6 	bl	d70ba <memset>
   d532e:	e016      	b.n	d535e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d5330:	2e01      	cmp	r6, #1
   d5332:	d109      	bne.n	d5348 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5334:	462b      	mov	r3, r5
   d5336:	f104 0210 	add.w	r2, r4, #16
   d533a:	f854 1b04 	ldr.w	r1, [r4], #4
   d533e:	f843 1b04 	str.w	r1, [r3], #4
   d5342:	4294      	cmp	r4, r2
   d5344:	d1f9      	bne.n	d533a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d5346:	e008      	b.n	d535a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5348:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d534a:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d534c:	5ce1      	ldrb	r1, [r4, r3]
   d534e:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5352:	3b01      	subs	r3, #1
   d5354:	b2db      	uxtb	r3, r3
   d5356:	2bff      	cmp	r3, #255	; 0xff
   d5358:	d1f8      	bne.n	d534c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d535a:	2301      	movs	r3, #1
   d535c:	742b      	strb	r3, [r5, #16]
    }
}
   d535e:	4628      	mov	r0, r5
   d5360:	bd70      	pop	{r4, r5, r6, pc}

000d5362 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5362:	b538      	push	{r3, r4, r5, lr}
   d5364:	4604      	mov	r4, r0
   d5366:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5368:	461a      	mov	r2, r3
   d536a:	f7ff ffd4 	bl	d5316 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d536e:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5370:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5372:	0a2d      	lsrs	r5, r5, #8
   d5374:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5376:	7423      	strb	r3, [r4, #16]
}
   d5378:	4620      	mov	r0, r4
   d537a:	bd38      	pop	{r3, r4, r5, pc}

000d537c <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d537c:	7c03      	ldrb	r3, [r0, #16]
   d537e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d5382:	bf14      	ite	ne
   d5384:	2001      	movne	r0, #1
   d5386:	2000      	moveq	r0, #0
   d5388:	4770      	bx	lr

000d538a <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d538a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d538c:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d538e:	f7ff fff5 	bl	d537c <_ZNK8particle7BleUuid4typeEv>
   d5392:	b908      	cbnz	r0, d5398 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d5394:	8820      	ldrh	r0, [r4, #0]
   d5396:	e009      	b.n	d53ac <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d5398:	2210      	movs	r2, #16
   d539a:	2100      	movs	r1, #0
   d539c:	4668      	mov	r0, sp
   d539e:	f001 fe8c 	bl	d70ba <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d53a2:	2210      	movs	r2, #16
   d53a4:	4669      	mov	r1, sp
   d53a6:	4620      	mov	r0, r4
   d53a8:	f001 fe52 	bl	d7050 <memcmp>
   d53ac:	3000      	adds	r0, #0
   d53ae:	bf18      	it	ne
   d53b0:	2001      	movne	r0, #1
    }
}
   d53b2:	b004      	add	sp, #16
   d53b4:	bd10      	pop	{r4, pc}

000d53b6 <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d53b6:	8800      	ldrh	r0, [r0, #0]
   d53b8:	4770      	bx	lr

000d53ba <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d53ba:	4770      	bx	lr

000d53bc <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d53bc:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d53be:	4603      	mov	r3, r0
   d53c0:	f101 0214 	add.w	r2, r1, #20
   d53c4:	f851 4b04 	ldr.w	r4, [r1], #4
   d53c8:	f843 4b04 	str.w	r4, [r3], #4
   d53cc:	4291      	cmp	r1, r2
   d53ce:	d1f9      	bne.n	d53c4 <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d53d0:	bd10      	pop	{r4, pc}

000d53d2 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d53d2:	b510      	push	{r4, lr}
    if (uuid128) {
   d53d4:	b151      	cbz	r1, d53ec <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d53d6:	4603      	mov	r3, r0
   d53d8:	f101 0210 	add.w	r2, r1, #16
   d53dc:	f851 4b04 	ldr.w	r4, [r1], #4
   d53e0:	f843 4b04 	str.w	r4, [r3], #4
   d53e4:	4291      	cmp	r1, r2
   d53e6:	d1f9      	bne.n	d53dc <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d53e8:	2301      	movs	r3, #1
   d53ea:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d53ec:	bd10      	pop	{r4, pc}

000d53ee <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d53ee:	b510      	push	{r4, lr}
   d53f0:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d53f2:	f7ff ffc3 	bl	d537c <_ZNK8particle7BleUuid4typeEv>
   d53f6:	b928      	cbnz	r0, d5404 <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d53f8:	8808      	ldrh	r0, [r1, #0]
   d53fa:	8823      	ldrh	r3, [r4, #0]
   d53fc:	1a1b      	subs	r3, r3, r0
   d53fe:	4258      	negs	r0, r3
   d5400:	4158      	adcs	r0, r3
   d5402:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5404:	2210      	movs	r2, #16
   d5406:	4620      	mov	r0, r4
   d5408:	f001 fe22 	bl	d7050 <memcmp>
   d540c:	fab0 f080 	clz	r0, r0
   d5410:	0940      	lsrs	r0, r0, #5
    }
}
   d5412:	bd10      	pop	{r4, pc}

000d5414 <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d5414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5416:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5418:	460e      	mov	r6, r1
   d541a:	b919      	cbnz	r1, d5424 <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d541c:	2210      	movs	r2, #16
   d541e:	f001 fe4c 	bl	d70ba <memset>
   d5422:	e051      	b.n	d54c8 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5424:	2124      	movs	r1, #36	; 0x24
   d5426:	4630      	mov	r0, r6
   d5428:	f001 fe80 	bl	d712c <strnlen>
   d542c:	2804      	cmp	r0, #4
   d542e:	d002      	beq.n	d5436 <_ZN8particle7BleUuid9constructEPKc+0x22>
   d5430:	2700      	movs	r7, #0
   d5432:	2410      	movs	r4, #16
   d5434:	e03b      	b.n	d54ae <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5436:	7830      	ldrb	r0, [r6, #0]
   d5438:	f7ff ff1c 	bl	d5274 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d543c:	1e04      	subs	r4, r0, #0
   d543e:	db47      	blt.n	d54d0 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5440:	7870      	ldrb	r0, [r6, #1]
   d5442:	f7ff ff17 	bl	d5274 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5446:	2800      	cmp	r0, #0
   d5448:	db42      	blt.n	d54d0 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d544a:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d544e:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5452:	78b0      	ldrb	r0, [r6, #2]
   d5454:	f7ff ff0e 	bl	d5274 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5458:	1e04      	subs	r4, r0, #0
   d545a:	db39      	blt.n	d54d0 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d545c:	78f0      	ldrb	r0, [r6, #3]
   d545e:	f7ff ff09 	bl	d5274 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5462:	2800      	cmp	r0, #0
   d5464:	db34      	blt.n	d54d0 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5466:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d546a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d546e:	b2c0      	uxtb	r0, r0
   d5470:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d5474:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d5476:	2300      	movs	r3, #0
   d5478:	e027      	b.n	d54ca <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d547a:	b32c      	cbz	r4, d54c8 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d547c:	5df0      	ldrb	r0, [r6, r7]
   d547e:	f7ff fef9 	bl	d5274 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5482:	0603      	lsls	r3, r0, #24
   d5484:	d412      	bmi.n	d54ac <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d5486:	3c01      	subs	r4, #1
   d5488:	0100      	lsls	r0, r0, #4
   d548a:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d548c:	2124      	movs	r1, #36	; 0x24
   d548e:	4630      	mov	r0, r6
   d5490:	f001 fe4c 	bl	d712c <strnlen>
   d5494:	3701      	adds	r7, #1
   d5496:	4287      	cmp	r7, r0
   d5498:	d208      	bcs.n	d54ac <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d549a:	5df0      	ldrb	r0, [r6, r7]
   d549c:	f7ff feea 	bl	d5274 <_ZN8particle11hexToNibbleEc>
   d54a0:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d54a2:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d54a4:	bfa2      	ittt	ge
   d54a6:	5d2b      	ldrbge	r3, [r5, r4]
   d54a8:	4318      	orrge	r0, r3
   d54aa:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d54ac:	3701      	adds	r7, #1
   d54ae:	2124      	movs	r1, #36	; 0x24
   d54b0:	4630      	mov	r0, r6
   d54b2:	f001 fe3b 	bl	d712c <strnlen>
   d54b6:	4287      	cmp	r7, r0
   d54b8:	d3df      	bcc.n	d547a <_ZN8particle7BleUuid9constructEPKc+0x66>
   d54ba:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d54bc:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d54be:	42a5      	cmp	r5, r4
   d54c0:	d002      	beq.n	d54c8 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d54c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d54c6:	e7fa      	b.n	d54be <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d54c8:	2301      	movs	r3, #1
   d54ca:	742b      	strb	r3, [r5, #16]
}
   d54cc:	b003      	add	sp, #12
   d54ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d54d0:	2300      	movs	r3, #0
   d54d2:	802b      	strh	r3, [r5, #0]
   d54d4:	e7cf      	b.n	d5476 <_ZN8particle7BleUuid9constructEPKc+0x62>

000d54d6 <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d54d6:	b538      	push	{r3, r4, r5, lr}
   d54d8:	4604      	mov	r4, r0
   d54da:	460d      	mov	r5, r1
        : BleUuid() {
   d54dc:	f7ff ff08 	bl	d52f0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d54e0:	4620      	mov	r0, r4
   d54e2:	4629      	mov	r1, r5
   d54e4:	f7ff ff96 	bl	d5414 <_ZN8particle7BleUuid9constructEPKc>
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd38      	pop	{r3, r4, r5, pc}

000d54ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d54ee:	b18b      	cbz	r3, d5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d54f0:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d54f2:	1ce5      	adds	r5, r4, #3
   d54f4:	428d      	cmp	r5, r1
   d54f6:	d80f      	bhi.n	d5518 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d54f8:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d54fa:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d54fc:	5d87      	ldrb	r7, [r0, r6]
   d54fe:	4297      	cmp	r7, r2
   d5500:	d105      	bne.n	d550e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5502:	442e      	add	r6, r5
   d5504:	42b1      	cmp	r1, r6
   d5506:	d307      	bcc.n	d5518 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5508:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d550a:	1c68      	adds	r0, r5, #1
                return adsLen;
   d550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d550e:	3501      	adds	r5, #1
   d5510:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5512:	e7ee      	b.n	d54f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5514:	4618      	mov	r0, r3
   d5516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5518:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d551a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d551c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d551c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5520:	4604      	mov	r4, r0
   d5522:	460e      	mov	r6, r1
   d5524:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5526:	4617      	mov	r7, r2
   d5528:	2a00      	cmp	r2, #0
   d552a:	d03a      	beq.n	d55a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d552c:	460a      	mov	r2, r1
   d552e:	ab01      	add	r3, sp, #4
   d5530:	6a01      	ldr	r1, [r0, #32]
   d5532:	f7ff ffdb 	bl	d54ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5536:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d553a:	6a22      	ldr	r2, [r4, #32]
   d553c:	bb03      	cbnz	r3, d5580 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d553e:	b1f8      	cbz	r0, d5580 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5540:	1c96      	adds	r6, r2, #2
   d5542:	442e      	add	r6, r5
   d5544:	1a36      	subs	r6, r6, r0
   d5546:	2e1f      	cmp	r6, #31
   d5548:	d82b      	bhi.n	d55a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d554a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d554e:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5552:	ebc8 0202 	rsb	r2, r8, r2
   d5556:	1a12      	subs	r2, r2, r0
   d5558:	eb00 0108 	add.w	r1, r0, r8
   d555c:	eb05 0009 	add.w	r0, r5, r9
   d5560:	b292      	uxth	r2, r2
   d5562:	4421      	add	r1, r4
   d5564:	4420      	add	r0, r4
   d5566:	f001 fd8d 	bl	d7084 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d556a:	1c6b      	adds	r3, r5, #1
   d556c:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5570:	462a      	mov	r2, r5
   d5572:	4639      	mov	r1, r7
   d5574:	eb04 0009 	add.w	r0, r4, r9
   d5578:	f001 fd79 	bl	d706e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d557c:	6226      	str	r6, [r4, #32]
   d557e:	e010      	b.n	d55a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5580:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5582:	182b      	adds	r3, r5, r0
   d5584:	2b1f      	cmp	r3, #31
   d5586:	d80c      	bhi.n	d55a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5588:	1c6b      	adds	r3, r5, #1
   d558a:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d558c:	4422      	add	r2, r4
   d558e:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5590:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5592:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5594:	4420      	add	r0, r4
   d5596:	462a      	mov	r2, r5
   d5598:	f001 fd69 	bl	d706e <memcpy>
        selfLen_ += len;
   d559c:	6a22      	ldr	r2, [r4, #32]
   d559e:	442a      	add	r2, r5
   d55a0:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d55a2:	6a20      	ldr	r0, [r4, #32]
}
   d55a4:	b003      	add	sp, #12
   d55a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d55aa <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d55aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d55ac:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d55ae:	4603      	mov	r3, r0
   d55b0:	f100 021f 	add.w	r2, r0, #31
   d55b4:	2000      	movs	r0, #0
   d55b6:	f803 0b01 	strb.w	r0, [r3], #1
   d55ba:	4293      	cmp	r3, r2
   d55bc:	f04f 0100 	mov.w	r1, #0
   d55c0:	d1f9      	bne.n	d55b6 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d55c2:	aa04      	add	r2, sp, #16
   d55c4:	2306      	movs	r3, #6
   d55c6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d55ca:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d55cc:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d55ce:	9100      	str	r1, [sp, #0]
   d55d0:	4620      	mov	r0, r4
   d55d2:	4619      	mov	r1, r3
   d55d4:	f7ff ffa2 	bl	d551c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d55d8:	4620      	mov	r0, r4
   d55da:	b004      	add	sp, #16
   d55dc:	bd10      	pop	{r4, pc}

000d55de <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d55de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d55e0:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d55e2:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d55e4:	ab01      	add	r3, sp, #4
   d55e6:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d55e8:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d55ea:	f7ff ff7f 	bl	d54ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d55ee:	4605      	mov	r5, r0
   d55f0:	b178      	cbz	r0, d5612 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d55f2:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d55f4:	6a22      	ldr	r2, [r4, #32]
   d55f6:	1829      	adds	r1, r5, r0
   d55f8:	1a12      	subs	r2, r2, r0
   d55fa:	1b52      	subs	r2, r2, r5
   d55fc:	4421      	add	r1, r4
   d55fe:	4420      	add	r0, r4
   d5600:	f001 fd35 	bl	d706e <memcpy>
        selfLen_ -= len;
   d5604:	6a23      	ldr	r3, [r4, #32]
   d5606:	1b5d      	subs	r5, r3, r5
   d5608:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d560a:	4631      	mov	r1, r6
   d560c:	4620      	mov	r0, r4
   d560e:	f7ff ffe6 	bl	d55de <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5612:	b002      	add	sp, #8
   d5614:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5618 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5618:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d561a:	2500      	movs	r5, #0
   d561c:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5620:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5622:	8043      	strh	r3, [r0, #2]
   d5624:	220e      	movs	r2, #14
   d5626:	4629      	mov	r1, r5
   d5628:	7005      	strb	r5, [r0, #0]
   d562a:	7105      	strb	r5, [r0, #4]
   d562c:	3006      	adds	r0, #6
   d562e:	f001 fd44 	bl	d70ba <memset>
   d5632:	f104 0014 	add.w	r0, r4, #20
   d5636:	f7ff fe5b 	bl	d52f0 <_ZN8particle7BleUuidC1Ev>
   d563a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d563e:	f7ff fe57 	bl	d52f0 <_ZN8particle7BleUuidC1Ev>
   d5642:	4904      	ldr	r1, [pc, #16]	; (d5654 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5644:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5648:	f7ff fdb1 	bl	d51ae <_ZN6StringC1EPK19__FlashStringHelper>
   d564c:	64e5      	str	r5, [r4, #76]	; 0x4c
   d564e:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5650:	4620      	mov	r0, r4
   d5652:	bd38      	pop	{r3, r4, r5, pc}
   d5654:	000d770b 	.word	0x000d770b

000d5658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5658:	b510      	push	{r4, lr}
   d565a:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d565c:	69c2      	ldr	r2, [r0, #28]
   d565e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5662:	4293      	cmp	r3, r2
   d5664:	4618      	mov	r0, r3
   d5666:	d006      	beq.n	d5676 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5668:	6804      	ldr	r4, [r0, #0]
   d566a:	8824      	ldrh	r4, [r4, #0]
   d566c:	428c      	cmp	r4, r1
   d566e:	f103 0308 	add.w	r3, r3, #8
   d5672:	d1f6      	bne.n	d5662 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5674:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5676:	2000      	movs	r0, #0
    }
   d5678:	bd10      	pop	{r4, pc}
	...

000d567c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d567c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5680:	4680      	mov	r8, r0
   d5682:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5684:	460e      	mov	r6, r1
   d5686:	b369      	cbz	r1, d56e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5688:	b362      	cbz	r2, d56e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d568a:	2af4      	cmp	r2, #244	; 0xf4
   d568c:	6805      	ldr	r5, [r0, #0]
   d568e:	bf28      	it	cs
   d5690:	22f4      	movcs	r2, #244	; 0xf4
   d5692:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5694:	782a      	ldrb	r2, [r5, #0]
   d5696:	b1a2      	cbz	r2, d56c2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d5698:	792b      	ldrb	r3, [r5, #4]
   d569a:	0798      	lsls	r0, r3, #30
   d569c:	d507      	bpl.n	d56ae <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d569e:	2300      	movs	r3, #0
   d56a0:	4622      	mov	r2, r4
   d56a2:	89a8      	ldrh	r0, [r5, #12]
   d56a4:	f7ff faa0 	bl	d4be8 <hal_ble_gatt_server_set_characteristic_value>
   d56a8:	2800      	cmp	r0, #0
   d56aa:	da02      	bge.n	d56b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d56ac:	e043      	b.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d56ae:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d56b2:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d56b6:	792b      	ldrb	r3, [r5, #4]
   d56b8:	06da      	lsls	r2, r3, #27
   d56ba:	d518      	bpl.n	d56ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d56bc:	2f01      	cmp	r7, #1
   d56be:	d123      	bne.n	d5708 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d56c0:	e015      	b.n	d56ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d56c2:	8868      	ldrh	r0, [r5, #2]
   d56c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56c8:	4298      	cmp	r0, r3
   d56ca:	d00d      	beq.n	d56e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d56cc:	792b      	ldrb	r3, [r5, #4]
   d56ce:	0759      	lsls	r1, r3, #29
   d56d0:	d523      	bpl.n	d571a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d56d2:	2f01      	cmp	r7, #1
   d56d4:	d021      	beq.n	d571a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d56d6:	89a9      	ldrh	r1, [r5, #12]
   d56d8:	9200      	str	r2, [sp, #0]
   d56da:	4623      	mov	r3, r4
   d56dc:	4632      	mov	r2, r6
   d56de:	f7ff fa97 	bl	d4c10 <hal_ble_gatt_client_write_without_response>
   d56e2:	e028      	b.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d56e4:	4815      	ldr	r0, [pc, #84]	; (d573c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d56e6:	e026      	b.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d56e8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d56ec:	e023      	b.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d56ee:	069a      	lsls	r2, r3, #26
   d56f0:	d521      	bpl.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d56f2:	2f02      	cmp	r7, #2
   d56f4:	d01f      	beq.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d56f6:	89a8      	ldrh	r0, [r5, #12]
   d56f8:	2300      	movs	r3, #0
   d56fa:	4622      	mov	r2, r4
   d56fc:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d56fe:	b002      	add	sp, #8
   d5700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5704:	f7ff baac 	b.w	d4c60 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5708:	89a8      	ldrh	r0, [r5, #12]
   d570a:	2300      	movs	r3, #0
   d570c:	4622      	mov	r2, r4
   d570e:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5710:	b002      	add	sp, #8
   d5712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5716:	f7ff ba99 	b.w	d4c4c <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d571a:	071b      	lsls	r3, r3, #28
   d571c:	d501      	bpl.n	d5722 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d571e:	2f02      	cmp	r7, #2
   d5720:	d102      	bne.n	d5728 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5722:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5726:	e006      	b.n	d5736 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	89a9      	ldrh	r1, [r5, #12]
   d572c:	9300      	str	r3, [sp, #0]
   d572e:	4632      	mov	r2, r6
   d5730:	4623      	mov	r3, r4
   d5732:	f7ff fa63 	bl	d4bfc <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5736:	b002      	add	sp, #8
   d5738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d573c:	fffffef2 	.word	0xfffffef2

000d5740 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5740:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d5742:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d5744:	651a      	str	r2, [r3, #80]	; 0x50
   d5746:	4770      	bx	lr

000d5748 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5748:	b510      	push	{r4, lr}
    return impl()->address();
   d574a:	680a      	ldr	r2, [r1, #0]
   d574c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5750:	6003      	str	r3, [r0, #0]
   d5752:	6853      	ldr	r3, [r2, #4]
   d5754:	6043      	str	r3, [r0, #4]
}
   d5756:	bd10      	pop	{r4, pc}

000d5758 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d575a:	6802      	ldr	r2, [r0, #0]
   d575c:	680b      	ldr	r3, [r1, #0]
   d575e:	8812      	ldrh	r2, [r2, #0]
   d5760:	881b      	ldrh	r3, [r3, #0]
   d5762:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5764:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5766:	d10c      	bne.n	d5782 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5768:	4601      	mov	r1, r0
   d576a:	4668      	mov	r0, sp
   d576c:	f7ff ffec 	bl	d5748 <_ZNK8particle13BlePeerDevice7addressEv>
   d5770:	4621      	mov	r1, r4
   d5772:	a802      	add	r0, sp, #8
   d5774:	f7ff ffe8 	bl	d5748 <_ZNK8particle13BlePeerDevice7addressEv>
   d5778:	a902      	add	r1, sp, #8
   d577a:	4668      	mov	r0, sp
   d577c:	f7ff fdaa 	bl	d52d4 <_ZNK8particle10BleAddresseqERKS0_>
   d5780:	b900      	cbnz	r0, d5784 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5782:	2000      	movs	r0, #0
}
   d5784:	b004      	add	sp, #16
   d5786:	bd10      	pop	{r4, pc}

000d5788 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5788:	b510      	push	{r4, lr}
   d578a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d578c:	2034      	movs	r0, #52	; 0x34
   d578e:	f7fe fc82 	bl	d4096 <_Znwj>
   d5792:	4601      	mov	r1, r0
   d5794:	b168      	cbz	r0, d57b2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5796:	2300      	movs	r3, #0
   d5798:	6003      	str	r3, [r0, #0]
   d579a:	6043      	str	r3, [r0, #4]
   d579c:	6083      	str	r3, [r0, #8]
   d579e:	60c3      	str	r3, [r0, #12]
   d57a0:	6103      	str	r3, [r0, #16]
   d57a2:	6143      	str	r3, [r0, #20]
   d57a4:	6183      	str	r3, [r0, #24]
   d57a6:	61c3      	str	r3, [r0, #28]
   d57a8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d57aa:	6243      	str	r3, [r0, #36]	; 0x24
   d57ac:	6283      	str	r3, [r0, #40]	; 0x28
   d57ae:	62c3      	str	r3, [r0, #44]	; 0x2c
   d57b0:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57b2:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d57b4:	b919      	cbnz	r1, d57be <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d57b6:	4a0a      	ldr	r2, [pc, #40]	; (d57e0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d57b8:	200a      	movs	r0, #10
   d57ba:	f7ff fb9b 	bl	d4ef4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d57be:	2000      	movs	r0, #0
   d57c0:	f7ff f9de 	bl	d4b80 <hal_ble_stack_init>
   d57c4:	b120      	cbz	r0, d57d0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d57c6:	4a06      	ldr	r2, [pc, #24]	; (d57e0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d57c8:	2100      	movs	r1, #0
   d57ca:	200a      	movs	r0, #10
   d57cc:	f7ff fb92 	bl	d4ef4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d57d0:	2200      	movs	r2, #0
   d57d2:	6821      	ldr	r1, [r4, #0]
   d57d4:	4803      	ldr	r0, [pc, #12]	; (d57e4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d57d6:	f7ff fa2f 	bl	d4c38 <hal_ble_set_callback_on_periph_link_events>
}
   d57da:	4620      	mov	r0, r4
   d57dc:	bd10      	pop	{r4, pc}
   d57de:	bf00      	nop
   d57e0:	000d4b61 	.word	0x000d4b61
   d57e4:	000d5bc1 	.word	0x000d5bc1

000d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d57e8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d57ea:	4c0a      	ldr	r4, [pc, #40]	; (d5814 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d57ec:	6823      	ldr	r3, [r4, #0]
   d57ee:	07db      	lsls	r3, r3, #31
   d57f0:	d40e      	bmi.n	d5810 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d57f2:	4620      	mov	r0, r4
   d57f4:	f7fe fc57 	bl	d40a6 <__cxa_guard_acquire>
   d57f8:	b150      	cbz	r0, d5810 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d57fa:	4807      	ldr	r0, [pc, #28]	; (d5818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d57fc:	f7ff ffc4 	bl	d5788 <_ZN8particle14BleLocalDeviceC1Ev>
   d5800:	4620      	mov	r0, r4
   d5802:	f7fe fc55 	bl	d40b0 <__cxa_guard_release>
   d5806:	4a05      	ldr	r2, [pc, #20]	; (d581c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5808:	4905      	ldr	r1, [pc, #20]	; (d5820 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d580a:	4803      	ldr	r0, [pc, #12]	; (d5818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d580c:	f001 fac2 	bl	d6d94 <__aeabi_atexit>
    return instance;
}
   d5810:	4801      	ldr	r0, [pc, #4]	; (d5818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5812:	bd10      	pop	{r4, pc}
   d5814:	2003e3d8 	.word	0x2003e3d8
   d5818:	2003e3d4 	.word	0x2003e3d4
   d581c:	2003e38c 	.word	0x2003e38c
   d5820:	000d59d5 	.word	0x000d59d5

000d5824 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5824:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	3b09      	subs	r3, #9
   d582a:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d582c:	b08a      	sub	sp, #40	; 0x28
   d582e:	4604      	mov	r4, r0
   d5830:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5832:	d819      	bhi.n	d5868 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5834:	f7ff ffd8 	bl	d57e8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5838:	88a1      	ldrh	r1, [r4, #4]
   d583a:	6800      	ldr	r0, [r0, #0]
   d583c:	f7ff ff0c 	bl	d5658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5840:	4602      	mov	r2, r0
   d5842:	b958      	cbnz	r0, d585c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5844:	2320      	movs	r3, #32
   d5846:	9302      	str	r3, [sp, #8]
   d5848:	4b08      	ldr	r3, [pc, #32]	; (d586c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d584a:	9003      	str	r0, [sp, #12]
   d584c:	9300      	str	r3, [sp, #0]
   d584e:	aa02      	add	r2, sp, #8
   d5850:	4603      	mov	r3, r0
   d5852:	4907      	ldr	r1, [pc, #28]	; (d5870 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5854:	2032      	movs	r0, #50	; 0x32
   d5856:	f7ff fb55 	bl	d4f04 <log_message>
   d585a:	e005      	b.n	d5868 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d585c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d585e:	b11d      	cbz	r5, d5868 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5860:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5862:	68e1      	ldr	r1, [r4, #12]
   d5864:	6920      	ldr	r0, [r4, #16]
   d5866:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5868:	b00a      	add	sp, #40	; 0x28
   d586a:	bd70      	pop	{r4, r5, r6, pc}
   d586c:	000d750e 	.word	0x000d750e
   d5870:	000d74c4 	.word	0x000d74c4

000d5874 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5874:	4608      	mov	r0, r1
   d5876:	b909      	cbnz	r1, d587c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5878:	460a      	mov	r2, r1
   d587a:	e001      	b.n	d5880 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d587c:	6a09      	ldr	r1, [r1, #32]
   d587e:	2200      	movs	r2, #0
   d5880:	f7ff b986 	b.w	d4b90 <hal_ble_gap_set_advertising_data>

000d5884 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5884:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5886:	460c      	mov	r4, r1
   d5888:	b911      	cbnz	r1, d5890 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d588a:	460a      	mov	r2, r1
   d588c:	4608      	mov	r0, r1
   d588e:	e006      	b.n	d589e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5890:	2101      	movs	r1, #1
   d5892:	4620      	mov	r0, r4
   d5894:	f7ff fea3 	bl	d55de <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5898:	6a21      	ldr	r1, [r4, #32]
   d589a:	2200      	movs	r2, #0
   d589c:	4620      	mov	r0, r4
    }
}
   d589e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d58a2:	f7ff b97d 	b.w	d4ba0 <hal_ble_gap_set_scan_response_data>

000d58a6 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d58a6:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d58a8:	a801      	add	r0, sp, #4
   d58aa:	f7ff fcf9 	bl	d52a0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d58ae:	2000      	movs	r0, #0
   d58b0:	f7ff f97e 	bl	d4bb0 <hal_ble_gap_start_advertising>
   d58b4:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d58b6:	a801      	add	r0, sp, #4
   d58b8:	f7ff fd00 	bl	d52bc <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d58bc:	4620      	mov	r0, r4
   d58be:	b002      	add	sp, #8
   d58c0:	bd10      	pop	{r4, pc}

000d58c2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d58c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d58c4:	4605      	mov	r5, r0
   d58c6:	460c      	mov	r4, r1
    WiringBleLock lk;
   d58c8:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d58ca:	4616      	mov	r6, r2
    WiringBleLock lk;
   d58cc:	f7ff fce8 	bl	d52a0 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d58d0:	4621      	mov	r1, r4
   d58d2:	4628      	mov	r0, r5
   d58d4:	f7ff ffce 	bl	d5874 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d58d8:	2800      	cmp	r0, #0
   d58da:	db08      	blt.n	d58ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d58dc:	4631      	mov	r1, r6
   d58de:	4628      	mov	r0, r5
   d58e0:	f7ff ffd0 	bl	d5884 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d58e4:	2800      	cmp	r0, #0
   d58e6:	db02      	blt.n	d58ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d58e8:	4628      	mov	r0, r5
   d58ea:	f7ff ffdc 	bl	d58a6 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d58ee:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d58f0:	a801      	add	r0, sp, #4
   d58f2:	f7ff fce3 	bl	d52bc <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d58f6:	4620      	mov	r0, r4
   d58f8:	b002      	add	sp, #8
   d58fa:	bd70      	pop	{r4, r5, r6, pc}

000d58fc <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d58fc:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d58fe:	69d8      	ldr	r0, [r3, #28]
}
   d5900:	2800      	cmp	r0, #0
   d5902:	bfd4      	ite	le
   d5904:	2000      	movle	r0, #0
   d5906:	2001      	movgt	r0, #1
   d5908:	4770      	bx	lr

000d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d590a:	680b      	ldr	r3, [r1, #0]
   d590c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d590e:	b113      	cbz	r3, d5916 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5910:	685a      	ldr	r2, [r3, #4]
   d5912:	3201      	adds	r2, #1
   d5914:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5916:	4770      	bx	lr

000d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5918:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d591a:	f851 3b04 	ldr.w	r3, [r1], #4
   d591e:	4604      	mov	r4, r0
   d5920:	f840 3b04 	str.w	r3, [r0], #4
   d5924:	f7ff fff1 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5928:	6823      	ldr	r3, [r4, #0]
   d592a:	b90b      	cbnz	r3, d5930 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d592c:	f7ff fc88 	bl	d5240 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5930:	4620      	mov	r0, r4
   d5932:	bd10      	pop	{r4, pc}

000d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5934:	b510      	push	{r4, lr}
   d5936:	f851 3b04 	ldr.w	r3, [r1], #4
   d593a:	4604      	mov	r4, r0
   d593c:	f840 3b04 	str.w	r3, [r0], #4
   d5940:	f7ff ffe3 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5944:	4620      	mov	r0, r4
   d5946:	bd10      	pop	{r4, pc}

000d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5948:	b510      	push	{r4, lr}
   d594a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d594c:	6800      	ldr	r0, [r0, #0]
   d594e:	b128      	cbz	r0, d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5950:	6843      	ldr	r3, [r0, #4]
   d5952:	3b01      	subs	r3, #1
   d5954:	6043      	str	r3, [r0, #4]
   d5956:	b90b      	cbnz	r3, d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5958:	f7ff fc7c 	bl	d5254 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d595c:	4620      	mov	r0, r4
   d595e:	bd10      	pop	{r4, pc}

000d5960 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5960:	b510      	push	{r4, lr}
   d5962:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5964:	3004      	adds	r0, #4
   d5966:	f7ff ffef 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d596a:	4620      	mov	r0, r4
   d596c:	bd10      	pop	{r4, pc}

000d596e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d596e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5970:	6804      	ldr	r4, [r0, #0]
   d5972:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5974:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5976:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d597a:	42a6      	cmp	r6, r4
   d597c:	d004      	beq.n	d5988 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d597e:	1d20      	adds	r0, r4, #4
   d5980:	f7ff ffe2 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5984:	3408      	adds	r4, #8
   d5986:	e7f8      	b.n	d597a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5988:	6828      	ldr	r0, [r5, #0]
   d598a:	f7ff fb47 	bl	d501c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d598e:	4628      	mov	r0, r5
   d5990:	bd70      	pop	{r4, r5, r6, pc}

000d5992 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5992:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5994:	6804      	ldr	r4, [r0, #0]
   d5996:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5998:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d599a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d599e:	42a6      	cmp	r6, r4
   d59a0:	d004      	beq.n	d59ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d59a2:	1d20      	adds	r0, r4, #4
   d59a4:	f7ff ffd0 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59a8:	3408      	adds	r4, #8
   d59aa:	e7f8      	b.n	d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d59ac:	6828      	ldr	r0, [r5, #0]
   d59ae:	f7ff fb35 	bl	d501c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d59b2:	4628      	mov	r0, r5
   d59b4:	bd70      	pop	{r4, r5, r6, pc}

000d59b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d59b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d59b8:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d59ba:	f104 0018 	add.w	r0, r4, #24
   d59be:	f7ff ffe8 	bl	d5992 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d59c2:	f104 000c 	add.w	r0, r4, #12
   d59c6:	f7ff ffd2 	bl	d596e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d59ca:	4620      	mov	r0, r4
   d59cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59d0:	f7fe bb65 	b.w	d409e <_ZdlPv>

000d59d4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d59d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59d6:	6804      	ldr	r4, [r0, #0]
   d59d8:	4607      	mov	r7, r0
   d59da:	b1c4      	cbz	r4, d5a0e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d59dc:	69a5      	ldr	r5, [r4, #24]
   d59de:	69e3      	ldr	r3, [r4, #28]
   d59e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d59e4:	42ae      	cmp	r6, r5
   d59e6:	d004      	beq.n	d59f2 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59e8:	1d28      	adds	r0, r5, #4
   d59ea:	f7ff ffad 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59ee:	3508      	adds	r5, #8
   d59f0:	e7f8      	b.n	d59e4 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d59f2:	69a0      	ldr	r0, [r4, #24]
   d59f4:	f7ff fb12 	bl	d501c <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d59f8:	f104 000c 	add.w	r0, r4, #12
   d59fc:	f7ff ffc9 	bl	d5992 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff ffb4 	bl	d596e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a06:	2134      	movs	r1, #52	; 0x34
   d5a08:	4620      	mov	r0, r4
   d5a0a:	f001 f9c8 	bl	d6d9e <_ZdlPvj>
   d5a0e:	4638      	mov	r0, r7
   d5a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5a14 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5a16:	2500      	movs	r5, #0
   d5a18:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a1a:	6045      	str	r5, [r0, #4]
   d5a1c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a1e:	2024      	movs	r0, #36	; 0x24
   d5a20:	f7fe fb39 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a24:	4604      	mov	r4, r0
   d5a26:	b178      	cbz	r0, d5a48 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5a28:	4603      	mov	r3, r0
   d5a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a2e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5a32:	f8c0 5002 	str.w	r5, [r0, #2]
   d5a36:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5a38:	7285      	strb	r5, [r0, #10]
   d5a3a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5a3c:	60c5      	str	r5, [r0, #12]
   d5a3e:	6105      	str	r5, [r0, #16]
   d5a40:	6145      	str	r5, [r0, #20]
   d5a42:	6185      	str	r5, [r0, #24]
   d5a44:	61c5      	str	r5, [r0, #28]
   d5a46:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5a48:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a4a:	2014      	movs	r0, #20
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	f7fe fb22 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5a52:	4603      	mov	r3, r0
   d5a54:	b128      	cbz	r0, d5a62 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5a56:	2201      	movs	r2, #1
   d5a58:	6042      	str	r2, [r0, #4]
   d5a5a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5a5c:	4a08      	ldr	r2, [pc, #32]	; (d5a80 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5a5e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5a60:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a62:	a802      	add	r0, sp, #8
   d5a64:	6872      	ldr	r2, [r6, #4]
   d5a66:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5a6a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5a6c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a6e:	f7ff ff6b 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5a72:	6833      	ldr	r3, [r6, #0]
   d5a74:	b90b      	cbnz	r3, d5a7a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5a76:	f7ff fbe3 	bl	d5240 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5a7a:	4630      	mov	r0, r6
   d5a7c:	b002      	add	sp, #8
   d5a7e:	bd70      	pop	{r4, r5, r6, pc}
   d5a80:	000d74a0 	.word	0x000d74a0

000d5a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5a84:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5a86:	b570      	push	{r4, r5, r6, lr}
   d5a88:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5a8a:	d91a      	bls.n	d5ac2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5a8c:	4290      	cmp	r0, r2
   d5a8e:	d219      	bcs.n	d5ac4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5a90:	f1a1 0608 	sub.w	r6, r1, #8
   d5a94:	1a51      	subs	r1, r2, r1
   d5a96:	3904      	subs	r1, #4
   d5a98:	1f15      	subs	r5, r2, #4
   d5a9a:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5a9c:	1f2b      	subs	r3, r5, #4
   d5a9e:	429e      	cmp	r6, r3
   d5aa0:	d025      	beq.n	d5aee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5aa2:	2c04      	cmp	r4, #4
   d5aa4:	d007      	beq.n	d5ab6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5aa6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5aaa:	f844 3c04 	str.w	r3, [r4, #-4]
   d5aae:	4629      	mov	r1, r5
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	f7ff ff2a 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f7ff ff46 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5abc:	3d08      	subs	r5, #8
   d5abe:	3c08      	subs	r4, #8
   d5ac0:	e7ec      	b.n	d5a9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5ac2:	d014      	beq.n	d5aee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5ac4:	1d0c      	adds	r4, r1, #4
   d5ac6:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5ac8:	1f23      	subs	r3, r4, #4
   d5aca:	429d      	cmp	r5, r3
   d5acc:	d00f      	beq.n	d5aee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5ace:	2e04      	cmp	r6, #4
   d5ad0:	d007      	beq.n	d5ae2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ad2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5ad6:	f846 3c04 	str.w	r3, [r6, #-4]
   d5ada:	4621      	mov	r1, r4
   d5adc:	4630      	mov	r0, r6
   d5ade:	f7ff ff14 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	f7ff ff30 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ae8:	3408      	adds	r4, #8
   d5aea:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5aec:	e7ec      	b.n	d5ac8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5aee:	bd70      	pop	{r4, r5, r6, pc}

000d5af0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5af4:	6804      	ldr	r4, [r0, #0]
   d5af6:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5af8:	4605      	mov	r5, r0
   d5afa:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5afc:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5b00:	42a7      	cmp	r7, r4
   d5b02:	d018      	beq.n	d5b36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5b04:	4641      	mov	r1, r8
   d5b06:	4620      	mov	r0, r4
   d5b08:	f7ff fe26 	bl	d5758 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5b0c:	4606      	mov	r6, r0
   d5b0e:	b908      	cbnz	r0, d5b14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5b10:	3408      	adds	r4, #8
   d5b12:	e7f5      	b.n	d5b00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5b14:	b18c      	cbz	r4, d5b3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5b16:	1d20      	adds	r0, r4, #4
   d5b18:	f7ff ff16 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5b1c:	682b      	ldr	r3, [r5, #0]
   d5b1e:	686a      	ldr	r2, [r5, #4]
   d5b20:	f104 0108 	add.w	r1, r4, #8
   d5b24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f7ff ffab 	bl	d5a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5b2e:	686b      	ldr	r3, [r5, #4]
   d5b30:	3b01      	subs	r3, #1
   d5b32:	606b      	str	r3, [r5, #4]
    return true;
   d5b34:	e002      	b.n	d5b3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5b36:	2600      	movs	r6, #0
   d5b38:	e000      	b.n	d5b3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5b3a:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5b3c:	4630      	mov	r0, r6
   d5b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5b44:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b46:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5b4a:	6847      	ldr	r7, [r0, #4]
   d5b4c:	9300      	str	r3, [sp, #0]
   d5b4e:	a801      	add	r0, sp, #4
   d5b50:	f7ff fedb 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5b54:	6866      	ldr	r6, [r4, #4]
   d5b56:	68a3      	ldr	r3, [r4, #8]
   d5b58:	429e      	cmp	r6, r3
   d5b5a:	db14      	blt.n	d5b86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5b5c:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5b5e:	2e00      	cmp	r6, #0
   d5b60:	dd0b      	ble.n	d5b7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5b62:	00f0      	lsls	r0, r6, #3
   d5b64:	f7ff fa52 	bl	d500c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5b68:	4605      	mov	r5, r0
   d5b6a:	b318      	cbz	r0, d5bb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5b6c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5b70:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5b74:	f7ff ff86 	bl	d5a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5b78:	e000      	b.n	d5b7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5b7a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b7c:	6820      	ldr	r0, [r4, #0]
   d5b7e:	f7ff fa4d 	bl	d501c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5b82:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5b84:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5b86:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5b88:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5b8a:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5b8e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5b92:	4629      	mov	r1, r5
   d5b94:	f105 0008 	add.w	r0, r5, #8
   d5b98:	f7ff ff74 	bl	d5a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5b9c:	b135      	cbz	r5, d5bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5b9e:	9b00      	ldr	r3, [sp, #0]
   d5ba0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5ba4:	a901      	add	r1, sp, #4
   d5ba6:	1d28      	adds	r0, r5, #4
   d5ba8:	f7ff feaf 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5bac:	6863      	ldr	r3, [r4, #4]
   d5bae:	3301      	adds	r3, #1
   d5bb0:	6063      	str	r3, [r4, #4]
   d5bb2:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bb4:	a801      	add	r0, sp, #4
   d5bb6:	f7ff fec7 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5bba:	4628      	mov	r0, r5
   d5bbc:	b003      	add	sp, #12
   d5bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bc4:	4604      	mov	r4, r0
   d5bc6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5bc8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5bca:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5bcc:	f7ff fb68 	bl	d52a0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5bd0:	6823      	ldr	r3, [r4, #0]
   d5bd2:	2b03      	cmp	r3, #3
   d5bd4:	d002      	beq.n	d5bdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5bd6:	2b04      	cmp	r3, #4
   d5bd8:	d042      	beq.n	d5c60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5bda:	e087      	b.n	d5cec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5bdc:	a804      	add	r0, sp, #16
   d5bde:	f7ff ff19 	bl	d5a14 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5be2:	9b04      	ldr	r3, [sp, #16]
   d5be4:	8922      	ldrh	r2, [r4, #8]
   d5be6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5be8:	6862      	ldr	r2, [r4, #4]
   d5bea:	9904      	ldr	r1, [sp, #16]
   d5bec:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5bf0:	f8c1 3002 	str.w	r3, [r1, #2]
   d5bf4:	6853      	ldr	r3, [r2, #4]
   d5bf6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5bfa:	a807      	add	r0, sp, #28
   d5bfc:	9b04      	ldr	r3, [sp, #16]
   d5bfe:	9306      	str	r3, [sp, #24]
   d5c00:	a905      	add	r1, sp, #20
   d5c02:	f7ff fe82 	bl	d590a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5c06:	a906      	add	r1, sp, #24
   d5c08:	f105 0018 	add.w	r0, r5, #24
   d5c0c:	f7ff ff99 	bl	d5b42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5c10:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c12:	a807      	add	r0, sp, #28
   d5c14:	f7ff fe98 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c18:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c1a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5c1c:	b974      	cbnz	r4, d5c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c1e:	4b36      	ldr	r3, [pc, #216]	; (d5cf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5c20:	9300      	str	r3, [sp, #0]
   d5c22:	aa06      	add	r2, sp, #24
   d5c24:	4623      	mov	r3, r4
   d5c26:	4935      	ldr	r1, [pc, #212]	; (d5cfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5c28:	9407      	str	r4, [sp, #28]
   d5c2a:	2032      	movs	r0, #50	; 0x32
   d5c2c:	f7ff f96a 	bl	d4f04 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5c30:	9b04      	ldr	r3, [sp, #16]
   d5c32:	4621      	mov	r1, r4
   d5c34:	8818      	ldrh	r0, [r3, #0]
   d5c36:	f7fe ffc3 	bl	d4bc0 <hal_ble_gap_disconnect>
   d5c3a:	e00d      	b.n	d5c58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5c3c:	4a30      	ldr	r2, [pc, #192]	; (d5d00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5c3e:	9200      	str	r2, [sp, #0]
   d5c40:	2300      	movs	r3, #0
   d5c42:	aa06      	add	r2, sp, #24
   d5c44:	492d      	ldr	r1, [pc, #180]	; (d5cfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5c46:	9307      	str	r3, [sp, #28]
   d5c48:	2001      	movs	r0, #1
   d5c4a:	f7ff f95b 	bl	d4f04 <log_message>
                if (impl->connectedCb_) {
   d5c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5c50:	b113      	cbz	r3, d5c58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5c52:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5c54:	a804      	add	r0, sp, #16
   d5c56:	4798      	blx	r3
   d5c58:	a805      	add	r0, sp, #20
   d5c5a:	f7ff fe75 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c5e:	e045      	b.n	d5cec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5c60:	8921      	ldrh	r1, [r4, #8]
   d5c62:	4628      	mov	r0, r5
   d5c64:	f7ff fcf8 	bl	d5658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5c68:	4607      	mov	r7, r0
   d5c6a:	2800      	cmp	r0, #0
   d5c6c:	d03e      	beq.n	d5cec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5c6e:	6804      	ldr	r4, [r0, #0]
   d5c70:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5c72:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5c78:	8022      	strh	r2, [r4, #0]
   d5c7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5c7e:	4299      	cmp	r1, r3
   d5c80:	d003      	beq.n	d5c8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5c82:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5c86:	8042      	strh	r2, [r0, #2]
   d5c88:	e7f9      	b.n	d5c7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5c8a:	68e6      	ldr	r6, [r4, #12]
   d5c8c:	6923      	ldr	r3, [r4, #16]
   d5c8e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5c92:	45b0      	cmp	r8, r6
   d5c94:	d004      	beq.n	d5ca0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5c96:	1d30      	adds	r0, r6, #4
   d5c98:	f7ff fe56 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c9c:	3608      	adds	r6, #8
   d5c9e:	e7f8      	b.n	d5c92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5ca4:	69a6      	ldr	r6, [r4, #24]
   d5ca6:	69e3      	ldr	r3, [r4, #28]
   d5ca8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5cac:	45b0      	cmp	r8, r6
   d5cae:	d004      	beq.n	d5cba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5cb0:	1d30      	adds	r0, r6, #4
   d5cb2:	f7ff fe49 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cb6:	3608      	adds	r6, #8
   d5cb8:	e7f8      	b.n	d5cac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5cba:	2300      	movs	r3, #0
   d5cbc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5cbe:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5cc0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5cc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5cc4:	b113      	cbz	r3, d5ccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5cc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5cc8:	4638      	mov	r0, r7
   d5cca:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5ccc:	2320      	movs	r3, #32
   d5cce:	4a0d      	ldr	r2, [pc, #52]	; (d5d04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5cd0:	9306      	str	r3, [sp, #24]
   d5cd2:	9200      	str	r2, [sp, #0]
   d5cd4:	2300      	movs	r3, #0
   d5cd6:	4909      	ldr	r1, [pc, #36]	; (d5cfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5cd8:	9307      	str	r3, [sp, #28]
   d5cda:	2001      	movs	r0, #1
   d5cdc:	aa06      	add	r2, sp, #24
   d5cde:	f7ff f911 	bl	d4f04 <log_message>
                    impl->peers_.removeOne(*peer);
   d5ce2:	4639      	mov	r1, r7
   d5ce4:	f105 0018 	add.w	r0, r5, #24
   d5ce8:	f7ff ff02 	bl	d5af0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5cec:	a803      	add	r0, sp, #12
   d5cee:	f7ff fae5 	bl	d52bc <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5cf2:	b00e      	add	sp, #56	; 0x38
   d5cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cf8:	000d7526 	.word	0x000d7526
   d5cfc:	000d74c4 	.word	0x000d74c4
   d5d00:	000d754c 	.word	0x000d754c
   d5d04:	000d7569 	.word	0x000d7569

000d5d08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5d08:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d0c:	4606      	mov	r6, r0
   d5d0e:	460c      	mov	r4, r1
   d5d10:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5d12:	d914      	bls.n	d5d3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5d14:	4290      	cmp	r0, r2
   d5d16:	d213      	bcs.n	d5d40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5d18:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5d1c:	1a6c      	subs	r4, r5, r1
   d5d1e:	f1a1 0708 	sub.w	r7, r1, #8
   d5d22:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5d24:	42af      	cmp	r7, r5
   d5d26:	d018      	beq.n	d5d5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5d28:	b11c      	cbz	r4, d5d32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5d2a:	4629      	mov	r1, r5
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	f7ff fe01 	bl	d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5d32:	1d28      	adds	r0, r5, #4
   d5d34:	f7ff fe08 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5d38:	3d08      	subs	r5, #8
   d5d3a:	3c08      	subs	r4, #8
   d5d3c:	e7f2      	b.n	d5d24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5d3e:	d00c      	beq.n	d5d5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5d40:	42ac      	cmp	r4, r5
   d5d42:	d00a      	beq.n	d5d5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5d44:	b11e      	cbz	r6, d5d4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5d46:	4621      	mov	r1, r4
   d5d48:	4630      	mov	r0, r6
   d5d4a:	f7ff fdf3 	bl	d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5d4e:	1d20      	adds	r0, r4, #4
   d5d50:	f7ff fdfa 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5d54:	3408      	adds	r4, #8
   d5d56:	3608      	adds	r6, #8
   d5d58:	e7f2      	b.n	d5d40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d5c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5d5e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d60:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5d62:	dd0b      	ble.n	d5d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5d64:	00f0      	lsls	r0, r6, #3
   d5d66:	f7ff f951 	bl	d500c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5d6a:	4604      	mov	r4, r0
   d5d6c:	b170      	cbz	r0, d5d8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5d6e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5d72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5d76:	f7ff ffc7 	bl	d5d08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5d7a:	e000      	b.n	d5d7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d7c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d7e:	6828      	ldr	r0, [r5, #0]
   d5d80:	f7ff f94c 	bl	d501c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d84:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5d86:	60ae      	str	r6, [r5, #8]
        return true;
   d5d88:	2001      	movs	r0, #1
   d5d8a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5d8c:	bd70      	pop	{r4, r5, r6, pc}

000d5d8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5d90:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5d92:	6845      	ldr	r5, [r0, #4]
   d5d94:	4668      	mov	r0, sp
   d5d96:	f7ff fdcd 	bl	d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d9a:	6861      	ldr	r1, [r4, #4]
   d5d9c:	68a3      	ldr	r3, [r4, #8]
   d5d9e:	4299      	cmp	r1, r3
   d5da0:	db05      	blt.n	d5dae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5da2:	3101      	adds	r1, #1
   d5da4:	4620      	mov	r0, r4
   d5da6:	f7ff ffd9 	bl	d5d5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5daa:	4606      	mov	r6, r0
   d5dac:	b198      	cbz	r0, d5dd6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5dae:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5db0:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5db2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5db6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5dba:	4629      	mov	r1, r5
   d5dbc:	f105 0008 	add.w	r0, r5, #8
   d5dc0:	f7ff ffa2 	bl	d5d08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5dc4:	b11d      	cbz	r5, d5dce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5dc6:	4669      	mov	r1, sp
   d5dc8:	4628      	mov	r0, r5
   d5dca:	f7ff fdb3 	bl	d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5dce:	6863      	ldr	r3, [r4, #4]
   d5dd0:	3301      	adds	r3, #1
   d5dd2:	6063      	str	r3, [r4, #4]
   d5dd4:	2601      	movs	r6, #1
   d5dd6:	a801      	add	r0, sp, #4
   d5dd8:	f7ff fdb6 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5ddc:	4630      	mov	r0, r6
   d5dde:	b002      	add	sp, #8
   d5de0:	bd70      	pop	{r4, r5, r6, pc}

000d5de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5de2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5de6:	4606      	mov	r6, r0
   d5de8:	460c      	mov	r4, r1
   d5dea:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5dec:	d914      	bls.n	d5e18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5dee:	4290      	cmp	r0, r2
   d5df0:	d213      	bcs.n	d5e1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5df2:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5df6:	1a6c      	subs	r4, r5, r1
   d5df8:	f1a1 0708 	sub.w	r7, r1, #8
   d5dfc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5dfe:	42af      	cmp	r7, r5
   d5e00:	d018      	beq.n	d5e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5e02:	b11c      	cbz	r4, d5e0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5e04:	4629      	mov	r1, r5
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff fd86 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5e0c:	1d28      	adds	r0, r5, #4
   d5e0e:	f7ff fd9b 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5e12:	3d08      	subs	r5, #8
   d5e14:	3c08      	subs	r4, #8
   d5e16:	e7f2      	b.n	d5dfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5e18:	d00c      	beq.n	d5e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5e1a:	42ac      	cmp	r4, r5
   d5e1c:	d00a      	beq.n	d5e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5e1e:	b11e      	cbz	r6, d5e28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5e20:	4621      	mov	r1, r4
   d5e22:	4630      	mov	r0, r6
   d5e24:	f7ff fd78 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5e28:	1d20      	adds	r0, r4, #4
   d5e2a:	f7ff fd8d 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5e2e:	3408      	adds	r4, #8
   d5e30:	3608      	adds	r6, #8
   d5e32:	e7f2      	b.n	d5e1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5e36:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5e38:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5e3a:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5e3c:	dd0b      	ble.n	d5e56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5e3e:	00f0      	lsls	r0, r6, #3
   d5e40:	f7ff f8e4 	bl	d500c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5e44:	4604      	mov	r4, r0
   d5e46:	b170      	cbz	r0, d5e66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5e48:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5e4c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5e50:	f7ff ffc7 	bl	d5de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5e54:	e000      	b.n	d5e58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5e56:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5e58:	6828      	ldr	r0, [r5, #0]
   d5e5a:	f7ff f8df 	bl	d501c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5e5e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5e60:	60ae      	str	r6, [r5, #8]
        return true;
   d5e62:	2001      	movs	r0, #1
   d5e64:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5e66:	bd70      	pop	{r4, r5, r6, pc}

000d5e68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e6a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5e6c:	6845      	ldr	r5, [r0, #4]
   d5e6e:	4668      	mov	r0, sp
   d5e70:	f7ff fd52 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e74:	6861      	ldr	r1, [r4, #4]
   d5e76:	68a3      	ldr	r3, [r4, #8]
   d5e78:	4299      	cmp	r1, r3
   d5e7a:	db05      	blt.n	d5e88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5e7c:	3101      	adds	r1, #1
   d5e7e:	4620      	mov	r0, r4
   d5e80:	f7ff ffd9 	bl	d5e36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5e84:	4606      	mov	r6, r0
   d5e86:	b198      	cbz	r0, d5eb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5e88:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5e8a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5e90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e94:	4629      	mov	r1, r5
   d5e96:	f105 0008 	add.w	r0, r5, #8
   d5e9a:	f7ff ffa2 	bl	d5de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5e9e:	b11d      	cbz	r5, d5ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5ea0:	4669      	mov	r1, sp
   d5ea2:	4628      	mov	r0, r5
   d5ea4:	f7ff fd38 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5ea8:	6863      	ldr	r3, [r4, #4]
   d5eaa:	3301      	adds	r3, #1
   d5eac:	6063      	str	r3, [r4, #4]
   d5eae:	2601      	movs	r6, #1
   d5eb0:	a801      	add	r0, sp, #4
   d5eb2:	f7ff fd49 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5eb6:	4630      	mov	r0, r6
   d5eb8:	b002      	add	sp, #8
   d5eba:	bd70      	pop	{r4, r5, r6, pc}

000d5ebc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5ebc:	b510      	push	{r4, lr}
   d5ebe:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5ec0:	6840      	ldr	r0, [r0, #4]
   d5ec2:	b108      	cbz	r0, d5ec8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5ec4:	f7fe f8eb 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5ec8:	4620      	mov	r0, r4
   d5eca:	bd10      	pop	{r4, pc}

000d5ecc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5ecc:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ece:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5ed0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5ed2:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5ed6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5eda:	f7ff f921 	bl	d5120 <_ZN6StringD1Ev>
   d5ede:	4668      	mov	r0, sp
   d5ee0:	f7ff ffec 	bl	d5ebc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ee4:	b003      	add	sp, #12
   d5ee6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5eec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5eec:	b538      	push	{r3, r4, r5, lr}
   d5eee:	2300      	movs	r3, #0
   d5ef0:	4604      	mov	r4, r0
   d5ef2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ef4:	2014      	movs	r0, #20
   d5ef6:	460d      	mov	r5, r1
   d5ef8:	f7fe f8cd 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5efc:	b128      	cbz	r0, d5f0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5efe:	2301      	movs	r3, #1
   d5f00:	6043      	str	r3, [r0, #4]
   d5f02:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5f04:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5f06:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5f08:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5f0a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	bd38      	pop	{r3, r4, r5, pc}
   d5f10:	000d7468 	.word	0x000d7468

000d5f14 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f18:	b088      	sub	sp, #32
   d5f1a:	4605      	mov	r5, r0
   d5f1c:	461e      	mov	r6, r3
   d5f1e:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5f20:	2300      	movs	r3, #0
   d5f22:	460f      	mov	r7, r1
   d5f24:	4690      	mov	r8, r2
   d5f26:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f28:	9305      	str	r3, [sp, #20]
   d5f2a:	f7fe f8b4 	bl	d4096 <_Znwj>
   d5f2e:	f8cd d018 	str.w	sp, [sp, #24]
   d5f32:	4604      	mov	r4, r0
   d5f34:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5f36:	b1b0      	cbz	r0, d5f66 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5f38:	f7ff fb6e 	bl	d5618 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5f3c:	4639      	mov	r1, r7
   d5f3e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5f42:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5f46:	f7ff f945 	bl	d51d4 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5f4c:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5f4e:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5f52:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5f54:	f104 0014 	add.w	r0, r4, #20
   d5f58:	f7ff fa30 	bl	d53bc <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5f5c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d5f5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5f62:	f7ff fa2b 	bl	d53bc <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f66:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5f68:	2600      	movs	r6, #0
   d5f6a:	ab01      	add	r3, sp, #4
   d5f6c:	aa02      	add	r2, sp, #8
   d5f6e:	a803      	add	r0, sp, #12
   d5f70:	9607      	str	r6, [sp, #28]
   d5f72:	f7ff ffbb 	bl	d5eec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f76:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5f78:	9a05      	ldr	r2, [sp, #20]
   d5f7a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f7c:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5f7e:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5f80:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f82:	f7ff fce1 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5f86:	a806      	add	r0, sp, #24
   d5f88:	f7ff ff98 	bl	d5ebc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f8c:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f8e:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f90:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f92:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5f94:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f96:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f98:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5f9a:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5f9c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5fa0:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5fa2:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5fa4:	f7ff fcd0 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fa8:	a805      	add	r0, sp, #20
   d5faa:	f7ff fccd 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d5fae:	6829      	ldr	r1, [r5, #0]
   d5fb0:	b919      	cbnz	r1, d5fba <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d5fb2:	4a03      	ldr	r2, [pc, #12]	; (d5fc0 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d5fb4:	200a      	movs	r0, #10
   d5fb6:	f7fe ff9d 	bl	d4ef4 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5fba:	b008      	add	sp, #32
   d5fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fc0:	000d4b61 	.word	0x000d4b61

000d5fc4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5fc4:	b510      	push	{r4, lr}
   d5fc6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	b108      	cbz	r0, d5fd0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5fcc:	f7fe f867 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	bd10      	pop	{r4, pc}

000d5fd4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5fd4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5fd6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5fd8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5fda:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5fde:	4668      	mov	r0, sp
   d5fe0:	f7ff fff0 	bl	d5fc4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5fe4:	b003      	add	sp, #12
   d5fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5fec:	b538      	push	{r3, r4, r5, lr}
   d5fee:	2300      	movs	r3, #0
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ff4:	2014      	movs	r0, #20
   d5ff6:	460d      	mov	r5, r1
   d5ff8:	f7fe f84d 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5ffc:	b128      	cbz	r0, d600a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5ffe:	2301      	movs	r3, #1
   d6000:	6043      	str	r3, [r0, #4]
   d6002:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6004:	4b02      	ldr	r3, [pc, #8]	; (d6010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6006:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6008:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d600a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d600c:	4620      	mov	r0, r4
   d600e:	bd38      	pop	{r3, r4, r5, pc}
   d6010:	000d7484 	.word	0x000d7484

000d6014 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6014:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6016:	2600      	movs	r6, #0
   d6018:	b087      	sub	sp, #28
   d601a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d601c:	6046      	str	r6, [r0, #4]
   d601e:	4604      	mov	r4, r0
   d6020:	2018      	movs	r0, #24
   d6022:	460f      	mov	r7, r1
   d6024:	f7fe f837 	bl	d4096 <_Znwj>
   d6028:	f8cd d010 	str.w	sp, [sp, #16]
   d602c:	4605      	mov	r5, r0
   d602e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6030:	b138      	cbz	r0, d6042 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6032:	f7ff f95d 	bl	d52f0 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6036:	4639      	mov	r1, r7
   d6038:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d603a:	82ae      	strh	r6, [r5, #20]
   d603c:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d603e:	f7ff f9bd 	bl	d53bc <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6042:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6044:	4629      	mov	r1, r5
   d6046:	9305      	str	r3, [sp, #20]
   d6048:	aa02      	add	r2, sp, #8
   d604a:	ab01      	add	r3, sp, #4
   d604c:	a803      	add	r0, sp, #12
   d604e:	f7ff ffcd 	bl	d5fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6052:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6054:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6056:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6058:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d605a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d605c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d605e:	f7ff fc73 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6062:	a804      	add	r0, sp, #16
   d6064:	f7ff ffae 	bl	d5fc4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d6068:	6823      	ldr	r3, [r4, #0]
   d606a:	b90b      	cbnz	r3, d6070 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d606c:	f7ff f8e8 	bl	d5240 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d6070:	4620      	mov	r0, r4
   d6072:	b007      	add	sp, #28
   d6074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6078 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d607c:	4617      	mov	r7, r2
   d607e:	b09f      	sub	sp, #124	; 0x7c
   d6080:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6082:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6084:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6086:	f7ff f90b 	bl	d52a0 <_ZN8particle3ble13WiringBleLockC1Ev>
   d608a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d608c:	7923      	ldrb	r3, [r4, #4]
   d608e:	2b00      	cmp	r3, #0
   d6090:	f000 80f3 	beq.w	d627a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6094:	6833      	ldr	r3, [r6, #0]
   d6096:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6098:	691b      	ldr	r3, [r3, #16]
   d609a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d609e:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d60a0:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d60a4:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d60a8:	9b03      	ldr	r3, [sp, #12]
   d60aa:	42ab      	cmp	r3, r5
   d60ac:	d023      	beq.n	d60f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d60ae:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d60b2:	4650      	mov	r0, sl
   d60b4:	f109 0114 	add.w	r1, r9, #20
   d60b8:	f7ff f999 	bl	d53ee <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d60bc:	2800      	cmp	r0, #0
   d60be:	f000 80e1 	beq.w	d6284 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d60c2:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d60c6:	4658      	mov	r0, fp
   d60c8:	f7ff f991 	bl	d53ee <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d60cc:	2800      	cmp	r0, #0
   d60ce:	f000 80d9 	beq.w	d6284 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d60d2:	6823      	ldr	r3, [r4, #0]
   d60d4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d60d8:	f8d9 3000 	ldr.w	r3, [r9]
   d60dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d60e0:	4299      	cmp	r1, r3
   d60e2:	f040 80cf 	bne.w	d6284 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d60e6:	2320      	movs	r3, #32
   d60e8:	4a6b      	ldr	r2, [pc, #428]	; (d6298 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d60ea:	9313      	str	r3, [sp, #76]	; 0x4c
   d60ec:	2300      	movs	r3, #0
   d60ee:	9200      	str	r2, [sp, #0]
   d60f0:	9314      	str	r3, [sp, #80]	; 0x50
   d60f2:	aa13      	add	r2, sp, #76	; 0x4c
   d60f4:	e0bd      	b.n	d6272 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d60f6:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d60fa:	4628      	mov	r0, r5
   d60fc:	f7ff f945 	bl	d538a <_ZNK8particle7BleUuid7isValidEv>
   d6100:	b918      	cbnz	r0, d610a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6102:	4966      	ldr	r1, [pc, #408]	; (d629c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6104:	4628      	mov	r0, r5
   d6106:	f7ff f964 	bl	d53d2 <_ZN8particle7BleUuidaSEPKh>
   d610a:	6833      	ldr	r3, [r6, #0]
   d610c:	f8d3 9000 	ldr.w	r9, [r3]
   d6110:	685b      	ldr	r3, [r3, #4]
   d6112:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6116:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6118:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d611a:	d008      	beq.n	d612e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d611c:	f8d9 0000 	ldr.w	r0, [r9]
   d6120:	f7ff f965 	bl	d53ee <_ZNK8particle7BleUuideqERKS0_>
   d6124:	2800      	cmp	r0, #0
   d6126:	d137      	bne.n	d6198 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6128:	f109 0908 	add.w	r9, r9, #8
   d612c:	e7f3      	b.n	d6116 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d612e:	a806      	add	r0, sp, #24
   d6130:	f7ff ff70 	bl	d6014 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6134:	aa13      	add	r2, sp, #76	; 0x4c
   d6136:	462b      	mov	r3, r5
   d6138:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d613c:	4696      	mov	lr, r2
   d613e:	6818      	ldr	r0, [r3, #0]
   d6140:	6859      	ldr	r1, [r3, #4]
   d6142:	4615      	mov	r5, r2
   d6144:	c503      	stmia	r5!, {r0, r1}
   d6146:	3308      	adds	r3, #8
   d6148:	4563      	cmp	r3, ip
   d614a:	462a      	mov	r2, r5
   d614c:	d1f7      	bne.n	d613e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d614e:	6818      	ldr	r0, [r3, #0]
   d6150:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6152:	9a06      	ldr	r2, [sp, #24]
   d6154:	2300      	movs	r3, #0
   d6156:	3214      	adds	r2, #20
   d6158:	4671      	mov	r1, lr
   d615a:	2001      	movs	r0, #1
   d615c:	f7fe fd3a 	bl	d4bd4 <hal_ble_gatt_server_add_service>
   d6160:	2800      	cmp	r0, #0
   d6162:	d17e      	bne.n	d6262 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d6164:	6835      	ldr	r5, [r6, #0]
   d6166:	a906      	add	r1, sp, #24
   d6168:	a80b      	add	r0, sp, #44	; 0x2c
   d616a:	f7ff fbe3 	bl	d5934 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d616e:	4628      	mov	r0, r5
   d6170:	a90b      	add	r1, sp, #44	; 0x2c
   d6172:	f7ff fe0c 	bl	d5d8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6176:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6178:	a80c      	add	r0, sp, #48	; 0x30
   d617a:	f7ff fbe5 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d617e:	2d00      	cmp	r5, #0
   d6180:	d06f      	beq.n	d6262 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d6182:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d6184:	6853      	ldr	r3, [r2, #4]
   d6186:	6812      	ldr	r2, [r2, #0]
   d6188:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d618c:	3b01      	subs	r3, #1
   d618e:	a807      	add	r0, sp, #28
   d6190:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6194:	f7ff fbd8 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d6198:	f104 0514 	add.w	r5, r4, #20
   d619c:	4628      	mov	r0, r5
   d619e:	f7ff f8f4 	bl	d538a <_ZNK8particle7BleUuid7isValidEv>
   d61a2:	b968      	cbnz	r0, d61c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d61a4:	4b3e      	ldr	r3, [pc, #248]	; (d62a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d61a6:	493d      	ldr	r1, [pc, #244]	; (d629c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d61a8:	881a      	ldrh	r2, [r3, #0]
   d61aa:	3201      	adds	r2, #1
   d61ac:	b292      	uxth	r2, r2
   d61ae:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d61b0:	a813      	add	r0, sp, #76	; 0x4c
   d61b2:	2301      	movs	r3, #1
   d61b4:	f7ff f8d5 	bl	d5362 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d61b8:	a913      	add	r1, sp, #76	; 0x4c
   d61ba:	4628      	mov	r0, r5
   d61bc:	f7ff f8fe 	bl	d53bc <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d61c0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d61c4:	4652      	mov	r2, sl
   d61c6:	2100      	movs	r1, #0
   d61c8:	a813      	add	r0, sp, #76	; 0x4c
   d61ca:	f000 ff76 	bl	d70ba <memset>
    charInit.version = BLE_API_VERSION;
   d61ce:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d61d0:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d61d2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d61d6:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d61da:	462b      	mov	r3, r5
   d61dc:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d61e0:	4615      	mov	r5, r2
   d61e2:	6818      	ldr	r0, [r3, #0]
   d61e4:	6859      	ldr	r1, [r3, #4]
   d61e6:	4696      	mov	lr, r2
   d61e8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d61ec:	3308      	adds	r3, #8
   d61ee:	4563      	cmp	r3, ip
   d61f0:	4672      	mov	r2, lr
   d61f2:	d1f6      	bne.n	d61e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d61f4:	6818      	ldr	r0, [r3, #0]
   d61f6:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d61fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61fc:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d6200:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6204:	682b      	ldr	r3, [r5, #0]
   d6206:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d620a:	7923      	ldrb	r3, [r4, #4]
   d620c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d6210:	f8d9 3000 	ldr.w	r3, [r9]
   d6214:	8a9b      	ldrh	r3, [r3, #20]
   d6216:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d621a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d621c:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d621e:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6220:	4b20      	ldr	r3, [pc, #128]	; (d62a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d6222:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6224:	1da1      	adds	r1, r4, #6
   d6226:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d6228:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d622a:	f7fe fcfb 	bl	d4c24 <hal_ble_gatt_server_add_characteristic>
   d622e:	bb20      	cbnz	r0, d627a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d6230:	2301      	movs	r3, #1
   d6232:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6234:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6236:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6238:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d623a:	a80b      	add	r0, sp, #44	; 0x2c
   d623c:	f7ff fb6c 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6240:	4620      	mov	r0, r4
   d6242:	a90b      	add	r1, sp, #44	; 0x2c
   d6244:	f7ff fe10 	bl	d5e68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6248:	4604      	mov	r4, r0
   d624a:	a80c      	add	r0, sp, #48	; 0x30
   d624c:	f7ff fb7c 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6250:	b99c      	cbnz	r4, d627a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d6252:	2320      	movs	r3, #32
   d6254:	930b      	str	r3, [sp, #44]	; 0x2c
   d6256:	4b14      	ldr	r3, [pc, #80]	; (d62a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d6258:	9300      	str	r3, [sp, #0]
   d625a:	940c      	str	r4, [sp, #48]	; 0x30
   d625c:	4623      	mov	r3, r4
   d625e:	aa0b      	add	r2, sp, #44	; 0x2c
   d6260:	e007      	b.n	d6272 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d6262:	4639      	mov	r1, r7
   d6264:	4640      	mov	r0, r8
   d6266:	f7ff fb57 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d626a:	a807      	add	r0, sp, #28
   d626c:	f7ff fb6c 	bl	d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6270:	e00a      	b.n	d6288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6272:	490e      	ldr	r1, [pc, #56]	; (d62ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d6274:	2032      	movs	r0, #50	; 0x32
   d6276:	f7fe fe45 	bl	d4f04 <log_message>
            return characteristic;
   d627a:	4639      	mov	r1, r7
   d627c:	4640      	mov	r0, r8
   d627e:	f7ff fb4b 	bl	d5918 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6282:	e001      	b.n	d6288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d6284:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6286:	e70f      	b.n	d60a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d6288:	a805      	add	r0, sp, #20
   d628a:	f7ff f817 	bl	d52bc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d628e:	4640      	mov	r0, r8
   d6290:	b01f      	add	sp, #124	; 0x7c
   d6292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6296:	bf00      	nop
   d6298:	000d7639 	.word	0x000d7639
   d629c:	000d74b4 	.word	0x000d74b4
   d62a0:	2003e3dc 	.word	0x2003e3dc
   d62a4:	000d5825 	.word	0x000d5825
   d62a8:	000d7612 	.word	0x000d7612
   d62ac:	000d74c4 	.word	0x000d74c4

000d62b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62b0:	4802      	ldr	r0, [pc, #8]	; (d62bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d62b2:	2300      	movs	r3, #0
   d62b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d62b6:	f7fe bcfd 	b.w	d4cb4 <os_mutex_recursive_create>
   d62ba:	bf00      	nop
   d62bc:	2003e3e0 	.word	0x2003e3e0

000d62c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d62c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62c2:	4606      	mov	r6, r0
   d62c4:	460d      	mov	r5, r1
   d62c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d62c8:	2400      	movs	r4, #0
  while (size--) {
   d62ca:	42bd      	cmp	r5, r7
   d62cc:	d00c      	beq.n	d62e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d62ce:	6833      	ldr	r3, [r6, #0]
   d62d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d62d4:	689b      	ldr	r3, [r3, #8]
   d62d6:	4630      	mov	r0, r6
   d62d8:	4798      	blx	r3
     if (chunk>=0)
   d62da:	2800      	cmp	r0, #0
   d62dc:	db01      	blt.n	d62e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d62de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d62e0:	e7f3      	b.n	d62ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d62e2:	2c00      	cmp	r4, #0
   d62e4:	bf08      	it	eq
   d62e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d62e8:	4620      	mov	r0, r4
   d62ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d62ec:	b570      	push	{r4, r5, r6, lr}
   d62ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d62f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d62f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d62f4:	b149      	cbz	r1, d630a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d62f6:	f000 ff11 	bl	d711c <strlen>
   d62fa:	682b      	ldr	r3, [r5, #0]
   d62fc:	4602      	mov	r2, r0
   d62fe:	4621      	mov	r1, r4
   d6300:	4628      	mov	r0, r5
   d6302:	68db      	ldr	r3, [r3, #12]
    }
   d6304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6308:	4718      	bx	r3
    }
   d630a:	bd70      	pop	{r4, r5, r6, pc}

000d630c <_ZN5Print5printEPKc>:
   d630c:	b508      	push	{r3, lr}
   d630e:	f7ff ffed 	bl	d62ec <_ZN5Print5writeEPKc>
   d6312:	bd08      	pop	{r3, pc}

000d6314 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6314:	6803      	ldr	r3, [r0, #0]
   d6316:	689b      	ldr	r3, [r3, #8]
   d6318:	4718      	bx	r3

000d631a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d631a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d631c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d631e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6320:	f7ff fff8 	bl	d6314 <_ZN5Print5printEc>
  n += print('\n');
   d6324:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6326:	4604      	mov	r4, r0
  n += print('\n');
   d6328:	4628      	mov	r0, r5
   d632a:	f7ff fff3 	bl	d6314 <_ZN5Print5printEc>
  return n;
}
   d632e:	4420      	add	r0, r4
   d6330:	bd38      	pop	{r3, r4, r5, pc}

000d6332 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6332:	b538      	push	{r3, r4, r5, lr}
   d6334:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6336:	f7ff ffd9 	bl	d62ec <_ZN5Print5writeEPKc>
   d633a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d633c:	4628      	mov	r0, r5
   d633e:	f7ff ffec 	bl	d631a <_ZN5Print7printlnEv>
  return n;
}
   d6342:	4420      	add	r0, r4
   d6344:	bd38      	pop	{r3, r4, r5, pc}

000d6346 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6346:	b530      	push	{r4, r5, lr}
   d6348:	b08b      	sub	sp, #44	; 0x2c
   d634a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d634c:	2100      	movs	r1, #0
   d634e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6352:	2a01      	cmp	r2, #1
   d6354:	bf98      	it	ls
   d6356:	220a      	movls	r2, #10
   d6358:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d635c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6360:	fb05 3312 	mls	r3, r5, r2, r3
   d6364:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6368:	2b09      	cmp	r3, #9
   d636a:	bf94      	ite	ls
   d636c:	3330      	addls	r3, #48	; 0x30
   d636e:	3337      	addhi	r3, #55	; 0x37
   d6370:	b2db      	uxtb	r3, r3
   d6372:	4621      	mov	r1, r4
   d6374:	f804 3901 	strb.w	r3, [r4], #-1
   d6378:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d637a:	2d00      	cmp	r5, #0
   d637c:	d1ee      	bne.n	d635c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d637e:	f7ff ffb5 	bl	d62ec <_ZN5Print5writeEPKc>
}
   d6382:	b00b      	add	sp, #44	; 0x2c
   d6384:	bd30      	pop	{r4, r5, pc}

000d6386 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6386:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6388:	b92a      	cbnz	r2, d6396 <_ZN5Print5printEmi+0x10>
   d638a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d638c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6390:	689b      	ldr	r3, [r3, #8]
   d6392:	b2c9      	uxtb	r1, r1
   d6394:	4718      	bx	r3
  else return printNumber(n, base);
   d6396:	b2d2      	uxtb	r2, r2
}
   d6398:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d639c:	f7ff bfd3 	b.w	d6346 <_ZN5Print11printNumberEmh>

000d63a0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d63a0:	f7ff bff1 	b.w	d6386 <_ZN5Print5printEmi>

000d63a4 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d63a4:	b538      	push	{r3, r4, r5, lr}
   d63a6:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d63a8:	f7ff ffed 	bl	d6386 <_ZN5Print5printEmi>
   d63ac:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d63ae:	4628      	mov	r0, r5
   d63b0:	f7ff ffb3 	bl	d631a <_ZN5Print7printlnEv>
  return n;
}
   d63b4:	4420      	add	r0, r4
   d63b6:	bd38      	pop	{r3, r4, r5, pc}

000d63b8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d63b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63bc:	4607      	mov	r7, r0
   d63be:	460e      	mov	r6, r1
  if (base == 0) {
   d63c0:	4615      	mov	r5, r2
   d63c2:	b92a      	cbnz	r2, d63d0 <_ZN5Print5printEli+0x18>
    return write(n);
   d63c4:	6803      	ldr	r3, [r0, #0]
   d63c6:	b2c9      	uxtb	r1, r1
   d63c8:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d63ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d63ce:	4718      	bx	r3
  } else if (base == 10) {
   d63d0:	2a0a      	cmp	r2, #10
   d63d2:	d102      	bne.n	d63da <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d63d4:	2900      	cmp	r1, #0
   d63d6:	da01      	bge.n	d63dc <_ZN5Print5printEli+0x24>
   d63d8:	e004      	b.n	d63e4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d63da:	b2d2      	uxtb	r2, r2
  }
}
   d63dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d63e0:	f7ff bfb1 	b.w	d6346 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d63e4:	212d      	movs	r1, #45	; 0x2d
   d63e6:	f7ff ff95 	bl	d6314 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d63ea:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d63ec:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d63ee:	4271      	negs	r1, r6
   d63f0:	4638      	mov	r0, r7
   d63f2:	f7ff ffa8 	bl	d6346 <_ZN5Print11printNumberEmh>
   d63f6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d63f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63fc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d63fc:	b538      	push	{r3, r4, r5, lr}
   d63fe:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6400:	f7ff ffda 	bl	d63b8 <_ZN5Print5printEli>
   d6404:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d6406:	4628      	mov	r0, r5
   d6408:	f7ff ff87 	bl	d631a <_ZN5Print7printlnEv>
  return n;
}
   d640c:	4420      	add	r0, r4
   d640e:	bd38      	pop	{r3, r4, r5, pc}

000d6410 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6410:	4b01      	ldr	r3, [pc, #4]	; (d6418 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6412:	4a02      	ldr	r2, [pc, #8]	; (d641c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6414:	601a      	str	r2, [r3, #0]
   d6416:	4770      	bx	lr
   d6418:	2003e3e4 	.word	0x2003e3e4
   d641c:	000d76d7 	.word	0x000d76d7

000d6420 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6420:	4b02      	ldr	r3, [pc, #8]	; (d642c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	4b02      	ldr	r3, [pc, #8]	; (d6430 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6426:	601a      	str	r2, [r3, #0]
   d6428:	4770      	bx	lr
   d642a:	bf00      	nop
   d642c:	2003e324 	.word	0x2003e324
   d6430:	2003e3e8 	.word	0x2003e3e8

000d6434 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6434:	2100      	movs	r1, #0
   d6436:	f7fe bd75 	b.w	d4f24 <system_delay_ms>

000d643a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d643a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d643c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d643e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6440:	b113      	cbz	r3, d6448 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6442:	2203      	movs	r2, #3
   d6444:	4601      	mov	r1, r0
   d6446:	4798      	blx	r3
    }
   d6448:	4620      	mov	r0, r4
   d644a:	bd10      	pop	{r4, pc}

000d644c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d644c:	b510      	push	{r4, lr}
   d644e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6450:	f7ff fff3 	bl	d643a <_ZNSt14_Function_baseD1Ev>
   d6454:	4620      	mov	r0, r4
   d6456:	bd10      	pop	{r4, pc}

000d6458 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d6458:	b510      	push	{r4, lr}
   d645a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d645c:	f7fe fd3a 	bl	d4ed4 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d6460:	4284      	cmp	r4, r0
   d6462:	d008      	beq.n	d6476 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d6464:	b11c      	cbz	r4, d646e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d6466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d646a:	f7fe bd1b 	b.w	d4ea4 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d646e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d6472:	f7fe bd1f 	b.w	d4eb4 <LED_Signaling_Stop>
   d6476:	bd10      	pop	{r4, pc}

000d6478 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6478:	b570      	push	{r4, r5, r6, lr}
   d647a:	4605      	mov	r5, r0
   d647c:	460e      	mov	r6, r1
   d647e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6480:	f7fe fd28 	bl	d4ed4 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d6484:	b150      	cbz	r0, d649c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6486:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d648a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d648e:	f7fe fd01 	bl	d4e94 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d6492:	20e7      	movs	r0, #231	; 0xe7
}
   d6494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d6498:	f7fe bd24 	b.w	d4ee4 <LED_On>
   d649c:	bd70      	pop	{r4, r5, r6, pc}

000d649e <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d649e:	b510      	push	{r4, lr}
   d64a0:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d64a2:	f7fe fd0f 	bl	d4ec4 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d64a6:	f7fe fd15 	bl	d4ed4 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d64aa:	b128      	cbz	r0, d64b8 <_ZN8RGBClass10brightnessEhb+0x1a>
   d64ac:	b124      	cbz	r4, d64b8 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d64ae:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d64b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d64b4:	f7fe bd16 	b.w	d4ee4 <LED_On>
   d64b8:	bd10      	pop	{r4, pc}
	...

000d64bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d64bc:	4803      	ldr	r0, [pc, #12]	; (d64cc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d64be:	4a04      	ldr	r2, [pc, #16]	; (d64d0 <_GLOBAL__sub_I_RGB+0x14>)
   d64c0:	4904      	ldr	r1, [pc, #16]	; (d64d4 <_GLOBAL__sub_I_RGB+0x18>)
   d64c2:	2300      	movs	r3, #0
   d64c4:	6083      	str	r3, [r0, #8]
   d64c6:	f000 bc65 	b.w	d6d94 <__aeabi_atexit>
   d64ca:	bf00      	nop
   d64cc:	2003e3ec 	.word	0x2003e3ec
   d64d0:	2003e38c 	.word	0x2003e38c
   d64d4:	000d644d 	.word	0x000d644d

000d64d8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d64d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d64da:	4b0f      	ldr	r3, [pc, #60]	; (d6518 <serialEventRun+0x40>)
   d64dc:	b133      	cbz	r3, d64ec <serialEventRun+0x14>
   d64de:	f000 f941 	bl	d6764 <_Z16_fetch_usbserialv>
   d64e2:	6803      	ldr	r3, [r0, #0]
   d64e4:	691b      	ldr	r3, [r3, #16]
   d64e6:	4798      	blx	r3
   d64e8:	2800      	cmp	r0, #0
   d64ea:	dc0d      	bgt.n	d6508 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d64ec:	4b0b      	ldr	r3, [pc, #44]	; (d651c <serialEventRun+0x44>)
   d64ee:	b133      	cbz	r3, d64fe <serialEventRun+0x26>
   d64f0:	f000 f9ee 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d64f4:	6803      	ldr	r3, [r0, #0]
   d64f6:	691b      	ldr	r3, [r3, #16]
   d64f8:	4798      	blx	r3
   d64fa:	2800      	cmp	r0, #0
   d64fc:	dc07      	bgt.n	d650e <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d64fe:	4b08      	ldr	r3, [pc, #32]	; (d6520 <serialEventRun+0x48>)
   d6500:	b143      	cbz	r3, d6514 <serialEventRun+0x3c>
   d6502:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6506:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6508:	f3af 8000 	nop.w
   d650c:	e7ee      	b.n	d64ec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d650e:	f3af 8000 	nop.w
   d6512:	e7f4      	b.n	d64fe <serialEventRun+0x26>
   d6514:	bd08      	pop	{r3, pc}
   d6516:	bf00      	nop
	...

000d6524 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6524:	b508      	push	{r3, lr}
	serialEventRun();
   d6526:	f7ff ffd7 	bl	d64d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d652a:	f7fe fb21 	bl	d4b70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d652e:	4b01      	ldr	r3, [pc, #4]	; (d6534 <_post_loop+0x10>)
   d6530:	6018      	str	r0, [r3, #0]
   d6532:	bd08      	pop	{r3, pc}
   d6534:	2003e734 	.word	0x2003e734

000d6538 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6538:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d653a:	2300      	movs	r3, #0
   d653c:	9300      	str	r3, [sp, #0]
   d653e:	461a      	mov	r2, r3
   d6540:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6544:	f7fe fd00 	bl	d4f48 <system_ctrl_set_result>
}
   d6548:	b003      	add	sp, #12
   d654a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6550 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6550:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6552:	8843      	ldrh	r3, [r0, #2]
   d6554:	2b0a      	cmp	r3, #10
   d6556:	d008      	beq.n	d656a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6558:	2b50      	cmp	r3, #80	; 0x50
   d655a:	d109      	bne.n	d6570 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d655c:	4b09      	ldr	r3, [pc, #36]	; (d6584 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d655e:	681b      	ldr	r3, [r3, #0]
   d6560:	b13b      	cbz	r3, d6572 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6562:	b003      	add	sp, #12
   d6564:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6568:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d656a:	f7ff ffe5 	bl	d6538 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d656e:	e006      	b.n	d657e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6570:	2300      	movs	r3, #0
   d6572:	9300      	str	r3, [sp, #0]
   d6574:	461a      	mov	r2, r3
   d6576:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d657a:	f7fe fce5 	bl	d4f48 <system_ctrl_set_result>
        break;
    }
}
   d657e:	b003      	add	sp, #12
   d6580:	f85d fb04 	ldr.w	pc, [sp], #4
   d6584:	2003e3fc 	.word	0x2003e3fc

000d6588 <module_user_init_hook>:

void module_user_init_hook()
{
   d6588:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d658a:	f7fe fae1 	bl	d4b50 <HAL_RNG_GetRandomNumber>
   d658e:	4604      	mov	r4, r0
    srand(seed);
   d6590:	f000 fd9c 	bl	d70cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6594:	4b07      	ldr	r3, [pc, #28]	; (d65b4 <module_user_init_hook+0x2c>)
   d6596:	b113      	cbz	r3, d659e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6598:	4620      	mov	r0, r4
   d659a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d659e:	2100      	movs	r1, #0
   d65a0:	4804      	ldr	r0, [pc, #16]	; (d65b4 <module_user_init_hook+0x2c>)
   d65a2:	f7fe fd2b 	bl	d4ffc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d65a6:	2100      	movs	r1, #0
   d65a8:	4803      	ldr	r0, [pc, #12]	; (d65b8 <module_user_init_hook+0x30>)
}
   d65aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d65ae:	f7fe bcc1 	b.w	d4f34 <system_ctrl_set_app_request_handler>
   d65b2:	bf00      	nop
   d65b4:	00000000 	.word	0x00000000
   d65b8:	000d6551 	.word	0x000d6551

000d65bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d65bc:	4770      	bx	lr

000d65be <_ZN9IPAddressD0Ev>:
   d65be:	b510      	push	{r4, lr}
   d65c0:	2118      	movs	r1, #24
   d65c2:	4604      	mov	r4, r0
   d65c4:	f000 fbeb 	bl	d6d9e <_ZdlPvj>
   d65c8:	4620      	mov	r0, r4
   d65ca:	bd10      	pop	{r4, pc}

000d65cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65ce:	7d03      	ldrb	r3, [r0, #20]
   d65d0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65d2:	b08d      	sub	sp, #52	; 0x34
   d65d4:	460e      	mov	r6, r1
   d65d6:	f100 0704 	add.w	r7, r0, #4
   d65da:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65de:	d002      	beq.n	d65e6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d65e0:	f100 0508 	add.w	r5, r0, #8
   d65e4:	e018      	b.n	d6618 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d65e6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65e8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d65ea:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65ee:	232f      	movs	r3, #47	; 0x2f
   d65f0:	462a      	mov	r2, r5
   d65f2:	200a      	movs	r0, #10
   d65f4:	f7fe fb76 	bl	d4ce4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d65f8:	4628      	mov	r0, r5
   d65fa:	f000 fd8f 	bl	d711c <strlen>
   d65fe:	6833      	ldr	r3, [r6, #0]
   d6600:	4602      	mov	r2, r0
   d6602:	68db      	ldr	r3, [r3, #12]
   d6604:	4629      	mov	r1, r5
   d6606:	4630      	mov	r0, r6
   d6608:	4798      	blx	r3
   d660a:	e00f      	b.n	d662c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d660c:	b124      	cbz	r4, d6618 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d660e:	212e      	movs	r1, #46	; 0x2e
   d6610:	4630      	mov	r0, r6
   d6612:	f7ff fe7f 	bl	d6314 <_ZN5Print5printEc>
   d6616:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6618:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d661c:	220a      	movs	r2, #10
   d661e:	4630      	mov	r0, r6
   d6620:	f7ff febe 	bl	d63a0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6624:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6626:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6628:	d1f0      	bne.n	d660c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d662a:	4620      	mov	r0, r4
    }
    return n;
}
   d662c:	b00d      	add	sp, #52	; 0x34
   d662e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6630 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6630:	b510      	push	{r4, lr}
   d6632:	4b05      	ldr	r3, [pc, #20]	; (d6648 <_ZN9IPAddressC1Ev+0x18>)
   d6634:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6636:	2211      	movs	r2, #17
   d6638:	f840 3b04 	str.w	r3, [r0], #4
   d663c:	2100      	movs	r1, #0
   d663e:	f000 fd3c 	bl	d70ba <memset>
{
    clear();
}
   d6642:	4620      	mov	r0, r4
   d6644:	bd10      	pop	{r4, pc}
   d6646:	bf00      	nop
   d6648:	000d7774 	.word	0x000d7774

000d664c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d664c:	4603      	mov	r3, r0
   d664e:	4a07      	ldr	r2, [pc, #28]	; (d666c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6650:	b510      	push	{r4, lr}
   d6652:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6656:	f101 0210 	add.w	r2, r1, #16
   d665a:	f851 4b04 	ldr.w	r4, [r1], #4
   d665e:	f843 4b04 	str.w	r4, [r3], #4
   d6662:	4291      	cmp	r1, r2
   d6664:	d1f9      	bne.n	d665a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6666:	780a      	ldrb	r2, [r1, #0]
   d6668:	701a      	strb	r2, [r3, #0]
}
   d666a:	bd10      	pop	{r4, pc}
   d666c:	000d7774 	.word	0x000d7774

000d6670 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6670:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6672:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6676:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d667a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d667e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6682:	2304      	movs	r3, #4
   d6684:	6041      	str	r1, [r0, #4]
   d6686:	7503      	strb	r3, [r0, #20]
   d6688:	bd10      	pop	{r4, pc}

000d668a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d668a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d668c:	780d      	ldrb	r5, [r1, #0]
   d668e:	788b      	ldrb	r3, [r1, #2]
   d6690:	784a      	ldrb	r2, [r1, #1]
   d6692:	78c9      	ldrb	r1, [r1, #3]
   d6694:	9100      	str	r1, [sp, #0]
   d6696:	4629      	mov	r1, r5
   d6698:	f7ff ffea 	bl	d6670 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d669c:	b003      	add	sp, #12
   d669e:	bd30      	pop	{r4, r5, pc}

000d66a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66a0:	7441      	strb	r1, [r0, #17]
   d66a2:	4770      	bx	lr

000d66a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d66a4:	4770      	bx	lr

000d66a6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d66a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d66a8:	2100      	movs	r1, #0
   d66aa:	7c00      	ldrb	r0, [r0, #16]
   d66ac:	f7fe fbda 	bl	d4e64 <HAL_USB_USART_Receive_Data>
}
   d66b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66b4:	bf28      	it	cs
   d66b6:	f04f 30ff 	movcs.w	r0, #4294967295
   d66ba:	bd08      	pop	{r3, pc}

000d66bc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d66bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d66be:	2101      	movs	r1, #1
   d66c0:	7c00      	ldrb	r0, [r0, #16]
   d66c2:	f7fe fbcf 	bl	d4e64 <HAL_USB_USART_Receive_Data>
}
   d66c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66ca:	bf28      	it	cs
   d66cc:	f04f 30ff 	movcs.w	r0, #4294967295
   d66d0:	bd08      	pop	{r3, pc}

000d66d2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d66d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d66d4:	7c00      	ldrb	r0, [r0, #16]
   d66d6:	f7fe fbbd 	bl	d4e54 <HAL_USB_USART_Available_Data_For_Write>
}
   d66da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66de:	bd08      	pop	{r3, pc}

000d66e0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d66e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d66e2:	7c00      	ldrb	r0, [r0, #16]
   d66e4:	f7fe fbae 	bl	d4e44 <HAL_USB_USART_Available_Data>
}
   d66e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66ec:	bd08      	pop	{r3, pc}

000d66ee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d66ee:	7c00      	ldrb	r0, [r0, #16]
   d66f0:	f7fe bbc8 	b.w	d4e84 <HAL_USB_USART_Flush_Data>

000d66f4 <_ZN9USBSerialD0Ev>:
   d66f4:	b510      	push	{r4, lr}
   d66f6:	2114      	movs	r1, #20
   d66f8:	4604      	mov	r4, r0
   d66fa:	f000 fb50 	bl	d6d9e <_ZdlPvj>
   d66fe:	4620      	mov	r0, r4
   d6700:	bd10      	pop	{r4, pc}

000d6702 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6702:	b538      	push	{r3, r4, r5, lr}
   d6704:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6706:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6708:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d670a:	f7fe fba3 	bl	d4e54 <HAL_USB_USART_Available_Data_For_Write>
   d670e:	2800      	cmp	r0, #0
   d6710:	dc01      	bgt.n	d6716 <_ZN9USBSerial5writeEh+0x14>
   d6712:	7c60      	ldrb	r0, [r4, #17]
   d6714:	b128      	cbz	r0, d6722 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6716:	4629      	mov	r1, r5
   d6718:	7c20      	ldrb	r0, [r4, #16]
   d671a:	f7fe fbab 	bl	d4e74 <HAL_USB_USART_Send_Data>
   d671e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6722:	bd38      	pop	{r3, r4, r5, pc}

000d6724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6724:	b510      	push	{r4, lr}
   d6726:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6728:	2300      	movs	r3, #0
   d672a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d672c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6730:	60a3      	str	r3, [r4, #8]
   d6732:	4b05      	ldr	r3, [pc, #20]	; (d6748 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6734:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6736:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6738:	4608      	mov	r0, r1
{
  _serial = serial;
   d673a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d673c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d673e:	4611      	mov	r1, r2
   d6740:	f7fe fb70 	bl	d4e24 <HAL_USB_USART_Init>
}
   d6744:	4620      	mov	r0, r4
   d6746:	bd10      	pop	{r4, pc}
   d6748:	000d7788 	.word	0x000d7788

000d674c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d674c:	2200      	movs	r2, #0
   d674e:	7c00      	ldrb	r0, [r0, #16]
   d6750:	f7fe bb70 	b.w	d4e34 <HAL_USB_USART_Begin>

000d6754 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6754:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6756:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6758:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d675a:	2100      	movs	r1, #0
   d675c:	f000 fcad 	bl	d70ba <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6760:	4620      	mov	r0, r4
   d6762:	bd10      	pop	{r4, pc}

000d6764 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6764:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6766:	4d0e      	ldr	r5, [pc, #56]	; (d67a0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6768:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d676a:	a801      	add	r0, sp, #4
   d676c:	f7ff fff2 	bl	d6754 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6770:	6829      	ldr	r1, [r5, #0]
   d6772:	f011 0401 	ands.w	r4, r1, #1
   d6776:	d110      	bne.n	d679a <_Z16_fetch_usbserialv+0x36>
   d6778:	4628      	mov	r0, r5
   d677a:	f7fd fc94 	bl	d40a6 <__cxa_guard_acquire>
   d677e:	b160      	cbz	r0, d679a <_Z16_fetch_usbserialv+0x36>
   d6780:	aa01      	add	r2, sp, #4
   d6782:	4621      	mov	r1, r4
   d6784:	4807      	ldr	r0, [pc, #28]	; (d67a4 <_Z16_fetch_usbserialv+0x40>)
   d6786:	f7ff ffcd 	bl	d6724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d678a:	4628      	mov	r0, r5
   d678c:	f7fd fc90 	bl	d40b0 <__cxa_guard_release>
   d6790:	4a05      	ldr	r2, [pc, #20]	; (d67a8 <_Z16_fetch_usbserialv+0x44>)
   d6792:	4906      	ldr	r1, [pc, #24]	; (d67ac <_Z16_fetch_usbserialv+0x48>)
   d6794:	4803      	ldr	r0, [pc, #12]	; (d67a4 <_Z16_fetch_usbserialv+0x40>)
   d6796:	f000 fafd 	bl	d6d94 <__aeabi_atexit>
	return _usbserial;
}
   d679a:	4802      	ldr	r0, [pc, #8]	; (d67a4 <_Z16_fetch_usbserialv+0x40>)
   d679c:	b007      	add	sp, #28
   d679e:	bd30      	pop	{r4, r5, pc}
   d67a0:	2003e400 	.word	0x2003e400
   d67a4:	2003e404 	.word	0x2003e404
   d67a8:	2003e38c 	.word	0x2003e38c
   d67ac:	000d66a5 	.word	0x000d66a5

000d67b0 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d67b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d67b2:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d67b4:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d67b6:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d67b8:	460e      	mov	r6, r1
   d67ba:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d67bc:	f000 fa46 	bl	d6c4c <pinAvailable>
   d67c0:	b160      	cbz	r0, d67dc <tone+0x2c>
   d67c2:	2102      	movs	r1, #2
   d67c4:	4628      	mov	r0, r5
   d67c6:	f7fe f98b 	bl	d4ae0 <HAL_Validate_Pin_Function>
   d67ca:	2802      	cmp	r0, #2
   d67cc:	d106      	bne.n	d67dc <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d67ce:	463a      	mov	r2, r7
   d67d0:	4631      	mov	r1, r6
   d67d2:	4620      	mov	r0, r4
    }
}
   d67d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   d67d8:	f7fe bb14 	b.w	d4e04 <HAL_Tone_Start>
   d67dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67de <noTone>:
    }
}

void noTone(uint8_t pin)
{
   d67de:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d67e0:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
   d67e2:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d67e4:	4628      	mov	r0, r5
   d67e6:	f000 fa31 	bl	d6c4c <pinAvailable>
   d67ea:	b150      	cbz	r0, d6802 <noTone+0x24>
   d67ec:	2102      	movs	r1, #2
   d67ee:	4628      	mov	r0, r5
   d67f0:	f7fe f976 	bl	d4ae0 <HAL_Validate_Pin_Function>
   d67f4:	2802      	cmp	r0, #2
   d67f6:	d104      	bne.n	d6802 <noTone+0x24>
        HAL_Tone_Stop(pin);
   d67f8:	4620      	mov	r0, r4
    }
}
   d67fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
   d67fe:	f7fe bb09 	b.w	d4e14 <HAL_Tone_Stop>
   d6802:	bd38      	pop	{r3, r4, r5, pc}

000d6804 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6804:	4770      	bx	lr

000d6806 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6806:	7441      	strb	r1, [r0, #17]
   d6808:	4770      	bx	lr

000d680a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d680a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d680c:	7c00      	ldrb	r0, [r0, #16]
   d680e:	f7fe fab1 	bl	d4d74 <HAL_USART_Available_Data_For_Write>
}
   d6812:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6816:	bd08      	pop	{r3, pc}

000d6818 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6818:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d681a:	7c00      	ldrb	r0, [r0, #16]
   d681c:	f7fe fa82 	bl	d4d24 <HAL_USART_Available_Data>
}
   d6820:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6824:	bd08      	pop	{r3, pc}

000d6826 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6826:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6828:	7c00      	ldrb	r0, [r0, #16]
   d682a:	f7fe fa8b 	bl	d4d44 <HAL_USART_Peek_Data>
}
   d682e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6832:	bf28      	it	cs
   d6834:	f04f 30ff 	movcs.w	r0, #4294967295
   d6838:	bd08      	pop	{r3, pc}

000d683a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d683a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d683c:	7c00      	ldrb	r0, [r0, #16]
   d683e:	f7fe fa79 	bl	d4d34 <HAL_USART_Read_Data>
}
   d6842:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6846:	bf28      	it	cs
   d6848:	f04f 30ff 	movcs.w	r0, #4294967295
   d684c:	bd08      	pop	{r3, pc}

000d684e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d684e:	7c00      	ldrb	r0, [r0, #16]
   d6850:	f7fe ba80 	b.w	d4d54 <HAL_USART_Flush_Data>

000d6854 <_ZN11USARTSerialD0Ev>:
   d6854:	b510      	push	{r4, lr}
   d6856:	2114      	movs	r1, #20
   d6858:	4604      	mov	r4, r0
   d685a:	f000 faa0 	bl	d6d9e <_ZdlPvj>
   d685e:	4620      	mov	r0, r4
   d6860:	bd10      	pop	{r4, pc}

000d6862 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6862:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6864:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6866:	4604      	mov	r4, r0
   d6868:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d686a:	b925      	cbnz	r5, d6876 <_ZN11USARTSerial5writeEh+0x14>
   d686c:	7c00      	ldrb	r0, [r0, #16]
   d686e:	f7fe fa81 	bl	d4d74 <HAL_USART_Available_Data_For_Write>
   d6872:	2800      	cmp	r0, #0
   d6874:	dd05      	ble.n	d6882 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6876:	4631      	mov	r1, r6
   d6878:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d687a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d687e:	f7fe ba49 	b.w	d4d14 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6882:	4628      	mov	r0, r5
   d6884:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6888:	b510      	push	{r4, lr}
   d688a:	4604      	mov	r4, r0
   d688c:	4608      	mov	r0, r1
   d688e:	4611      	mov	r1, r2
   d6890:	2200      	movs	r2, #0
   d6892:	6062      	str	r2, [r4, #4]
   d6894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6898:	60a2      	str	r2, [r4, #8]
   d689a:	4a05      	ldr	r2, [pc, #20]	; (d68b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d689c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d689e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d68a0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d68a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d68a4:	461a      	mov	r2, r3
   d68a6:	f7fe fa25 	bl	d4cf4 <HAL_USART_Init>
}
   d68aa:	4620      	mov	r0, r4
   d68ac:	bd10      	pop	{r4, pc}
   d68ae:	bf00      	nop
   d68b0:	000d77b8 	.word	0x000d77b8

000d68b4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d68b4:	2300      	movs	r3, #0
   d68b6:	7c00      	ldrb	r0, [r0, #16]
   d68b8:	f7fe ba64 	b.w	d4d84 <HAL_USART_BeginConfig>

000d68bc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d68bc:	2200      	movs	r2, #0
   d68be:	f7ff bff9 	b.w	d68b4 <_ZN11USARTSerial5beginEmm>

000d68c2 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d68c2:	7c00      	ldrb	r0, [r0, #16]
   d68c4:	f7fe ba1e 	b.w	d4d04 <HAL_USART_End>

000d68c8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d68c8:	7c00      	ldrb	r0, [r0, #16]
   d68ca:	f7fe ba4b 	b.w	d4d64 <HAL_USART_Is_Enabled>
	...

000d68d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d68d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d68d2:	4d0c      	ldr	r5, [pc, #48]	; (d6904 <_Z22__fetch_global_Serial1v+0x34>)
   d68d4:	6829      	ldr	r1, [r5, #0]
   d68d6:	f011 0401 	ands.w	r4, r1, #1
   d68da:	d111      	bne.n	d6900 <_Z22__fetch_global_Serial1v+0x30>
   d68dc:	4628      	mov	r0, r5
   d68de:	f7fd fbe2 	bl	d40a6 <__cxa_guard_acquire>
   d68e2:	b168      	cbz	r0, d6900 <_Z22__fetch_global_Serial1v+0x30>
   d68e4:	4a08      	ldr	r2, [pc, #32]	; (d6908 <_Z22__fetch_global_Serial1v+0x38>)
   d68e6:	4b09      	ldr	r3, [pc, #36]	; (d690c <_Z22__fetch_global_Serial1v+0x3c>)
   d68e8:	4809      	ldr	r0, [pc, #36]	; (d6910 <_Z22__fetch_global_Serial1v+0x40>)
   d68ea:	4621      	mov	r1, r4
   d68ec:	f7ff ffcc 	bl	d6888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d68f0:	4628      	mov	r0, r5
   d68f2:	f7fd fbdd 	bl	d40b0 <__cxa_guard_release>
   d68f6:	4a07      	ldr	r2, [pc, #28]	; (d6914 <_Z22__fetch_global_Serial1v+0x44>)
   d68f8:	4907      	ldr	r1, [pc, #28]	; (d6918 <_Z22__fetch_global_Serial1v+0x48>)
   d68fa:	4805      	ldr	r0, [pc, #20]	; (d6910 <_Z22__fetch_global_Serial1v+0x40>)
   d68fc:	f000 fa4a 	bl	d6d94 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6900:	4803      	ldr	r0, [pc, #12]	; (d6910 <_Z22__fetch_global_Serial1v+0x40>)
   d6902:	bd38      	pop	{r3, r4, r5, pc}
   d6904:	2003e4b0 	.word	0x2003e4b0
   d6908:	2003e4b4 	.word	0x2003e4b4
   d690c:	2003e42c 	.word	0x2003e42c
   d6910:	2003e418 	.word	0x2003e418
   d6914:	2003e38c 	.word	0x2003e38c
   d6918:	000d6805 	.word	0x000d6805

000d691c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d691c:	4770      	bx	lr

000d691e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6920:	4606      	mov	r6, r0
   d6922:	4615      	mov	r5, r2
   d6924:	460c      	mov	r4, r1
   d6926:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6928:	42bc      	cmp	r4, r7
   d692a:	d006      	beq.n	d693a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d692c:	6833      	ldr	r3, [r6, #0]
   d692e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6932:	689b      	ldr	r3, [r3, #8]
   d6934:	4630      	mov	r0, r6
   d6936:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6938:	e7f6      	b.n	d6928 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d693a:	4628      	mov	r0, r5
   d693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d693e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d693e:	2200      	movs	r2, #0
   d6940:	7c00      	ldrb	r0, [r0, #16]
   d6942:	f7fe ba27 	b.w	d4d94 <HAL_I2C_Write_Data>

000d6946 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6946:	2100      	movs	r1, #0
   d6948:	7c00      	ldrb	r0, [r0, #16]
   d694a:	f7fe ba2b 	b.w	d4da4 <HAL_I2C_Available_Data>

000d694e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d694e:	2100      	movs	r1, #0
   d6950:	7c00      	ldrb	r0, [r0, #16]
   d6952:	f7fe ba2f 	b.w	d4db4 <HAL_I2C_Read_Data>

000d6956 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6956:	2100      	movs	r1, #0
   d6958:	7c00      	ldrb	r0, [r0, #16]
   d695a:	f7fe ba33 	b.w	d4dc4 <HAL_I2C_Peek_Data>

000d695e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d695e:	2100      	movs	r1, #0
   d6960:	7c00      	ldrb	r0, [r0, #16]
   d6962:	f7fe ba37 	b.w	d4dd4 <HAL_I2C_Flush_Data>

000d6966 <_ZN7TwoWireD0Ev>:
   d6966:	b510      	push	{r4, lr}
   d6968:	2114      	movs	r1, #20
   d696a:	4604      	mov	r4, r0
   d696c:	f000 fa17 	bl	d6d9e <_ZdlPvj>
   d6970:	4620      	mov	r0, r4
   d6972:	bd10      	pop	{r4, pc}

000d6974 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6974:	b510      	push	{r4, lr}
   d6976:	4604      	mov	r4, r0
   d6978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d697c:	4608      	mov	r0, r1
   d697e:	60a3      	str	r3, [r4, #8]
   d6980:	2100      	movs	r1, #0
   d6982:	4b04      	ldr	r3, [pc, #16]	; (d6994 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6984:	7420      	strb	r0, [r4, #16]
   d6986:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6988:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d698a:	f7fe fa33 	bl	d4df4 <HAL_I2C_Init>

}
   d698e:	4620      	mov	r0, r4
   d6990:	bd10      	pop	{r4, pc}
   d6992:	bf00      	nop
   d6994:	000d77e8 	.word	0x000d77e8

000d6998 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6998:	2100      	movs	r1, #0
   d699a:	7c00      	ldrb	r0, [r0, #16]
   d699c:	f7fe ba22 	b.w	d4de4 <HAL_I2C_Is_Enabled>

000d69a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69a0:	2200      	movs	r2, #0
   d69a2:	4611      	mov	r1, r2
   d69a4:	6840      	ldr	r0, [r0, #4]
   d69a6:	f7fe bb11 	b.w	d4fcc <network_listening>

000d69aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69aa:	2200      	movs	r2, #0
   d69ac:	4611      	mov	r1, r2
   d69ae:	6840      	ldr	r0, [r0, #4]
   d69b0:	f7fe bb1c 	b.w	d4fec <network_get_listen_timeout>

000d69b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69b4:	2200      	movs	r2, #0
   d69b6:	6840      	ldr	r0, [r0, #4]
   d69b8:	f7fe bb10 	b.w	d4fdc <network_set_listen_timeout>

000d69bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69bc:	2200      	movs	r2, #0
   d69be:	f081 0101 	eor.w	r1, r1, #1
   d69c2:	6840      	ldr	r0, [r0, #4]
   d69c4:	f7fe bafa 	b.w	d4fbc <network_listen>

000d69c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d69c8:	2300      	movs	r3, #0
   d69ca:	461a      	mov	r2, r3
   d69cc:	2101      	movs	r1, #1
   d69ce:	6840      	ldr	r0, [r0, #4]
   d69d0:	f7fe baec 	b.w	d4fac <network_off>

000d69d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d69d4:	2300      	movs	r3, #0
   d69d6:	461a      	mov	r2, r3
   d69d8:	4619      	mov	r1, r3
   d69da:	6840      	ldr	r0, [r0, #4]
   d69dc:	f7fe bade 	b.w	d4f9c <network_on>

000d69e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d69e0:	2200      	movs	r2, #0
   d69e2:	4611      	mov	r1, r2
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	f7fe bad1 	b.w	d4f8c <network_ready>

000d69ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	4611      	mov	r1, r2
   d69ee:	6840      	ldr	r0, [r0, #4]
   d69f0:	f7fe babc 	b.w	d4f6c <network_connecting>

000d69f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69f4:	2200      	movs	r2, #0
   d69f6:	2102      	movs	r1, #2
   d69f8:	6840      	ldr	r0, [r0, #4]
   d69fa:	f7fe babf 	b.w	d4f7c <network_disconnect>

000d69fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d69fe:	2300      	movs	r3, #0
   d6a00:	461a      	mov	r2, r3
   d6a02:	6840      	ldr	r0, [r0, #4]
   d6a04:	f7fe baaa 	b.w	d4f5c <network_connect>

000d6a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6a08:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a0a:	4605      	mov	r5, r0
   d6a0c:	b188      	cbz	r0, d6a32 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a0e:	6804      	ldr	r4, [r0, #0]
   d6a10:	b14c      	cbz	r4, d6a26 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6a12:	68a3      	ldr	r3, [r4, #8]
   d6a14:	b11b      	cbz	r3, d6a1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a16:	2203      	movs	r2, #3
   d6a18:	4621      	mov	r1, r4
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a1e:	2110      	movs	r1, #16
   d6a20:	4620      	mov	r0, r4
   d6a22:	f000 f9bc 	bl	d6d9e <_ZdlPvj>
   d6a26:	4628      	mov	r0, r5
   d6a28:	2114      	movs	r1, #20
      }
   d6a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a2e:	f000 b9b6 	b.w	d6d9e <_ZdlPvj>
   d6a32:	bd38      	pop	{r3, r4, r5, pc}

000d6a34 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6a34:	b110      	cbz	r0, d6a3c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6a36:	6803      	ldr	r3, [r0, #0]
   d6a38:	685b      	ldr	r3, [r3, #4]
   d6a3a:	4718      	bx	r3
   d6a3c:	4770      	bx	lr

000d6a3e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6a3e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6a40:	6803      	ldr	r3, [r0, #0]
   d6a42:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6a44:	b1bb      	cbz	r3, d6a76 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6a46:	6858      	ldr	r0, [r3, #4]
   d6a48:	f7fe f914 	bl	d4c74 <os_thread_is_current>
   d6a4c:	b978      	cbnz	r0, d6a6e <_ZN6ThreadD1Ev+0x30>
   d6a4e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6a50:	7c5a      	ldrb	r2, [r3, #17]
   d6a52:	b912      	cbnz	r2, d6a5a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6a54:	6858      	ldr	r0, [r3, #4]
   d6a56:	f7fe f915 	bl	d4c84 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6a5a:	6823      	ldr	r3, [r4, #0]
   d6a5c:	6858      	ldr	r0, [r3, #4]
   d6a5e:	f7fe f919 	bl	d4c94 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a62:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6a64:	2300      	movs	r3, #0
   d6a66:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6a68:	b128      	cbz	r0, d6a76 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6a6a:	f7ff ffcd 	bl	d6a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a6e:	6820      	ldr	r0, [r4, #0]
   d6a70:	b108      	cbz	r0, d6a76 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6a72:	f7ff ffc9 	bl	d6a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6a76:	4620      	mov	r0, r4
   d6a78:	bd10      	pop	{r4, pc}
	...

000d6a7c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6a7c:	b538      	push	{r3, r4, r5, lr}
   d6a7e:	4b0c      	ldr	r3, [pc, #48]	; (d6ab0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6a80:	6003      	str	r3, [r0, #0]
   d6a82:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a84:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6a88:	b108      	cbz	r0, d6a8e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6a8a:	f7fd fb0a 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a8e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6a92:	b135      	cbz	r5, d6aa2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a94:	4628      	mov	r0, r5
   d6a96:	f7ff ffd2 	bl	d6a3e <_ZN6ThreadD1Ev>
   d6a9a:	2104      	movs	r1, #4
   d6a9c:	4628      	mov	r0, r5
   d6a9e:	f000 f97e 	bl	d6d9e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6aa2:	68a0      	ldr	r0, [r4, #8]
   d6aa4:	b108      	cbz	r0, d6aaa <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6aa6:	f7ff ffc5 	bl	d6a34 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6aaa:	4620      	mov	r0, r4
   d6aac:	bd38      	pop	{r3, r4, r5, pc}
   d6aae:	bf00      	nop
   d6ab0:	000d7810 	.word	0x000d7810

000d6ab4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6ab4:	b538      	push	{r3, r4, r5, lr}
   d6ab6:	4c0e      	ldr	r4, [pc, #56]	; (d6af0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ab8:	4b0e      	ldr	r3, [pc, #56]	; (d6af4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6aba:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6abc:	2500      	movs	r5, #0
   d6abe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6ac0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6ac4:	6063      	str	r3, [r4, #4]
   d6ac6:	60a5      	str	r5, [r4, #8]
   d6ac8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6acc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6ad0:	f7fe f8f0 	bl	d4cb4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6ad4:	4b08      	ldr	r3, [pc, #32]	; (d6af8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6ad6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6ada:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6ade:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	4a06      	ldr	r2, [pc, #24]	; (d6afc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6ae4:	4906      	ldr	r1, [pc, #24]	; (d6b00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6aea:	f000 b953 	b.w	d6d94 <__aeabi_atexit>
   d6aee:	bf00      	nop
   d6af0:	2003e538 	.word	0x2003e538
   d6af4:	000d7844 	.word	0x000d7844
   d6af8:	000d7810 	.word	0x000d7810
   d6afc:	2003e38c 	.word	0x2003e38c
   d6b00:	000d6a7d 	.word	0x000d6a7d

000d6b04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b04:	2300      	movs	r3, #0
   d6b06:	461a      	mov	r2, r3
   d6b08:	6840      	ldr	r0, [r0, #4]
   d6b0a:	f7fe ba27 	b.w	d4f5c <network_connect>

000d6b0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b0e:	2200      	movs	r2, #0
   d6b10:	2102      	movs	r1, #2
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	f7fe ba32 	b.w	d4f7c <network_disconnect>

000d6b18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b18:	2200      	movs	r2, #0
   d6b1a:	4611      	mov	r1, r2
   d6b1c:	6840      	ldr	r0, [r0, #4]
   d6b1e:	f7fe ba25 	b.w	d4f6c <network_connecting>

000d6b22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b22:	2200      	movs	r2, #0
   d6b24:	4611      	mov	r1, r2
   d6b26:	6840      	ldr	r0, [r0, #4]
   d6b28:	f7fe ba30 	b.w	d4f8c <network_ready>

000d6b2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b2c:	2300      	movs	r3, #0
   d6b2e:	461a      	mov	r2, r3
   d6b30:	4619      	mov	r1, r3
   d6b32:	6840      	ldr	r0, [r0, #4]
   d6b34:	f7fe ba32 	b.w	d4f9c <network_on>

000d6b38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b38:	2300      	movs	r3, #0
   d6b3a:	461a      	mov	r2, r3
   d6b3c:	4619      	mov	r1, r3
   d6b3e:	6840      	ldr	r0, [r0, #4]
   d6b40:	f7fe ba34 	b.w	d4fac <network_off>

000d6b44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b44:	2200      	movs	r2, #0
   d6b46:	f081 0101 	eor.w	r1, r1, #1
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	f7fe ba36 	b.w	d4fbc <network_listen>

000d6b50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b50:	2200      	movs	r2, #0
   d6b52:	6840      	ldr	r0, [r0, #4]
   d6b54:	f7fe ba42 	b.w	d4fdc <network_set_listen_timeout>

000d6b58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b58:	2200      	movs	r2, #0
   d6b5a:	4611      	mov	r1, r2
   d6b5c:	6840      	ldr	r0, [r0, #4]
   d6b5e:	f7fe ba45 	b.w	d4fec <network_get_listen_timeout>

000d6b62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b62:	2200      	movs	r2, #0
   d6b64:	4611      	mov	r1, r2
   d6b66:	6840      	ldr	r0, [r0, #4]
   d6b68:	f7fe ba30 	b.w	d4fcc <network_listening>

000d6b6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b70:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b72:	b095      	sub	sp, #84	; 0x54
   d6b74:	4616      	mov	r6, r2
   d6b76:	460d      	mov	r5, r1
   d6b78:	4607      	mov	r7, r0
    IPAddress addr;
   d6b7a:	f7ff fd59 	bl	d6630 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b7e:	4621      	mov	r1, r4
   d6b80:	2220      	movs	r2, #32
   d6b82:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b84:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b86:	f000 fa98 	bl	d70ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b8a:	2340      	movs	r3, #64	; 0x40
   d6b8c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b8e:	4621      	mov	r1, r4
   d6b90:	466b      	mov	r3, sp
   d6b92:	aa0c      	add	r2, sp, #48	; 0x30
   d6b94:	4630      	mov	r0, r6
   d6b96:	f7fd ff93 	bl	d4ac0 <netdb_getaddrinfo>
    if (!r) {
   d6b9a:	4604      	mov	r4, r0
   d6b9c:	2800      	cmp	r0, #0
   d6b9e:	d144      	bne.n	d6c2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ba0:	4602      	mov	r2, r0
   d6ba2:	2101      	movs	r1, #1
   d6ba4:	6868      	ldr	r0, [r5, #4]
   d6ba6:	f7fe f9f1 	bl	d4f8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6baa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bac:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bae:	4622      	mov	r2, r4
   d6bb0:	6868      	ldr	r0, [r5, #4]
   d6bb2:	f7fe f9eb 	bl	d4f8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bb6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bb8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6bba:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bbc:	2e00      	cmp	r6, #0
   d6bbe:	d034      	beq.n	d6c2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6bc0:	2900      	cmp	r1, #0
   d6bc2:	d132      	bne.n	d6c2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6bc4:	6873      	ldr	r3, [r6, #4]
   d6bc6:	2b02      	cmp	r3, #2
   d6bc8:	d002      	beq.n	d6bd0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6bca:	2b0a      	cmp	r3, #10
   d6bcc:	d009      	beq.n	d6be2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6bce:	e02a      	b.n	d6c26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6bd0:	f1b8 0f00 	cmp.w	r8, #0
   d6bd4:	d027      	beq.n	d6c26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6bd6:	6971      	ldr	r1, [r6, #20]
   d6bd8:	4638      	mov	r0, r7
   d6bda:	3104      	adds	r1, #4
   d6bdc:	f7ff fd55 	bl	d668a <_ZN9IPAddressaSEPKh>
   d6be0:	e020      	b.n	d6c24 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6be2:	f1b9 0f00 	cmp.w	r9, #0
   d6be6:	d01e      	beq.n	d6c26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6be8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6bea:	2211      	movs	r2, #17
   d6bec:	a801      	add	r0, sp, #4
   d6bee:	f000 fa64 	bl	d70ba <memset>
                    a.v = 6;
   d6bf2:	2306      	movs	r3, #6
   d6bf4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bf8:	ad01      	add	r5, sp, #4
   d6bfa:	f104 0308 	add.w	r3, r4, #8
   d6bfe:	3418      	adds	r4, #24
   d6c00:	6818      	ldr	r0, [r3, #0]
   d6c02:	6859      	ldr	r1, [r3, #4]
   d6c04:	462a      	mov	r2, r5
   d6c06:	c203      	stmia	r2!, {r0, r1}
   d6c08:	3308      	adds	r3, #8
   d6c0a:	42a3      	cmp	r3, r4
   d6c0c:	4615      	mov	r5, r2
   d6c0e:	d1f7      	bne.n	d6c00 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6c10:	a901      	add	r1, sp, #4
   d6c12:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c14:	ad07      	add	r5, sp, #28
   d6c16:	f7ff fd19 	bl	d664c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c1c:	1d3c      	adds	r4, r7, #4
   d6c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c20:	682b      	ldr	r3, [r5, #0]
   d6c22:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6c24:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c26:	69f6      	ldr	r6, [r6, #28]
   d6c28:	e7c8      	b.n	d6bbc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c2a:	9800      	ldr	r0, [sp, #0]
   d6c2c:	f7fd ff40 	bl	d4ab0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c30:	4638      	mov	r0, r7
   d6c32:	b015      	add	sp, #84	; 0x54
   d6c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c38 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c38:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c3a:	4a03      	ldr	r2, [pc, #12]	; (d6c48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c3c:	601a      	str	r2, [r3, #0]
   d6c3e:	2200      	movs	r2, #0
   d6c40:	605a      	str	r2, [r3, #4]
   d6c42:	4770      	bx	lr
   d6c44:	2003e70c 	.word	0x2003e70c
   d6c48:	000d7844 	.word	0x000d7844

000d6c4c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6c4c:	b510      	push	{r4, lr}
   d6c4e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6c50:	480f      	ldr	r0, [pc, #60]	; (d6c90 <pinAvailable+0x44>)
   d6c52:	f7fe fa55 	bl	d5100 <_ZN8SPIClass9isEnabledEv>
   d6c56:	b128      	cbz	r0, d6c64 <pinAvailable+0x18>
   d6c58:	f1a4 030b 	sub.w	r3, r4, #11
   d6c5c:	2b02      	cmp	r3, #2
   d6c5e:	d801      	bhi.n	d6c64 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6c60:	2000      	movs	r0, #0
   d6c62:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6c64:	f000 f876 	bl	d6d54 <_Z19__fetch_global_Wirev>
   d6c68:	f7ff fe96 	bl	d6998 <_ZN7TwoWire9isEnabledEv>
   d6c6c:	b108      	cbz	r0, d6c72 <pinAvailable+0x26>
   d6c6e:	2c01      	cmp	r4, #1
   d6c70:	d9f6      	bls.n	d6c60 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6c72:	f7ff fe2d 	bl	d68d0 <_Z22__fetch_global_Serial1v>
   d6c76:	f7ff fe27 	bl	d68c8 <_ZN11USARTSerial9isEnabledEv>
   d6c7a:	b118      	cbz	r0, d6c84 <pinAvailable+0x38>
   d6c7c:	f1a4 0309 	sub.w	r3, r4, #9
   d6c80:	2b01      	cmp	r3, #1
   d6c82:	d9ed      	bls.n	d6c60 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6c84:	2c1e      	cmp	r4, #30
   d6c86:	bf8c      	ite	hi
   d6c88:	2000      	movhi	r0, #0
   d6c8a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6c8c:	bd10      	pop	{r4, pc}
   d6c8e:	bf00      	nop
   d6c90:	2003e714 	.word	0x2003e714

000d6c94 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c94:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6c96:	b538      	push	{r3, r4, r5, lr}
   d6c98:	4604      	mov	r4, r0
   d6c9a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c9c:	d80a      	bhi.n	d6cb4 <pinMode+0x20>
   d6c9e:	29ff      	cmp	r1, #255	; 0xff
   d6ca0:	d008      	beq.n	d6cb4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6ca2:	f7ff ffd3 	bl	d6c4c <pinAvailable>
   d6ca6:	b128      	cbz	r0, d6cb4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6ca8:	4629      	mov	r1, r5
   d6caa:	4620      	mov	r0, r4
}
   d6cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6cb0:	f7fd bf1e 	b.w	d4af0 <HAL_Pin_Mode>
   d6cb4:	bd38      	pop	{r3, r4, r5, pc}

000d6cb6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6cb6:	b538      	push	{r3, r4, r5, lr}
   d6cb8:	4604      	mov	r4, r0
   d6cba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cbc:	f7fd ff20 	bl	d4b00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6cc0:	28ff      	cmp	r0, #255	; 0xff
   d6cc2:	d010      	beq.n	d6ce6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6cc4:	2806      	cmp	r0, #6
   d6cc6:	d804      	bhi.n	d6cd2 <digitalWrite+0x1c>
   d6cc8:	234d      	movs	r3, #77	; 0x4d
   d6cca:	fa23 f000 	lsr.w	r0, r3, r0
   d6cce:	07c3      	lsls	r3, r0, #31
   d6cd0:	d409      	bmi.n	d6ce6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6cd2:	4620      	mov	r0, r4
   d6cd4:	f7ff ffba 	bl	d6c4c <pinAvailable>
   d6cd8:	b128      	cbz	r0, d6ce6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6cda:	4629      	mov	r1, r5
   d6cdc:	4620      	mov	r0, r4
}
   d6cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ce2:	f7fd bf15 	b.w	d4b10 <HAL_GPIO_Write>
   d6ce6:	bd38      	pop	{r3, r4, r5, pc}

000d6ce8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6ce8:	b510      	push	{r4, lr}
   d6cea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cec:	f7fd ff08 	bl	d4b00 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6cf0:	3804      	subs	r0, #4
   d6cf2:	b2c0      	uxtb	r0, r0
   d6cf4:	2801      	cmp	r0, #1
   d6cf6:	d908      	bls.n	d6d0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6cf8:	4620      	mov	r0, r4
   d6cfa:	f7ff ffa7 	bl	d6c4c <pinAvailable>
   d6cfe:	b120      	cbz	r0, d6d0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6d00:	4620      	mov	r0, r4
}
   d6d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6d06:	f7fd bf0b 	b.w	d4b20 <HAL_GPIO_Read>
}
   d6d0a:	2000      	movs	r0, #0
   d6d0c:	bd10      	pop	{r4, pc}
	...

000d6d10 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d10:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6d12:	4c0c      	ldr	r4, [pc, #48]	; (d6d44 <_GLOBAL__sub_I_SPI+0x34>)
   d6d14:	4e0c      	ldr	r6, [pc, #48]	; (d6d48 <_GLOBAL__sub_I_SPI+0x38>)
   d6d16:	4d0d      	ldr	r5, [pc, #52]	; (d6d4c <_GLOBAL__sub_I_SPI+0x3c>)
   d6d18:	2100      	movs	r1, #0
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	f7fe f9dc 	bl	d50d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d20:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d22:	4c0b      	ldr	r4, [pc, #44]	; (d6d50 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6d24:	4632      	mov	r2, r6
   d6d26:	4629      	mov	r1, r5
   d6d28:	f000 f834 	bl	d6d94 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d2c:	2101      	movs	r1, #1
   d6d2e:	4620      	mov	r0, r4
   d6d30:	f7fe f9d2 	bl	d50d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d34:	4632      	mov	r2, r6
   d6d36:	4629      	mov	r1, r5
   d6d38:	4620      	mov	r0, r4
   d6d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6d3e:	f000 b829 	b.w	d6d94 <__aeabi_atexit>
   d6d42:	bf00      	nop
   d6d44:	2003e714 	.word	0x2003e714
   d6d48:	2003e38c 	.word	0x2003e38c
   d6d4c:	000d50c9 	.word	0x000d50c9
   d6d50:	2003e724 	.word	0x2003e724

000d6d54 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6d54:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6d56:	4d0b      	ldr	r5, [pc, #44]	; (d6d84 <_Z19__fetch_global_Wirev+0x30>)
   d6d58:	6829      	ldr	r1, [r5, #0]
   d6d5a:	f011 0401 	ands.w	r4, r1, #1
   d6d5e:	d10f      	bne.n	d6d80 <_Z19__fetch_global_Wirev+0x2c>
   d6d60:	4628      	mov	r0, r5
   d6d62:	f7fd f9a0 	bl	d40a6 <__cxa_guard_acquire>
   d6d66:	b158      	cbz	r0, d6d80 <_Z19__fetch_global_Wirev+0x2c>
   d6d68:	4621      	mov	r1, r4
   d6d6a:	4807      	ldr	r0, [pc, #28]	; (d6d88 <_Z19__fetch_global_Wirev+0x34>)
   d6d6c:	f7ff fe02 	bl	d6974 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6d70:	4628      	mov	r0, r5
   d6d72:	f7fd f99d 	bl	d40b0 <__cxa_guard_release>
   d6d76:	4a05      	ldr	r2, [pc, #20]	; (d6d8c <_Z19__fetch_global_Wirev+0x38>)
   d6d78:	4905      	ldr	r1, [pc, #20]	; (d6d90 <_Z19__fetch_global_Wirev+0x3c>)
   d6d7a:	4803      	ldr	r0, [pc, #12]	; (d6d88 <_Z19__fetch_global_Wirev+0x34>)
   d6d7c:	f000 f80a 	bl	d6d94 <__aeabi_atexit>
	return wire;
}
   d6d80:	4801      	ldr	r0, [pc, #4]	; (d6d88 <_Z19__fetch_global_Wirev+0x34>)
   d6d82:	bd38      	pop	{r3, r4, r5, pc}
   d6d84:	2003e738 	.word	0x2003e738
   d6d88:	2003e73c 	.word	0x2003e73c
   d6d8c:	2003e38c 	.word	0x2003e38c
   d6d90:	000d691d 	.word	0x000d691d

000d6d94 <__aeabi_atexit>:
   d6d94:	460b      	mov	r3, r1
   d6d96:	4601      	mov	r1, r0
   d6d98:	4618      	mov	r0, r3
   d6d9a:	f000 b94b 	b.w	d7034 <__cxa_atexit>

000d6d9e <_ZdlPvj>:
   d6d9e:	f7fd b97e 	b.w	d409e <_ZdlPv>
	...

000d6da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6da4:	4b18      	ldr	r3, [pc, #96]	; (d6e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6da6:	681a      	ldr	r2, [r3, #0]
   d6da8:	07d1      	lsls	r1, r2, #31
   d6daa:	bf5c      	itt	pl
   d6dac:	2201      	movpl	r2, #1
   d6dae:	601a      	strpl	r2, [r3, #0]
   d6db0:	4b16      	ldr	r3, [pc, #88]	; (d6e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6db2:	681a      	ldr	r2, [r3, #0]
   d6db4:	07d2      	lsls	r2, r2, #31
   d6db6:	bf5c      	itt	pl
   d6db8:	2201      	movpl	r2, #1
   d6dba:	601a      	strpl	r2, [r3, #0]
   d6dbc:	4b14      	ldr	r3, [pc, #80]	; (d6e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6dbe:	681a      	ldr	r2, [r3, #0]
   d6dc0:	07d0      	lsls	r0, r2, #31
   d6dc2:	bf5c      	itt	pl
   d6dc4:	2201      	movpl	r2, #1
   d6dc6:	601a      	strpl	r2, [r3, #0]
   d6dc8:	4b12      	ldr	r3, [pc, #72]	; (d6e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6dca:	681a      	ldr	r2, [r3, #0]
   d6dcc:	07d1      	lsls	r1, r2, #31
   d6dce:	bf5c      	itt	pl
   d6dd0:	2201      	movpl	r2, #1
   d6dd2:	601a      	strpl	r2, [r3, #0]
   d6dd4:	4b10      	ldr	r3, [pc, #64]	; (d6e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6dd6:	681a      	ldr	r2, [r3, #0]
   d6dd8:	07d2      	lsls	r2, r2, #31
   d6dda:	bf5c      	itt	pl
   d6ddc:	2201      	movpl	r2, #1
   d6dde:	601a      	strpl	r2, [r3, #0]
   d6de0:	4b0e      	ldr	r3, [pc, #56]	; (d6e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6de2:	681a      	ldr	r2, [r3, #0]
   d6de4:	07d0      	lsls	r0, r2, #31
   d6de6:	bf5c      	itt	pl
   d6de8:	2201      	movpl	r2, #1
   d6dea:	601a      	strpl	r2, [r3, #0]
   d6dec:	4b0c      	ldr	r3, [pc, #48]	; (d6e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6dee:	681a      	ldr	r2, [r3, #0]
   d6df0:	07d1      	lsls	r1, r2, #31
   d6df2:	bf5c      	itt	pl
   d6df4:	2201      	movpl	r2, #1
   d6df6:	601a      	strpl	r2, [r3, #0]
   d6df8:	4b0a      	ldr	r3, [pc, #40]	; (d6e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6dfa:	681a      	ldr	r2, [r3, #0]
   d6dfc:	07d2      	lsls	r2, r2, #31
   d6dfe:	bf5c      	itt	pl
   d6e00:	2201      	movpl	r2, #1
   d6e02:	601a      	strpl	r2, [r3, #0]
   d6e04:	4770      	bx	lr
   d6e06:	bf00      	nop
   d6e08:	2003e76c 	.word	0x2003e76c
   d6e0c:	2003e768 	.word	0x2003e768
   d6e10:	2003e764 	.word	0x2003e764
   d6e14:	2003e760 	.word	0x2003e760
   d6e18:	2003e75c 	.word	0x2003e75c
   d6e1c:	2003e758 	.word	0x2003e758
   d6e20:	2003e754 	.word	0x2003e754
   d6e24:	2003e750 	.word	0x2003e750

000d6e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e28:	4b24      	ldr	r3, [pc, #144]	; (d6ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e2a:	681a      	ldr	r2, [r3, #0]
   d6e2c:	07d0      	lsls	r0, r2, #31
   d6e2e:	bf5c      	itt	pl
   d6e30:	2201      	movpl	r2, #1
   d6e32:	601a      	strpl	r2, [r3, #0]
   d6e34:	4b22      	ldr	r3, [pc, #136]	; (d6ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e36:	681a      	ldr	r2, [r3, #0]
   d6e38:	07d1      	lsls	r1, r2, #31
   d6e3a:	bf5c      	itt	pl
   d6e3c:	2201      	movpl	r2, #1
   d6e3e:	601a      	strpl	r2, [r3, #0]
   d6e40:	4b20      	ldr	r3, [pc, #128]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e42:	681a      	ldr	r2, [r3, #0]
   d6e44:	07d2      	lsls	r2, r2, #31
   d6e46:	bf5c      	itt	pl
   d6e48:	2201      	movpl	r2, #1
   d6e4a:	601a      	strpl	r2, [r3, #0]
   d6e4c:	4b1e      	ldr	r3, [pc, #120]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e4e:	681a      	ldr	r2, [r3, #0]
   d6e50:	07d0      	lsls	r0, r2, #31
   d6e52:	bf5c      	itt	pl
   d6e54:	2201      	movpl	r2, #1
   d6e56:	601a      	strpl	r2, [r3, #0]
   d6e58:	4b1c      	ldr	r3, [pc, #112]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e5a:	681a      	ldr	r2, [r3, #0]
   d6e5c:	07d1      	lsls	r1, r2, #31
   d6e5e:	bf5c      	itt	pl
   d6e60:	2201      	movpl	r2, #1
   d6e62:	601a      	strpl	r2, [r3, #0]
   d6e64:	4b1a      	ldr	r3, [pc, #104]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d2      	lsls	r2, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b18      	ldr	r3, [pc, #96]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d0      	lsls	r0, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4b16      	ldr	r3, [pc, #88]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e7e:	681a      	ldr	r2, [r3, #0]
   d6e80:	07d1      	lsls	r1, r2, #31
   d6e82:	bf5c      	itt	pl
   d6e84:	2201      	movpl	r2, #1
   d6e86:	601a      	strpl	r2, [r3, #0]
   d6e88:	4b14      	ldr	r3, [pc, #80]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e8a:	681a      	ldr	r2, [r3, #0]
   d6e8c:	07d2      	lsls	r2, r2, #31
   d6e8e:	bf5c      	itt	pl
   d6e90:	2201      	movpl	r2, #1
   d6e92:	601a      	strpl	r2, [r3, #0]
   d6e94:	4b12      	ldr	r3, [pc, #72]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e96:	681a      	ldr	r2, [r3, #0]
   d6e98:	07d0      	lsls	r0, r2, #31
   d6e9a:	bf5c      	itt	pl
   d6e9c:	2201      	movpl	r2, #1
   d6e9e:	601a      	strpl	r2, [r3, #0]
   d6ea0:	4b10      	ldr	r3, [pc, #64]	; (d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6ea2:	681a      	ldr	r2, [r3, #0]
   d6ea4:	07d1      	lsls	r1, r2, #31
   d6ea6:	bf5c      	itt	pl
   d6ea8:	2201      	movpl	r2, #1
   d6eaa:	601a      	strpl	r2, [r3, #0]
   d6eac:	4b0e      	ldr	r3, [pc, #56]	; (d6ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6eae:	681a      	ldr	r2, [r3, #0]
   d6eb0:	07d2      	lsls	r2, r2, #31
   d6eb2:	bf5c      	itt	pl
   d6eb4:	2201      	movpl	r2, #1
   d6eb6:	601a      	strpl	r2, [r3, #0]
   d6eb8:	4770      	bx	lr
   d6eba:	bf00      	nop
   d6ebc:	2003e79c 	.word	0x2003e79c
   d6ec0:	2003e798 	.word	0x2003e798
   d6ec4:	2003e794 	.word	0x2003e794
   d6ec8:	2003e790 	.word	0x2003e790
   d6ecc:	2003e78c 	.word	0x2003e78c
   d6ed0:	2003e788 	.word	0x2003e788
   d6ed4:	2003e784 	.word	0x2003e784
   d6ed8:	2003e780 	.word	0x2003e780
   d6edc:	2003e77c 	.word	0x2003e77c
   d6ee0:	2003e778 	.word	0x2003e778
   d6ee4:	2003e774 	.word	0x2003e774
   d6ee8:	2003e770 	.word	0x2003e770

000d6eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6eec:	4b24      	ldr	r3, [pc, #144]	; (d6f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d0      	lsls	r0, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b22      	ldr	r3, [pc, #136]	; (d6f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d1      	lsls	r1, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b20      	ldr	r3, [pc, #128]	; (d6f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d2      	lsls	r2, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b1e      	ldr	r3, [pc, #120]	; (d6f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d0      	lsls	r0, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b1c      	ldr	r3, [pc, #112]	; (d6f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d1      	lsls	r1, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4b1a      	ldr	r3, [pc, #104]	; (d6f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f2a:	681a      	ldr	r2, [r3, #0]
   d6f2c:	07d2      	lsls	r2, r2, #31
   d6f2e:	bf5c      	itt	pl
   d6f30:	2201      	movpl	r2, #1
   d6f32:	601a      	strpl	r2, [r3, #0]
   d6f34:	4b18      	ldr	r3, [pc, #96]	; (d6f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f36:	681a      	ldr	r2, [r3, #0]
   d6f38:	07d0      	lsls	r0, r2, #31
   d6f3a:	bf5c      	itt	pl
   d6f3c:	2201      	movpl	r2, #1
   d6f3e:	601a      	strpl	r2, [r3, #0]
   d6f40:	4b16      	ldr	r3, [pc, #88]	; (d6f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f42:	681a      	ldr	r2, [r3, #0]
   d6f44:	07d1      	lsls	r1, r2, #31
   d6f46:	bf5c      	itt	pl
   d6f48:	2201      	movpl	r2, #1
   d6f4a:	601a      	strpl	r2, [r3, #0]
   d6f4c:	4b14      	ldr	r3, [pc, #80]	; (d6fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6f4e:	681a      	ldr	r2, [r3, #0]
   d6f50:	07d2      	lsls	r2, r2, #31
   d6f52:	bf5c      	itt	pl
   d6f54:	2201      	movpl	r2, #1
   d6f56:	601a      	strpl	r2, [r3, #0]
   d6f58:	4b12      	ldr	r3, [pc, #72]	; (d6fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6f5a:	681a      	ldr	r2, [r3, #0]
   d6f5c:	07d0      	lsls	r0, r2, #31
   d6f5e:	bf5c      	itt	pl
   d6f60:	2201      	movpl	r2, #1
   d6f62:	601a      	strpl	r2, [r3, #0]
   d6f64:	4b10      	ldr	r3, [pc, #64]	; (d6fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6f66:	681a      	ldr	r2, [r3, #0]
   d6f68:	07d1      	lsls	r1, r2, #31
   d6f6a:	bf5c      	itt	pl
   d6f6c:	2201      	movpl	r2, #1
   d6f6e:	601a      	strpl	r2, [r3, #0]
   d6f70:	4b0e      	ldr	r3, [pc, #56]	; (d6fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6f72:	681a      	ldr	r2, [r3, #0]
   d6f74:	07d2      	lsls	r2, r2, #31
   d6f76:	bf5c      	itt	pl
   d6f78:	2201      	movpl	r2, #1
   d6f7a:	601a      	strpl	r2, [r3, #0]
   d6f7c:	4770      	bx	lr
   d6f7e:	bf00      	nop
   d6f80:	2003e7cc 	.word	0x2003e7cc
   d6f84:	2003e7c8 	.word	0x2003e7c8
   d6f88:	2003e7c4 	.word	0x2003e7c4
   d6f8c:	2003e7c0 	.word	0x2003e7c0
   d6f90:	2003e7bc 	.word	0x2003e7bc
   d6f94:	2003e7b8 	.word	0x2003e7b8
   d6f98:	2003e7b4 	.word	0x2003e7b4
   d6f9c:	2003e7b0 	.word	0x2003e7b0
   d6fa0:	2003e7ac 	.word	0x2003e7ac
   d6fa4:	2003e7a8 	.word	0x2003e7a8
   d6fa8:	2003e7a4 	.word	0x2003e7a4
   d6fac:	2003e7a0 	.word	0x2003e7a0

000d6fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6fb0:	4b18      	ldr	r3, [pc, #96]	; (d7014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d1      	lsls	r1, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4b16      	ldr	r3, [pc, #88]	; (d7018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6fbe:	681a      	ldr	r2, [r3, #0]
   d6fc0:	07d2      	lsls	r2, r2, #31
   d6fc2:	bf5c      	itt	pl
   d6fc4:	2201      	movpl	r2, #1
   d6fc6:	601a      	strpl	r2, [r3, #0]
   d6fc8:	4b14      	ldr	r3, [pc, #80]	; (d701c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6fca:	681a      	ldr	r2, [r3, #0]
   d6fcc:	07d0      	lsls	r0, r2, #31
   d6fce:	bf5c      	itt	pl
   d6fd0:	2201      	movpl	r2, #1
   d6fd2:	601a      	strpl	r2, [r3, #0]
   d6fd4:	4b12      	ldr	r3, [pc, #72]	; (d7020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6fd6:	681a      	ldr	r2, [r3, #0]
   d6fd8:	07d1      	lsls	r1, r2, #31
   d6fda:	bf5c      	itt	pl
   d6fdc:	2201      	movpl	r2, #1
   d6fde:	601a      	strpl	r2, [r3, #0]
   d6fe0:	4b10      	ldr	r3, [pc, #64]	; (d7024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6fe2:	681a      	ldr	r2, [r3, #0]
   d6fe4:	07d2      	lsls	r2, r2, #31
   d6fe6:	bf5c      	itt	pl
   d6fe8:	2201      	movpl	r2, #1
   d6fea:	601a      	strpl	r2, [r3, #0]
   d6fec:	4b0e      	ldr	r3, [pc, #56]	; (d7028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6fee:	681a      	ldr	r2, [r3, #0]
   d6ff0:	07d0      	lsls	r0, r2, #31
   d6ff2:	bf5c      	itt	pl
   d6ff4:	2201      	movpl	r2, #1
   d6ff6:	601a      	strpl	r2, [r3, #0]
   d6ff8:	4b0c      	ldr	r3, [pc, #48]	; (d702c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	07d1      	lsls	r1, r2, #31
   d6ffe:	bf5c      	itt	pl
   d7000:	2201      	movpl	r2, #1
   d7002:	601a      	strpl	r2, [r3, #0]
   d7004:	4b0a      	ldr	r3, [pc, #40]	; (d7030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7006:	681a      	ldr	r2, [r3, #0]
   d7008:	07d2      	lsls	r2, r2, #31
   d700a:	bf5c      	itt	pl
   d700c:	2201      	movpl	r2, #1
   d700e:	601a      	strpl	r2, [r3, #0]
   d7010:	4770      	bx	lr
   d7012:	bf00      	nop
   d7014:	2003e7ec 	.word	0x2003e7ec
   d7018:	2003e7e8 	.word	0x2003e7e8
   d701c:	2003e7e4 	.word	0x2003e7e4
   d7020:	2003e7e0 	.word	0x2003e7e0
   d7024:	2003e7dc 	.word	0x2003e7dc
   d7028:	2003e7d8 	.word	0x2003e7d8
   d702c:	2003e7d4 	.word	0x2003e7d4
   d7030:	2003e7d0 	.word	0x2003e7d0

000d7034 <__cxa_atexit>:
   d7034:	b510      	push	{r4, lr}
   d7036:	4c05      	ldr	r4, [pc, #20]	; (d704c <__cxa_atexit+0x18>)
   d7038:	4613      	mov	r3, r2
   d703a:	b12c      	cbz	r4, d7048 <__cxa_atexit+0x14>
   d703c:	460a      	mov	r2, r1
   d703e:	4601      	mov	r1, r0
   d7040:	2002      	movs	r0, #2
   d7042:	f3af 8000 	nop.w
   d7046:	bd10      	pop	{r4, pc}
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}
   d704c:	00000000 	.word	0x00000000

000d7050 <memcmp>:
   d7050:	b510      	push	{r4, lr}
   d7052:	3901      	subs	r1, #1
   d7054:	4402      	add	r2, r0
   d7056:	4290      	cmp	r0, r2
   d7058:	d007      	beq.n	d706a <memcmp+0x1a>
   d705a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d705e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7062:	42a3      	cmp	r3, r4
   d7064:	d0f7      	beq.n	d7056 <memcmp+0x6>
   d7066:	1b18      	subs	r0, r3, r4
   d7068:	bd10      	pop	{r4, pc}
   d706a:	2000      	movs	r0, #0
   d706c:	bd10      	pop	{r4, pc}

000d706e <memcpy>:
   d706e:	b510      	push	{r4, lr}
   d7070:	1e43      	subs	r3, r0, #1
   d7072:	440a      	add	r2, r1
   d7074:	4291      	cmp	r1, r2
   d7076:	d004      	beq.n	d7082 <memcpy+0x14>
   d7078:	f811 4b01 	ldrb.w	r4, [r1], #1
   d707c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7080:	e7f8      	b.n	d7074 <memcpy+0x6>
   d7082:	bd10      	pop	{r4, pc}

000d7084 <memmove>:
   d7084:	4288      	cmp	r0, r1
   d7086:	b510      	push	{r4, lr}
   d7088:	eb01 0302 	add.w	r3, r1, r2
   d708c:	d801      	bhi.n	d7092 <memmove+0xe>
   d708e:	1e42      	subs	r2, r0, #1
   d7090:	e00b      	b.n	d70aa <memmove+0x26>
   d7092:	4298      	cmp	r0, r3
   d7094:	d2fb      	bcs.n	d708e <memmove+0xa>
   d7096:	1881      	adds	r1, r0, r2
   d7098:	1ad2      	subs	r2, r2, r3
   d709a:	42d3      	cmn	r3, r2
   d709c:	d004      	beq.n	d70a8 <memmove+0x24>
   d709e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d70a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d70a6:	e7f8      	b.n	d709a <memmove+0x16>
   d70a8:	bd10      	pop	{r4, pc}
   d70aa:	4299      	cmp	r1, r3
   d70ac:	d004      	beq.n	d70b8 <memmove+0x34>
   d70ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70b2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d70b6:	e7f8      	b.n	d70aa <memmove+0x26>
   d70b8:	bd10      	pop	{r4, pc}

000d70ba <memset>:
   d70ba:	4402      	add	r2, r0
   d70bc:	4603      	mov	r3, r0
   d70be:	4293      	cmp	r3, r2
   d70c0:	d002      	beq.n	d70c8 <memset+0xe>
   d70c2:	f803 1b01 	strb.w	r1, [r3], #1
   d70c6:	e7fa      	b.n	d70be <memset+0x4>
   d70c8:	4770      	bx	lr
	...

000d70cc <srand>:
   d70cc:	b538      	push	{r3, r4, r5, lr}
   d70ce:	4b12      	ldr	r3, [pc, #72]	; (d7118 <srand+0x4c>)
   d70d0:	681c      	ldr	r4, [r3, #0]
   d70d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70d4:	4605      	mov	r5, r0
   d70d6:	b9d3      	cbnz	r3, d710e <srand+0x42>
   d70d8:	2018      	movs	r0, #24
   d70da:	f7fd ff97 	bl	d500c <malloc>
   d70de:	f243 330e 	movw	r3, #13070	; 0x330e
   d70e2:	63a0      	str	r0, [r4, #56]	; 0x38
   d70e4:	8003      	strh	r3, [r0, #0]
   d70e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d70ea:	8043      	strh	r3, [r0, #2]
   d70ec:	f241 2334 	movw	r3, #4660	; 0x1234
   d70f0:	8083      	strh	r3, [r0, #4]
   d70f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d70f6:	80c3      	strh	r3, [r0, #6]
   d70f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d70fc:	8103      	strh	r3, [r0, #8]
   d70fe:	2305      	movs	r3, #5
   d7100:	8143      	strh	r3, [r0, #10]
   d7102:	230b      	movs	r3, #11
   d7104:	8183      	strh	r3, [r0, #12]
   d7106:	2201      	movs	r2, #1
   d7108:	2300      	movs	r3, #0
   d710a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d710e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7110:	2200      	movs	r2, #0
   d7112:	611d      	str	r5, [r3, #16]
   d7114:	615a      	str	r2, [r3, #20]
   d7116:	bd38      	pop	{r3, r4, r5, pc}
   d7118:	2003e388 	.word	0x2003e388

000d711c <strlen>:
   d711c:	4603      	mov	r3, r0
   d711e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7122:	2a00      	cmp	r2, #0
   d7124:	d1fb      	bne.n	d711e <strlen+0x2>
   d7126:	1a18      	subs	r0, r3, r0
   d7128:	3801      	subs	r0, #1
   d712a:	4770      	bx	lr

000d712c <strnlen>:
   d712c:	b510      	push	{r4, lr}
   d712e:	4603      	mov	r3, r0
   d7130:	4401      	add	r1, r0
   d7132:	428b      	cmp	r3, r1
   d7134:	d004      	beq.n	d7140 <strnlen+0x14>
   d7136:	781a      	ldrb	r2, [r3, #0]
   d7138:	1c5c      	adds	r4, r3, #1
   d713a:	b10a      	cbz	r2, d7140 <strnlen+0x14>
   d713c:	4623      	mov	r3, r4
   d713e:	e7f8      	b.n	d7132 <strnlen+0x6>
   d7140:	1a18      	subs	r0, r3, r0
   d7142:	bd10      	pop	{r4, pc}

000d7144 <dynalib_user>:
   d7144:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7154:	0000 0000 6c42 6575 6f74 746f 2068 6f43     ....Bluetooth Co
   d7164:	6e6e 6365 6574 2164 4200 756c 7465 6f6f     nnected!.Bluetoo
   d7174:	6874 4420 7369 6f63 6e6e 6365 6574 2e64     th Disconnected.
   d7184:	5600 7265 6669 6569 2064 4449 003a 6946     .Verified ID:.Fi
   d7194:	676e 7265 6e20 746f 6620 756f 646e 3600     nger not found.6
   d71a4:	3445 3030 3030 2d30 3542 3341 462d 3933     E400000-B5A3-F39
   d71b4:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d71c4:	3941 0045 6572 6563 7669 0065 4536 3034     A9E.receive.6E40
   d71d4:	3030 3230 422d 4135 2d33 3346 3339 452d     0002-B5A3-F393-E
   d71e4:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   d71f4:	7400 6172 736e 696d 0074 4536 3034 3030     .transmit.6E4000
   d7204:	3130 422d 4135 2d33 3346 3339 452d 4130     01-B5A3-F393-E0A
   d7214:	2d39 3545 4530 3432 4344 4143 4539 0000     9-E50E24DCCA9E..

000d7224 <CSWTCH.51>:
   d7224:	0000 1001 1002 1003 1004 1005 1006 1007     ................
   d7234:	1008 1009 100a 100b 100c 100d 100e 100f     ................
   d7244:	1010 1011 1012 6552 7073 6e6f 6573 505f     ......Response_P
   d7254:	6361 656b 2074 6170 7372 6e69 2067 7265     acket parsing er
   d7264:	6f72 2072 2000 7c7c 0020 2120 203d 4300     ror . || . != .C
   d7274:	4d4f 414d 444e 535f 4154 5452 435f 444f     OMMAND_START_COD
   d7284:	5f45 0031 4f43 4d4d 4e41 5f44 5453 5241     E_1.COMMAND_STAR
   d7294:	5f54 4f43 4544 325f 4300 4d4f 414d 444e     T_CODE_2.COMMAND
   d72a4:	445f 5645 4349 5f45 4449 315f 4300 4d4f     _DEVICE_ID_1.COM
   d72b4:	414d 444e 445f 5645 4349 5f45 4449 325f     MAND_DEVICE_ID_2
   d72c4:	4100 6b63 614e 5f6b 4f4c 0057 6341 4e6b     .AckNak_LOW.AckN
   d72d4:	6b61 485f 4749 0048 6843 6365 736b 6d75     ak_HIGH.Checksum
   d72e4:	4c5f 574f 4300 6568 6b63 7573 5f6d 4948     _LOW.Checksum_HI
   d72f4:	4847 2500 322e 0058 0022 5046 2053 202d     GH.%.2X.".FPS - 
   d7304:	4553 444e 203a 4600 5350 2d20 5220 4345     SEND: .FPS - REC
   d7314:	3a56 0020 5046 2053 202d 704f 6e65 4600     V: .FPS - Open.F
   d7324:	5350 2d20 4320 6f6c 6573 4600 5350 2d20     PS - Close.FPS -
   d7334:	4c20 4445 6f20 006e 5046 2053 202d 454c      LED on.FPS - LE
   d7344:	2044 666f 0066 5046 2053 202d 6843 6e61     D off.FPS - Chan
   d7354:	6567 6142 6475 6152 6574 4600 5350 2d20     geBaudRate.FPS -
   d7364:	4720 7465 6e45 6f72 6c6c 6465 6f43 6e75      GetEnrolledCoun
   d7374:	0074 5046 2053 202d 6843 6365 456b 726e     t.FPS - CheckEnr
   d7384:	6c6f 656c 0064 5046 2053 202d 6e45 6f72     olled.FPS - Enro
   d7394:	6c6c 7453 7261 0074 5046 2053 202d 6e45     llStart.FPS - En
   d73a4:	6f72 6c6c 0031 5046 2053 202d 6e45 6f72     roll1.FPS - Enro
   d73b4:	6c6c 0032 5046 2053 202d 6e45 6f72 6c6c     ll2.FPS - Enroll
   d73c4:	0033 5046 2053 202d 6544 656c 6574 4449     3.FPS - DeleteID
   d73d4:	4600 5350 2d20 4420 6c65 7465 4165 6c6c     .FPS - DeleteAll
   d73e4:	4600 5350 2d20 5620 7265 6669 3179 315f     .FPS - Verify1_1
   d73f4:	4600 5350 2d20 4920 6564 746e 6669 3179     .FPS - Identify1
   d7404:	4e5f 4600 5350 2d20 4320 7061 7574 6572     _N.FPS - Capture
   d7414:	6946 676e 7265 0000                         Finger..

000d741c <_ZTVN5spark13EthernetClassE>:
	...
   d7424:	50ab 000d 50a1 000d 5097 000d 508d 000d     .P...P...P...P..
   d7434:	5081 000d 5075 000d 5069 000d 5061 000d     .P..uP..iP..aP..
   d7444:	5057 000d 504d 000d 6b6d 000d               WP..MP..mk..

000d7450 <_ZTV8SPIClass>:
	...
   d7458:	50c9 000d 50cb 000d                         .P...P..

000d7460 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7468:	5203 000d 5209 000d 5ecd 000d 5233 000d     .R...R...^..3R..
   d7478:	5205 000d                                   .R..

000d747c <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7484:	51fd 000d 5217 000d 5fd5 000d 5237 000d     .Q...R..._..7R..
   d7494:	51ff 000d                                   .Q..

000d7498 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d74a0:	51f7 000d 5225 000d 59b7 000d 523b 000d     .Q..%R...Y..;R..
   d74b0:	51f9 000d                                   .Q..

000d74b4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d74b4:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d74c4:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d74d4:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d74e4:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d74f4:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d7504:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d7514:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d7524:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d7534:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d7544:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d7554:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d7564:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d7574:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d7584:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d7594:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d75a4:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d75b4:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d75c4:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d75d4:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d75e4:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d75f4:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d7604:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d7614:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d7624:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d7634:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d7644:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d7654:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d7664:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d7674:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d7684:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d7694:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d76a4:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d76b4:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d76c4:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d76d4:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d76e4:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d76f4:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d7704:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
   d7714:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   d7724:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   d7734:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
   d7744:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   d7754:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7764:	7361 7463 6d69 0065                         asctime.

000d776c <_ZTV9IPAddress>:
	...
   d7774:	65cd 000d 65bd 000d 65bf 000d               .e...e...e..

000d7780 <_ZTV9USBSerial>:
	...
   d7788:	66a5 000d 66f5 000d 6703 000d 62c1 000d     .f...f...g...b..
   d7798:	66e1 000d 66a7 000d 66bd 000d 66ef 000d     .f...f...f...f..
   d77a8:	66d3 000d 66a1 000d                         .f...f..

000d77b0 <_ZTV11USARTSerial>:
	...
   d77b8:	6805 000d 6855 000d 6863 000d 62c1 000d     .h..Uh..ch...b..
   d77c8:	6819 000d 683b 000d 6827 000d 684f 000d     .h..;h..'h..Oh..
   d77d8:	6807 000d 680b 000d                         .h...h..

000d77e0 <_ZTV7TwoWire>:
	...
   d77e8:	691d 000d 6967 000d 693f 000d 691f 000d     .i..gi..?i...i..
   d77f8:	6947 000d 694f 000d 6957 000d 695f 000d     Gi..Oi..Wi.._i..

000d7808 <_ZTVN5spark9MeshClassE>:
	...
   d7810:	69ff 000d 69f5 000d 69eb 000d 69e1 000d     .i...i...i...i..
   d7820:	69d5 000d 69c9 000d 69bd 000d 69b5 000d     .i...i...i...i..
   d7830:	69ab 000d 69a1 000d 6b6d 000d               .i...i..mk..

000d783c <_ZTVN5spark12NetworkClassE>:
	...
   d7844:	6b05 000d 6b0f 000d 6b19 000d 6b23 000d     .k...k...k..#k..
   d7854:	6b2d 000d 6b39 000d 6b45 000d 6b51 000d     -k..9k..Ek..Qk..
   d7864:	6b59 000d 6b63 000d 6b6d 000d               Yk..ck..mk..

000d7870 <__sf_fake_stdin>:
	...

000d7890 <__sf_fake_stdout>:
	...

000d78b0 <__sf_fake_stderr>:
	...
   d78d0:	0043                                        C.

000d78d2 <link_const_variable_data_end>:
	...

000d78d4 <link_constructors_location>:
   d78d4:	000d410d 	.word	0x000d410d
   d78d8:	000d43f9 	.word	0x000d43f9
   d78dc:	000d4aad 	.word	0x000d4aad
   d78e0:	000d50b5 	.word	0x000d50b5
   d78e4:	000d5109 	.word	0x000d5109
   d78e8:	000d62b1 	.word	0x000d62b1
   d78ec:	000d6411 	.word	0x000d6411
   d78f0:	000d6421 	.word	0x000d6421
   d78f4:	000d64bd 	.word	0x000d64bd
   d78f8:	000d6ab5 	.word	0x000d6ab5
   d78fc:	000d6c39 	.word	0x000d6c39
   d7900:	000d6d11 	.word	0x000d6d11
   d7904:	000d6da5 	.word	0x000d6da5
   d7908:	000d6e29 	.word	0x000d6e29
   d790c:	000d6eed 	.word	0x000d6eed
   d7910:	000d6fb1 	.word	0x000d6fb1

000d7914 <link_constructors_end>:
	...
