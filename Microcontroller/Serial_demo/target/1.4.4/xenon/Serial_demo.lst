
a:/Documents/Programming/GitHub/CoolSafe/Particle/Serial_demo/target/1.4.4/xenon/Serial_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001bc4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00015c74  2**0
                  CONTENTS
  4 .data         00000068  2003e370  000d5be0  0000e370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000418  2003e3d8  2003e3d8  0001e3d8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5c48  000d5c48  00015c48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5c70  000d5c70  00015c70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b383a  00000000  00000000  00015c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e36f  00000000  00000000  000c94ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c195  00000000  00000000  000d781d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002178  00000000  00000000  000f39b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f08  00000000  00000000  000f5b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003277c  00000000  00000000  000f9a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002266e  00000000  00000000  0012c1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fdbbe  00000000  00000000  0014e81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c3c0  00000000  00000000  0024c3dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 faf3 	bl	d5618 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 faf8 	bl	d562e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e370 	.word	0x2003e370
   d4048:	000d5be0 	.word	0x000d5be0
   d404c:	2003e3d8 	.word	0x2003e3d8
   d4050:	2003e3d8 	.word	0x2003e3d8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fe6d 	bl	d4d38 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5bdc 	.word	0x000d5bdc
   d4080:	000d5ba0 	.word	0x000d5ba0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba4c 	b.w	d4520 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa67 	bl	d455c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 be1f 	b.w	d4cd4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc23 	b.w	d48e0 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bc21 	b.w	d48e0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc27 	b.w	d48f0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc25 	b.w	d48f0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN14Command_Packet18_CalculateChecksumEv>:
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d40b6:	7842      	ldrb	r2, [r0, #1]
   d40b8:	7883      	ldrb	r3, [r0, #2]
   d40ba:	4413      	add	r3, r2
	w += Parameter[2];
   d40bc:	78c2      	ldrb	r2, [r0, #3]
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d40be:	f503 7380 	add.w	r3, r3, #256	; 0x100
	w += Parameter[2];
   d40c2:	4413      	add	r3, r2
	w += Parameter[3];
   d40c4:	7902      	ldrb	r2, [r0, #4]
   d40c6:	4413      	add	r3, r2
	w += command[0];
   d40c8:	7942      	ldrb	r2, [r0, #5]
	w += command[1];

	return w;
   d40ca:	7980      	ldrb	r0, [r0, #6]
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
	w += Parameter[2];
	w += Parameter[3];
	w += command[0];
   d40cc:	4413      	add	r3, r2
	w += command[1];

	return w;
}
   d40ce:	4418      	add	r0, r3
   d40d0:	4770      	bx	lr

000d40d2 <_ZN14Command_Packet14GetPacketBytesEv>:
#endif  //__GNUC__

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
   d40d2:	b570      	push	{r4, r5, r6, lr}
   d40d4:	4604      	mov	r4, r0
	byte* packetbytes= new byte[12];
   d40d6:	200c      	movs	r0, #12
   d40d8:	f7ff ffdf 	bl	d409a <_Znaj>

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d40dc:	2500      	movs	r5, #0
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];

	// update command before calculating checksum (important!)
	word cmd = Command;
   d40de:	7826      	ldrb	r6, [r4, #0]
	command[0] = GetLowByte(cmd);
   d40e0:	7166      	strb	r6, [r4, #5]

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];
   d40e2:	4601      	mov	r1, r0

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d40e4:	71a5      	strb	r5, [r4, #6]

	word checksum = _CalculateChecksum();
   d40e6:	4620      	mov	r0, r4
   d40e8:	f7ff ffe5 	bl	d40b6 <_ZN14Command_Packet18_CalculateChecksumEv>

	packetbytes[0] = COMMAND_START_CODE_1;
   d40ec:	2355      	movs	r3, #85	; 0x55
   d40ee:	700b      	strb	r3, [r1, #0]
	packetbytes[1] = COMMAND_START_CODE_2;
   d40f0:	23aa      	movs	r3, #170	; 0xaa
   d40f2:	704b      	strb	r3, [r1, #1]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
   d40f4:	2301      	movs	r3, #1
   d40f6:	708b      	strb	r3, [r1, #2]
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
   d40f8:	7863      	ldrb	r3, [r4, #1]
   d40fa:	710b      	strb	r3, [r1, #4]
	packetbytes[5] = Parameter[1];
   d40fc:	78a3      	ldrb	r3, [r4, #2]
   d40fe:	714b      	strb	r3, [r1, #5]
	packetbytes[6] = Parameter[2];
   d4100:	78e3      	ldrb	r3, [r4, #3]
   d4102:	718b      	strb	r3, [r1, #6]
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
   d4104:	7288      	strb	r0, [r1, #10]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4106:	7923      	ldrb	r3, [r4, #4]
	word checksum = _CalculateChecksum();

	packetbytes[0] = COMMAND_START_CODE_1;
	packetbytes[1] = COMMAND_START_CODE_2;
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
   d4108:	70cd      	strb	r5, [r1, #3]
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);
   d410a:	0a00      	lsrs	r0, r0, #8
   d410c:	72c8      	strb	r0, [r1, #11]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d410e:	71cb      	strb	r3, [r1, #7]
	packetbytes[8] = command[0];
   d4110:	720e      	strb	r6, [r1, #8]
	packetbytes[9] = command[1];
   d4112:	724d      	strb	r5, [r1, #9]
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);

	return packetbytes;
}
   d4114:	4608      	mov	r0, r1
   d4116:	bd70      	pop	{r4, r5, r6, pc}

000d4118 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
	if (high == 0x00)
   d4118:	b128      	cbz	r0, d4126 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d411a:	2912      	cmp	r1, #18
   d411c:	d803      	bhi.n	d4126 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d411e:	4b03      	ldr	r3, [pc, #12]	; (d412c <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x14>)
   d4120:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   d4124:	4770      	bx	lr
}

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
   d4126:	f64f 70ff 	movw	r0, #65535	; 0xffff
			case 0x11: e = NACK_INVALID_PARAM; break;
			case 0x12: e = NACK_FINGER_IS_NOT_PRESSED; break;
		}
	}
	return e;
}
   d412a:	4770      	bx	lr
   d412c:	000d56c4 	.word	0x000d56c4

000d4130 <_ZN15Response_Packet17CalculateChecksumEPhi>:
	return retval;
}

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
   d4130:	b510      	push	{r4, lr}
   d4132:	460b      	mov	r3, r1
	word checksum = 0;
   d4134:	2000      	movs	r0, #0
	for (int i=0; i<length; i++)
   d4136:	1a5c      	subs	r4, r3, r1
   d4138:	42a2      	cmp	r2, r4
   d413a:	dd03      	ble.n	d4144 <_ZN15Response_Packet17CalculateChecksumEPhi+0x14>
	{
		checksum +=buffer[i];
   d413c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4140:	4420      	add	r0, r4

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
	word checksum = 0;
	for (int i=0; i<length; i++)
   d4142:	e7f8      	b.n	d4136 <_ZN15Response_Packet17CalculateChecksumEPhi+0x6>
	{
		checksum +=buffer[i];
	}
	return checksum;
}
   d4144:	bd10      	pop	{r4, pc}
	...

000d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>:
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4148:	4291      	cmp	r1, r2
	return (byte)w&0x00FF;
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
   d414a:	b570      	push	{r4, r5, r6, lr}
   d414c:	460c      	mov	r4, r1
   d414e:	4615      	mov	r5, r2
   d4150:	461e      	mov	r6, r3
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4152:	d001      	beq.n	d4158 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x10>
   d4154:	4299      	cmp	r1, r3
   d4156:	d101      	bne.n	d415c <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x14>
   d4158:	2000      	movs	r0, #0
   d415a:	bd70      	pop	{r4, r5, r6, pc}
	if ((UseSerialDebug) && (retval))
   d415c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4160:	b353      	cbz	r3, d41b8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x70>
	{
		Serial.print("Response_Packet parsing error ");
   d4162:	f000 fed7 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4166:	4915      	ldr	r1, [pc, #84]	; (d41bc <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x74>)
   d4168:	f000 fd06 	bl	d4b78 <_ZN5Print5printEPKc>
		Serial.print(varname);
   d416c:	f000 fed2 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4170:	9904      	ldr	r1, [sp, #16]
   d4172:	f000 fd01 	bl	d4b78 <_ZN5Print5printEPKc>
		Serial.print(" ");
   d4176:	f000 fecd 	bl	d4f14 <_Z16_fetch_usbserialv>
   d417a:	4911      	ldr	r1, [pc, #68]	; (d41c0 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x78>)
   d417c:	f000 fcfc 	bl	d4b78 <_ZN5Print5printEPKc>
		Serial.print(propervalue, HEX);
   d4180:	f000 fec8 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4184:	2210      	movs	r2, #16
   d4186:	4629      	mov	r1, r5
   d4188:	f000 fd40 	bl	d4c0c <_ZN5Print5printEhi>
		Serial.print(" || ");
   d418c:	f000 fec2 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4190:	490c      	ldr	r1, [pc, #48]	; (d41c4 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x7c>)
   d4192:	f000 fcf1 	bl	d4b78 <_ZN5Print5printEPKc>
		Serial.print(alternatevalue, HEX);
   d4196:	f000 febd 	bl	d4f14 <_Z16_fetch_usbserialv>
   d419a:	2210      	movs	r2, #16
   d419c:	4631      	mov	r1, r6
   d419e:	f000 fd35 	bl	d4c0c <_ZN5Print5printEhi>
		Serial.print(" != ");
   d41a2:	f000 feb7 	bl	d4f14 <_Z16_fetch_usbserialv>
   d41a6:	4908      	ldr	r1, [pc, #32]	; (d41c8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x80>)
   d41a8:	f000 fce6 	bl	d4b78 <_ZN5Print5printEPKc>
		Serial.println(b, HEX);
   d41ac:	f000 feb2 	bl	d4f14 <_Z16_fetch_usbserialv>
   d41b0:	2210      	movs	r2, #16
   d41b2:	4621      	mov	r1, r4
   d41b4:	f000 fd2c 	bl	d4c10 <_ZN5Print7printlnEhi>
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d41b8:	2001      	movs	r0, #1
		Serial.print(alternatevalue, HEX);
		Serial.print(" != ");
		Serial.println(b, HEX);
	}
  return retval;
}
   d41ba:	bd70      	pop	{r4, r5, r6, pc}
   d41bc:	000d56ea 	.word	0x000d56ea
   d41c0:	000d59dd 	.word	0x000d59dd
   d41c4:	000d5709 	.word	0x000d5709
   d41c8:	000d570e 	.word	0x000d570e

000d41cc <_ZN15Response_PacketC1EPhb>:

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d41cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d41ce:	4b3a      	ldr	r3, [pc, #232]	; (d42b8 <_ZN15Response_PacketC1EPhb+0xec>)

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d41d0:	460c      	mov	r4, r1
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d41d2:	7809      	ldrb	r1, [r1, #0]
   d41d4:	9300      	str	r3, [sp, #0]
   d41d6:	2355      	movs	r3, #85	; 0x55

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d41d8:	4616      	mov	r6, r2
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d41da:	9201      	str	r2, [sp, #4]
   d41dc:	461a      	mov	r2, r3

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d41de:	4605      	mov	r5, r0
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d41e0:	f7ff ffb2 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[1], COMMAND_START_CODE_2, COMMAND_START_CODE_2, "COMMAND_START_CODE_2", UseSerialDebug);
   d41e4:	4b35      	ldr	r3, [pc, #212]	; (d42bc <_ZN15Response_PacketC1EPhb+0xf0>)
   d41e6:	7861      	ldrb	r1, [r4, #1]
   d41e8:	9300      	str	r3, [sp, #0]
   d41ea:	23aa      	movs	r3, #170	; 0xaa
   d41ec:	461a      	mov	r2, r3
   d41ee:	9601      	str	r6, [sp, #4]
   d41f0:	4628      	mov	r0, r5
   d41f2:	f7ff ffa9 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[2], COMMAND_DEVICE_ID_1, COMMAND_DEVICE_ID_1, "COMMAND_DEVICE_ID_1", UseSerialDebug);
   d41f6:	4b32      	ldr	r3, [pc, #200]	; (d42c0 <_ZN15Response_PacketC1EPhb+0xf4>)
   d41f8:	78a1      	ldrb	r1, [r4, #2]
   d41fa:	9300      	str	r3, [sp, #0]
   d41fc:	2301      	movs	r3, #1
   d41fe:	461a      	mov	r2, r3
   d4200:	9601      	str	r6, [sp, #4]
   d4202:	4628      	mov	r0, r5
   d4204:	f7ff ffa0 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[3], COMMAND_DEVICE_ID_2, COMMAND_DEVICE_ID_2, "COMMAND_DEVICE_ID_2", UseSerialDebug);
   d4208:	4b2e      	ldr	r3, [pc, #184]	; (d42c4 <_ZN15Response_PacketC1EPhb+0xf8>)
   d420a:	78e1      	ldrb	r1, [r4, #3]
   d420c:	9300      	str	r3, [sp, #0]
   d420e:	2300      	movs	r3, #0
   d4210:	461a      	mov	r2, r3
   d4212:	9601      	str	r6, [sp, #4]
   d4214:	4628      	mov	r0, r5
   d4216:	f7ff ff97 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[8], 0x30, 0x31, "AckNak_LOW", UseSerialDebug);
   d421a:	4b2b      	ldr	r3, [pc, #172]	; (d42c8 <_ZN15Response_PacketC1EPhb+0xfc>)
   d421c:	7a21      	ldrb	r1, [r4, #8]
   d421e:	9300      	str	r3, [sp, #0]
   d4220:	2230      	movs	r2, #48	; 0x30
   d4222:	2331      	movs	r3, #49	; 0x31
   d4224:	9601      	str	r6, [sp, #4]
   d4226:	4628      	mov	r0, r5
   d4228:	f7ff ff8e 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	if (buffer[8] == 0x30) ACK = true; else ACK = false;
   d422c:	7a23      	ldrb	r3, [r4, #8]
   d422e:	2b30      	cmp	r3, #48	; 0x30
   d4230:	bf0c      	ite	eq
   d4232:	2301      	moveq	r3, #1
   d4234:	2300      	movne	r3, #0
   d4236:	752b      	strb	r3, [r5, #20]
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);
   d4238:	4b24      	ldr	r3, [pc, #144]	; (d42cc <_ZN15Response_PacketC1EPhb+0x100>)
   d423a:	7a61      	ldrb	r1, [r4, #9]
   d423c:	9300      	str	r3, [sp, #0]
   d423e:	2300      	movs	r3, #0
   d4240:	461a      	mov	r2, r3
   d4242:	9601      	str	r6, [sp, #4]
   d4244:	4628      	mov	r0, r5
   d4246:	f7ff ff7f 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	word checksum = CalculateChecksum(buffer, 10);
   d424a:	4621      	mov	r1, r4
   d424c:	220a      	movs	r2, #10
   d424e:	4628      	mov	r0, r5
   d4250:	f7ff ff6e 	bl	d4130 <_ZN15Response_Packet17CalculateChecksumEPhi>
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4254:	4a1e      	ldr	r2, [pc, #120]	; (d42d0 <_ZN15Response_PacketC1EPhb+0x104>)
   d4256:	7aa1      	ldrb	r1, [r4, #10]
   d4258:	9200      	str	r2, [sp, #0]
}

// Returns the low byte from a word
byte Response_Packet::GetLowByte(word w)
{
	return (byte)w&0x00FF;
   d425a:	b2c3      	uxtb	r3, r0
}

// Returns the high byte from a word
byte Response_Packet::GetHighByte(word w)
{
	return (byte)(w>>8)&0x00FF;
   d425c:	f3c0 2707 	ubfx	r7, r0, #8, #8
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);

	word checksum = CalculateChecksum(buffer, 10);
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4260:	461a      	mov	r2, r3
   d4262:	9601      	str	r6, [sp, #4]
   d4264:	4628      	mov	r0, r5
   d4266:	f7ff ff6f 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[11], checksum_high, checksum_high, "Checksum_HIGH", UseSerialDebug);
   d426a:	4b1a      	ldr	r3, [pc, #104]	; (d42d4 <_ZN15Response_PacketC1EPhb+0x108>)
   d426c:	7ae1      	ldrb	r1, [r4, #11]
   d426e:	9300      	str	r3, [sp, #0]
   d4270:	463a      	mov	r2, r7
   d4272:	463b      	mov	r3, r7
   d4274:	9601      	str	r6, [sp, #4]
   d4276:	4628      	mov	r0, r5
   d4278:	f7ff ff66 	bl	d4148 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	Error = ErrorCodes::ParseFromBytes(buffer[5], buffer[4]);
   d427c:	7921      	ldrb	r1, [r4, #4]
   d427e:	7960      	ldrb	r0, [r4, #5]
   d4280:	f7ff ff4a 	bl	d4118 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
   d4284:	8028      	strh	r0, [r5, #0]

	ParameterBytes[0] = buffer[4];
   d4286:	7923      	ldrb	r3, [r4, #4]
   d4288:	73ab      	strb	r3, [r5, #14]
	ParameterBytes[1] = buffer[5];
   d428a:	7963      	ldrb	r3, [r4, #5]
   d428c:	73eb      	strb	r3, [r5, #15]
	ParameterBytes[2] = buffer[6];
   d428e:	79a3      	ldrb	r3, [r4, #6]
   d4290:	742b      	strb	r3, [r5, #16]
	ParameterBytes[3] = buffer[7];
   d4292:	79e3      	ldrb	r3, [r4, #7]
   d4294:	746b      	strb	r3, [r5, #17]
	ResponseBytes[0]=buffer[8];
   d4296:	7a23      	ldrb	r3, [r4, #8]
   d4298:	74ab      	strb	r3, [r5, #18]
	ResponseBytes[1]=buffer[9];
   d429a:	7a63      	ldrb	r3, [r4, #9]
   d429c:	74eb      	strb	r3, [r5, #19]
   d429e:	3c01      	subs	r4, #1
   d42a0:	1c6b      	adds	r3, r5, #1
   d42a2:	f105 020d 	add.w	r2, r5, #13
	for (int i=0; i < 12; i++)
	{
		RawBytes[i]=buffer[i];
   d42a6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d42aa:	f803 1f01 	strb.w	r1, [r3, #1]!
	ParameterBytes[1] = buffer[5];
	ParameterBytes[2] = buffer[6];
	ParameterBytes[3] = buffer[7];
	ResponseBytes[0]=buffer[8];
	ResponseBytes[1]=buffer[9];
	for (int i=0; i < 12; i++)
   d42ae:	4293      	cmp	r3, r2
   d42b0:	d1f9      	bne.n	d42a6 <_ZN15Response_PacketC1EPhb+0xda>
	{
		RawBytes[i]=buffer[i];
	}
}
   d42b2:	4628      	mov	r0, r5
   d42b4:	b003      	add	sp, #12
   d42b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42b8:	000d5713 	.word	0x000d5713
   d42bc:	000d5728 	.word	0x000d5728
   d42c0:	000d573d 	.word	0x000d573d
   d42c4:	000d5751 	.word	0x000d5751
   d42c8:	000d5765 	.word	0x000d5765
   d42cc:	000d5770 	.word	0x000d5770
   d42d0:	000d577c 	.word	0x000d577c
   d42d4:	000d5789 	.word	0x000d5789

000d42d8 <_ZN11FPS_GT511C3C1Ev>:
#ifndef __GNUC__
#pragma region -= Constructor/Destructor =-
#endif  //__GNUC__
// Creates a new object to interface with the fingerprint scanner
//FPS_GT511C3::FPS_GT511C3(uint8_t rx, uint8_t tx)
FPS_GT511C3::FPS_GT511C3()	// Serial pins pre-defined
   d42d8:	b510      	push	{r4, lr}
   d42da:	4604      	mov	r4, r0
	//pin_RX = rx;
	//pin_TX = tx;
	//pin_RX = 14;
	//pin_TX = 15;
	//_serial.begin(9600);
	Serial1.begin(9600);
   d42dc:	f000 fea0 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d42e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42e4:	f000 fe98 	bl	d5018 <_ZN11USARTSerial5beginEm>
	this->UseSerialDebug = false;
   d42e8:	2300      	movs	r3, #0
   d42ea:	7023      	strb	r3, [r4, #0]
};
   d42ec:	4620      	mov	r0, r4
   d42ee:	bd10      	pop	{r4, pc}

000d42f0 <_ZN11FPS_GT511C3D1Ev>:

// destructor
FPS_GT511C3::~FPS_GT511C3()
   d42f0:	b510      	push	{r4, lr}
   d42f2:	4604      	mov	r4, r0
{
	//_serial.~SoftwareSerial();
	Serial1.~USARTSerial();
   d42f4:	f000 fe94 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d42f8:	6803      	ldr	r3, [r0, #0]
   d42fa:	681b      	ldr	r3, [r3, #0]
   d42fc:	4798      	blx	r3
}
   d42fe:	4620      	mov	r0, r4
   d4300:	bd10      	pop	{r4, pc}
	...

000d4304 <_ZN11FPS_GT511C314serialPrintHexEh>:
  Serial.print("\"");
}

// sends a byte to the serial debugger in the hex format we want EX "0F"
void FPS_GT511C3::serialPrintHex(byte data)
{
   d4304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char tmp[16];
  sprintf(tmp, "%.2X",data);
   d4306:	460a      	mov	r2, r1
   d4308:	4668      	mov	r0, sp
   d430a:	4905      	ldr	r1, [pc, #20]	; (d4320 <_ZN11FPS_GT511C314serialPrintHexEh+0x1c>)
   d430c:	f000 fb00 	bl	d4910 <sprintf>
  Serial.print(tmp);
   d4310:	f000 fe00 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4314:	4669      	mov	r1, sp
   d4316:	f000 fc2f 	bl	d4b78 <_ZN5Print5printEPKc>
}
   d431a:	b005      	add	sp, #20
   d431c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4320:	000d5797 	.word	0x000d5797

000d4324 <_ZN11FPS_GT511C312SendToSerialEPhi>:
	return rp;
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
   d4324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4326:	460d      	mov	r5, r1
   d4328:	4617      	mov	r7, r2
   d432a:	4606      	mov	r6, r0
  boolean first=true;
  Serial.print("\"");
   d432c:	f000 fdf2 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4330:	490d      	ldr	r1, [pc, #52]	; (d4368 <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
   d4332:	f000 fc21 	bl	d4b78 <_ZN5Print5printEPKc>
   d4336:	462c      	mov	r4, r5
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
   d4338:	2301      	movs	r3, #1
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d433a:	1b62      	subs	r2, r4, r5
   d433c:	4297      	cmp	r7, r2
   d433e:	dd0c      	ble.n	d435a <_ZN11FPS_GT511C312SendToSerialEPhi+0x36>
  {
	if (first) first=false; else Serial.print(" ");
   d4340:	b923      	cbnz	r3, d434c <_ZN11FPS_GT511C312SendToSerialEPhi+0x28>
   d4342:	f000 fde7 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4346:	4909      	ldr	r1, [pc, #36]	; (d436c <_ZN11FPS_GT511C312SendToSerialEPhi+0x48>)
   d4348:	f000 fc16 	bl	d4b78 <_ZN5Print5printEPKc>
	serialPrintHex(data[i]);
   d434c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4350:	4630      	mov	r0, r6
   d4352:	f7ff ffd7 	bl	d4304 <_ZN11FPS_GT511C314serialPrintHexEh>
   d4356:	2300      	movs	r3, #0
// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT511C3::SendToSerial(byte data[], int length)
{
  boolean first=true;
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4358:	e7ef      	b.n	d433a <_ZN11FPS_GT511C312SendToSerialEPhi+0x16>
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d435a:	f000 fddb 	bl	d4f14 <_Z16_fetch_usbserialv>
   d435e:	4902      	ldr	r1, [pc, #8]	; (d4368 <_ZN11FPS_GT511C312SendToSerialEPhi+0x44>)
}
   d4360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for(int i=0; i<length; i++)
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4364:	f000 bc08 	b.w	d4b78 <_ZN5Print5printEPKc>
   d4368:	000d579c 	.word	0x000d579c
   d436c:	000d59dd 	.word	0x000d59dd

000d4370 <_ZN11FPS_GT511C311SendCommandEPhi>:
#ifndef __GNUC__
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT511C3::SendCommand(byte cmd[], int length)
{
   d4370:	b570      	push	{r4, r5, r6, lr}
   d4372:	4604      	mov	r4, r0
   d4374:	460d      	mov	r5, r1
   d4376:	4616      	mov	r6, r2
	//_serial.write(cmd, length);
	Serial1.write(cmd, length);
   d4378:	f000 fe52 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d437c:	6803      	ldr	r3, [r0, #0]
   d437e:	4632      	mov	r2, r6
   d4380:	68db      	ldr	r3, [r3, #12]
   d4382:	4629      	mov	r1, r5
   d4384:	4798      	blx	r3
	if (UseSerialDebug)
   d4386:	7823      	ldrb	r3, [r4, #0]
   d4388:	b17b      	cbz	r3, d43aa <_ZN11FPS_GT511C311SendCommandEPhi+0x3a>
	{
		Serial.print("FPS - SEND: ");
   d438a:	f000 fdc3 	bl	d4f14 <_Z16_fetch_usbserialv>
   d438e:	4907      	ldr	r1, [pc, #28]	; (d43ac <_ZN11FPS_GT511C311SendCommandEPhi+0x3c>)
   d4390:	f000 fbf2 	bl	d4b78 <_ZN5Print5printEPKc>
		SendToSerial(cmd, length);
   d4394:	4632      	mov	r2, r6
   d4396:	4629      	mov	r1, r5
   d4398:	4620      	mov	r0, r4
   d439a:	f7ff ffc3 	bl	d4324 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d439e:	f000 fdb9 	bl	d4f14 <_Z16_fetch_usbserialv>
	}
};
   d43a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial1.write(cmd, length);
	if (UseSerialDebug)
	{
		Serial.print("FPS - SEND: ");
		SendToSerial(cmd, length);
		Serial.println();
   d43a6:	f000 bbee 	b.w	d4b86 <_ZN5Print7printlnEv>
   d43aa:	bd70      	pop	{r4, r5, r6, pc}
   d43ac:	000d579e 	.word	0x000d579e

000d43b0 <_ZN11FPS_GT511C311GetResponseEv>:
	}
};

// Gets the response to the command from the software serial channel (and waits for it)
Response_Packet* FPS_GT511C3::GetResponse()
{
   d43b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43b2:	4605      	mov	r5, r0
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
	{
		//firstbyte = (byte)_serial.read();
		firstbyte = (byte)Serial1.read();
   d43b4:	f000 fe34 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d43b8:	6803      	ldr	r3, [r0, #0]
   d43ba:	695b      	ldr	r3, [r3, #20]
   d43bc:	4798      	blx	r3
{
	byte firstbyte = 0;
	bool done = false;
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
   d43be:	b2c6      	uxtb	r6, r0
   d43c0:	2e55      	cmp	r6, #85	; 0x55
   d43c2:	d1f7      	bne.n	d43b4 <_ZN11FPS_GT511C311GetResponseEv+0x4>
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d43c4:	200c      	movs	r0, #12
   d43c6:	f7ff fe68 	bl	d409a <_Znaj>
	resp[0] = firstbyte;
   d43ca:	7006      	strb	r6, [r0, #0]
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d43cc:	4604      	mov	r4, r0
   d43ce:	4606      	mov	r6, r0
   d43d0:	f100 070b 	add.w	r7, r0, #11
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
	{
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
   d43d4:	f000 fe24 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d43d8:	6803      	ldr	r3, [r0, #0]
   d43da:	691b      	ldr	r3, [r3, #16]
   d43dc:	4798      	blx	r3
   d43de:	b918      	cbnz	r0, d43e8 <_ZN11FPS_GT511C311GetResponseEv+0x38>
   d43e0:	200a      	movs	r0, #10
   d43e2:	f000 fc31 	bl	d4c48 <delay>
   d43e6:	e7f5      	b.n	d43d4 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		resp[i]= (byte) Serial1.read();
   d43e8:	f000 fe1a 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d43ec:	6803      	ldr	r3, [r0, #0]
   d43ee:	695b      	ldr	r3, [r3, #20]
   d43f0:	4798      	blx	r3
   d43f2:	f806 0f01 	strb.w	r0, [r6, #1]!
			done = true;
		}
	}
	byte* resp = new byte[12];
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
   d43f6:	42b7      	cmp	r7, r6
   d43f8:	d1ec      	bne.n	d43d4 <_ZN11FPS_GT511C311GetResponseEv+0x24>
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
		resp[i]= (byte) Serial1.read();
	}
	Response_Packet* rp = new Response_Packet(resp, UseSerialDebug);
   d43fa:	2016      	movs	r0, #22
   d43fc:	f7ff fe4b 	bl	d4096 <_Znwj>
   d4400:	4606      	mov	r6, r0
   d4402:	b118      	cbz	r0, d440c <_ZN11FPS_GT511C311GetResponseEv+0x5c>
   d4404:	782a      	ldrb	r2, [r5, #0]
   d4406:	4621      	mov	r1, r4
   d4408:	f7ff fee0 	bl	d41cc <_ZN15Response_PacketC1EPhb>
	delete resp;
   d440c:	2101      	movs	r1, #1
   d440e:	4620      	mov	r0, r4
   d4410:	f000 ffa9 	bl	d5366 <_ZdlPvj>
	if (UseSerialDebug)
   d4414:	782b      	ldrb	r3, [r5, #0]
   d4416:	b18b      	cbz	r3, d443c <_ZN11FPS_GT511C311GetResponseEv+0x8c>
	{
		Serial.print("FPS - RECV: ");
   d4418:	f000 fd7c 	bl	d4f14 <_Z16_fetch_usbserialv>
   d441c:	4908      	ldr	r1, [pc, #32]	; (d4440 <_ZN11FPS_GT511C311GetResponseEv+0x90>)
   d441e:	f000 fbab 	bl	d4b78 <_ZN5Print5printEPKc>
		SendToSerial(rp->RawBytes, 12);
   d4422:	220c      	movs	r2, #12
   d4424:	1cb1      	adds	r1, r6, #2
   d4426:	4628      	mov	r0, r5
   d4428:	f7ff ff7c 	bl	d4324 <_ZN11FPS_GT511C312SendToSerialEPhi>
		Serial.println();
   d442c:	f000 fd72 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4430:	f000 fba9 	bl	d4b86 <_ZN5Print7printlnEv>
		Serial.println();
   d4434:	f000 fd6e 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4438:	f000 fba5 	bl	d4b86 <_ZN5Print7printlnEv>
	}
	return rp;
};
   d443c:	4630      	mov	r0, r6
   d443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4440:	000d57ab 	.word	0x000d57ab

000d4444 <_ZN11FPS_GT511C34OpenEv>:
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d4444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UseSerialDebug) Serial.println("FPS - Open");
   d4446:	7803      	ldrb	r3, [r0, #0]
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
   d4448:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - Open");
   d444a:	b123      	cbz	r3, d4456 <_ZN11FPS_GT511C34OpenEv+0x12>
   d444c:	f000 fd62 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4450:	4912      	ldr	r1, [pc, #72]	; (d449c <_ZN11FPS_GT511C34OpenEv+0x58>)
   d4452:	f000 fba4 	bl	d4b9e <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4456:	2007      	movs	r0, #7
   d4458:	f7ff fe1d 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Open;
   d445c:	2701      	movs	r7, #1
	cp->Parameter[0] = 0x00;
   d445e:	2300      	movs	r3, #0
   d4460:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d4462:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d4464:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d4466:	7103      	strb	r3, [r0, #4]
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Open;
   d4468:	7007      	strb	r7, [r0, #0]
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT511C3::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
   d446a:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d446c:	f7ff fe31 	bl	d40d2 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4470:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4472:	4606      	mov	r6, r0
	delete cp;
   d4474:	4620      	mov	r0, r4
   d4476:	f000 ff76 	bl	d5366 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d447a:	4631      	mov	r1, r6
   d447c:	220c      	movs	r2, #12
   d447e:	4628      	mov	r0, r5
   d4480:	f7ff ff76 	bl	d4370 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4484:	4628      	mov	r0, r5
   d4486:	f7ff ff93 	bl	d43b0 <_ZN11FPS_GT511C311GetResponseEv>
	delete rp;
   d448a:	2116      	movs	r1, #22
   d448c:	f000 ff6b 	bl	d5366 <_ZdlPvj>
	delete packetbytes;
   d4490:	4639      	mov	r1, r7
   d4492:	4630      	mov	r0, r6
}
   d4494:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	delete rp;
	delete packetbytes;
   d4498:	f000 bf65 	b.w	d5366 <_ZdlPvj>
   d449c:	000d57b8 	.word	0x000d57b8

000d44a0 <_ZN11FPS_GT511C36SetLEDEb>:

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d44a0:	b570      	push	{r4, r5, r6, lr}
   d44a2:	4605      	mov	r5, r0
	Command_Packet* cp = new Command_Packet();
   d44a4:	2007      	movs	r0, #7

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
   d44a6:	460e      	mov	r6, r1
	Command_Packet* cp = new Command_Packet();
   d44a8:	f7ff fdf5 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CmosLed;
   d44ac:	2312      	movs	r3, #18
   d44ae:	7003      	strb	r3, [r0, #0]
// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT511C3::SetLED(bool on)
{
	Command_Packet* cp = new Command_Packet();
   d44b0:	4604      	mov	r4, r0
   d44b2:	782b      	ldrb	r3, [r5, #0]
	cp->Command = Command_Packet::Commands::CmosLed;
	if (on)
   d44b4:	b13e      	cbz	r6, d44c6 <_ZN11FPS_GT511C36SetLEDEb+0x26>
	{
		if (UseSerialDebug) Serial.println("FPS - LED on");
   d44b6:	b123      	cbz	r3, d44c2 <_ZN11FPS_GT511C36SetLEDEb+0x22>
   d44b8:	f000 fd2c 	bl	d4f14 <_Z16_fetch_usbserialv>
   d44bc:	4915      	ldr	r1, [pc, #84]	; (d4514 <_ZN11FPS_GT511C36SetLEDEb+0x74>)
   d44be:	f000 fb6e 	bl	d4b9e <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x01;
   d44c2:	2301      	movs	r3, #1
   d44c4:	e006      	b.n	d44d4 <_ZN11FPS_GT511C36SetLEDEb+0x34>
	}
	else
	{
		if (UseSerialDebug) Serial.println("FPS - LED off");
   d44c6:	b123      	cbz	r3, d44d2 <_ZN11FPS_GT511C36SetLEDEb+0x32>
   d44c8:	f000 fd24 	bl	d4f14 <_Z16_fetch_usbserialv>
   d44cc:	4912      	ldr	r1, [pc, #72]	; (d4518 <_ZN11FPS_GT511C36SetLEDEb+0x78>)
   d44ce:	f000 fb66 	bl	d4b9e <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x00;
   d44d2:	2300      	movs	r3, #0
   d44d4:	7063      	strb	r3, [r4, #1]
	}
	cp->Parameter[1] = 0x00;
   d44d6:	2300      	movs	r3, #0
   d44d8:	70a3      	strb	r3, [r4, #2]
	cp->Parameter[2] = 0x00;
   d44da:	70e3      	strb	r3, [r4, #3]
	cp->Parameter[3] = 0x00;
   d44dc:	7123      	strb	r3, [r4, #4]
	byte* packetbytes = cp->GetPacketBytes();
   d44de:	4620      	mov	r0, r4
   d44e0:	f7ff fdf7 	bl	d40d2 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d44e4:	2107      	movs	r1, #7
		cp->Parameter[0] = 0x00;
	}
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d44e6:	4606      	mov	r6, r0
	delete cp;
   d44e8:	4620      	mov	r0, r4
   d44ea:	f000 ff3c 	bl	d5366 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d44ee:	220c      	movs	r2, #12
   d44f0:	4631      	mov	r1, r6
   d44f2:	4628      	mov	r0, r5
   d44f4:	f7ff ff3c 	bl	d4370 <_ZN11FPS_GT511C311SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d44f8:	4628      	mov	r0, r5
   d44fa:	f7ff ff59 	bl	d43b0 <_ZN11FPS_GT511C311GetResponseEv>
	bool retval = true;
	if (rp->ACK == false) retval = false;
	delete rp;
   d44fe:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = true;
	if (rp->ACK == false) retval = false;
   d4500:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4502:	f000 ff30 	bl	d5366 <_ZdlPvj>
	delete packetbytes;
   d4506:	4630      	mov	r0, r6
   d4508:	2101      	movs	r1, #1
   d450a:	f000 ff2c 	bl	d5366 <_ZdlPvj>
	return retval;
};
   d450e:	4620      	mov	r0, r4
   d4510:	bd70      	pop	{r4, r5, r6, pc}
   d4512:	bf00      	nop
   d4514:	000d57cf 	.word	0x000d57cf
   d4518:	000d57dc 	.word	0x000d57dc

000d451c <_GLOBAL__sub_I__ZN14Command_Packet14GetPacketBytesEv>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d451c:	f000 b89c 	b.w	d4658 <HAL_Pin_Map>

000d4520 <setup>:

FPS_GT511C3 fps;  // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)

SYSTEM_MODE(MANUAL);

void setup() {
   d4520:	b508      	push	{r3, lr}

  Serial.begin(); // defaults to 9600 baud rate
   d4522:	f000 fcf7 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4526:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d452a:	f000 fce7 	bl	d4efc <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);  // Rx (pin 14) & Tx (pin 15) on Particle Xenon
   d452e:	f000 fd77 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d4532:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4536:	f000 fd6f 	bl	d5018 <_ZN11USARTSerial5beginEm>
  //Serial2.begin(9600);  // D5 (Rx / pin 21) & D4 (Tx / pin 20) on Particle Xenon

  // Set up fingerprint scanner
  fps.UseSerialDebug = true; // so you can see the messages in the serial debug screen
   d453a:	4806      	ldr	r0, [pc, #24]	; (d4554 <setup+0x34>)
   d453c:	2301      	movs	r3, #1
   d453e:	7003      	strb	r3, [r0, #0]
	fps.Open(); //send serial command to initialize fps
   d4540:	f7ff ff80 	bl	d4444 <_ZN11FPS_GT511C34OpenEv>

  Serial.println("Press RETURN to enter a message.");
   d4544:	f000 fce6 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4548:	4903      	ldr	r1, [pc, #12]	; (d4558 <setup+0x38>)

}
   d454a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  // Set up fingerprint scanner
  fps.UseSerialDebug = true; // so you can see the messages in the serial debug screen
	fps.Open(); //send serial command to initialize fps

  Serial.println("Press RETURN to enter a message.");
   d454e:	f000 bb26 	b.w	d4b9e <_ZN5Print7printlnEPKc>
   d4552:	bf00      	nop
   d4554:	2003e3dc 	.word	0x2003e3dc
   d4558:	000d58cf 	.word	0x000d58cf

000d455c <loop>:

}

void loop() {
   d455c:	b510      	push	{r4, lr}
   d455e:	b088      	sub	sp, #32
  /* char in = Serial.read();  // read in a single byte (int or char)
  Serial.print("I recieved: ");
  Serial.println(in);
  delay(1000); */
  
  if (Serial.read() == '\r') {
   d4560:	f000 fcd8 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4564:	6803      	ldr	r3, [r0, #0]
   d4566:	695b      	ldr	r3, [r3, #20]
   d4568:	4798      	blx	r3
   d456a:	280d      	cmp	r0, #13
   d456c:	d12a      	bne.n	d45c4 <loop+0x68>
    char inChar = ' ';
    String message = "";
   d456e:	491e      	ldr	r1, [pc, #120]	; (d45e8 <loop+0x8c>)
   d4570:	4668      	mov	r0, sp
   d4572:	f000 fa82 	bl	d4a7a <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Enter a message.");
   d4576:	f000 fccd 	bl	d4f14 <_Z16_fetch_usbserialv>
   d457a:	491c      	ldr	r1, [pc, #112]	; (d45ec <loop+0x90>)
   d457c:	f000 fb0f 	bl	d4b9e <_ZN5Print7printlnEPKc>

    do {
      inChar = Serial.read();
   d4580:	f000 fcc8 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4584:	6803      	ldr	r3, [r0, #0]
   d4586:	695b      	ldr	r3, [r3, #20]
   d4588:	4798      	blx	r3
   d458a:	b2c4      	uxtb	r4, r0
      message.concat(String(inChar));
   d458c:	4621      	mov	r1, r4
   d458e:	a804      	add	r0, sp, #16
   d4590:	f000 fa97 	bl	d4ac2 <_ZN6StringC1Ec>
   d4594:	a904      	add	r1, sp, #16
   d4596:	4668      	mov	r0, sp
   d4598:	f000 fabb 	bl	d4b12 <_ZN6String6concatERKS_>
   d459c:	a804      	add	r0, sp, #16
   d459e:	f000 fa25 	bl	d49ec <_ZN6StringD1Ev>
    } while (inChar != '\r');
   d45a2:	2c0d      	cmp	r4, #13
   d45a4:	d1ec      	bne.n	d4580 <loop+0x24>

    Serial.write("Your message is: ");
   d45a6:	f000 fcb5 	bl	d4f14 <_Z16_fetch_usbserialv>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d45aa:	6803      	ldr	r3, [r0, #0]
   d45ac:	4910      	ldr	r1, [pc, #64]	; (d45f0 <loop+0x94>)
   d45ae:	68db      	ldr	r3, [r3, #12]
   d45b0:	2211      	movs	r2, #17
   d45b2:	4798      	blx	r3
    Serial.println(message);
   d45b4:	f000 fcae 	bl	d4f14 <_Z16_fetch_usbserialv>
   d45b8:	9900      	ldr	r1, [sp, #0]
   d45ba:	f000 faf0 	bl	d4b9e <_ZN5Print7printlnEPKc>
  Serial.println(in);
  delay(1000); */
  
  if (Serial.read() == '\r') {
    char inChar = ' ';
    String message = "";
   d45be:	4668      	mov	r0, sp
   d45c0:	f000 fa14 	bl	d49ec <_ZN6StringD1Ev>
    Serial.println(message);

  }
  
  // FPS Blink LED Test
	fps.SetLED(true); // turn on the LED inside the fps
   d45c4:	2101      	movs	r1, #1
   d45c6:	480b      	ldr	r0, [pc, #44]	; (d45f4 <loop+0x98>)
   d45c8:	f7ff ff6a 	bl	d44a0 <_ZN11FPS_GT511C36SetLEDEb>
	delay(500);
   d45cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d45d0:	f000 fb3a 	bl	d4c48 <delay>
	fps.SetLED(false);// turn off the LED inside the fps
   d45d4:	2100      	movs	r1, #0
   d45d6:	4807      	ldr	r0, [pc, #28]	; (d45f4 <loop+0x98>)
   d45d8:	f7ff ff62 	bl	d44a0 <_ZN11FPS_GT511C36SetLEDEb>
  delay(500);
   d45dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d45e0:	f000 fb32 	bl	d4c48 <delay>

   d45e4:	b008      	add	sp, #32
   d45e6:	bd10      	pop	{r4, pc}
   d45e8:	000d59ff 	.word	0x000d59ff
   d45ec:	000d58f0 	.word	0x000d58f0
   d45f0:	000d5901 	.word	0x000d5901
   d45f4:	2003e3dc 	.word	0x2003e3dc

000d45f8 <_GLOBAL__sub_I_fps>:
   d45f8:	b510      	push	{r4, lr}

//#include "Particle.h"
//#include "Serial2/Serial2.h"  // Header file necessary for Serial 2 (pins D4 & D5)
#include "FPS_GT511C3_Xenon.h"

FPS_GT511C3 fps;  // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d45fa:	4c0b      	ldr	r4, [pc, #44]	; (d4628 <_GLOBAL__sub_I_fps+0x30>)
   d45fc:	f000 f82c 	bl	d4658 <HAL_Pin_Map>
   d4600:	4620      	mov	r0, r4
   d4602:	f7ff fe69 	bl	d42d8 <_ZN11FPS_GT511C3C1Ev>
   d4606:	4a09      	ldr	r2, [pc, #36]	; (d462c <_GLOBAL__sub_I_fps+0x34>)
   d4608:	4909      	ldr	r1, [pc, #36]	; (d4630 <_GLOBAL__sub_I_fps+0x38>)
   d460a:	4620      	mov	r0, r4
   d460c:	f000 fea6 	bl	d535c <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4610:	4b08      	ldr	r3, [pc, #32]	; (d4634 <_GLOBAL__sub_I_fps+0x3c>)
   d4612:	2200      	movs	r2, #0
   d4614:	701a      	strb	r2, [r3, #0]
   d4616:	805a      	strh	r2, [r3, #2]
   d4618:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d461c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d461e:	2003      	movs	r0, #3
	fps.SetLED(true); // turn on the LED inside the fps
	delay(500);
	fps.SetLED(false);// turn off the LED inside the fps
  delay(500);

   d4620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4624:	f000 b8e0 	b.w	d47e8 <set_system_mode>
   d4628:	2003e3dc 	.word	0x2003e3dc
   d462c:	2003e3d8 	.word	0x2003e3d8
   d4630:	000d42f1 	.word	0x000d42f1
   d4634:	2003e3e0 	.word	0x2003e3e0

000d4638 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <netdb_freeaddrinfo+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	689b      	ldr	r3, [r3, #8]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030268 	.word	0x00030268

000d4648 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <netdb_getaddrinfo+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	68db      	ldr	r3, [r3, #12]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030268 	.word	0x00030268

000d4658 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_Pin_Map+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	681b      	ldr	r3, [r3, #0]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003022c 	.word	0x0003022c

000d4668 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_SPI_Init+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030230 	.word	0x00030230

000d4678 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_RNG_GetRandomNumber+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	685b      	ldr	r3, [r3, #4]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030218 	.word	0x00030218

000d4688 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	695b      	ldr	r3, [r3, #20]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030218 	.word	0x00030218

000d4698 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <os_thread_is_current+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030248 	.word	0x00030248

000d46a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <os_thread_join+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	691b      	ldr	r3, [r3, #16]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030248 	.word	0x00030248

000d46b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <os_thread_cleanup+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030248 	.word	0x00030248

000d46c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <os_mutex_create+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030248 	.word	0x00030248

000d46d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <os_mutex_recursive_create+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030248 	.word	0x00030248

000d46e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <inet_inet_ntop+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	695b      	ldr	r3, [r3, #20]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030264 	.word	0x00030264

000d46f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USART_Init+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	681b      	ldr	r3, [r3, #0]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003023c 	.word	0x0003023c

000d4708 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_USART_Write_Data+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	68db      	ldr	r3, [r3, #12]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003023c 	.word	0x0003023c

000d4718 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_USART_Available_Data+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	691b      	ldr	r3, [r3, #16]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003023c 	.word	0x0003023c

000d4728 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_USART_Read_Data+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	695b      	ldr	r3, [r3, #20]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003023c 	.word	0x0003023c

000d4738 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_USART_Peek_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	699b      	ldr	r3, [r3, #24]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_USART_Flush_Data+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	69db      	ldr	r3, [r3, #28]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_USART_Available_Data_For_Write+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_USART_BeginConfig+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_USB_USART_Init+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	681b      	ldr	r3, [r3, #0]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003024c 	.word	0x0003024c

000d4788 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_USB_USART_Begin+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	685b      	ldr	r3, [r3, #4]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003024c 	.word	0x0003024c

000d4798 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_USB_USART_Available_Data+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	691b      	ldr	r3, [r3, #16]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003024c 	.word	0x0003024c

000d47a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	695b      	ldr	r3, [r3, #20]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003024c 	.word	0x0003024c

000d47b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_USB_USART_Receive_Data+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	699b      	ldr	r3, [r3, #24]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003024c 	.word	0x0003024c

000d47c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_USB_USART_Send_Data+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	69db      	ldr	r3, [r3, #28]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003024c 	.word	0x0003024c

000d47d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_USB_USART_Flush_Data+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6a1b      	ldr	r3, [r3, #32]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003024c 	.word	0x0003024c

000d47e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <set_system_mode+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	685b      	ldr	r3, [r3, #4]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030220 	.word	0x00030220

000d47f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <system_delay_ms+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	695b      	ldr	r3, [r3, #20]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030220 	.word	0x00030220

000d4808 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b03      	ldr	r3, [pc, #12]	; (d4818 <system_ctrl_set_app_request_handler+0x10>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4812:	9301      	str	r3, [sp, #4]
   d4814:	bd08      	pop	{r3, pc}
   d4816:	0000      	.short	0x0000
   d4818:	00030220 	.word	0x00030220

000d481c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b03      	ldr	r3, [pc, #12]	; (d482c <system_ctrl_set_result+0x10>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4826:	9301      	str	r3, [sp, #4]
   d4828:	bd08      	pop	{r3, pc}
   d482a:	0000      	.short	0x0000
   d482c:	00030220 	.word	0x00030220

000d4830 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_connect+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	685b      	ldr	r3, [r3, #4]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <network_connecting+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	689b      	ldr	r3, [r3, #8]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030240 	.word	0x00030240

000d4850 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <network_disconnect+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	68db      	ldr	r3, [r3, #12]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030240 	.word	0x00030240

000d4860 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <network_ready+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	691b      	ldr	r3, [r3, #16]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030240 	.word	0x00030240

000d4870 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <network_on+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	695b      	ldr	r3, [r3, #20]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030240 	.word	0x00030240

000d4880 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <network_off+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	699b      	ldr	r3, [r3, #24]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030240 	.word	0x00030240

000d4890 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <network_listen+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	69db      	ldr	r3, [r3, #28]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030240 	.word	0x00030240

000d48a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <network_listening+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6a1b      	ldr	r3, [r3, #32]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030240 	.word	0x00030240

000d48b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <network_set_listen_timeout+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030240 	.word	0x00030240

000d48c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <network_get_listen_timeout+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030240 	.word	0x00030240

000d48d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030244 	.word	0x00030244

000d48e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <malloc+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	681b      	ldr	r3, [r3, #0]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003021c 	.word	0x0003021c

000d48f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <free+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003021c 	.word	0x0003021c

000d4900 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <realloc+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	689b      	ldr	r3, [r3, #8]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003021c 	.word	0x0003021c

000d4910 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <sprintf+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	68db      	ldr	r3, [r3, #12]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	0003021c 	.word	0x0003021c

000d4920 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4920:	2200      	movs	r2, #0
   d4922:	4611      	mov	r1, r2
   d4924:	6840      	ldr	r0, [r0, #4]
   d4926:	f7ff bfbb 	b.w	d48a0 <network_listening>

000d492a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d492a:	2200      	movs	r2, #0
   d492c:	4611      	mov	r1, r2
   d492e:	6840      	ldr	r0, [r0, #4]
   d4930:	f7ff bfc6 	b.w	d48c0 <network_get_listen_timeout>

000d4934 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4934:	2200      	movs	r2, #0
   d4936:	6840      	ldr	r0, [r0, #4]
   d4938:	f7ff bfba 	b.w	d48b0 <network_set_listen_timeout>

000d493c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d493c:	2200      	movs	r2, #0
   d493e:	f081 0101 	eor.w	r1, r1, #1
   d4942:	6840      	ldr	r0, [r0, #4]
   d4944:	f7ff bfa4 	b.w	d4890 <network_listen>

000d4948 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4948:	2300      	movs	r3, #0
   d494a:	461a      	mov	r2, r3
   d494c:	4619      	mov	r1, r3
   d494e:	6840      	ldr	r0, [r0, #4]
   d4950:	f7ff bf96 	b.w	d4880 <network_off>

000d4954 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4954:	2300      	movs	r3, #0
   d4956:	461a      	mov	r2, r3
   d4958:	4619      	mov	r1, r3
   d495a:	6840      	ldr	r0, [r0, #4]
   d495c:	f7ff bf88 	b.w	d4870 <network_on>

000d4960 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4960:	2200      	movs	r2, #0
   d4962:	4611      	mov	r1, r2
   d4964:	6840      	ldr	r0, [r0, #4]
   d4966:	f7ff bf7b 	b.w	d4860 <network_ready>

000d496a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d496a:	2200      	movs	r2, #0
   d496c:	4611      	mov	r1, r2
   d496e:	6840      	ldr	r0, [r0, #4]
   d4970:	f7ff bf66 	b.w	d4840 <network_connecting>

000d4974 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4974:	2200      	movs	r2, #0
   d4976:	2102      	movs	r1, #2
   d4978:	6840      	ldr	r0, [r0, #4]
   d497a:	f7ff bf69 	b.w	d4850 <network_disconnect>

000d497e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d497e:	2300      	movs	r3, #0
   d4980:	461a      	mov	r2, r3
   d4982:	6840      	ldr	r0, [r0, #4]
   d4984:	f7ff bf54 	b.w	d4830 <network_connect>

000d4988 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4988:	4b02      	ldr	r3, [pc, #8]	; (d4994 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d498a:	2203      	movs	r2, #3
   d498c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d498e:	4a02      	ldr	r2, [pc, #8]	; (d4998 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4990:	601a      	str	r2, [r3, #0]
   d4992:	4770      	bx	lr
   d4994:	2003e3e8 	.word	0x2003e3e8
   d4998:	000d591c 	.word	0x000d591c

000d499c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d499c:	4770      	bx	lr

000d499e <_ZN8SPIClassD0Ev>:
   d499e:	b510      	push	{r4, lr}
   d49a0:	2110      	movs	r1, #16
   d49a2:	4604      	mov	r4, r0
   d49a4:	f000 fcdf 	bl	d5366 <_ZdlPvj>
   d49a8:	4620      	mov	r0, r4
   d49aa:	bd10      	pop	{r4, pc}

000d49ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d49ac:	b570      	push	{r4, r5, r6, lr}
   d49ae:	4b08      	ldr	r3, [pc, #32]	; (d49d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d49b0:	6003      	str	r3, [r0, #0]
   d49b2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d49b4:	2500      	movs	r5, #0
   d49b6:	460e      	mov	r6, r1
   d49b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d49bc:	f7ff fe84 	bl	d46c8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d49c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d49c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d49c4:	f7ff fe50 	bl	d4668 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d49c8:	60a5      	str	r5, [r4, #8]
}
   d49ca:	4620      	mov	r0, r4
   d49cc:	bd70      	pop	{r4, r5, r6, pc}
   d49ce:	bf00      	nop
   d49d0:	000d5950 	.word	0x000d5950

000d49d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d49d4:	4b04      	ldr	r3, [pc, #16]	; (d49e8 <_GLOBAL__sub_I_System+0x14>)
   d49d6:	2000      	movs	r0, #0
   d49d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d49dc:	7018      	strb	r0, [r3, #0]
   d49de:	8058      	strh	r0, [r3, #2]
   d49e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49e2:	f7ff bf01 	b.w	d47e8 <set_system_mode>
   d49e6:	bf00      	nop
   d49e8:	2003e3f0 	.word	0x2003e3f0

000d49ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49ec:	b510      	push	{r4, lr}
   d49ee:	4604      	mov	r4, r0
{
	free(buffer);
   d49f0:	6800      	ldr	r0, [r0, #0]
   d49f2:	f7ff ff7d 	bl	d48f0 <free>
}
   d49f6:	4620      	mov	r0, r4
   d49f8:	bd10      	pop	{r4, pc}

000d49fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49fa:	b510      	push	{r4, lr}
   d49fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49fe:	6800      	ldr	r0, [r0, #0]
   d4a00:	b108      	cbz	r0, d4a06 <_ZN6String10invalidateEv+0xc>
   d4a02:	f7ff ff75 	bl	d48f0 <free>
	buffer = NULL;
   d4a06:	2300      	movs	r3, #0
   d4a08:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a0a:	60a3      	str	r3, [r4, #8]
   d4a0c:	6063      	str	r3, [r4, #4]
   d4a0e:	bd10      	pop	{r4, pc}

000d4a10 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a10:	b538      	push	{r3, r4, r5, lr}
   d4a12:	4604      	mov	r4, r0
   d4a14:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a16:	6800      	ldr	r0, [r0, #0]
   d4a18:	3101      	adds	r1, #1
   d4a1a:	f7ff ff71 	bl	d4900 <realloc>
	if (newbuffer) {
   d4a1e:	b110      	cbz	r0, d4a26 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a20:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4a24:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a26:	bd38      	pop	{r3, r4, r5, pc}

000d4a28 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a28:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a2a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a2c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a2e:	b113      	cbz	r3, d4a36 <_ZN6String7reserveEj+0xe>
   d4a30:	6843      	ldr	r3, [r0, #4]
   d4a32:	428b      	cmp	r3, r1
   d4a34:	d207      	bcs.n	d4a46 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4a36:	4620      	mov	r0, r4
   d4a38:	f7ff ffea 	bl	d4a10 <_ZN6String12changeBufferEj>
   d4a3c:	b120      	cbz	r0, d4a48 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4a3e:	68a3      	ldr	r3, [r4, #8]
   d4a40:	b90b      	cbnz	r3, d4a46 <_ZN6String7reserveEj+0x1e>
   d4a42:	6822      	ldr	r2, [r4, #0]
   d4a44:	7013      	strb	r3, [r2, #0]
   d4a46:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4a48:	bd10      	pop	{r4, pc}

000d4a4a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a4a:	b570      	push	{r4, r5, r6, lr}
   d4a4c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4a4e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a50:	4604      	mov	r4, r0
   d4a52:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4a54:	f7ff ffe8 	bl	d4a28 <_ZN6String7reserveEj>
   d4a58:	b918      	cbnz	r0, d4a62 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ffcd 	bl	d49fa <_ZN6String10invalidateEv>
		return *this;
   d4a60:	e009      	b.n	d4a76 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4a62:	462a      	mov	r2, r5
   d4a64:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4a66:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a68:	6820      	ldr	r0, [r4, #0]
   d4a6a:	f000 fdd5 	bl	d5618 <memcpy>
	buffer[len] = 0;
   d4a6e:	6822      	ldr	r2, [r4, #0]
   d4a70:	68a3      	ldr	r3, [r4, #8]
   d4a72:	2100      	movs	r1, #0
   d4a74:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4a76:	4620      	mov	r0, r4
   d4a78:	bd70      	pop	{r4, r5, r6, pc}

000d4a7a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a7a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a7c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a7e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a80:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4a82:	6043      	str	r3, [r0, #4]
	len = 0;
   d4a84:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a86:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4a88:	460d      	mov	r5, r1
   d4a8a:	b139      	cbz	r1, d4a9c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4a8c:	4608      	mov	r0, r1
   d4a8e:	f000 fe07 	bl	d56a0 <strlen>
   d4a92:	4629      	mov	r1, r5
   d4a94:	4602      	mov	r2, r0
   d4a96:	4620      	mov	r0, r4
   d4a98:	f7ff ffd7 	bl	d4a4a <_ZN6String4copyEPKcj>
}
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	bd38      	pop	{r3, r4, r5, pc}

000d4aa0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4aa0:	b538      	push	{r3, r4, r5, lr}
   d4aa2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4aa4:	460c      	mov	r4, r1
   d4aa6:	b141      	cbz	r1, d4aba <_ZN6StringaSEPKc+0x1a>
   d4aa8:	4608      	mov	r0, r1
   d4aaa:	f000 fdf9 	bl	d56a0 <strlen>
   d4aae:	4621      	mov	r1, r4
   d4ab0:	4602      	mov	r2, r0
   d4ab2:	4628      	mov	r0, r5
   d4ab4:	f7ff ffc9 	bl	d4a4a <_ZN6String4copyEPKcj>
   d4ab8:	e001      	b.n	d4abe <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4aba:	f7ff ff9e 	bl	d49fa <_ZN6String10invalidateEv>

	return *this;
}
   d4abe:	4628      	mov	r0, r5
   d4ac0:	bd38      	pop	{r3, r4, r5, pc}

000d4ac2 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d4ac2:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ac4:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d4ac6:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4aca:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4acc:	6043      	str	r3, [r0, #4]
	len = 0;
   d4ace:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ad0:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d4ad2:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d4ad4:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4ad6:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d4ada:	f7ff ffe1 	bl	d4aa0 <_ZN6StringaSEPKc>
}
   d4ade:	4620      	mov	r0, r4
   d4ae0:	b002      	add	sp, #8
   d4ae2:	bd10      	pop	{r4, pc}

000d4ae4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4ae4:	b570      	push	{r4, r5, r6, lr}
   d4ae6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4ae8:	460e      	mov	r6, r1
   d4aea:	b909      	cbnz	r1, d4af0 <_ZN6String6concatEPKcj+0xc>
   d4aec:	2000      	movs	r0, #0
   d4aee:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4af0:	b16a      	cbz	r2, d4b0e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4af2:	6883      	ldr	r3, [r0, #8]
   d4af4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4af6:	4629      	mov	r1, r5
   d4af8:	f7ff ff96 	bl	d4a28 <_ZN6String7reserveEj>
   d4afc:	2800      	cmp	r0, #0
   d4afe:	d0f5      	beq.n	d4aec <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4b00:	6820      	ldr	r0, [r4, #0]
   d4b02:	68a3      	ldr	r3, [r4, #8]
   d4b04:	4631      	mov	r1, r6
   d4b06:	4418      	add	r0, r3
   d4b08:	f000 fdc2 	bl	d5690 <strcpy>
	len = newlen;
   d4b0c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4b0e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4b10:	bd70      	pop	{r4, r5, r6, pc}

000d4b12 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d4b12:	688a      	ldr	r2, [r1, #8]
   d4b14:	6809      	ldr	r1, [r1, #0]
   d4b16:	f7ff bfe5 	b.w	d4ae4 <_ZN6String6concatEPKcj>
	...

000d4b1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b1c:	4802      	ldr	r0, [pc, #8]	; (d4b28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4b1e:	2300      	movs	r3, #0
   d4b20:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b22:	f7ff bdd9 	b.w	d46d8 <os_mutex_recursive_create>
   d4b26:	bf00      	nop
   d4b28:	2003e3f8 	.word	0x2003e3f8

000d4b2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b2e:	4606      	mov	r6, r0
   d4b30:	460d      	mov	r5, r1
   d4b32:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b34:	2400      	movs	r4, #0
  while (size--) {
   d4b36:	42bd      	cmp	r5, r7
   d4b38:	d00c      	beq.n	d4b54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b3a:	6833      	ldr	r3, [r6, #0]
   d4b3c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b40:	689b      	ldr	r3, [r3, #8]
   d4b42:	4630      	mov	r0, r6
   d4b44:	4798      	blx	r3
     if (chunk>=0)
   d4b46:	2800      	cmp	r0, #0
   d4b48:	db01      	blt.n	d4b4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b4a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4b4c:	e7f3      	b.n	d4b36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b4e:	2c00      	cmp	r4, #0
   d4b50:	bf08      	it	eq
   d4b52:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b54:	4620      	mov	r0, r4
   d4b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b58 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b58:	b570      	push	{r4, r5, r6, lr}
   d4b5a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4b5c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4b5e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b60:	b149      	cbz	r1, d4b76 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b62:	f000 fd9d 	bl	d56a0 <strlen>
   d4b66:	682b      	ldr	r3, [r5, #0]
   d4b68:	4602      	mov	r2, r0
   d4b6a:	4621      	mov	r1, r4
   d4b6c:	4628      	mov	r0, r5
   d4b6e:	68db      	ldr	r3, [r3, #12]
    }
   d4b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b74:	4718      	bx	r3
    }
   d4b76:	bd70      	pop	{r4, r5, r6, pc}

000d4b78 <_ZN5Print5printEPKc>:
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	f7ff ffed 	bl	d4b58 <_ZN5Print5writeEPKc>
   d4b7e:	bd08      	pop	{r3, pc}

000d4b80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b80:	6803      	ldr	r3, [r0, #0]
   d4b82:	689b      	ldr	r3, [r3, #8]
   d4b84:	4718      	bx	r3

000d4b86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4b88:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b8a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4b8c:	f7ff fff8 	bl	d4b80 <_ZN5Print5printEc>
  n += print('\n');
   d4b90:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4b92:	4604      	mov	r4, r0
  n += print('\n');
   d4b94:	4628      	mov	r0, r5
   d4b96:	f7ff fff3 	bl	d4b80 <_ZN5Print5printEc>
  return n;
}
   d4b9a:	4420      	add	r0, r4
   d4b9c:	bd38      	pop	{r3, r4, r5, pc}

000d4b9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4b9e:	b538      	push	{r3, r4, r5, lr}
   d4ba0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ba2:	f7ff ffd9 	bl	d4b58 <_ZN5Print5writeEPKc>
   d4ba6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ba8:	4628      	mov	r0, r5
   d4baa:	f7ff ffec 	bl	d4b86 <_ZN5Print7printlnEv>
  return n;
}
   d4bae:	4420      	add	r0, r4
   d4bb0:	bd38      	pop	{r3, r4, r5, pc}

000d4bb2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4bb2:	b530      	push	{r4, r5, lr}
   d4bb4:	b08b      	sub	sp, #44	; 0x2c
   d4bb6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4bb8:	2100      	movs	r1, #0
   d4bba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4bbe:	2a01      	cmp	r2, #1
   d4bc0:	bf98      	it	ls
   d4bc2:	220a      	movls	r2, #10
   d4bc4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4bc8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4bcc:	fb05 3312 	mls	r3, r5, r2, r3
   d4bd0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bd4:	2b09      	cmp	r3, #9
   d4bd6:	bf94      	ite	ls
   d4bd8:	3330      	addls	r3, #48	; 0x30
   d4bda:	3337      	addhi	r3, #55	; 0x37
   d4bdc:	b2db      	uxtb	r3, r3
   d4bde:	4621      	mov	r1, r4
   d4be0:	f804 3901 	strb.w	r3, [r4], #-1
   d4be4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4be6:	2d00      	cmp	r5, #0
   d4be8:	d1ee      	bne.n	d4bc8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4bea:	f7ff ffb5 	bl	d4b58 <_ZN5Print5writeEPKc>
}
   d4bee:	b00b      	add	sp, #44	; 0x2c
   d4bf0:	bd30      	pop	{r4, r5, pc}

000d4bf2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4bf2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4bf4:	b92a      	cbnz	r2, d4c02 <_ZN5Print5printEmi+0x10>
   d4bf6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4bfc:	689b      	ldr	r3, [r3, #8]
   d4bfe:	b2c9      	uxtb	r1, r1
   d4c00:	4718      	bx	r3
  else return printNumber(n, base);
   d4c02:	b2d2      	uxtb	r2, r2
}
   d4c04:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4c08:	f7ff bfd3 	b.w	d4bb2 <_ZN5Print11printNumberEmh>

000d4c0c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4c0c:	f7ff bff1 	b.w	d4bf2 <_ZN5Print5printEmi>

000d4c10 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d4c10:	b538      	push	{r3, r4, r5, lr}
   d4c12:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4c14:	f7ff ffed 	bl	d4bf2 <_ZN5Print5printEmi>
   d4c18:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d4c1a:	4628      	mov	r0, r5
   d4c1c:	f7ff ffb3 	bl	d4b86 <_ZN5Print7printlnEv>
  return n;
}
   d4c20:	4420      	add	r0, r4
   d4c22:	bd38      	pop	{r3, r4, r5, pc}

000d4c24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c24:	4b01      	ldr	r3, [pc, #4]	; (d4c2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c26:	4a02      	ldr	r2, [pc, #8]	; (d4c30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c28:	601a      	str	r2, [r3, #0]
   d4c2a:	4770      	bx	lr
   d4c2c:	2003e3fc 	.word	0x2003e3fc
   d4c30:	000d59cb 	.word	0x000d59cb

000d4c34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4c34:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4c36:	681a      	ldr	r2, [r3, #0]
   d4c38:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4c3a:	601a      	str	r2, [r3, #0]
   d4c3c:	4770      	bx	lr
   d4c3e:	bf00      	nop
   d4c40:	2003e370 	.word	0x2003e370
   d4c44:	2003e400 	.word	0x2003e400

000d4c48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c48:	2100      	movs	r1, #0
   d4c4a:	f7ff bdd5 	b.w	d47f8 <system_delay_ms>

000d4c4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c52:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c54:	b113      	cbz	r3, d4c5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c56:	2203      	movs	r2, #3
   d4c58:	4601      	mov	r1, r0
   d4c5a:	4798      	blx	r3
    }
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	bd10      	pop	{r4, pc}

000d4c60 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c60:	b510      	push	{r4, lr}
   d4c62:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c64:	f7ff fff3 	bl	d4c4e <_ZNSt14_Function_baseD1Ev>
   d4c68:	4620      	mov	r0, r4
   d4c6a:	bd10      	pop	{r4, pc}

000d4c6c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c6c:	4803      	ldr	r0, [pc, #12]	; (d4c7c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c6e:	4a04      	ldr	r2, [pc, #16]	; (d4c80 <_GLOBAL__sub_I_RGB+0x14>)
   d4c70:	4904      	ldr	r1, [pc, #16]	; (d4c84 <_GLOBAL__sub_I_RGB+0x18>)
   d4c72:	2300      	movs	r3, #0
   d4c74:	6083      	str	r3, [r0, #8]
   d4c76:	f000 bb71 	b.w	d535c <__aeabi_atexit>
   d4c7a:	bf00      	nop
   d4c7c:	2003e404 	.word	0x2003e404
   d4c80:	2003e3d8 	.word	0x2003e3d8
   d4c84:	000d4c61 	.word	0x000d4c61

000d4c88 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4c88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c8a:	4b0f      	ldr	r3, [pc, #60]	; (d4cc8 <serialEventRun+0x40>)
   d4c8c:	b133      	cbz	r3, d4c9c <serialEventRun+0x14>
   d4c8e:	f000 f941 	bl	d4f14 <_Z16_fetch_usbserialv>
   d4c92:	6803      	ldr	r3, [r0, #0]
   d4c94:	691b      	ldr	r3, [r3, #16]
   d4c96:	4798      	blx	r3
   d4c98:	2800      	cmp	r0, #0
   d4c9a:	dc0d      	bgt.n	d4cb8 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4c9c:	4b0b      	ldr	r3, [pc, #44]	; (d4ccc <serialEventRun+0x44>)
   d4c9e:	b133      	cbz	r3, d4cae <serialEventRun+0x26>
   d4ca0:	f000 f9be 	bl	d5020 <_Z22__fetch_global_Serial1v>
   d4ca4:	6803      	ldr	r3, [r0, #0]
   d4ca6:	691b      	ldr	r3, [r3, #16]
   d4ca8:	4798      	blx	r3
   d4caa:	2800      	cmp	r0, #0
   d4cac:	dc07      	bgt.n	d4cbe <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d4cae:	4b08      	ldr	r3, [pc, #32]	; (d4cd0 <serialEventRun+0x48>)
   d4cb0:	b143      	cbz	r3, d4cc4 <serialEventRun+0x3c>
   d4cb2:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d4cb6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4cb8:	f3af 8000 	nop.w
   d4cbc:	e7ee      	b.n	d4c9c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4cbe:	f3af 8000 	nop.w
   d4cc2:	e7f4      	b.n	d4cae <serialEventRun+0x26>
   d4cc4:	bd08      	pop	{r3, pc}
   d4cc6:	bf00      	nop
	...

000d4cd4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4cd4:	b508      	push	{r3, lr}
	serialEventRun();
   d4cd6:	f7ff ffd7 	bl	d4c88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4cda:	f7ff fcd5 	bl	d4688 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4cde:	4b01      	ldr	r3, [pc, #4]	; (d4ce4 <_post_loop+0x10>)
   d4ce0:	6018      	str	r0, [r3, #0]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	2003e74c 	.word	0x2003e74c

000d4ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ce8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cea:	2300      	movs	r3, #0
   d4cec:	9300      	str	r3, [sp, #0]
   d4cee:	461a      	mov	r2, r3
   d4cf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cf4:	f7ff fd92 	bl	d481c <system_ctrl_set_result>
}
   d4cf8:	b003      	add	sp, #12
   d4cfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4d00 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4d00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4d02:	8843      	ldrh	r3, [r0, #2]
   d4d04:	2b0a      	cmp	r3, #10
   d4d06:	d008      	beq.n	d4d1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4d08:	2b50      	cmp	r3, #80	; 0x50
   d4d0a:	d109      	bne.n	d4d20 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4d0c:	4b09      	ldr	r3, [pc, #36]	; (d4d34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4d0e:	681b      	ldr	r3, [r3, #0]
   d4d10:	b13b      	cbz	r3, d4d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4d12:	b003      	add	sp, #12
   d4d14:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4d18:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4d1a:	f7ff ffe5 	bl	d4ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4d1e:	e006      	b.n	d4d2e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d20:	2300      	movs	r3, #0
   d4d22:	9300      	str	r3, [sp, #0]
   d4d24:	461a      	mov	r2, r3
   d4d26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d2a:	f7ff fd77 	bl	d481c <system_ctrl_set_result>
        break;
    }
}
   d4d2e:	b003      	add	sp, #12
   d4d30:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d34:	2003e414 	.word	0x2003e414

000d4d38 <module_user_init_hook>:

void module_user_init_hook()
{
   d4d38:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d3a:	f7ff fc9d 	bl	d4678 <HAL_RNG_GetRandomNumber>
   d4d3e:	4604      	mov	r4, r0
    srand(seed);
   d4d40:	f000 fc7e 	bl	d5640 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d44:	4b07      	ldr	r3, [pc, #28]	; (d4d64 <module_user_init_hook+0x2c>)
   d4d46:	b113      	cbz	r3, d4d4e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d4e:	2100      	movs	r1, #0
   d4d50:	4804      	ldr	r0, [pc, #16]	; (d4d64 <module_user_init_hook+0x2c>)
   d4d52:	f7ff fdbd 	bl	d48d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d56:	2100      	movs	r1, #0
   d4d58:	4803      	ldr	r0, [pc, #12]	; (d4d68 <module_user_init_hook+0x30>)
}
   d4d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d5e:	f7ff bd53 	b.w	d4808 <system_ctrl_set_app_request_handler>
   d4d62:	bf00      	nop
   d4d64:	00000000 	.word	0x00000000
   d4d68:	000d4d01 	.word	0x000d4d01

000d4d6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d6c:	4770      	bx	lr

000d4d6e <_ZN9IPAddressD0Ev>:
   d4d6e:	b510      	push	{r4, lr}
   d4d70:	2118      	movs	r1, #24
   d4d72:	4604      	mov	r4, r0
   d4d74:	f000 faf7 	bl	d5366 <_ZdlPvj>
   d4d78:	4620      	mov	r0, r4
   d4d7a:	bd10      	pop	{r4, pc}

000d4d7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d7e:	7d03      	ldrb	r3, [r0, #20]
   d4d80:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d82:	b08d      	sub	sp, #52	; 0x34
   d4d84:	460e      	mov	r6, r1
   d4d86:	f100 0704 	add.w	r7, r0, #4
   d4d8a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d8e:	d002      	beq.n	d4d96 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d90:	f100 0508 	add.w	r5, r0, #8
   d4d94:	e018      	b.n	d4dc8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d96:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d98:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d9a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d9e:	232f      	movs	r3, #47	; 0x2f
   d4da0:	462a      	mov	r2, r5
   d4da2:	200a      	movs	r0, #10
   d4da4:	f7ff fca0 	bl	d46e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4da8:	4628      	mov	r0, r5
   d4daa:	f000 fc79 	bl	d56a0 <strlen>
   d4dae:	6833      	ldr	r3, [r6, #0]
   d4db0:	4602      	mov	r2, r0
   d4db2:	68db      	ldr	r3, [r3, #12]
   d4db4:	4629      	mov	r1, r5
   d4db6:	4630      	mov	r0, r6
   d4db8:	4798      	blx	r3
   d4dba:	e00f      	b.n	d4ddc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4dbc:	b124      	cbz	r4, d4dc8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4dbe:	212e      	movs	r1, #46	; 0x2e
   d4dc0:	4630      	mov	r0, r6
   d4dc2:	f7ff fedd 	bl	d4b80 <_ZN5Print5printEc>
   d4dc6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4dcc:	220a      	movs	r2, #10
   d4dce:	4630      	mov	r0, r6
   d4dd0:	f7ff ff1c 	bl	d4c0c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4dd4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dd6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4dd8:	d1f0      	bne.n	d4dbc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dda:	4620      	mov	r0, r4
    }
    return n;
}
   d4ddc:	b00d      	add	sp, #52	; 0x34
   d4dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4de0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4de0:	b510      	push	{r4, lr}
   d4de2:	4b05      	ldr	r3, [pc, #20]	; (d4df8 <_ZN9IPAddressC1Ev+0x18>)
   d4de4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4de6:	2211      	movs	r2, #17
   d4de8:	f840 3b04 	str.w	r3, [r0], #4
   d4dec:	2100      	movs	r1, #0
   d4dee:	f000 fc1e 	bl	d562e <memset>
{
    clear();
}
   d4df2:	4620      	mov	r0, r4
   d4df4:	bd10      	pop	{r4, pc}
   d4df6:	bf00      	nop
   d4df8:	000d5a68 	.word	0x000d5a68

000d4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4dfc:	4603      	mov	r3, r0
   d4dfe:	4a07      	ldr	r2, [pc, #28]	; (d4e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e00:	b510      	push	{r4, lr}
   d4e02:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e06:	f101 0210 	add.w	r2, r1, #16
   d4e0a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e0e:	f843 4b04 	str.w	r4, [r3], #4
   d4e12:	4291      	cmp	r1, r2
   d4e14:	d1f9      	bne.n	d4e0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e16:	780a      	ldrb	r2, [r1, #0]
   d4e18:	701a      	strb	r2, [r3, #0]
}
   d4e1a:	bd10      	pop	{r4, pc}
   d4e1c:	000d5a68 	.word	0x000d5a68

000d4e20 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4e20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e32:	2304      	movs	r3, #4
   d4e34:	6041      	str	r1, [r0, #4]
   d4e36:	7503      	strb	r3, [r0, #20]
   d4e38:	bd10      	pop	{r4, pc}

000d4e3a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e3c:	780d      	ldrb	r5, [r1, #0]
   d4e3e:	788b      	ldrb	r3, [r1, #2]
   d4e40:	784a      	ldrb	r2, [r1, #1]
   d4e42:	78c9      	ldrb	r1, [r1, #3]
   d4e44:	9100      	str	r1, [sp, #0]
   d4e46:	4629      	mov	r1, r5
   d4e48:	f7ff ffea 	bl	d4e20 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e4c:	b003      	add	sp, #12
   d4e4e:	bd30      	pop	{r4, r5, pc}

000d4e50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e50:	7441      	strb	r1, [r0, #17]
   d4e52:	4770      	bx	lr

000d4e54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4e54:	4770      	bx	lr

000d4e56 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4e56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4e58:	2100      	movs	r1, #0
   d4e5a:	7c00      	ldrb	r0, [r0, #16]
   d4e5c:	f7ff fcac 	bl	d47b8 <HAL_USB_USART_Receive_Data>
}
   d4e60:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e64:	bf28      	it	cs
   d4e66:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e6a:	bd08      	pop	{r3, pc}

000d4e6c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4e6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4e6e:	2101      	movs	r1, #1
   d4e70:	7c00      	ldrb	r0, [r0, #16]
   d4e72:	f7ff fca1 	bl	d47b8 <HAL_USB_USART_Receive_Data>
}
   d4e76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e7a:	bf28      	it	cs
   d4e7c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e80:	bd08      	pop	{r3, pc}

000d4e82 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4e82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4e84:	7c00      	ldrb	r0, [r0, #16]
   d4e86:	f7ff fc8f 	bl	d47a8 <HAL_USB_USART_Available_Data_For_Write>
}
   d4e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e8e:	bd08      	pop	{r3, pc}

000d4e90 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4e90:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4e92:	7c00      	ldrb	r0, [r0, #16]
   d4e94:	f7ff fc80 	bl	d4798 <HAL_USB_USART_Available_Data>
}
   d4e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e9c:	bd08      	pop	{r3, pc}

000d4e9e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4e9e:	7c00      	ldrb	r0, [r0, #16]
   d4ea0:	f7ff bc9a 	b.w	d47d8 <HAL_USB_USART_Flush_Data>

000d4ea4 <_ZN9USBSerialD0Ev>:
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	2114      	movs	r1, #20
   d4ea8:	4604      	mov	r4, r0
   d4eaa:	f000 fa5c 	bl	d5366 <_ZdlPvj>
   d4eae:	4620      	mov	r0, r4
   d4eb0:	bd10      	pop	{r4, pc}

000d4eb2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4eb2:	b538      	push	{r3, r4, r5, lr}
   d4eb4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4eb6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4eb8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4eba:	f7ff fc75 	bl	d47a8 <HAL_USB_USART_Available_Data_For_Write>
   d4ebe:	2800      	cmp	r0, #0
   d4ec0:	dc01      	bgt.n	d4ec6 <_ZN9USBSerial5writeEh+0x14>
   d4ec2:	7c60      	ldrb	r0, [r4, #17]
   d4ec4:	b128      	cbz	r0, d4ed2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4ec6:	4629      	mov	r1, r5
   d4ec8:	7c20      	ldrb	r0, [r4, #16]
   d4eca:	f7ff fc7d 	bl	d47c8 <HAL_USB_USART_Send_Data>
   d4ece:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4ed2:	bd38      	pop	{r3, r4, r5, pc}

000d4ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ed4:	b510      	push	{r4, lr}
   d4ed6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ed8:	2300      	movs	r3, #0
   d4eda:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ee0:	60a3      	str	r3, [r4, #8]
   d4ee2:	4b05      	ldr	r3, [pc, #20]	; (d4ef8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4ee4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4ee6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ee8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4eea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4eec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4eee:	4611      	mov	r1, r2
   d4ef0:	f7ff fc42 	bl	d4778 <HAL_USB_USART_Init>
}
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}
   d4ef8:	000d5a7c 	.word	0x000d5a7c

000d4efc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4efc:	2200      	movs	r2, #0
   d4efe:	7c00      	ldrb	r0, [r0, #16]
   d4f00:	f7ff bc42 	b.w	d4788 <HAL_USB_USART_Begin>

000d4f04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f06:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f0a:	2100      	movs	r1, #0
   d4f0c:	f000 fb8f 	bl	d562e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f10:	4620      	mov	r0, r4
   d4f12:	bd10      	pop	{r4, pc}

000d4f14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f14:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f16:	4d0e      	ldr	r5, [pc, #56]	; (d4f50 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f18:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f1a:	a801      	add	r0, sp, #4
   d4f1c:	f7ff fff2 	bl	d4f04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f20:	6829      	ldr	r1, [r5, #0]
   d4f22:	f011 0401 	ands.w	r4, r1, #1
   d4f26:	d110      	bne.n	d4f4a <_Z16_fetch_usbserialv+0x36>
   d4f28:	4628      	mov	r0, r5
   d4f2a:	f7ff f8bc 	bl	d40a6 <__cxa_guard_acquire>
   d4f2e:	b160      	cbz	r0, d4f4a <_Z16_fetch_usbserialv+0x36>
   d4f30:	aa01      	add	r2, sp, #4
   d4f32:	4621      	mov	r1, r4
   d4f34:	4807      	ldr	r0, [pc, #28]	; (d4f54 <_Z16_fetch_usbserialv+0x40>)
   d4f36:	f7ff ffcd 	bl	d4ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4f3a:	4628      	mov	r0, r5
   d4f3c:	f7ff f8b8 	bl	d40b0 <__cxa_guard_release>
   d4f40:	4a05      	ldr	r2, [pc, #20]	; (d4f58 <_Z16_fetch_usbserialv+0x44>)
   d4f42:	4906      	ldr	r1, [pc, #24]	; (d4f5c <_Z16_fetch_usbserialv+0x48>)
   d4f44:	4803      	ldr	r0, [pc, #12]	; (d4f54 <_Z16_fetch_usbserialv+0x40>)
   d4f46:	f000 fa09 	bl	d535c <__aeabi_atexit>
	return _usbserial;
}
   d4f4a:	4802      	ldr	r0, [pc, #8]	; (d4f54 <_Z16_fetch_usbserialv+0x40>)
   d4f4c:	b007      	add	sp, #28
   d4f4e:	bd30      	pop	{r4, r5, pc}
   d4f50:	2003e418 	.word	0x2003e418
   d4f54:	2003e41c 	.word	0x2003e41c
   d4f58:	2003e3d8 	.word	0x2003e3d8
   d4f5c:	000d4e55 	.word	0x000d4e55

000d4f60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4f60:	4770      	bx	lr

000d4f62 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f62:	7441      	strb	r1, [r0, #17]
   d4f64:	4770      	bx	lr

000d4f66 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4f66:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4f68:	7c00      	ldrb	r0, [r0, #16]
   d4f6a:	f7ff fbf5 	bl	d4758 <HAL_USART_Available_Data_For_Write>
}
   d4f6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f72:	bd08      	pop	{r3, pc}

000d4f74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4f74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4f76:	7c00      	ldrb	r0, [r0, #16]
   d4f78:	f7ff fbce 	bl	d4718 <HAL_USART_Available_Data>
}
   d4f7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f80:	bd08      	pop	{r3, pc}

000d4f82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4f82:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4f84:	7c00      	ldrb	r0, [r0, #16]
   d4f86:	f7ff fbd7 	bl	d4738 <HAL_USART_Peek_Data>
}
   d4f8a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f8e:	bf28      	it	cs
   d4f90:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f94:	bd08      	pop	{r3, pc}

000d4f96 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4f96:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4f98:	7c00      	ldrb	r0, [r0, #16]
   d4f9a:	f7ff fbc5 	bl	d4728 <HAL_USART_Read_Data>
}
   d4f9e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4fa2:	bf28      	it	cs
   d4fa4:	f04f 30ff 	movcs.w	r0, #4294967295
   d4fa8:	bd08      	pop	{r3, pc}

000d4faa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4faa:	7c00      	ldrb	r0, [r0, #16]
   d4fac:	f7ff bbcc 	b.w	d4748 <HAL_USART_Flush_Data>

000d4fb0 <_ZN11USARTSerialD0Ev>:
   d4fb0:	b510      	push	{r4, lr}
   d4fb2:	2114      	movs	r1, #20
   d4fb4:	4604      	mov	r4, r0
   d4fb6:	f000 f9d6 	bl	d5366 <_ZdlPvj>
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd10      	pop	{r4, pc}

000d4fbe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4fbe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fc0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fc6:	b925      	cbnz	r5, d4fd2 <_ZN11USARTSerial5writeEh+0x14>
   d4fc8:	7c00      	ldrb	r0, [r0, #16]
   d4fca:	f7ff fbc5 	bl	d4758 <HAL_USART_Available_Data_For_Write>
   d4fce:	2800      	cmp	r0, #0
   d4fd0:	dd05      	ble.n	d4fde <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fd2:	4631      	mov	r1, r6
   d4fd4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fda:	f7ff bb95 	b.w	d4708 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4fde:	4628      	mov	r0, r5
   d4fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4fe4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4604      	mov	r4, r0
   d4fe8:	4608      	mov	r0, r1
   d4fea:	4611      	mov	r1, r2
   d4fec:	2200      	movs	r2, #0
   d4fee:	6062      	str	r2, [r4, #4]
   d4ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ff4:	60a2      	str	r2, [r4, #8]
   d4ff6:	4a05      	ldr	r2, [pc, #20]	; (d500c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ff8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ffa:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ffc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4ffe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5000:	461a      	mov	r2, r3
   d5002:	f7ff fb79 	bl	d46f8 <HAL_USART_Init>
}
   d5006:	4620      	mov	r0, r4
   d5008:	bd10      	pop	{r4, pc}
   d500a:	bf00      	nop
   d500c:	000d5aac 	.word	0x000d5aac

000d5010 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5010:	2300      	movs	r3, #0
   d5012:	7c00      	ldrb	r0, [r0, #16]
   d5014:	f7ff bba8 	b.w	d4768 <HAL_USART_BeginConfig>

000d5018 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5018:	2200      	movs	r2, #0
   d501a:	f7ff bff9 	b.w	d5010 <_ZN11USARTSerial5beginEmm>
	...

000d5020 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5020:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5022:	4d0c      	ldr	r5, [pc, #48]	; (d5054 <_Z22__fetch_global_Serial1v+0x34>)
   d5024:	6829      	ldr	r1, [r5, #0]
   d5026:	f011 0401 	ands.w	r4, r1, #1
   d502a:	d111      	bne.n	d5050 <_Z22__fetch_global_Serial1v+0x30>
   d502c:	4628      	mov	r0, r5
   d502e:	f7ff f83a 	bl	d40a6 <__cxa_guard_acquire>
   d5032:	b168      	cbz	r0, d5050 <_Z22__fetch_global_Serial1v+0x30>
   d5034:	4a08      	ldr	r2, [pc, #32]	; (d5058 <_Z22__fetch_global_Serial1v+0x38>)
   d5036:	4b09      	ldr	r3, [pc, #36]	; (d505c <_Z22__fetch_global_Serial1v+0x3c>)
   d5038:	4809      	ldr	r0, [pc, #36]	; (d5060 <_Z22__fetch_global_Serial1v+0x40>)
   d503a:	4621      	mov	r1, r4
   d503c:	f7ff ffd2 	bl	d4fe4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5040:	4628      	mov	r0, r5
   d5042:	f7ff f835 	bl	d40b0 <__cxa_guard_release>
   d5046:	4a07      	ldr	r2, [pc, #28]	; (d5064 <_Z22__fetch_global_Serial1v+0x44>)
   d5048:	4907      	ldr	r1, [pc, #28]	; (d5068 <_Z22__fetch_global_Serial1v+0x48>)
   d504a:	4805      	ldr	r0, [pc, #20]	; (d5060 <_Z22__fetch_global_Serial1v+0x40>)
   d504c:	f000 f986 	bl	d535c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5050:	4803      	ldr	r0, [pc, #12]	; (d5060 <_Z22__fetch_global_Serial1v+0x40>)
   d5052:	bd38      	pop	{r3, r4, r5, pc}
   d5054:	2003e4c8 	.word	0x2003e4c8
   d5058:	2003e4cc 	.word	0x2003e4cc
   d505c:	2003e444 	.word	0x2003e444
   d5060:	2003e430 	.word	0x2003e430
   d5064:	2003e3d8 	.word	0x2003e3d8
   d5068:	000d4f61 	.word	0x000d4f61

000d506c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d506c:	2200      	movs	r2, #0
   d506e:	4611      	mov	r1, r2
   d5070:	6840      	ldr	r0, [r0, #4]
   d5072:	f7ff bc15 	b.w	d48a0 <network_listening>

000d5076 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5076:	2200      	movs	r2, #0
   d5078:	4611      	mov	r1, r2
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bc20 	b.w	d48c0 <network_get_listen_timeout>

000d5080 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5080:	2200      	movs	r2, #0
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bc14 	b.w	d48b0 <network_set_listen_timeout>

000d5088 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5088:	2200      	movs	r2, #0
   d508a:	f081 0101 	eor.w	r1, r1, #1
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bbfe 	b.w	d4890 <network_listen>

000d5094 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5094:	2300      	movs	r3, #0
   d5096:	461a      	mov	r2, r3
   d5098:	2101      	movs	r1, #1
   d509a:	6840      	ldr	r0, [r0, #4]
   d509c:	f7ff bbf0 	b.w	d4880 <network_off>

000d50a0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50a0:	2300      	movs	r3, #0
   d50a2:	461a      	mov	r2, r3
   d50a4:	4619      	mov	r1, r3
   d50a6:	6840      	ldr	r0, [r0, #4]
   d50a8:	f7ff bbe2 	b.w	d4870 <network_on>

000d50ac <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50ac:	2200      	movs	r2, #0
   d50ae:	4611      	mov	r1, r2
   d50b0:	6840      	ldr	r0, [r0, #4]
   d50b2:	f7ff bbd5 	b.w	d4860 <network_ready>

000d50b6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50b6:	2200      	movs	r2, #0
   d50b8:	4611      	mov	r1, r2
   d50ba:	6840      	ldr	r0, [r0, #4]
   d50bc:	f7ff bbc0 	b.w	d4840 <network_connecting>

000d50c0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50c0:	2200      	movs	r2, #0
   d50c2:	2102      	movs	r1, #2
   d50c4:	6840      	ldr	r0, [r0, #4]
   d50c6:	f7ff bbc3 	b.w	d4850 <network_disconnect>

000d50ca <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50ca:	2300      	movs	r3, #0
   d50cc:	461a      	mov	r2, r3
   d50ce:	6840      	ldr	r0, [r0, #4]
   d50d0:	f7ff bbae 	b.w	d4830 <network_connect>

000d50d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d50d4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50d6:	4605      	mov	r5, r0
   d50d8:	b188      	cbz	r0, d50fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50da:	6804      	ldr	r4, [r0, #0]
   d50dc:	b14c      	cbz	r4, d50f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d50de:	68a3      	ldr	r3, [r4, #8]
   d50e0:	b11b      	cbz	r3, d50ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50e2:	2203      	movs	r2, #3
   d50e4:	4621      	mov	r1, r4
   d50e6:	4620      	mov	r0, r4
   d50e8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50ea:	2110      	movs	r1, #16
   d50ec:	4620      	mov	r0, r4
   d50ee:	f000 f93a 	bl	d5366 <_ZdlPvj>
   d50f2:	4628      	mov	r0, r5
   d50f4:	2114      	movs	r1, #20
      }
   d50f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50fa:	f000 b934 	b.w	d5366 <_ZdlPvj>
   d50fe:	bd38      	pop	{r3, r4, r5, pc}

000d5100 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5100:	b110      	cbz	r0, d5108 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5102:	6803      	ldr	r3, [r0, #0]
   d5104:	685b      	ldr	r3, [r3, #4]
   d5106:	4718      	bx	r3
   d5108:	4770      	bx	lr

000d510a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d510a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d510c:	6803      	ldr	r3, [r0, #0]
   d510e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5110:	b1bb      	cbz	r3, d5142 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5112:	6858      	ldr	r0, [r3, #4]
   d5114:	f7ff fac0 	bl	d4698 <os_thread_is_current>
   d5118:	b978      	cbnz	r0, d513a <_ZN6ThreadD1Ev+0x30>
   d511a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d511c:	7c5a      	ldrb	r2, [r3, #17]
   d511e:	b912      	cbnz	r2, d5126 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5120:	6858      	ldr	r0, [r3, #4]
   d5122:	f7ff fac1 	bl	d46a8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5126:	6823      	ldr	r3, [r4, #0]
   d5128:	6858      	ldr	r0, [r3, #4]
   d512a:	f7ff fac5 	bl	d46b8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d512e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5130:	2300      	movs	r3, #0
   d5132:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5134:	b128      	cbz	r0, d5142 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5136:	f7ff ffcd 	bl	d50d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d513a:	6820      	ldr	r0, [r4, #0]
   d513c:	b108      	cbz	r0, d5142 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d513e:	f7ff ffc9 	bl	d50d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5142:	4620      	mov	r0, r4
   d5144:	bd10      	pop	{r4, pc}
	...

000d5148 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5148:	b538      	push	{r3, r4, r5, lr}
   d514a:	4b0c      	ldr	r3, [pc, #48]	; (d517c <_ZN5spark9MeshClassD1Ev+0x34>)
   d514c:	6003      	str	r3, [r0, #0]
   d514e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5150:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5154:	b108      	cbz	r0, d515a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5156:	f7fe ffa4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d515a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d515e:	b135      	cbz	r5, d516e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5160:	4628      	mov	r0, r5
   d5162:	f7ff ffd2 	bl	d510a <_ZN6ThreadD1Ev>
   d5166:	2104      	movs	r1, #4
   d5168:	4628      	mov	r0, r5
   d516a:	f000 f8fc 	bl	d5366 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d516e:	68a0      	ldr	r0, [r4, #8]
   d5170:	b108      	cbz	r0, d5176 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5172:	f7ff ffc5 	bl	d5100 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5176:	4620      	mov	r0, r4
   d5178:	bd38      	pop	{r3, r4, r5, pc}
   d517a:	bf00      	nop
   d517c:	000d5adc 	.word	0x000d5adc

000d5180 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5180:	b538      	push	{r3, r4, r5, lr}
   d5182:	4c0e      	ldr	r4, [pc, #56]	; (d51bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5184:	4b0e      	ldr	r3, [pc, #56]	; (d51c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5186:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5188:	2500      	movs	r5, #0
   d518a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d518c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5190:	6063      	str	r3, [r4, #4]
   d5192:	60a5      	str	r5, [r4, #8]
   d5194:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5198:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d519c:	f7ff fa9c 	bl	d46d8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d51a0:	4b08      	ldr	r3, [pc, #32]	; (d51c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d51a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d51aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d51ac:	4620      	mov	r0, r4
   d51ae:	4a06      	ldr	r2, [pc, #24]	; (d51c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d51b0:	4906      	ldr	r1, [pc, #24]	; (d51cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d51b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d51b6:	f000 b8d1 	b.w	d535c <__aeabi_atexit>
   d51ba:	bf00      	nop
   d51bc:	2003e550 	.word	0x2003e550
   d51c0:	000d5b10 	.word	0x000d5b10
   d51c4:	000d5adc 	.word	0x000d5adc
   d51c8:	2003e3d8 	.word	0x2003e3d8
   d51cc:	000d5149 	.word	0x000d5149

000d51d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d51d0:	2300      	movs	r3, #0
   d51d2:	461a      	mov	r2, r3
   d51d4:	6840      	ldr	r0, [r0, #4]
   d51d6:	f7ff bb2b 	b.w	d4830 <network_connect>

000d51da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d51da:	2200      	movs	r2, #0
   d51dc:	2102      	movs	r1, #2
   d51de:	6840      	ldr	r0, [r0, #4]
   d51e0:	f7ff bb36 	b.w	d4850 <network_disconnect>

000d51e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d51e4:	2200      	movs	r2, #0
   d51e6:	4611      	mov	r1, r2
   d51e8:	6840      	ldr	r0, [r0, #4]
   d51ea:	f7ff bb29 	b.w	d4840 <network_connecting>

000d51ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d51ee:	2200      	movs	r2, #0
   d51f0:	4611      	mov	r1, r2
   d51f2:	6840      	ldr	r0, [r0, #4]
   d51f4:	f7ff bb34 	b.w	d4860 <network_ready>

000d51f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d51f8:	2300      	movs	r3, #0
   d51fa:	461a      	mov	r2, r3
   d51fc:	4619      	mov	r1, r3
   d51fe:	6840      	ldr	r0, [r0, #4]
   d5200:	f7ff bb36 	b.w	d4870 <network_on>

000d5204 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5204:	2300      	movs	r3, #0
   d5206:	461a      	mov	r2, r3
   d5208:	4619      	mov	r1, r3
   d520a:	6840      	ldr	r0, [r0, #4]
   d520c:	f7ff bb38 	b.w	d4880 <network_off>

000d5210 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5210:	2200      	movs	r2, #0
   d5212:	f081 0101 	eor.w	r1, r1, #1
   d5216:	6840      	ldr	r0, [r0, #4]
   d5218:	f7ff bb3a 	b.w	d4890 <network_listen>

000d521c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d521c:	2200      	movs	r2, #0
   d521e:	6840      	ldr	r0, [r0, #4]
   d5220:	f7ff bb46 	b.w	d48b0 <network_set_listen_timeout>

000d5224 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5224:	2200      	movs	r2, #0
   d5226:	4611      	mov	r1, r2
   d5228:	6840      	ldr	r0, [r0, #4]
   d522a:	f7ff bb49 	b.w	d48c0 <network_get_listen_timeout>

000d522e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d522e:	2200      	movs	r2, #0
   d5230:	4611      	mov	r1, r2
   d5232:	6840      	ldr	r0, [r0, #4]
   d5234:	f7ff bb34 	b.w	d48a0 <network_listening>

000d5238 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d523c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d523e:	b095      	sub	sp, #84	; 0x54
   d5240:	4616      	mov	r6, r2
   d5242:	460d      	mov	r5, r1
   d5244:	4607      	mov	r7, r0
    IPAddress addr;
   d5246:	f7ff fdcb 	bl	d4de0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d524a:	4621      	mov	r1, r4
   d524c:	2220      	movs	r2, #32
   d524e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5250:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5252:	f000 f9ec 	bl	d562e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5256:	2340      	movs	r3, #64	; 0x40
   d5258:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d525a:	4621      	mov	r1, r4
   d525c:	466b      	mov	r3, sp
   d525e:	aa0c      	add	r2, sp, #48	; 0x30
   d5260:	4630      	mov	r0, r6
   d5262:	f7ff f9f1 	bl	d4648 <netdb_getaddrinfo>
    if (!r) {
   d5266:	4604      	mov	r4, r0
   d5268:	2800      	cmp	r0, #0
   d526a:	d144      	bne.n	d52f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d526c:	4602      	mov	r2, r0
   d526e:	2101      	movs	r1, #1
   d5270:	6868      	ldr	r0, [r5, #4]
   d5272:	f7ff faf5 	bl	d4860 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5276:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5278:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d527a:	4622      	mov	r2, r4
   d527c:	6868      	ldr	r0, [r5, #4]
   d527e:	f7ff faef 	bl	d4860 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5282:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5284:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5286:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5288:	2e00      	cmp	r6, #0
   d528a:	d034      	beq.n	d52f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d528c:	2900      	cmp	r1, #0
   d528e:	d132      	bne.n	d52f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5290:	6873      	ldr	r3, [r6, #4]
   d5292:	2b02      	cmp	r3, #2
   d5294:	d002      	beq.n	d529c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5296:	2b0a      	cmp	r3, #10
   d5298:	d009      	beq.n	d52ae <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d529a:	e02a      	b.n	d52f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d529c:	f1b8 0f00 	cmp.w	r8, #0
   d52a0:	d027      	beq.n	d52f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d52a2:	6971      	ldr	r1, [r6, #20]
   d52a4:	4638      	mov	r0, r7
   d52a6:	3104      	adds	r1, #4
   d52a8:	f7ff fdc7 	bl	d4e3a <_ZN9IPAddressaSEPKh>
   d52ac:	e020      	b.n	d52f0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d52ae:	f1b9 0f00 	cmp.w	r9, #0
   d52b2:	d01e      	beq.n	d52f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d52b4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d52b6:	2211      	movs	r2, #17
   d52b8:	a801      	add	r0, sp, #4
   d52ba:	f000 f9b8 	bl	d562e <memset>
                    a.v = 6;
   d52be:	2306      	movs	r3, #6
   d52c0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d52c4:	ad01      	add	r5, sp, #4
   d52c6:	f104 0308 	add.w	r3, r4, #8
   d52ca:	3418      	adds	r4, #24
   d52cc:	6818      	ldr	r0, [r3, #0]
   d52ce:	6859      	ldr	r1, [r3, #4]
   d52d0:	462a      	mov	r2, r5
   d52d2:	c203      	stmia	r2!, {r0, r1}
   d52d4:	3308      	adds	r3, #8
   d52d6:	42a3      	cmp	r3, r4
   d52d8:	4615      	mov	r5, r2
   d52da:	d1f7      	bne.n	d52cc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d52dc:	a901      	add	r1, sp, #4
   d52de:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d52e0:	ad07      	add	r5, sp, #28
   d52e2:	f7ff fd8b 	bl	d4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d52e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d52e8:	1d3c      	adds	r4, r7, #4
   d52ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52ec:	682b      	ldr	r3, [r5, #0]
   d52ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d52f0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52f2:	69f6      	ldr	r6, [r6, #28]
   d52f4:	e7c8      	b.n	d5288 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d52f6:	9800      	ldr	r0, [sp, #0]
   d52f8:	f7ff f99e 	bl	d4638 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d52fc:	4638      	mov	r0, r7
   d52fe:	b015      	add	sp, #84	; 0x54
   d5300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5304 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5304:	4b02      	ldr	r3, [pc, #8]	; (d5310 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5306:	4a03      	ldr	r2, [pc, #12]	; (d5314 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5308:	601a      	str	r2, [r3, #0]
   d530a:	2200      	movs	r2, #0
   d530c:	605a      	str	r2, [r3, #4]
   d530e:	4770      	bx	lr
   d5310:	2003e724 	.word	0x2003e724
   d5314:	000d5b10 	.word	0x000d5b10

000d5318 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5318:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d531a:	4c0c      	ldr	r4, [pc, #48]	; (d534c <_GLOBAL__sub_I_SPI+0x34>)
   d531c:	4e0c      	ldr	r6, [pc, #48]	; (d5350 <_GLOBAL__sub_I_SPI+0x38>)
   d531e:	4d0d      	ldr	r5, [pc, #52]	; (d5354 <_GLOBAL__sub_I_SPI+0x3c>)
   d5320:	2100      	movs	r1, #0
   d5322:	4620      	mov	r0, r4
   d5324:	f7ff fb42 	bl	d49ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5328:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d532a:	4c0b      	ldr	r4, [pc, #44]	; (d5358 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d532c:	4632      	mov	r2, r6
   d532e:	4629      	mov	r1, r5
   d5330:	f000 f814 	bl	d535c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5334:	2101      	movs	r1, #1
   d5336:	4620      	mov	r0, r4
   d5338:	f7ff fb38 	bl	d49ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d533c:	4632      	mov	r2, r6
   d533e:	4629      	mov	r1, r5
   d5340:	4620      	mov	r0, r4
   d5342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5346:	f000 b809 	b.w	d535c <__aeabi_atexit>
   d534a:	bf00      	nop
   d534c:	2003e72c 	.word	0x2003e72c
   d5350:	2003e3d8 	.word	0x2003e3d8
   d5354:	000d499d 	.word	0x000d499d
   d5358:	2003e73c 	.word	0x2003e73c

000d535c <__aeabi_atexit>:
   d535c:	460b      	mov	r3, r1
   d535e:	4601      	mov	r1, r0
   d5360:	4618      	mov	r0, r3
   d5362:	f000 b94b 	b.w	d55fc <__cxa_atexit>

000d5366 <_ZdlPvj>:
   d5366:	f7fe be9a 	b.w	d409e <_ZdlPv>
	...

000d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d536c:	4b18      	ldr	r3, [pc, #96]	; (d53d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d1      	lsls	r1, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b16      	ldr	r3, [pc, #88]	; (d53d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d2      	lsls	r2, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b14      	ldr	r3, [pc, #80]	; (d53d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d0      	lsls	r0, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b12      	ldr	r3, [pc, #72]	; (d53dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d1      	lsls	r1, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b10      	ldr	r3, [pc, #64]	; (d53e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d2      	lsls	r2, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b0e      	ldr	r3, [pc, #56]	; (d53e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d0      	lsls	r0, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b0c      	ldr	r3, [pc, #48]	; (d53e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d1      	lsls	r1, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b0a      	ldr	r3, [pc, #40]	; (d53ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d2      	lsls	r2, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4770      	bx	lr
   d53ce:	bf00      	nop
   d53d0:	2003e76c 	.word	0x2003e76c
   d53d4:	2003e768 	.word	0x2003e768
   d53d8:	2003e764 	.word	0x2003e764
   d53dc:	2003e760 	.word	0x2003e760
   d53e0:	2003e75c 	.word	0x2003e75c
   d53e4:	2003e758 	.word	0x2003e758
   d53e8:	2003e754 	.word	0x2003e754
   d53ec:	2003e750 	.word	0x2003e750

000d53f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d53f0:	4b24      	ldr	r3, [pc, #144]	; (d5484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d0      	lsls	r0, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b22      	ldr	r3, [pc, #136]	; (d5488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d1      	lsls	r1, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4b20      	ldr	r3, [pc, #128]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d540a:	681a      	ldr	r2, [r3, #0]
   d540c:	07d2      	lsls	r2, r2, #31
   d540e:	bf5c      	itt	pl
   d5410:	2201      	movpl	r2, #1
   d5412:	601a      	strpl	r2, [r3, #0]
   d5414:	4b1e      	ldr	r3, [pc, #120]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d0      	lsls	r0, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b1c      	ldr	r3, [pc, #112]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d1      	lsls	r1, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4b1a      	ldr	r3, [pc, #104]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d2      	lsls	r2, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b18      	ldr	r3, [pc, #96]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d0      	lsls	r0, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b16      	ldr	r3, [pc, #88]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d1      	lsls	r1, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b14      	ldr	r3, [pc, #80]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d2      	lsls	r2, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b12      	ldr	r3, [pc, #72]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d0      	lsls	r0, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b10      	ldr	r3, [pc, #64]	; (d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b0e      	ldr	r3, [pc, #56]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4770      	bx	lr
   d5482:	bf00      	nop
   d5484:	2003e79c 	.word	0x2003e79c
   d5488:	2003e798 	.word	0x2003e798
   d548c:	2003e794 	.word	0x2003e794
   d5490:	2003e790 	.word	0x2003e790
   d5494:	2003e78c 	.word	0x2003e78c
   d5498:	2003e788 	.word	0x2003e788
   d549c:	2003e784 	.word	0x2003e784
   d54a0:	2003e780 	.word	0x2003e780
   d54a4:	2003e77c 	.word	0x2003e77c
   d54a8:	2003e778 	.word	0x2003e778
   d54ac:	2003e774 	.word	0x2003e774
   d54b0:	2003e770 	.word	0x2003e770

000d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d54b4:	4b24      	ldr	r3, [pc, #144]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d54b6:	681a      	ldr	r2, [r3, #0]
   d54b8:	07d0      	lsls	r0, r2, #31
   d54ba:	bf5c      	itt	pl
   d54bc:	2201      	movpl	r2, #1
   d54be:	601a      	strpl	r2, [r3, #0]
   d54c0:	4b22      	ldr	r3, [pc, #136]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d54c2:	681a      	ldr	r2, [r3, #0]
   d54c4:	07d1      	lsls	r1, r2, #31
   d54c6:	bf5c      	itt	pl
   d54c8:	2201      	movpl	r2, #1
   d54ca:	601a      	strpl	r2, [r3, #0]
   d54cc:	4b20      	ldr	r3, [pc, #128]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d54ce:	681a      	ldr	r2, [r3, #0]
   d54d0:	07d2      	lsls	r2, r2, #31
   d54d2:	bf5c      	itt	pl
   d54d4:	2201      	movpl	r2, #1
   d54d6:	601a      	strpl	r2, [r3, #0]
   d54d8:	4b1e      	ldr	r3, [pc, #120]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d54da:	681a      	ldr	r2, [r3, #0]
   d54dc:	07d0      	lsls	r0, r2, #31
   d54de:	bf5c      	itt	pl
   d54e0:	2201      	movpl	r2, #1
   d54e2:	601a      	strpl	r2, [r3, #0]
   d54e4:	4b1c      	ldr	r3, [pc, #112]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d54e6:	681a      	ldr	r2, [r3, #0]
   d54e8:	07d1      	lsls	r1, r2, #31
   d54ea:	bf5c      	itt	pl
   d54ec:	2201      	movpl	r2, #1
   d54ee:	601a      	strpl	r2, [r3, #0]
   d54f0:	4b1a      	ldr	r3, [pc, #104]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d54f2:	681a      	ldr	r2, [r3, #0]
   d54f4:	07d2      	lsls	r2, r2, #31
   d54f6:	bf5c      	itt	pl
   d54f8:	2201      	movpl	r2, #1
   d54fa:	601a      	strpl	r2, [r3, #0]
   d54fc:	4b18      	ldr	r3, [pc, #96]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d0      	lsls	r0, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b16      	ldr	r3, [pc, #88]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d1      	lsls	r1, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4b14      	ldr	r3, [pc, #80]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d2      	lsls	r2, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b12      	ldr	r3, [pc, #72]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d0      	lsls	r0, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b10      	ldr	r3, [pc, #64]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d1      	lsls	r1, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b0e      	ldr	r3, [pc, #56]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d2      	lsls	r2, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4770      	bx	lr
   d5546:	bf00      	nop
   d5548:	2003e7cc 	.word	0x2003e7cc
   d554c:	2003e7c8 	.word	0x2003e7c8
   d5550:	2003e7c4 	.word	0x2003e7c4
   d5554:	2003e7c0 	.word	0x2003e7c0
   d5558:	2003e7bc 	.word	0x2003e7bc
   d555c:	2003e7b8 	.word	0x2003e7b8
   d5560:	2003e7b4 	.word	0x2003e7b4
   d5564:	2003e7b0 	.word	0x2003e7b0
   d5568:	2003e7ac 	.word	0x2003e7ac
   d556c:	2003e7a8 	.word	0x2003e7a8
   d5570:	2003e7a4 	.word	0x2003e7a4
   d5574:	2003e7a0 	.word	0x2003e7a0

000d5578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5578:	4b18      	ldr	r3, [pc, #96]	; (d55dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d557a:	681a      	ldr	r2, [r3, #0]
   d557c:	07d1      	lsls	r1, r2, #31
   d557e:	bf5c      	itt	pl
   d5580:	2201      	movpl	r2, #1
   d5582:	601a      	strpl	r2, [r3, #0]
   d5584:	4b16      	ldr	r3, [pc, #88]	; (d55e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5586:	681a      	ldr	r2, [r3, #0]
   d5588:	07d2      	lsls	r2, r2, #31
   d558a:	bf5c      	itt	pl
   d558c:	2201      	movpl	r2, #1
   d558e:	601a      	strpl	r2, [r3, #0]
   d5590:	4b14      	ldr	r3, [pc, #80]	; (d55e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5592:	681a      	ldr	r2, [r3, #0]
   d5594:	07d0      	lsls	r0, r2, #31
   d5596:	bf5c      	itt	pl
   d5598:	2201      	movpl	r2, #1
   d559a:	601a      	strpl	r2, [r3, #0]
   d559c:	4b12      	ldr	r3, [pc, #72]	; (d55e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d559e:	681a      	ldr	r2, [r3, #0]
   d55a0:	07d1      	lsls	r1, r2, #31
   d55a2:	bf5c      	itt	pl
   d55a4:	2201      	movpl	r2, #1
   d55a6:	601a      	strpl	r2, [r3, #0]
   d55a8:	4b10      	ldr	r3, [pc, #64]	; (d55ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55aa:	681a      	ldr	r2, [r3, #0]
   d55ac:	07d2      	lsls	r2, r2, #31
   d55ae:	bf5c      	itt	pl
   d55b0:	2201      	movpl	r2, #1
   d55b2:	601a      	strpl	r2, [r3, #0]
   d55b4:	4b0e      	ldr	r3, [pc, #56]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55b6:	681a      	ldr	r2, [r3, #0]
   d55b8:	07d0      	lsls	r0, r2, #31
   d55ba:	bf5c      	itt	pl
   d55bc:	2201      	movpl	r2, #1
   d55be:	601a      	strpl	r2, [r3, #0]
   d55c0:	4b0c      	ldr	r3, [pc, #48]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	07d1      	lsls	r1, r2, #31
   d55c6:	bf5c      	itt	pl
   d55c8:	2201      	movpl	r2, #1
   d55ca:	601a      	strpl	r2, [r3, #0]
   d55cc:	4b0a      	ldr	r3, [pc, #40]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d55ce:	681a      	ldr	r2, [r3, #0]
   d55d0:	07d2      	lsls	r2, r2, #31
   d55d2:	bf5c      	itt	pl
   d55d4:	2201      	movpl	r2, #1
   d55d6:	601a      	strpl	r2, [r3, #0]
   d55d8:	4770      	bx	lr
   d55da:	bf00      	nop
   d55dc:	2003e7ec 	.word	0x2003e7ec
   d55e0:	2003e7e8 	.word	0x2003e7e8
   d55e4:	2003e7e4 	.word	0x2003e7e4
   d55e8:	2003e7e0 	.word	0x2003e7e0
   d55ec:	2003e7dc 	.word	0x2003e7dc
   d55f0:	2003e7d8 	.word	0x2003e7d8
   d55f4:	2003e7d4 	.word	0x2003e7d4
   d55f8:	2003e7d0 	.word	0x2003e7d0

000d55fc <__cxa_atexit>:
   d55fc:	b510      	push	{r4, lr}
   d55fe:	4c05      	ldr	r4, [pc, #20]	; (d5614 <__cxa_atexit+0x18>)
   d5600:	4613      	mov	r3, r2
   d5602:	b12c      	cbz	r4, d5610 <__cxa_atexit+0x14>
   d5604:	460a      	mov	r2, r1
   d5606:	4601      	mov	r1, r0
   d5608:	2002      	movs	r0, #2
   d560a:	f3af 8000 	nop.w
   d560e:	bd10      	pop	{r4, pc}
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}
   d5614:	00000000 	.word	0x00000000

000d5618 <memcpy>:
   d5618:	b510      	push	{r4, lr}
   d561a:	1e43      	subs	r3, r0, #1
   d561c:	440a      	add	r2, r1
   d561e:	4291      	cmp	r1, r2
   d5620:	d004      	beq.n	d562c <memcpy+0x14>
   d5622:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5626:	f803 4f01 	strb.w	r4, [r3, #1]!
   d562a:	e7f8      	b.n	d561e <memcpy+0x6>
   d562c:	bd10      	pop	{r4, pc}

000d562e <memset>:
   d562e:	4402      	add	r2, r0
   d5630:	4603      	mov	r3, r0
   d5632:	4293      	cmp	r3, r2
   d5634:	d002      	beq.n	d563c <memset+0xe>
   d5636:	f803 1b01 	strb.w	r1, [r3], #1
   d563a:	e7fa      	b.n	d5632 <memset+0x4>
   d563c:	4770      	bx	lr
	...

000d5640 <srand>:
   d5640:	b538      	push	{r3, r4, r5, lr}
   d5642:	4b12      	ldr	r3, [pc, #72]	; (d568c <srand+0x4c>)
   d5644:	681c      	ldr	r4, [r3, #0]
   d5646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5648:	4605      	mov	r5, r0
   d564a:	b9d3      	cbnz	r3, d5682 <srand+0x42>
   d564c:	2018      	movs	r0, #24
   d564e:	f7ff f947 	bl	d48e0 <malloc>
   d5652:	f243 330e 	movw	r3, #13070	; 0x330e
   d5656:	63a0      	str	r0, [r4, #56]	; 0x38
   d5658:	8003      	strh	r3, [r0, #0]
   d565a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d565e:	8043      	strh	r3, [r0, #2]
   d5660:	f241 2334 	movw	r3, #4660	; 0x1234
   d5664:	8083      	strh	r3, [r0, #4]
   d5666:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d566a:	80c3      	strh	r3, [r0, #6]
   d566c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5670:	8103      	strh	r3, [r0, #8]
   d5672:	2305      	movs	r3, #5
   d5674:	8143      	strh	r3, [r0, #10]
   d5676:	230b      	movs	r3, #11
   d5678:	8183      	strh	r3, [r0, #12]
   d567a:	2201      	movs	r2, #1
   d567c:	2300      	movs	r3, #0
   d567e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5684:	2200      	movs	r2, #0
   d5686:	611d      	str	r5, [r3, #16]
   d5688:	615a      	str	r2, [r3, #20]
   d568a:	bd38      	pop	{r3, r4, r5, pc}
   d568c:	2003e3d4 	.word	0x2003e3d4

000d5690 <strcpy>:
   d5690:	4603      	mov	r3, r0
   d5692:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5696:	f803 2b01 	strb.w	r2, [r3], #1
   d569a:	2a00      	cmp	r2, #0
   d569c:	d1f9      	bne.n	d5692 <strcpy+0x2>
   d569e:	4770      	bx	lr

000d56a0 <strlen>:
   d56a0:	4603      	mov	r3, r0
   d56a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d56a6:	2a00      	cmp	r2, #0
   d56a8:	d1fb      	bne.n	d56a2 <strlen+0x2>
   d56aa:	1a18      	subs	r0, r3, r0
   d56ac:	3801      	subs	r0, #1
   d56ae:	4770      	bx	lr

000d56b0 <dynalib_user>:
   d56b0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d56c0:	0000 0000                                   ....

000d56c4 <CSWTCH.51>:
   d56c4:	0000 1001 1002 1003 1004 1005 1006 1007     ................
   d56d4:	1008 1009 100a 100b 100c 100d 100e 100f     ................
   d56e4:	1010 1011 1012 6552 7073 6e6f 6573 505f     ......Response_P
   d56f4:	6361 656b 2074 6170 7372 6e69 2067 7265     acket parsing er
   d5704:	6f72 2072 2000 7c7c 0020 2120 203d 4300     ror . || . != .C
   d5714:	4d4f 414d 444e 535f 4154 5452 435f 444f     OMMAND_START_COD
   d5724:	5f45 0031 4f43 4d4d 4e41 5f44 5453 5241     E_1.COMMAND_STAR
   d5734:	5f54 4f43 4544 325f 4300 4d4f 414d 444e     T_CODE_2.COMMAND
   d5744:	445f 5645 4349 5f45 4449 315f 4300 4d4f     _DEVICE_ID_1.COM
   d5754:	414d 444e 445f 5645 4349 5f45 4449 325f     MAND_DEVICE_ID_2
   d5764:	4100 6b63 614e 5f6b 4f4c 0057 6341 4e6b     .AckNak_LOW.AckN
   d5774:	6b61 485f 4749 0048 6843 6365 736b 6d75     ak_HIGH.Checksum
   d5784:	4c5f 574f 4300 6568 6b63 7573 5f6d 4948     _LOW.Checksum_HI
   d5794:	4847 2500 322e 0058 0022 5046 2053 202d     GH.%.2X.".FPS - 
   d57a4:	4553 444e 203a 4600 5350 2d20 5220 4345     SEND: .FPS - REC
   d57b4:	3a56 0020 5046 2053 202d 704f 6e65 4600     V: .FPS - Open.F
   d57c4:	5350 2d20 4320 6f6c 6573 4600 5350 2d20     PS - Close.FPS -
   d57d4:	4c20 4445 6f20 006e 5046 2053 202d 454c      LED on.FPS - LE
   d57e4:	2044 666f 0066 5046 2053 202d 6843 6e61     D off.FPS - Chan
   d57f4:	6567 6142 6475 6152 6574 4600 5350 2d20     geBaudRate.FPS -
   d5804:	4720 7465 6e45 6f72 6c6c 6465 6f43 6e75      GetEnrolledCoun
   d5814:	0074 5046 2053 202d 6843 6365 456b 726e     t.FPS - CheckEnr
   d5824:	6c6f 656c 0064 5046 2053 202d 6e45 6f72     olled.FPS - Enro
   d5834:	6c6c 7453 7261 0074 5046 2053 202d 6e45     llStart.FPS - En
   d5844:	6f72 6c6c 0031 5046 2053 202d 6e45 6f72     roll1.FPS - Enro
   d5854:	6c6c 0032 5046 2053 202d 6e45 6f72 6c6c     ll2.FPS - Enroll
   d5864:	0033 5046 2053 202d 7349 7250 7365 4673     3.FPS - IsPressF
   d5874:	6e69 6567 0072 5046 2053 202d 6544 656c     inger.FPS - Dele
   d5884:	6574 4449 4600 5350 2d20 4420 6c65 7465     teID.FPS - Delet
   d5894:	4165 6c6c 4600 5350 2d20 5620 7265 6669     eAll.FPS - Verif
   d58a4:	3179 315f 4600 5350 2d20 4920 6564 746e     y1_1.FPS - Ident
   d58b4:	6669 3179 4e5f 4600 5350 2d20 4320 7061     ify1_N.FPS - Cap
   d58c4:	7574 6572 6946 676e 7265 5000 6572 7373     tureFinger.Press
   d58d4:	5220 5445 5255 204e 6f74 6520 746e 7265      RETURN to enter
   d58e4:	6120 6d20 7365 6173 6567 002e 6e45 6574      a message..Ente
   d58f4:	2072 2061 656d 7373 6761 2e65 5900 756f     r a message..You
   d5904:	2072 656d 7373 6761 2065 7369 203a 0000     r message is: ..

000d5914 <_ZTVN5spark13EthernetClassE>:
	...
   d591c:	497f 000d 4975 000d 496b 000d 4961 000d     .I..uI..kI..aI..
   d592c:	4955 000d 4949 000d 493d 000d 4935 000d     UI..II..=I..5I..
   d593c:	492b 000d 4921 000d 5239 000d               +I..!I..9R..

000d5948 <_ZTV8SPIClass>:
	...
   d5950:	499d 000d 499f 000d 6162 6475 5300 7265     .I...I..baud.Ser
   d5960:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5970:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5980:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5990:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d59a0:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d59b0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d59c0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d59d0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d59e0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d59f0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5a00:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d5a10:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d5a20:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d5a30:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d5a40:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d5a50:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5a60 <_ZTV9IPAddress>:
	...
   d5a68:	4d7d 000d 4d6d 000d 4d6f 000d               }M..mM..oM..

000d5a74 <_ZTV9USBSerial>:
	...
   d5a7c:	4e55 000d 4ea5 000d 4eb3 000d 4b2d 000d     UN...N...N..-K..
   d5a8c:	4e91 000d 4e57 000d 4e6d 000d 4e9f 000d     .N..WN..mN...N..
   d5a9c:	4e83 000d 4e51 000d                         .N..QN..

000d5aa4 <_ZTV11USARTSerial>:
	...
   d5aac:	4f61 000d 4fb1 000d 4fbf 000d 4b2d 000d     aO...O...O..-K..
   d5abc:	4f75 000d 4f97 000d 4f83 000d 4fab 000d     uO...O...O...O..
   d5acc:	4f63 000d 4f67 000d                         cO..gO..

000d5ad4 <_ZTVN5spark9MeshClassE>:
	...
   d5adc:	50cb 000d 50c1 000d 50b7 000d 50ad 000d     .P...P...P...P..
   d5aec:	50a1 000d 5095 000d 5089 000d 5081 000d     .P...P...P...P..
   d5afc:	5077 000d 506d 000d 5239 000d               wP..mP..9R..

000d5b08 <_ZTVN5spark12NetworkClassE>:
	...
   d5b10:	51d1 000d 51db 000d 51e5 000d 51ef 000d     .Q...Q...Q...Q..
   d5b20:	51f9 000d 5205 000d 5211 000d 521d 000d     .Q...R...R...R..
   d5b30:	5225 000d 522f 000d 5239 000d               %R../R..9R..

000d5b3c <__sf_fake_stdin>:
	...

000d5b5c <__sf_fake_stdout>:
	...

000d5b7c <__sf_fake_stderr>:
	...
   d5b9c:	0043                                        C.

000d5b9e <link_const_variable_data_end>:
	...

000d5ba0 <link_constructors_location>:
   d5ba0:	000d451d 	.word	0x000d451d
   d5ba4:	000d45f9 	.word	0x000d45f9
   d5ba8:	000d4989 	.word	0x000d4989
   d5bac:	000d49d5 	.word	0x000d49d5
   d5bb0:	000d4b1d 	.word	0x000d4b1d
   d5bb4:	000d4c25 	.word	0x000d4c25
   d5bb8:	000d4c35 	.word	0x000d4c35
   d5bbc:	000d4c6d 	.word	0x000d4c6d
   d5bc0:	000d5181 	.word	0x000d5181
   d5bc4:	000d5305 	.word	0x000d5305
   d5bc8:	000d5319 	.word	0x000d5319
   d5bcc:	000d536d 	.word	0x000d536d
   d5bd0:	000d53f1 	.word	0x000d53f1
   d5bd4:	000d54b5 	.word	0x000d54b5
   d5bd8:	000d5579 	.word	0x000d5579

000d5bdc <link_constructors_end>:
   d5bdc:	00000000 	.word	0x00000000
