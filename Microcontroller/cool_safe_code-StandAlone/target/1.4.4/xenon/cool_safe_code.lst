
a:/Documents/Programming/GitHub/CoolSafe/Microcontroller/cool_safe_code/target/1.4.4/xenon/cool_safe_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004834  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001894c  2**0
                  CONTENTS
  4 .data         000000d0  2003e2a8  000d8850  0000e2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000478  2003e378  2003e378  0001e378  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8920  000d8920  00018920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8948  000d8948  00018948  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d42cc  00000000  00000000  0001894c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011405  00000000  00000000  000ecc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e8a9  00000000  00000000  000fe01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002900  00000000  00000000  0011c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000047f8  00000000  00000000  0011f1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038373  00000000  00000000  001239be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b436  00000000  00000000  0015bd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001006b3  00000000  00000000  00187167  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d4c0  00000000  00000000  0028781c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fe34 	bl	d7c9a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fe54 	bl	d7ce6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2a8 	.word	0x2003e2a8
   d4048:	000d8850 	.word	0x000d8850
   d404c:	2003e378 	.word	0x2003e378
   d4050:	2003e378 	.word	0x2003e378
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f89b 	bl	d7194 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8848 	.word	0x000d8848
   d4080:	000d8808 	.word	0x000d8808

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba44 	b.w	d4510 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcbd 	bl	d4a08 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b84d 	b.w	d7130 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bd1f 	b.w	d5ad8 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 bd1d 	b.w	d5ad8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bd23 	b.w	d5ae8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bd21 	b.w	d5ae8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z4playiiPiS_>:
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40bc:	f8df b048 	ldr.w	fp, [pc, #72]	; d4108 <_Z4playiiPiS_+0x50>
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40c0:	460f      	mov	r7, r1
   d40c2:	4690      	mov	r8, r2
   d40c4:	4699      	mov	r9, r3
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40c6:	2400      	movs	r4, #0
   d40c8:	b2c6      	uxtb	r6, r0

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40ca:	f44f 7a16 	mov.w	sl, #600	; 0x258

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40ce:	42bc      	cmp	r4, r7
   d40d0:	da15      	bge.n	d40fe <_Z4playiiPiS_+0x46>

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40d2:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40d6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
   d40da:	fb9a f5f5 	sdiv	r5, sl, r5
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40de:	b109      	cbz	r1, d40e4 <_Z4playiiPiS_+0x2c>
   d40e0:	fb9b f1f1 	sdiv	r1, fp, r1
   d40e4:	f1a5 0214 	sub.w	r2, r5, #20
   d40e8:	4630      	mov	r0, r6
   d40ea:	f003 f963 	bl	d73b4 <tone>

    // blocking delay needed because tone() does not block
    delay(noteDuration);
   d40ee:	4628      	mov	r0, r5
   d40f0:	f002 ffa6 	bl	d7040 <delay>

    noTone(speakerPin);
   d40f4:	4630      	mov	r0, r6
   d40f6:	f003 f974 	bl	d73e2 <noTone>

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40fa:	3401      	adds	r4, #1
   d40fc:	e7e7      	b.n	d40ce <_Z4playiiPiS_+0x16>
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d40fe:	4630      	mov	r0, r6
   d4100:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d4104:	f003 b96d 	b.w	d73e2 <noTone>
   d4108:	0007a120 	.word	0x0007a120

000d410c <_GLOBAL__sub_I__Z4playiiPiS_>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d410c:	f001 ba26 	b.w	d555c <HAL_Pin_Map>

000d4110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
bool deauthorizeUser(uint8_t id);
bool authorizeUser(uint8_t id);
bool changeUserName(uint8_t id, String name);

// Function called when the app sends data through TxBLE to this device
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4110:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4112:	4604      	mov	r4, r0
  // for when data is recieved through the RxBLE characteristic
  const char * dataChars = (char *) data;
  //String dataChars = (char *) data;
  Serial.printlnf("BLE Received: %s Hex: %x", dataChars, data);
   d4114:	f003 f928 	bl	d7368 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4118:	4623      	mov	r3, r4
   d411a:	4a28      	ldr	r2, [pc, #160]	; (d41bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xac>)
   d411c:	9400      	str	r4, [sp, #0]
   d411e:	2101      	movs	r1, #1
   d4120:	f002 ff42 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>

  // Data byte format: 
  //    0=op, 
  //    1=id (up to 256 users), 
  //    rest of the data = extra arguments (i.e. name)
  uint8_t operationID = data[0];
   d4124:	7823      	ldrb	r3, [r4, #0]
  //uint8_t userID = data[1];
  storedID = data[1];
   d4126:	4a26      	ldr	r2, [pc, #152]	; (d41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb0>)
   d4128:	7861      	ldrb	r1, [r4, #1]
   d412a:	7011      	strb	r1, [r2, #0]
  bool error = false;  // Tracks if there's an error in executing an op. Initialized to 0 = no error

  switch (operationID) {
   d412c:	3b41      	subs	r3, #65	; 0x41
   d412e:	2b04      	cmp	r3, #4
   d4130:	d835      	bhi.n	d419e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8e>
   d4132:	e8df f003 	tbb	[pc, r3]
   d4136:	0a03      	.short	0x0a03
   d4138:	1a13      	.short	0x1a13
   d413a:	21          	.byte	0x21
   d413b:	00          	.byte	0x00
    case newUser:
      RGB.color(0, 100, 0);
   d413c:	2200      	movs	r2, #0
   d413e:	4610      	mov	r0, r2
   d4140:	2164      	movs	r1, #100	; 0x64
   d4142:	f002 ff9f 	bl	d7084 <_ZN8RGBClass5colorEiii>
      operation = newUser;
   d4146:	2241      	movs	r2, #65	; 0x41
   d4148:	e005      	b.n	d4156 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      break;
    case deleteUser:
      RGB.color(100, 0, 0);
   d414a:	2200      	movs	r2, #0
   d414c:	4611      	mov	r1, r2
   d414e:	2064      	movs	r0, #100	; 0x64
   d4150:	f002 ff98 	bl	d7084 <_ZN8RGBClass5colorEiii>
      operation = deleteUser;
   d4154:	2242      	movs	r2, #66	; 0x42
   d4156:	4b1b      	ldr	r3, [pc, #108]	; (d41c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb4>)
   d4158:	701a      	strb	r2, [r3, #0]
      break;
   d415a:	e025      	b.n	d41a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>
    case disableUser:
      RGB.color(100, 0, 100);
   d415c:	2264      	movs	r2, #100	; 0x64
   d415e:	4610      	mov	r0, r2
   d4160:	2100      	movs	r1, #0
   d4162:	f002 ff8f 	bl	d7084 <_ZN8RGBClass5colorEiii>
      operation = disableUser;
   d4166:	2243      	movs	r2, #67	; 0x43
   d4168:	e7f5      	b.n	d4156 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      break;
    case enableUser:
      RGB.color(0, 100, 100);
   d416a:	2264      	movs	r2, #100	; 0x64
   d416c:	4611      	mov	r1, r2
   d416e:	2000      	movs	r0, #0
   d4170:	f002 ff88 	bl	d7084 <_ZN8RGBClass5colorEiii>
      operation = enableUser;
   d4174:	2244      	movs	r2, #68	; 0x44
   d4176:	e7ee      	b.n	d4156 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      break;
    case editUser:
      RGB.color(100, 100, 100);
   d4178:	2264      	movs	r2, #100	; 0x64
      //storedName = dataChars.remove(0,1);    // remove op and id
      strcpy(storedName, dataChars);
   d417a:	4d13      	ldr	r5, [pc, #76]	; (d41c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb8>)
    case enableUser:
      RGB.color(0, 100, 100);
      operation = enableUser;
      break;
    case editUser:
      RGB.color(100, 100, 100);
   d417c:	4611      	mov	r1, r2
   d417e:	4610      	mov	r0, r2
   d4180:	f002 ff80 	bl	d7084 <_ZN8RGBClass5colorEiii>
      //storedName = dataChars.remove(0,1);    // remove op and id
      strcpy(storedName, dataChars);
   d4184:	4621      	mov	r1, r4
   d4186:	6828      	ldr	r0, [r5, #0]
   d4188:	f003 fdde 	bl	d7d48 <strcpy>
      Serial.printlnf("Passing name: %s", storedName);
   d418c:	f003 f8ec 	bl	d7368 <_Z16_fetch_usbserialv>
   d4190:	4a0e      	ldr	r2, [pc, #56]	; (d41cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbc>)
   d4192:	682b      	ldr	r3, [r5, #0]
   d4194:	2101      	movs	r1, #1
   d4196:	f002 ff07 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
      operation = editUser;
   d419a:	2245      	movs	r2, #69	; 0x45
   d419c:	e7db      	b.n	d4156 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      break;
    default:  // no-op or unrecognized
      RGB.color(0, 0, 0);
   d419e:	2200      	movs	r2, #0
   d41a0:	4611      	mov	r1, r2
   d41a2:	4610      	mov	r0, r2
   d41a4:	f002 ff6e 	bl	d7084 <_ZN8RGBClass5colorEiii>
      break;
    default:  // no-op or unrecognized
      RGB.color(0, 0, 0);
  }*/
  
  Serial.printlnf("BLE operation results: %d", error);
   d41a8:	f003 f8de 	bl	d7368 <_Z16_fetch_usbserialv>
   d41ac:	4a08      	ldr	r2, [pc, #32]	; (d41d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>)
   d41ae:	2300      	movs	r3, #0
   d41b0:	2101      	movs	r1, #1
    Serial.println("Sending results.");
    TxBLE.setValue(error);  // send result of operation (app wants to know "error or no error?")
  } else {
    Serial.println("Bluetooth device disconnected before our operation results were sent.");
  }*/
}
   d41b2:	b003      	add	sp, #12
   d41b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   d41b8:	f002 bef6 	b.w	d6fa8 <_ZN5Print11printf_implEbPKcz>
   d41bc:	000d7da4 	.word	0x000d7da4
   d41c0:	2003e37d 	.word	0x2003e37d
   d41c4:	2003e3a8 	.word	0x2003e3a8
   d41c8:	2003e398 	.word	0x2003e398
   d41cc:	000d7dbd 	.word	0x000d7dbd
   d41d0:	000d7dce 	.word	0x000d7dce

000d41d4 <_Z12goodFeedbackv>:
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
}

void goodFeedback() {
   d41d4:	b508      	push	{r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
   d41d6:	2101      	movs	r1, #1
   d41d8:	2006      	movs	r0, #6
   d41da:	f003 fb6e 	bl	d78ba <digitalWrite>
  RGB.color(0, 255, 0);                                         // on-board green light
   d41de:	2200      	movs	r2, #0
   d41e0:	4610      	mov	r0, r2
   d41e2:	21ff      	movs	r1, #255	; 0xff
   d41e4:	f002 ff4e 	bl	d7084 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
   d41e8:	4b08      	ldr	r3, [pc, #32]	; (d420c <_Z12goodFeedbackv+0x38>)
   d41ea:	4a09      	ldr	r2, [pc, #36]	; (d4210 <_Z12goodFeedbackv+0x3c>)
   d41ec:	2103      	movs	r1, #3
   d41ee:	2013      	movs	r0, #19
   d41f0:	f7ff ff62 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(greenLED, LOW);                                  // turn lights back off
   d41f4:	2100      	movs	r1, #0
   d41f6:	2006      	movs	r0, #6
   d41f8:	f003 fb5f 	bl	d78ba <digitalWrite>
  RGB.color(0, 0, 0);
   d41fc:	2200      	movs	r2, #0
   d41fe:	4611      	mov	r1, r2
   d4200:	4610      	mov	r0, r2
}
   d4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
  RGB.color(0, 255, 0);                                         // on-board green light
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
   d4206:	f002 bf3d 	b.w	d7084 <_ZN8RGBClass5colorEiii>
   d420a:	bf00      	nop
   d420c:	2003e300 	.word	0x2003e300
   d4210:	2003e2f4 	.word	0x2003e2f4

000d4214 <_Z7openBinv>:
  } else {
    Serial.println("Bluetooth device disconnected before our operation results were sent.");
  }*/
}

void openBin() {
   d4214:	b508      	push	{r3, lr}
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(relay, HIGH);        // Unlock the bin
   d4216:	2101      	movs	r1, #1
   d4218:	200f      	movs	r0, #15
   d421a:	f003 fb4e 	bl	d78ba <digitalWrite>
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
   d421e:	f7ff ffd9 	bl	d41d4 <_Z12goodFeedbackv>
  delay(unlockTime);                // How long the solenoid stays pulled in
   d4222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4226:	f002 ff0b 	bl	d7040 <delay>
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
   d422a:	2100      	movs	r1, #0
   d422c:	200f      	movs	r0, #15
}
   d422e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void openBin() {
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(relay, HIGH);        // Unlock the bin
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(relay, LOW);         // Solenoid is back out, ready to lock again
   d4232:	f003 bb42 	b.w	d78ba <digitalWrite>
	...

000d4238 <_Z11badFeedbackv>:
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
}

void badFeedback() {
   d4238:	b508      	push	{r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
   d423a:	2101      	movs	r1, #1
   d423c:	2008      	movs	r0, #8
   d423e:	f003 fb3c 	bl	d78ba <digitalWrite>
  RGB.color(255, 0, 0);                                         // on-board red light
   d4242:	2200      	movs	r2, #0
   d4244:	4611      	mov	r1, r2
   d4246:	20ff      	movs	r0, #255	; 0xff
   d4248:	f002 ff1c 	bl	d7084 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
   d424c:	4b08      	ldr	r3, [pc, #32]	; (d4270 <_Z11badFeedbackv+0x38>)
   d424e:	4a09      	ldr	r2, [pc, #36]	; (d4274 <_Z11badFeedbackv+0x3c>)
   d4250:	2103      	movs	r1, #3
   d4252:	2013      	movs	r0, #19
   d4254:	f7ff ff30 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(redLED, LOW);                                    // turn lights back off
   d4258:	2100      	movs	r1, #0
   d425a:	2008      	movs	r0, #8
   d425c:	f003 fb2d 	bl	d78ba <digitalWrite>
  RGB.color(0, 0, 0);
   d4260:	2200      	movs	r2, #0
   d4262:	4611      	mov	r1, r2
   d4264:	4610      	mov	r0, r2
}
   d4266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
  RGB.color(255, 0, 0);                                         // on-board red light
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
  digitalWrite(redLED, LOW);                                    // turn lights back off
  RGB.color(0, 0, 0);
   d426a:	f002 bf0b 	b.w	d7084 <_ZN8RGBClass5colorEiii>
   d426e:	bf00      	nop
   d4270:	2003e2e8 	.word	0x2003e2e8
   d4274:	2003e2dc 	.word	0x2003e2dc

000d4278 <_Z12identifyUserv>:
}

int identifyUser() {
   d4278:	b510      	push	{r4, lr}
  // Once a finger is detected then identify a user with the FPS
  fps.CaptureFinger(false);   // take a low quality image (faster)
   d427a:	2100      	movs	r1, #0
   d427c:	480f      	ldr	r0, [pc, #60]	; (d42bc <_Z12identifyUserv+0x44>)
   d427e:	f001 f923 	bl	d54c8 <_ZN12FPS_GT521F3213CaptureFingerEb>
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d4282:	480e      	ldr	r0, [pc, #56]	; (d42bc <_Z12identifyUserv+0x44>)
   d4284:	f001 f8ee 	bl	d5464 <_ZN12FPS_GT521F3211Identify1_NEv>

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d4288:	28c7      	cmp	r0, #199	; 0xc7
}

int identifyUser() {
  // Once a finger is detected then identify a user with the FPS
  fps.CaptureFinger(false);   // take a low quality image (faster)
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d428a:	4604      	mov	r4, r0

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d428c:	d80d      	bhi.n	d42aa <_Z12identifyUserv+0x32>
    Serial.print("Verified ID:");
   d428e:	f003 f86b 	bl	d7368 <_Z16_fetch_usbserialv>
   d4292:	490b      	ldr	r1, [pc, #44]	; (d42c0 <_Z12identifyUserv+0x48>)
   d4294:	f002 fe06 	bl	d6ea4 <_ZN5Print5printEPKc>
    Serial.println(id);
   d4298:	f003 f866 	bl	d7368 <_Z16_fetch_usbserialv>
   d429c:	220a      	movs	r2, #10
   d429e:	4621      	mov	r1, r4
   d42a0:	f002 fe78 	bl	d6f94 <_ZN5Print7printlnEii>
    openBin();  // Allow access. Includes good feedback
   d42a4:	f7ff ffb6 	bl	d4214 <_Z7openBinv>
   d42a8:	e006      	b.n	d42b8 <_Z12identifyUserv+0x40>
  }
  else {//if unable to recognize
    Serial.println("Finger not found");
   d42aa:	f003 f85d 	bl	d7368 <_Z16_fetch_usbserialv>
   d42ae:	4905      	ldr	r1, [pc, #20]	; (d42c4 <_Z12identifyUserv+0x4c>)
   d42b0:	f002 fe0b 	bl	d6eca <_ZN5Print7printlnEPKc>
    badFeedback();  // Deny access
   d42b4:	f7ff ffc0 	bl	d4238 <_Z11badFeedbackv>
  }

  return id;  // Return id of the user from the FPS
}
   d42b8:	4620      	mov	r0, r4
   d42ba:	bd10      	pop	{r4, pc}
   d42bc:	2003e3a9 	.word	0x2003e3a9
   d42c0:	000d7de8 	.word	0x000d7de8
   d42c4:	000d7df5 	.word	0x000d7df5

000d42c8 <_Z11idAvailablei>:
    return true;
  else
    return false;
}

bool idAvailable(int id) {  // Reads user flag bit to see if id is being used currently (1=available, 0=used)
   d42c8:	b510      	push	{r4, lr}
   d42ca:	4604      	mov	r4, r0
  // 1st 200 bits (25 bytes) correlate to is this ID being used? This is true for max = 200 users
  // Note: each EEPROM bit inits to 1. So 0 = used, 1 = available
  return isBitSet(EEPROM.read(id/8), id%8);
   d42cc:	f003 fb44 	bl	d7958 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d42d0:	2008      	movs	r0, #8
   d42d2:	fb94 f0f0 	sdiv	r0, r4, r0
   d42d6:	f001 f9a1 	bl	d561c <HAL_EEPROM_Read>
   d42da:	4b07      	ldr	r3, [pc, #28]	; (d42f8 <_Z11idAvailablei+0x30>)
   d42dc:	4023      	ands	r3, r4
   d42de:	2b00      	cmp	r3, #0
   d42e0:	bfbe      	ittt	lt
   d42e2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d42e6:	f063 0307 	ornlt	r3, r3, #7
   d42ea:	3301      	addlt	r3, #1
   d42ec:	b240      	sxtb	r0, r0
   d42ee:	4118      	asrs	r0, r3
}
   d42f0:	f000 0001 	and.w	r0, r0, #1
   d42f4:	bd10      	pop	{r4, pc}
   d42f6:	bf00      	nop
   d42f8:	80000007 	.word	0x80000007

000d42fc <_Z9authWriteii>:
  // Reads user's authorized flag bit (1=authorization enabled, 0=authorization disabled)
  int offset = 25;  // 1st 200 bits (25 bytes) for user available flag bits
  return isBitSet(EEPROM.read(id/8+offset), id%8);
}

void authWrite(int id, int value) { // write 1 to enable a user or 0 to disable a user
   d42fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int offset = 25;  // 1st 200 bits (25 bytes) for user available flag bits
  int addr = id/8+offset;         // EEPROM data address for that contains this ID's "authorization flag" bit
   d4300:	2508      	movs	r5, #8
   d4302:	fb90 f5f5 	sdiv	r5, r0, r5
   d4306:	3519      	adds	r5, #25
  // Reads user's authorized flag bit (1=authorization enabled, 0=authorization disabled)
  int offset = 25;  // 1st 200 bits (25 bytes) for user available flag bits
  return isBitSet(EEPROM.read(id/8+offset), id%8);
}

void authWrite(int id, int value) { // write 1 to enable a user or 0 to disable a user
   d4308:	4607      	mov	r7, r0
   d430a:	460e      	mov	r6, r1
  int offset = 25;  // 1st 200 bits (25 bytes) for user available flag bits
  int addr = id/8+offset;         // EEPROM data address for that contains this ID's "authorization flag" bit
  char data = EEPROM.read(addr);  // data currently in EEPROM address
   d430c:	f003 fb24 	bl	d7958 <_Z21__fetch_global_EEPROMv>
   d4310:	4628      	mov	r0, r5
   d4312:	f001 f983 	bl	d561c <HAL_EEPROM_Read>
  char mask = 1<<(id%8);          // mask the flag's bit position
   d4316:	4b21      	ldr	r3, [pc, #132]	; (d439c <_Z9authWriteii+0xa0>)
   d4318:	403b      	ands	r3, r7
   d431a:	2b00      	cmp	r3, #0
   d431c:	bfbe      	ittt	lt
   d431e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4322:	f063 0307 	ornlt	r3, r3, #7
   d4326:	3301      	addlt	r3, #1
   d4328:	f04f 0901 	mov.w	r9, #1
   d432c:	4680      	mov	r8, r0
   d432e:	fa09 f403 	lsl.w	r4, r9, r3
  if (value == 0) {
   d4332:	b996      	cbnz	r6, d435a <_Z9authWriteii+0x5e>
    Serial.printlnf("Disabling user#%d. Addr: %d. Read: %x. Write: %x.", addr, data,  data & ( ~mask ));
   d4334:	f003 f818 	bl	d7368 <_Z16_fetch_usbserialv>
   d4338:	b2e3      	uxtb	r3, r4
   d433a:	ea28 0303 	bic.w	r3, r8, r3
   d433e:	4649      	mov	r1, r9
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	4a17      	ldr	r2, [pc, #92]	; (d43a0 <_Z9authWriteii+0xa4>)
   d4344:	f8cd 8000 	str.w	r8, [sp]
   d4348:	462b      	mov	r3, r5
   d434a:	f002 fe2d 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    EEPROM.write(addr, data & (~mask) );  // AND the flag bit with 0 to take availability
   d434e:	f003 fb03 	bl	d7958 <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4352:	ea28 0104 	bic.w	r1, r8, r4
   d4356:	b2c9      	uxtb	r1, r1
   d4358:	e011      	b.n	d437e <_Z9authWriteii+0x82>
  }
  else if (value == 1) {
   d435a:	2e01      	cmp	r6, #1
   d435c:	d112      	bne.n	d4384 <_Z9authWriteii+0x88>
    Serial.printlnf("Authorizing user#%d. Addr: %d. Read: %x. Write: %x.", addr, data,  data | mask );
   d435e:	ea48 0404 	orr.w	r4, r8, r4
   d4362:	b2e4      	uxtb	r4, r4
   d4364:	f003 f800 	bl	d7368 <_Z16_fetch_usbserialv>
   d4368:	4631      	mov	r1, r6
   d436a:	462b      	mov	r3, r5
   d436c:	4a0d      	ldr	r2, [pc, #52]	; (d43a4 <_Z9authWriteii+0xa8>)
   d436e:	9401      	str	r4, [sp, #4]
   d4370:	f8cd 8000 	str.w	r8, [sp]
   d4374:	f002 fe18 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    EEPROM.write(addr, data | (mask) );  // OR the flag bit with 1 to set availability
   d4378:	f003 faee 	bl	d7958 <_Z21__fetch_global_EEPROMv>
   d437c:	4621      	mov	r1, r4
   d437e:	4628      	mov	r0, r5
   d4380:	f001 f954 	bl	d562c <HAL_EEPROM_Write>
  }
  Serial.printlnf("User ID #%d now has access level: %d", id, value);
   d4384:	f002 fff0 	bl	d7368 <_Z16_fetch_usbserialv>
   d4388:	9600      	str	r6, [sp, #0]
   d438a:	463b      	mov	r3, r7
   d438c:	4a06      	ldr	r2, [pc, #24]	; (d43a8 <_Z9authWriteii+0xac>)
   d438e:	2101      	movs	r1, #1
   d4390:	f002 fe0a 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
}
   d4394:	b003      	add	sp, #12
   d4396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d439a:	bf00      	nop
   d439c:	80000007 	.word	0x80000007
   d43a0:	000d7e06 	.word	0x000d7e06
   d43a4:	000d7e38 	.word	0x000d7e38
   d43a8:	000d7e6c 	.word	0x000d7e6c

000d43ac <_Z9nameWritei6String>:

void nameWrite(int id, String name) {
   d43ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43b0:	b086      	sub	sp, #24
  // write a name to EEPROM for this user ID
  int offset = 50;  // 25 bytes for used flags, 25 bytes for authorized flags
  int maxNameLength = 19;
  int len = name.length();
   d43b2:	688e      	ldr	r6, [r1, #8]
    EEPROM.write(addr, data | (mask) );  // OR the flag bit with 1 to set availability
  }
  Serial.printlnf("User ID #%d now has access level: %d", id, value);
}

void nameWrite(int id, String name) {
   d43b4:	4607      	mov	r7, r0
   d43b6:	460c      	mov	r4, r1
  // write a name to EEPROM for this user ID
  int offset = 50;  // 25 bytes for used flags, 25 bytes for authorized flags
  int maxNameLength = 19;
  int len = name.length();
  
  Serial.printlnf("Naming user ID #%d: %s", id, name);
   d43b8:	f002 ffd6 	bl	d7368 <_Z16_fetch_usbserialv>
   d43bc:	ad02      	add	r5, sp, #8
   d43be:	4680      	mov	r8, r0
   d43c0:	4621      	mov	r1, r4
   d43c2:	4628      	mov	r0, r5
   d43c4:	f001 fc83 	bl	d5cce <_ZN6StringC1ERKS_>
   d43c8:	463b      	mov	r3, r7
   d43ca:	4a1d      	ldr	r2, [pc, #116]	; (d4440 <_Z9nameWritei6String+0x94>)
   d43cc:	9500      	str	r5, [sp, #0]
   d43ce:	2101      	movs	r1, #1
   d43d0:	4640      	mov	r0, r8
   d43d2:	f002 fde9 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
   d43d6:	4628      	mov	r0, r5
   d43d8:	f001 fc10 	bl	d5bfc <_ZN6StringD1Ev>

  if (len < maxNameLength) {        // add NULL chars to replace any garbage
   d43dc:	2e12      	cmp	r6, #18
   d43de:	dc0c      	bgt.n	d43fa <_Z9nameWritei6String+0x4e>
   d43e0:	f04f 0800 	mov.w	r8, #0
    for (int i = 0; i < maxNameLength-len; i++)
   d43e4:	f1c6 0613 	rsb	r6, r6, #19
   d43e8:	45b0      	cmp	r8, r6
   d43ea:	da0c      	bge.n	d4406 <_Z9nameWritei6String+0x5a>
      name.concat(" "); // Null is skipped, use space, remember to trim
   d43ec:	4915      	ldr	r1, [pc, #84]	; (d4444 <_Z9nameWritei6String+0x98>)
   d43ee:	4620      	mov	r0, r4
   d43f0:	f001 fca0 	bl	d5d34 <_ZN6String6concatEPKc>
  int len = name.length();
  
  Serial.printlnf("Naming user ID #%d: %s", id, name);

  if (len < maxNameLength) {        // add NULL chars to replace any garbage
    for (int i = 0; i < maxNameLength-len; i++)
   d43f4:	f108 0801 	add.w	r8, r8, #1
   d43f8:	e7f6      	b.n	d43e8 <_Z9nameWritei6String+0x3c>
      name.concat(" "); // Null is skipped, use space, remember to trim
  }
  // if len == maxNameLength it's already good to go
  else if (len > maxNameLength) {   // trim name
   d43fa:	2e13      	cmp	r6, #19
   d43fc:	d003      	beq.n	d4406 <_Z9nameWritei6String+0x5a>
    name.remove(maxNameLength);
   d43fe:	2113      	movs	r1, #19
   d4400:	4620      	mov	r0, r4
   d4402:	f001 fcc0 	bl	d5d86 <_ZN6String6removeEj>
  }

  Serial.printlnf("Naming user ID #%d: %s", id, name);
   d4406:	f002 ffaf 	bl	d7368 <_Z16_fetch_usbserialv>
   d440a:	4621      	mov	r1, r4
   d440c:	4606      	mov	r6, r0
   d440e:	4628      	mov	r0, r5
   d4410:	f001 fc5d 	bl	d5cce <_ZN6StringC1ERKS_>
   d4414:	463b      	mov	r3, r7
   d4416:	4a0a      	ldr	r2, [pc, #40]	; (d4440 <_Z9nameWritei6String+0x94>)
   d4418:	9500      	str	r5, [sp, #0]
   d441a:	2101      	movs	r1, #1
   d441c:	4630      	mov	r0, r6
   d441e:	f002 fdc3 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
   d4422:	4628      	mov	r0, r5
   d4424:	f001 fbea 	bl	d5bfc <_ZN6StringD1Ev>

  EEPROM.put(id*maxNameLength+offset, name);  // Write 19 bytes that correspond to the user ID
   d4428:	f003 fa96 	bl	d7958 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d442c:	2013      	movs	r0, #19
   d442e:	4378      	muls	r0, r7
   d4430:	2210      	movs	r2, #16
   d4432:	4621      	mov	r1, r4
   d4434:	3032      	adds	r0, #50	; 0x32
   d4436:	f001 f909 	bl	d564c <HAL_EEPROM_Put>
}
   d443a:	b006      	add	sp, #24
   d443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4440:	000d7e91 	.word	0x000d7e91
   d4444:	000d861a 	.word	0x000d861a

000d4448 <_Z18enrollScanFeedbackv>:

void enrollScanFeedback() {
   d4448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d444a:	4c13      	ldr	r4, [pc, #76]	; (d4498 <_Z18enrollScanFeedbackv+0x50>)
   d444c:	e894 0003 	ldmia.w	r4, {r0, r1}
  int duration[] = {2, 2};
   d4450:	3408      	adds	r4, #8
  EEPROM.put(id*maxNameLength+offset, name);  // Write 19 bytes that correspond to the user ID
}

void enrollScanFeedback() {
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d4452:	e88d 0003 	stmia.w	sp, {r0, r1}
  int duration[] = {2, 2};
   d4456:	e894 0003 	ldmia.w	r4, {r0, r1}
   d445a:	ab02      	add	r3, sp, #8
   d445c:	e883 0003 	stmia.w	r3, {r0, r1}
  EEPROM.put(id*maxNameLength+offset, name);  // Write 19 bytes that correspond to the user ID
}

void enrollScanFeedback() {
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d4460:	466a      	mov	r2, sp
  int duration[] = {2, 2};
  play(buzzer, 2, sound, duration);
   d4462:	2102      	movs	r1, #2
   d4464:	2013      	movs	r0, #19
   d4466:	f7ff fe27 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(busyLED, LOW);
   d446a:	2100      	movs	r1, #0
   d446c:	2007      	movs	r0, #7
   d446e:	f003 fa24 	bl	d78ba <digitalWrite>
  RGB.color(0, 0, 0);
   d4472:	2200      	movs	r2, #0
   d4474:	4611      	mov	r1, r2
   d4476:	4610      	mov	r0, r2
   d4478:	f002 fe04 	bl	d7084 <_ZN8RGBClass5colorEiii>
  delay(100);
   d447c:	2064      	movs	r0, #100	; 0x64
   d447e:	f002 fddf 	bl	d7040 <delay>
  digitalWrite(busyLED, HIGH);
   d4482:	2101      	movs	r1, #1
   d4484:	2007      	movs	r0, #7
   d4486:	f003 fa18 	bl	d78ba <digitalWrite>
  RGB.color(100, 100, 0);
   d448a:	2164      	movs	r1, #100	; 0x64
   d448c:	2200      	movs	r2, #0
   d448e:	4608      	mov	r0, r1
   d4490:	f002 fdf8 	bl	d7084 <_ZN8RGBClass5colorEiii>
}
   d4494:	b004      	add	sp, #16
   d4496:	bd10      	pop	{r4, pc}
   d4498:	000d7d94 	.word	0x000d7d94

000d449c <_Z14changeUserNameh6String>:
  // Return 0 if success, 1 if there's an error
  authWrite(id, 1);   // Authorization bit (1 = authorized)
  return true;
}

bool changeUserName(uint8_t id, String name) {
   d449c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d449e:	4604      	mov	r4, r0
  // 4096 EEPROM available on Xenon 
  //  1 bytes required per user: ID (+ 25 extra for all authorization bits (8*25=200))
  //  Means up to 19 chars in user names
  //  3800 bytes for user names, 200 for user IDs, 96 left (for a password, misc.)

  nameWrite(id, name);
   d44a0:	4668      	mov	r0, sp
   d44a2:	f001 fc14 	bl	d5cce <_ZN6StringC1ERKS_>
   d44a6:	4669      	mov	r1, sp
   d44a8:	4620      	mov	r0, r4
   d44aa:	f7ff ff7f 	bl	d43ac <_Z9nameWritei6String>
   d44ae:	4668      	mov	r0, sp
   d44b0:	f001 fba4 	bl	d5bfc <_ZN6StringD1Ev>
  return true;
}
   d44b4:	2001      	movs	r0, #1
   d44b6:	b004      	add	sp, #16
   d44b8:	bd10      	pop	{r4, pc}

000d44ba <_Z11LEDsequencev>:

void LEDsequence() {
   d44ba:	b508      	push	{r3, lr}
  // Do a wave of all 3 LEDs on and then off. Used for making sure they work
  digitalWrite(greenLED, HIGH);
   d44bc:	2101      	movs	r1, #1
   d44be:	2006      	movs	r0, #6
   d44c0:	f003 f9fb 	bl	d78ba <digitalWrite>
  delay(100);
   d44c4:	2064      	movs	r0, #100	; 0x64
   d44c6:	f002 fdbb 	bl	d7040 <delay>
  digitalWrite(busyLED, HIGH);
   d44ca:	2101      	movs	r1, #1
   d44cc:	2007      	movs	r0, #7
   d44ce:	f003 f9f4 	bl	d78ba <digitalWrite>
  delay(100);
   d44d2:	2064      	movs	r0, #100	; 0x64
   d44d4:	f002 fdb4 	bl	d7040 <delay>
  digitalWrite(redLED, HIGH);
   d44d8:	2101      	movs	r1, #1
   d44da:	2008      	movs	r0, #8
   d44dc:	f003 f9ed 	bl	d78ba <digitalWrite>
  delay(500);
   d44e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d44e4:	f002 fdac 	bl	d7040 <delay>
  digitalWrite(greenLED, LOW);
   d44e8:	2100      	movs	r1, #0
   d44ea:	2006      	movs	r0, #6
   d44ec:	f003 f9e5 	bl	d78ba <digitalWrite>
  delay(100);
   d44f0:	2064      	movs	r0, #100	; 0x64
   d44f2:	f002 fda5 	bl	d7040 <delay>
  digitalWrite(busyLED, LOW);
   d44f6:	2100      	movs	r1, #0
   d44f8:	2007      	movs	r0, #7
   d44fa:	f003 f9de 	bl	d78ba <digitalWrite>
  delay(100);
   d44fe:	2064      	movs	r0, #100	; 0x64
   d4500:	f002 fd9e 	bl	d7040 <delay>
  digitalWrite(redLED, LOW);
   d4504:	2100      	movs	r1, #0
   d4506:	2008      	movs	r0, #8
}
   d4508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);
  digitalWrite(greenLED, LOW);
  delay(100);
  digitalWrite(busyLED, LOW);
  delay(100);
  digitalWrite(redLED, LOW);
   d450c:	f003 b9d5 	b.w	d78ba <digitalWrite>

000d4510 <setup>:
}

void setup() {
   d4510:	b510      	push	{r4, lr}
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
   d4512:	2001      	movs	r0, #1
  digitalWrite(busyLED, LOW);
  delay(100);
  digitalWrite(redLED, LOW);
}

void setup() {
   d4514:	b096      	sub	sp, #88	; 0x58
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
   d4516:	f002 fda5 	bl	d7064 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);     // Format red, green, blue, from 0 to 255
   d451a:	22ff      	movs	r2, #255	; 0xff
   d451c:	4611      	mov	r1, r2
   d451e:	4610      	mov	r0, r2
   d4520:	f002 fdb0 	bl	d7084 <_ZN8RGBClass5colorEiii>
  RGB.brightness(64);           // scales brightness of all three colors, 0-255
   d4524:	2101      	movs	r1, #1
   d4526:	2040      	movs	r0, #64	; 0x40
   d4528:	f002 fdbf 	bl	d70aa <_ZN8RGBClass10brightnessEhb>
  // Check EEPROM
  Serial.print("EEPROM Available: ");
   d452c:	f002 ff1c 	bl	d7368 <_Z16_fetch_usbserialv>
   d4530:	493e      	ldr	r1, [pc, #248]	; (d462c <setup+0x11c>)
   d4532:	f002 fcb7 	bl	d6ea4 <_ZN5Print5printEPKc>
  Serial.println(EEPROM.length());    // 4096 bytes available
   d4536:	f002 ff17 	bl	d7368 <_Z16_fetch_usbserialv>
   d453a:	4604      	mov	r4, r0
   d453c:	f003 fa0c 	bl	d7958 <_Z21__fetch_global_EEPROMv>
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }

    //STL and C++11 iteration capability.
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }
   d4540:	f001 f87c 	bl	d563c <HAL_EEPROM_Length>
   d4544:	220a      	movs	r2, #10
   d4546:	b281      	uxth	r1, r0
   d4548:	4620      	mov	r0, r4
   d454a:	f002 fd23 	bl	d6f94 <_ZN5Print7printlnEii>
  
  // BLE
  //BLE.selectAntenna(BleAntennaType::EXTERNAL);
  // Attach characteristics
  BLE.addCharacteristic(TxBLE);
   d454e:	f001 ff17 	bl	d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4552:	4a37      	ldr	r2, [pc, #220]	; (d4630 <setup+0x120>)
   d4554:	4601      	mov	r1, r0
   d4556:	a80d      	add	r0, sp, #52	; 0x34
   d4558:	f002 fb5a 	bl	d6c10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d455c:	a80d      	add	r0, sp, #52	; 0x34
   d455e:	f001 ffcb 	bl	d64f8 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(RxBLE);
   d4562:	f001 ff0d 	bl	d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4566:	4a33      	ldr	r2, [pc, #204]	; (d4634 <setup+0x124>)
   d4568:	4601      	mov	r1, r0
   d456a:	a80d      	add	r0, sp, #52	; 0x34
   d456c:	f002 fb50 	bl	d6c10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4570:	a80d      	add	r0, sp, #52	; 0x34
   d4572:	f001 ffc1 	bl	d64f8 <_ZN8particle17BleCharacteristicD1Ev>
  RxBLE.onDataReceived(onDataReceived, NULL);
   d4576:	2200      	movs	r2, #0
   d4578:	492f      	ldr	r1, [pc, #188]	; (d4638 <setup+0x128>)
   d457a:	482e      	ldr	r0, [pc, #184]	; (d4634 <setup+0x124>)
   d457c:	f001 feac 	bl	d62d8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  // Start advertising service
  BleAdvertisingData adverData;
   d4580:	a80d      	add	r0, sp, #52	; 0x34
   d4582:	f001 fdde 	bl	d6142 <_ZN8particle18BleAdvertisingDataC1Ev>
  adverData.appendServiceUUID(serviceUuid);
   d4586:	492d      	ldr	r1, [pc, #180]	; (d463c <setup+0x12c>)
   d4588:	a803      	add	r0, sp, #12
   d458a:	f001 fc85 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d458e:	a903      	add	r1, sp, #12
   d4590:	a808      	add	r0, sp, #32
   d4592:	f001 fc81 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4596:	a808      	add	r0, sp, #32
   d4598:	f001 fcbc 	bl	d5f14 <_ZNK8particle7BleUuid4typeEv>
   d459c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d459e:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d45a0:	b944      	cbnz	r4, d45b4 <setup+0xa4>
            uint16_t uuid16 = tempUUID.shorted();
   d45a2:	f001 fcd4 	bl	d5f4e <_ZNK8particle7BleUuid7shortedEv>
   d45a6:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d45a8:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d45aa:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d45ae:	2103      	movs	r1, #3
   d45b0:	9400      	str	r4, [sp, #0]
   d45b2:	e006      	b.n	d45c2 <setup+0xb2>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d45b4:	f001 fccd 	bl	d5f52 <_ZNK8particle7BleUuid8rawBytesEv>
   d45b8:	2300      	movs	r3, #0
   d45ba:	9300      	str	r3, [sp, #0]
   d45bc:	4602      	mov	r2, r0
   d45be:	2310      	movs	r3, #16
   d45c0:	2107      	movs	r1, #7
   d45c2:	a80d      	add	r0, sp, #52	; 0x34
   d45c4:	f001 fd76 	bl	d60b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&adverData);
   d45c8:	f001 feda 	bl	d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45cc:	2200      	movs	r2, #0
   d45ce:	a90d      	add	r1, sp, #52	; 0x34
   d45d0:	f001 ff43 	bl	d645a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  // On Connected/Disconnected
  //void onConnected(BleOnConnectedCallback bleConnect, void* context);
  //void onDisconnected(BleOnConnectedCallback bleDisconnect, void* context);

  // Device I/O
	fps.Open();                   // Send serial command to initialize fps. FPS UART uses Rx (pin 14) & Tx (pin 15) on Particle Xenon. Make sure FPS is connected or the program won't go past this part
   d45d4:	481a      	ldr	r0, [pc, #104]	; (d4640 <setup+0x130>)
   d45d6:	f000 fd41 	bl	d505c <_ZN12FPS_GT521F324OpenEv>
  fps.SetLED(true);             // Visual test to make sure the fps is connected. Leave on for being able to detect fingerprints
   d45da:	2101      	movs	r1, #1
   d45dc:	4818      	ldr	r0, [pc, #96]	; (d4640 <setup+0x130>)
   d45de:	f000 fd6b 	bl	d50b8 <_ZN12FPS_GT521F326SetLEDEb>
  //delay(500);
  //fps.SetLED(false);
  pinMode(buzzer, OUTPUT);      // sound buzzer, not necessary for using tone()
   d45e2:	2101      	movs	r1, #1
   d45e4:	2013      	movs	r0, #19
   d45e6:	f003 f957 	bl	d7898 <pinMode>
  pinMode(relay, OUTPUT);       // signal to relay for switching solenoid
   d45ea:	2101      	movs	r1, #1
   d45ec:	200f      	movs	r0, #15
   d45ee:	f003 f953 	bl	d7898 <pinMode>
  pinMode(keySwitch, INPUT_PULLUP);    // electro-mechanical switch w/ a key
   d45f2:	2102      	movs	r1, #2
   d45f4:	2005      	movs	r0, #5
   d45f6:	f003 f94f 	bl	d7898 <pinMode>
  pinMode(greenLED, OUTPUT);    // green access permitted LED
   d45fa:	2101      	movs	r1, #1
   d45fc:	2006      	movs	r0, #6
   d45fe:	f003 f94b 	bl	d7898 <pinMode>
  pinMode(busyLED, OUTPUT);     // amber registration mode LED
   d4602:	2101      	movs	r1, #1
   d4604:	2007      	movs	r0, #7
   d4606:	f003 f947 	bl	d7898 <pinMode>
  pinMode(redLED, OUTPUT);      // red access denied LED
   d460a:	2101      	movs	r1, #1
   d460c:	2008      	movs	r0, #8
   d460e:	f003 f943 	bl	d7898 <pinMode>
  LEDsequence();                // turn all LEDs on at start to make sure they work
   d4612:	f7ff ff52 	bl	d44ba <_Z11LEDsequencev>

  // Setup done. Play start-up sound, signifying that the system is ready to be used
  play(buzzer, arraySize(startDuration), startSound, startDuration);
   d4616:	4b0b      	ldr	r3, [pc, #44]	; (d4644 <setup+0x134>)
   d4618:	4a0b      	ldr	r2, [pc, #44]	; (d4648 <setup+0x138>)
   d461a:	2106      	movs	r1, #6
   d461c:	2013      	movs	r0, #19
   d461e:	f7ff fd4b 	bl	d40b8 <_Z4playiiPiS_>
  //digitalWrite(busyLED, HIGH);
  //enrollUser();
  //digitalWrite(busyLED, LOW);

  // Initialize operation as none
  operation = noOP;
   d4622:	4b0a      	ldr	r3, [pc, #40]	; (d464c <setup+0x13c>)
   d4624:	2200      	movs	r2, #0
   d4626:	701a      	strb	r2, [r3, #0]

  // Reset System: DO NOT UNCOMMENT UNLESS YOU ARE SURE
  //EEPROM.clear();   // ERASES ALL EEPROM (inits all bits to 1)
  //fps.DeleteAll();  // ERASES FPS ENROLLMENTS
}
   d4628:	b016      	add	sp, #88	; 0x58
   d462a:	bd10      	pop	{r4, pc}
   d462c:	000d7ea8 	.word	0x000d7ea8
   d4630:	2003e3ac 	.word	0x2003e3ac
   d4634:	2003e39c 	.word	0x2003e39c
   d4638:	000d4111 	.word	0x000d4111
   d463c:	2003e384 	.word	0x2003e384
   d4640:	2003e3a9 	.word	0x2003e3a9
   d4644:	2003e2a8 	.word	0x2003e2a8
   d4648:	2003e2c0 	.word	0x2003e2c0
   d464c:	2003e3a8 	.word	0x2003e3a8

000d4650 <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
   d4650:	4613      	mov	r3, r2
   d4652:	460a      	mov	r2, r1
   d4654:	2101      	movs	r1, #1
   d4656:	f002 bca7 	b.w	d6fa8 <_ZN5Print11printf_implEbPKcz>
	...

000d465c <_Z9userWriteii>:
  // 1st 200 bits (25 bytes) correlate to is this ID being used? This is true for max = 200 users
  // Note: each EEPROM bit inits to 1. So 0 = used, 1 = available
  return isBitSet(EEPROM.read(id/8), id%8);
}

void userWrite(int id, int value) {
   d465c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4660:	4607      	mov	r7, r0
   d4662:	4688      	mov	r8, r1
  // Write value to the flag bit for if this user id is being used or not (0 = used, 1= available)
  // First 25 bytes of EEPROM available for this purpose
  int addr = id/8;                // EEPROM data address for that contains this ID's "availability flag" bit
   d4664:	2508      	movs	r5, #8
   d4666:	fb90 f5f5 	sdiv	r5, r0, r5
  char data = EEPROM.read(addr);  // data currently in EEPROM address
   d466a:	f003 f975 	bl	d7958 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d466e:	4628      	mov	r0, r5
   d4670:	f000 ffd4 	bl	d561c <HAL_EEPROM_Read>
  char mask = 1<<(id%8);          // mask the flag's bit position
   d4674:	4b23      	ldr	r3, [pc, #140]	; (d4704 <_Z9userWriteii+0xa8>)
   d4676:	403b      	ands	r3, r7
   d4678:	2b00      	cmp	r3, #0
   d467a:	bfbe      	ittt	lt
   d467c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4680:	f063 0307 	ornlt	r3, r3, #7
   d4684:	3301      	addlt	r3, #1
   d4686:	f04f 0901 	mov.w	r9, #1
   d468a:	4606      	mov	r6, r0
   d468c:	fa09 f403 	lsl.w	r4, r9, r3
  if (value == 0) {
   d4690:	f1b8 0f00 	cmp.w	r8, #0
   d4694:	d118      	bne.n	d46c8 <_Z9userWriteii+0x6c>
    Serial.printlnf("Writing to EEPROM. Addr: %d. Read: %x. Write: %x.", addr, data,  data & ( ~mask ));
   d4696:	f002 fe67 	bl	d7368 <_Z16_fetch_usbserialv>
   d469a:	b2e3      	uxtb	r3, r4
   d469c:	ea26 0303 	bic.w	r3, r6, r3
   d46a0:	4a19      	ldr	r2, [pc, #100]	; (d4708 <_Z9userWriteii+0xac>)
   d46a2:	9301      	str	r3, [sp, #4]
   d46a4:	4649      	mov	r1, r9
   d46a6:	462b      	mov	r3, r5
   d46a8:	9600      	str	r6, [sp, #0]
   d46aa:	f002 fc7d 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    EEPROM.write(addr, data & (~mask) );  // AND the flag bit with 0 to take availability
   d46ae:	f003 f953 	bl	d7958 <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d46b2:	ea26 0104 	bic.w	r1, r6, r4
   d46b6:	b2c9      	uxtb	r1, r1
   d46b8:	4628      	mov	r0, r5
   d46ba:	f000 ffb7 	bl	d562c <HAL_EEPROM_Write>
    Serial.printlnf("User ID #%d now used", id);
   d46be:	f002 fe53 	bl	d7368 <_Z16_fetch_usbserialv>
   d46c2:	463a      	mov	r2, r7
   d46c4:	4911      	ldr	r1, [pc, #68]	; (d470c <_Z9userWriteii+0xb0>)
   d46c6:	e017      	b.n	d46f8 <_Z9userWriteii+0x9c>
  }
  else if (value == 1) {
   d46c8:	f1b8 0f01 	cmp.w	r8, #1
   d46cc:	d116      	bne.n	d46fc <_Z9userWriteii+0xa0>
    Serial.printlnf("Writing to EEPROM. Addr: %d. Read: %x. Write: %x.", addr, data,  data | mask );
   d46ce:	4334      	orrs	r4, r6
   d46d0:	b2e4      	uxtb	r4, r4
   d46d2:	f002 fe49 	bl	d7368 <_Z16_fetch_usbserialv>
   d46d6:	4a0c      	ldr	r2, [pc, #48]	; (d4708 <_Z9userWriteii+0xac>)
   d46d8:	9401      	str	r4, [sp, #4]
   d46da:	462b      	mov	r3, r5
   d46dc:	4641      	mov	r1, r8
   d46de:	9600      	str	r6, [sp, #0]
   d46e0:	f002 fc62 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    EEPROM.write(addr, data | (mask) );  // OR the flag bit with 1 to set availability
   d46e4:	f003 f938 	bl	d7958 <_Z21__fetch_global_EEPROMv>
   d46e8:	4621      	mov	r1, r4
   d46ea:	4628      	mov	r0, r5
   d46ec:	f000 ff9e 	bl	d562c <HAL_EEPROM_Write>
    Serial.printlnf("User ID #%d now available", id);
   d46f0:	f002 fe3a 	bl	d7368 <_Z16_fetch_usbserialv>
   d46f4:	4906      	ldr	r1, [pc, #24]	; (d4710 <_Z9userWriteii+0xb4>)
   d46f6:	463a      	mov	r2, r7
   d46f8:	f7ff ffaa 	bl	d4650 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
  }
}
   d46fc:	b003      	add	sp, #12
   d46fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4702:	bf00      	nop
   d4704:	80000007 	.word	0x80000007
   d4708:	000d7ebb 	.word	0x000d7ebb
   d470c:	000d7eed 	.word	0x000d7eed
   d4710:	000d7f02 	.word	0x000d7f02

000d4714 <_Z10removeUserh>:
  // Return 0 if success, 1 if there's an error
  bool success = enrollUser();  // Add fingerprint to FPS memory and MCU EEPROM
  return success;
}

bool removeUser(uint8_t id) {
   d4714:	b538      	push	{r3, r4, r5, lr}
  // Delete a user from the list and FPS module
  // Return 0 if success, 1 if there's an error
  bool success = fps.DeleteID(id);  // Delete user from FPS
   d4716:	4601      	mov	r1, r0
  // Return 0 if success, 1 if there's an error
  bool success = enrollUser();  // Add fingerprint to FPS memory and MCU EEPROM
  return success;
}

bool removeUser(uint8_t id) {
   d4718:	4604      	mov	r4, r0
  // Delete a user from the list and FPS module
  // Return 0 if success, 1 if there's an error
  bool success = fps.DeleteID(id);  // Delete user from FPS
   d471a:	4807      	ldr	r0, [pc, #28]	; (d4738 <_Z10removeUserh+0x24>)
   d471c:	f000 fe74 	bl	d5408 <_ZN12FPS_GT521F328DeleteIDEi>
  // Delete user from EEPROM. Re-init corresponding EEPROM bits to 1
  userWrite(id, 1); 
   d4720:	2101      	movs	r1, #1
}

bool removeUser(uint8_t id) {
  // Delete a user from the list and FPS module
  // Return 0 if success, 1 if there's an error
  bool success = fps.DeleteID(id);  // Delete user from FPS
   d4722:	4605      	mov	r5, r0
  // Delete user from EEPROM. Re-init corresponding EEPROM bits to 1
  userWrite(id, 1); 
   d4724:	4620      	mov	r0, r4
   d4726:	f7ff ff99 	bl	d465c <_Z9userWriteii>
  authWrite(id, 1);
   d472a:	4620      	mov	r0, r4
   d472c:	2101      	movs	r1, #1
   d472e:	f7ff fde5 	bl	d42fc <_Z9authWriteii>
  return success;
}
   d4732:	4628      	mov	r0, r5
   d4734:	bd38      	pop	{r3, r4, r5, pc}
   d4736:	bf00      	nop
   d4738:	2003e3a9 	.word	0x2003e3a9

000d473c <_Z10enrollUserv>:
  delay(100);
  digitalWrite(busyLED, HIGH);
  RGB.color(100, 100, 0);
}

bool enrollUser() {
   d473c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  // Enroll a new fingerprint for the scanner. Returns true if successful. Returns false if timed out or error.

  // Signal to users that the system is busy. Normal functions won't work at this time
  digitalWrite(busyLED, HIGH);
   d4740:	2101      	movs	r1, #1
   d4742:	2007      	movs	r0, #7
   d4744:	f003 f8b9 	bl	d78ba <digitalWrite>
  RGB.color(100, 100, 0);
   d4748:	2164      	movs	r1, #100	; 0x64
   d474a:	2200      	movs	r2, #0
   d474c:	4608      	mov	r0, r1
   d474e:	f002 fc99 	bl	d7084 <_ZN8RGBClass5colorEiii>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4752:	f000 ff53 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
    RGB.color(0, 0, 0);
    return false;
  }*/

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d4756:	4d9a      	ldr	r5, [pc, #616]	; (d49c0 <_Z10enrollUserv+0x284>)
        fps.DeleteID(id); 
    }
  }
  */
  //int enrollid = 0;
  int enrollid = 32; // start at actual ascii chars so I can send commands thru a terminal app on my phone
   d4758:	2620      	movs	r6, #32
    RGB.color(0, 0, 0);
    return false;
  }*/

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d475a:	6028      	str	r0, [r5, #0]
  */
  //int enrollid = 0;
  int enrollid = 32; // start at actual ascii chars so I can send commands thru a terminal app on my phone
  bool usedid = true;
  while (usedid == true) {
    usedid = fps.CheckEnrolled(enrollid);
   d475c:	4631      	mov	r1, r6
   d475e:	4899      	ldr	r0, [pc, #612]	; (d49c4 <_Z10enrollUserv+0x288>)
   d4760:	f000 fce8 	bl	d5134 <_ZN12FPS_GT521F3213CheckEnrolledEi>
    if (usedid==true) enrollid++;
   d4764:	b108      	cbz	r0, d476a <_Z10enrollUserv+0x2e>
   d4766:	3601      	adds	r6, #1
   d4768:	e7f8      	b.n	d475c <_Z10enrollUserv+0x20>
  }
  Serial.printlnf("ID #%d is next available on FPS.", enrollid);
   d476a:	f002 fdfd 	bl	d7368 <_Z16_fetch_usbserialv>
   d476e:	4632      	mov	r2, r6
   d4770:	4995      	ldr	r1, [pc, #596]	; (d49c8 <_Z10enrollUserv+0x28c>)
   d4772:	f7ff ff6d 	bl	d4650 <_ZN5Print8printlnfIIiEEEjPKcDpT_>

  // Check if EEPROM is using this ID
  if ( idAvailable(enrollid) ) {
   d4776:	4630      	mov	r0, r6
   d4778:	f7ff fda6 	bl	d42c8 <_Z11idAvailablei>
   d477c:	4604      	mov	r4, r0
   d477e:	b308      	cbz	r0, d47c4 <_Z10enrollUserv+0x88>
    Serial.printlnf("ID #%d available.", enrollid);
   d4780:	f002 fdf2 	bl	d7368 <_Z16_fetch_usbserialv>
   d4784:	4632      	mov	r2, r6
   d4786:	4991      	ldr	r1, [pc, #580]	; (d49cc <_Z10enrollUserv+0x290>)
   d4788:	f7ff ff62 	bl	d4650 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
    digitalWrite(busyLED, LOW);
    RGB.color(0, 0, 0);
    return false;
  }

  Serial.println("start Enroll");
   d478c:	f002 fdec 	bl	d7368 <_Z16_fetch_usbserialv>
   d4790:	498f      	ldr	r1, [pc, #572]	; (d49d0 <_Z10enrollUserv+0x294>)
   d4792:	f002 fb9a 	bl	d6eca <_ZN5Print7printlnEPKc>
  fps.EnrollStart(enrollid);
   d4796:	4631      	mov	r1, r6
   d4798:	488a      	ldr	r0, [pc, #552]	; (d49c4 <_Z10enrollUserv+0x288>)
   d479a:	f000 fcf9 	bl	d5190 <_ZN12FPS_GT521F3211EnrollStartEi>
  Serial.println("Enroll started");
   d479e:	f002 fde3 	bl	d7368 <_Z16_fetch_usbserialv>
   d47a2:	498c      	ldr	r1, [pc, #560]	; (d49d4 <_Z10enrollUserv+0x298>)
   d47a4:	f002 fb91 	bl	d6eca <_ZN5Print7printlnEPKc>

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
   d47a8:	f002 fdde 	bl	d7368 <_Z16_fetch_usbserialv>
   d47ac:	498a      	ldr	r1, [pc, #552]	; (d49d8 <_Z10enrollUserv+0x29c>)
   d47ae:	f002 fb79 	bl	d6ea4 <_ZN5Print5printEPKc>
  Serial.println(enrollid);
   d47b2:	f002 fdd9 	bl	d7368 <_Z16_fetch_usbserialv>
   d47b6:	220a      	movs	r2, #10
   d47b8:	4631      	mov	r1, r6
   d47ba:	f002 fbeb 	bl	d6f94 <_ZN5Print7printlnEii>
  while(fps.IsPressFinger() == false) {
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d47be:	f64e 245f 	movw	r4, #59999	; 0xea5f
   d47c2:	e00f      	b.n	d47e4 <_Z10enrollUserv+0xa8>
  // Check if EEPROM is using this ID
  if ( idAvailable(enrollid) ) {
    Serial.printlnf("ID #%d available.", enrollid);
  }
  else {
    Serial.printlnf("ID #%d NOT available.", enrollid);
   d47c4:	f002 fdd0 	bl	d7368 <_Z16_fetch_usbserialv>
   d47c8:	4632      	mov	r2, r6
   d47ca:	4984      	ldr	r1, [pc, #528]	; (d49dc <_Z10enrollUserv+0x2a0>)
   d47cc:	f7ff ff40 	bl	d4650 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
   d47d0:	e0e8      	b.n	d49a4 <_Z10enrollUserv+0x268>
   d47d2:	f000 ff13 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d47d6:	682b      	ldr	r3, [r5, #0]
   d47d8:	1ac0      	subs	r0, r0, r3
   d47da:	42a0      	cmp	r0, r4
   d47dc:	d808      	bhi.n	d47f0 <_Z10enrollUserv+0xb4>
      digitalWrite(busyLED, LOW);
      RGB.color(0, 0, 0);
      return false; // exit w/ timeout function if we've been here for too long
    }
    delay(100);
   d47de:	2064      	movs	r0, #100	; 0x64
   d47e0:	f002 fc2e 	bl	d7040 <delay>
  Serial.println("Enroll started");

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
   d47e4:	4877      	ldr	r0, [pc, #476]	; (d49c4 <_Z10enrollUserv+0x288>)
   d47e6:	f000 fde3 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d47ea:	2800      	cmp	r0, #0
   d47ec:	d0f1      	beq.n	d47d2 <_Z10enrollUserv+0x96>
   d47ee:	e00a      	b.n	d4806 <_Z10enrollUserv+0xca>
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
      digitalWrite(busyLED, LOW);
   d47f0:	2100      	movs	r1, #0
   d47f2:	2007      	movs	r0, #7
   d47f4:	f003 f861 	bl	d78ba <digitalWrite>
      RGB.color(0, 0, 0);
   d47f8:	2200      	movs	r2, #0
   d47fa:	4611      	mov	r1, r2
   d47fc:	4610      	mov	r0, r2
   d47fe:	f002 fc41 	bl	d7084 <_ZN8RGBClass5colorEiii>
      return false; // exit w/ timeout function if we've been here for too long
   d4802:	2400      	movs	r4, #0
   d4804:	e0d7      	b.n	d49b6 <_Z10enrollUserv+0x27a>
    }
    delay(100);
  }
  bool bret = fps.CaptureFinger(true);  // true = use high quality scan
   d4806:	2101      	movs	r1, #1
   d4808:	486e      	ldr	r0, [pc, #440]	; (d49c4 <_Z10enrollUserv+0x288>)
   d480a:	f000 fe5d 	bl	d54c8 <_ZN12FPS_GT521F3213CaptureFingerEb>
  int iret = 0;
  if (bret != false) {
   d480e:	4604      	mov	r4, r0
   d4810:	2800      	cmp	r0, #0
   d4812:	f000 80c0 	beq.w	d4996 <_Z10enrollUserv+0x25a>
    // Successful first scan
    enrollScanFeedback();  //goodFeedback();
   d4816:	f7ff fe17 	bl	d4448 <_Z18enrollScanFeedbackv>
    Serial.println("Remove finger");
   d481a:	f002 fda5 	bl	d7368 <_Z16_fetch_usbserialv>
   d481e:	4970      	ldr	r1, [pc, #448]	; (d49e0 <_Z10enrollUserv+0x2a4>)
   d4820:	f002 fb53 	bl	d6eca <_ZN5Print7printlnEPKc>
    fps.Enroll1(); 
   d4824:	4867      	ldr	r0, [pc, #412]	; (d49c4 <_Z10enrollUserv+0x288>)
   d4826:	f000 fcf7 	bl	d5218 <_ZN12FPS_GT521F327Enroll1Ev>
    while(fps.IsPressFinger() == true) delay(100);
   d482a:	4866      	ldr	r0, [pc, #408]	; (d49c4 <_Z10enrollUserv+0x288>)
   d482c:	f000 fdc0 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d4830:	4604      	mov	r4, r0
   d4832:	b118      	cbz	r0, d483c <_Z10enrollUserv+0x100>
   d4834:	2064      	movs	r0, #100	; 0x64
   d4836:	f002 fc03 	bl	d7040 <delay>
   d483a:	e7f6      	b.n	d482a <_Z10enrollUserv+0xee>
    Serial.println("Press same finger again");
   d483c:	f002 fd94 	bl	d7368 <_Z16_fetch_usbserialv>
   d4840:	4968      	ldr	r1, [pc, #416]	; (d49e4 <_Z10enrollUserv+0x2a8>)
   d4842:	f002 fb42 	bl	d6eca <_ZN5Print7printlnEPKc>
    while(fps.IsPressFinger() == false) {
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d4846:	f64e 275f 	movw	r7, #59999	; 0xea5f
    enrollScanFeedback();  //goodFeedback();
    Serial.println("Remove finger");
    fps.Enroll1(); 
    while(fps.IsPressFinger() == true) delay(100);
    Serial.println("Press same finger again");
    while(fps.IsPressFinger() == false) {
   d484a:	485e      	ldr	r0, [pc, #376]	; (d49c4 <_Z10enrollUserv+0x288>)
   d484c:	f000 fdb0 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d4850:	b948      	cbnz	r0, d4866 <_Z10enrollUserv+0x12a>
   d4852:	f000 fed3 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d4856:	682b      	ldr	r3, [r5, #0]
   d4858:	1ac0      	subs	r0, r0, r3
   d485a:	42b8      	cmp	r0, r7
   d485c:	d8c8      	bhi.n	d47f0 <_Z10enrollUserv+0xb4>
        digitalWrite(busyLED, LOW);
        RGB.color(0, 0, 0);
        return false; // exit w/ timeout function if we've been here for too long
      }
      delay(100);
   d485e:	2064      	movs	r0, #100	; 0x64
   d4860:	f002 fbee 	bl	d7040 <delay>
    enrollScanFeedback();  //goodFeedback();
    Serial.println("Remove finger");
    fps.Enroll1(); 
    while(fps.IsPressFinger() == true) delay(100);
    Serial.println("Press same finger again");
    while(fps.IsPressFinger() == false) {
   d4864:	e7f1      	b.n	d484a <_Z10enrollUserv+0x10e>
        RGB.color(0, 0, 0);
        return false; // exit w/ timeout function if we've been here for too long
      }
      delay(100);
    }
    bret = fps.CaptureFinger(true);
   d4866:	2101      	movs	r1, #1
   d4868:	4856      	ldr	r0, [pc, #344]	; (d49c4 <_Z10enrollUserv+0x288>)
   d486a:	f000 fe2d 	bl	d54c8 <_ZN12FPS_GT521F3213CaptureFingerEb>
    if (bret != false) {
   d486e:	4607      	mov	r7, r0
   d4870:	2800      	cmp	r0, #0
   d4872:	f000 8081 	beq.w	d4978 <_Z10enrollUserv+0x23c>
      // Successful second scan
      enrollScanFeedback();  //goodFeedback();
   d4876:	f7ff fde7 	bl	d4448 <_Z18enrollScanFeedbackv>
      Serial.println("Remove finger");
   d487a:	f002 fd75 	bl	d7368 <_Z16_fetch_usbserialv>
   d487e:	4958      	ldr	r1, [pc, #352]	; (d49e0 <_Z10enrollUserv+0x2a4>)
   d4880:	f002 fb23 	bl	d6eca <_ZN5Print7printlnEPKc>
      fps.Enroll2();
   d4884:	484f      	ldr	r0, [pc, #316]	; (d49c4 <_Z10enrollUserv+0x288>)
   d4886:	f000 fd0b 	bl	d52a0 <_ZN12FPS_GT521F327Enroll2Ev>
      while(fps.IsPressFinger() == true) delay(100);
   d488a:	484e      	ldr	r0, [pc, #312]	; (d49c4 <_Z10enrollUserv+0x288>)
   d488c:	f000 fd90 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d4890:	4604      	mov	r4, r0
   d4892:	b118      	cbz	r0, d489c <_Z10enrollUserv+0x160>
   d4894:	2064      	movs	r0, #100	; 0x64
   d4896:	f002 fbd3 	bl	d7040 <delay>
   d489a:	e7f6      	b.n	d488a <_Z10enrollUserv+0x14e>
      Serial.println("Press same finger yet again");
   d489c:	f002 fd64 	bl	d7368 <_Z16_fetch_usbserialv>
   d48a0:	4951      	ldr	r1, [pc, #324]	; (d49e8 <_Z10enrollUserv+0x2ac>)
   d48a2:	f002 fb12 	bl	d6eca <_ZN5Print7printlnEPKc>
      while(fps.IsPressFinger() == false)  {
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d48a6:	f64e 285f 	movw	r8, #59999	; 0xea5f
      enrollScanFeedback();  //goodFeedback();
      Serial.println("Remove finger");
      fps.Enroll2();
      while(fps.IsPressFinger() == true) delay(100);
      Serial.println("Press same finger yet again");
      while(fps.IsPressFinger() == false)  {
   d48aa:	4846      	ldr	r0, [pc, #280]	; (d49c4 <_Z10enrollUserv+0x288>)
   d48ac:	f000 fd80 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d48b0:	4607      	mov	r7, r0
   d48b2:	b948      	cbnz	r0, d48c8 <_Z10enrollUserv+0x18c>
   d48b4:	f000 fea2 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d48b8:	682b      	ldr	r3, [r5, #0]
   d48ba:	1ac0      	subs	r0, r0, r3
   d48bc:	4540      	cmp	r0, r8
   d48be:	d897      	bhi.n	d47f0 <_Z10enrollUserv+0xb4>
          digitalWrite(busyLED, LOW);
          RGB.color(0, 0, 0);
          return false; // exit w/ timeout function if we've been here for too long
        }
        delay(100);
   d48c0:	2064      	movs	r0, #100	; 0x64
   d48c2:	f002 fbbd 	bl	d7040 <delay>
      enrollScanFeedback();  //goodFeedback();
      Serial.println("Remove finger");
      fps.Enroll2();
      while(fps.IsPressFinger() == true) delay(100);
      Serial.println("Press same finger yet again");
      while(fps.IsPressFinger() == false)  {
   d48c6:	e7f0      	b.n	d48aa <_Z10enrollUserv+0x16e>
          RGB.color(0, 0, 0);
          return false; // exit w/ timeout function if we've been here for too long
        }
        delay(100);
      }
      bret = fps.CaptureFinger(true);
   d48c8:	2101      	movs	r1, #1
   d48ca:	483e      	ldr	r0, [pc, #248]	; (d49c4 <_Z10enrollUserv+0x288>)
   d48cc:	f000 fdfc 	bl	d54c8 <_ZN12FPS_GT521F3213CaptureFingerEb>
      if (bret != false) {
   d48d0:	4605      	mov	r5, r0
   d48d2:	2800      	cmp	r0, #0
   d48d4:	d043      	beq.n	d495e <_Z10enrollUserv+0x222>
        // Successful third scan
        enrollScanFeedback();  //goodFeedback();
   d48d6:	f7ff fdb7 	bl	d4448 <_Z18enrollScanFeedbackv>
        Serial.println("Remove finger");
   d48da:	f002 fd45 	bl	d7368 <_Z16_fetch_usbserialv>
   d48de:	4940      	ldr	r1, [pc, #256]	; (d49e0 <_Z10enrollUserv+0x2a4>)
   d48e0:	f002 faf3 	bl	d6eca <_ZN5Print7printlnEPKc>
        iret = fps.Enroll3();
   d48e4:	4837      	ldr	r0, [pc, #220]	; (d49c4 <_Z10enrollUserv+0x288>)
   d48e6:	f000 fd1f 	bl	d5328 <_ZN12FPS_GT521F327Enroll3Ev>
        if (iret == 0) {
   d48ea:	4605      	mov	r5, r0
   d48ec:	bb20      	cbnz	r0, d4938 <_Z10enrollUserv+0x1fc>
          // All scans successful
          goodFeedback();
   d48ee:	f7ff fc71 	bl	d41d4 <_Z12goodFeedbackv>
          Serial.println("Enrolling Successful");
   d48f2:	f002 fd39 	bl	d7368 <_Z16_fetch_usbserialv>
   d48f6:	493d      	ldr	r1, [pc, #244]	; (d49ec <_Z10enrollUserv+0x2b0>)
   d48f8:	f002 fae7 	bl	d6eca <_ZN5Print7printlnEPKc>
    RGB.color(0, 0, 0);
    return false; // stop w/ failure
  }

  // Add user to EEPROM as "New User"
  userWrite(enrollid, 0);           // Mark this ID as used
   d48fc:	4629      	mov	r1, r5
   d48fe:	4630      	mov	r0, r6
   d4900:	f7ff feac 	bl	d465c <_Z9userWriteii>
  authWrite(enrollid, 1);           // Make sure they're authorized
   d4904:	2101      	movs	r1, #1
   d4906:	4630      	mov	r0, r6
   d4908:	f7ff fcf8 	bl	d42fc <_Z9authWriteii>
  nameWrite(enrollid, "New User");  // Give them a new name
   d490c:	4938      	ldr	r1, [pc, #224]	; (d49f0 <_Z10enrollUserv+0x2b4>)
   d490e:	4668      	mov	r0, sp
   d4910:	f001 f9bb 	bl	d5c8a <_ZN6StringC1EPK19__FlashStringHelper>
   d4914:	4669      	mov	r1, sp
   d4916:	4630      	mov	r0, r6
   d4918:	f7ff fd48 	bl	d43ac <_Z9nameWritei6String>
   d491c:	4668      	mov	r0, sp
   d491e:	f001 f96d 	bl	d5bfc <_ZN6StringD1Ev>

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
   d4922:	4629      	mov	r1, r5
   d4924:	2007      	movs	r0, #7
   d4926:	f002 ffc8 	bl	d78ba <digitalWrite>
  RGB.color(0, 0, 0);
   d492a:	462a      	mov	r2, r5
   d492c:	4629      	mov	r1, r5
   d492e:	4628      	mov	r0, r5
   d4930:	f002 fba8 	bl	d7084 <_ZN8RGBClass5colorEiii>
  return true;  // exit w/ success
   d4934:	463c      	mov	r4, r7
   d4936:	e03e      	b.n	d49b6 <_Z10enrollUserv+0x27a>
          goodFeedback();
          Serial.println("Enrolling Successful");
        }
        else {
          // Something went wrong
          badFeedback();
   d4938:	f7ff fc7e 	bl	d4238 <_Z11badFeedbackv>
          Serial.print("Enrolling Failed with error code:");
   d493c:	f002 fd14 	bl	d7368 <_Z16_fetch_usbserialv>
   d4940:	492c      	ldr	r1, [pc, #176]	; (d49f4 <_Z10enrollUserv+0x2b8>)
   d4942:	f002 faaf 	bl	d6ea4 <_ZN5Print5printEPKc>
          Serial.println(iret);
   d4946:	f002 fd0f 	bl	d7368 <_Z16_fetch_usbserialv>
   d494a:	220a      	movs	r2, #10
   d494c:	4629      	mov	r1, r5
   d494e:	f002 fb21 	bl	d6f94 <_ZN5Print7printlnEii>
          digitalWrite(busyLED, LOW);
   d4952:	2100      	movs	r1, #0
   d4954:	2007      	movs	r0, #7
   d4956:	f002 ffb0 	bl	d78ba <digitalWrite>
          RGB.color(0, 0, 0);
   d495a:	2200      	movs	r2, #0
   d495c:	e018      	b.n	d4990 <_Z10enrollUserv+0x254>
          return false; // stop w/ failure
        }
      }
      else {
        badFeedback();
   d495e:	f7ff fc6b 	bl	d4238 <_Z11badFeedbackv>
        Serial.println("Failed to capture third finger");
   d4962:	f002 fd01 	bl	d7368 <_Z16_fetch_usbserialv>
   d4966:	4924      	ldr	r1, [pc, #144]	; (d49f8 <_Z10enrollUserv+0x2bc>)
   d4968:	f002 faaf 	bl	d6eca <_ZN5Print7printlnEPKc>
        digitalWrite(busyLED, LOW);
   d496c:	4629      	mov	r1, r5
   d496e:	2007      	movs	r0, #7
   d4970:	f002 ffa3 	bl	d78ba <digitalWrite>
        RGB.color(0, 0, 0);
   d4974:	462a      	mov	r2, r5
   d4976:	e00b      	b.n	d4990 <_Z10enrollUserv+0x254>
        return false; // stop w/ failure
      }
    }
    else {
      badFeedback();
   d4978:	f7ff fc5e 	bl	d4238 <_Z11badFeedbackv>
      Serial.println("Failed to capture second finger");
   d497c:	f002 fcf4 	bl	d7368 <_Z16_fetch_usbserialv>
   d4980:	491e      	ldr	r1, [pc, #120]	; (d49fc <_Z10enrollUserv+0x2c0>)
   d4982:	f002 faa2 	bl	d6eca <_ZN5Print7printlnEPKc>
      digitalWrite(busyLED, LOW);
   d4986:	4639      	mov	r1, r7
   d4988:	2007      	movs	r0, #7
   d498a:	f002 ff96 	bl	d78ba <digitalWrite>
      RGB.color(0, 0, 0);
   d498e:	463a      	mov	r2, r7
   d4990:	4611      	mov	r1, r2
   d4992:	4610      	mov	r0, r2
   d4994:	e00d      	b.n	d49b2 <_Z10enrollUserv+0x276>
      return false; // stop w/ failure
    }
  }
  else {
    badFeedback();
   d4996:	f7ff fc4f 	bl	d4238 <_Z11badFeedbackv>
    Serial.println("Failed to capture first finger");
   d499a:	f002 fce5 	bl	d7368 <_Z16_fetch_usbserialv>
   d499e:	4918      	ldr	r1, [pc, #96]	; (d4a00 <_Z10enrollUserv+0x2c4>)
   d49a0:	f002 fa93 	bl	d6eca <_ZN5Print7printlnEPKc>
    digitalWrite(busyLED, LOW);
   d49a4:	4621      	mov	r1, r4
   d49a6:	2007      	movs	r0, #7
   d49a8:	f002 ff87 	bl	d78ba <digitalWrite>
    RGB.color(0, 0, 0);
   d49ac:	4622      	mov	r2, r4
   d49ae:	4621      	mov	r1, r4
   d49b0:	4620      	mov	r0, r4
   d49b2:	f002 fb67 	bl	d7084 <_ZN8RGBClass5colorEiii>

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
  RGB.color(0, 0, 0);
  return true;  // exit w/ success
}
   d49b6:	4620      	mov	r0, r4
   d49b8:	b004      	add	sp, #16
   d49ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49be:	bf00      	nop
   d49c0:	2003e3a4 	.word	0x2003e3a4
   d49c4:	2003e3a9 	.word	0x2003e3a9
   d49c8:	000d8059 	.word	0x000d8059
   d49cc:	000d7f1c 	.word	0x000d7f1c
   d49d0:	000d7f2e 	.word	0x000d7f2e
   d49d4:	000d7f3b 	.word	0x000d7f3b
   d49d8:	000d7f4a 	.word	0x000d7f4a
   d49dc:	000d7f63 	.word	0x000d7f63
   d49e0:	000d7f79 	.word	0x000d7f79
   d49e4:	000d7f87 	.word	0x000d7f87
   d49e8:	000d7f9f 	.word	0x000d7f9f
   d49ec:	000d7fbb 	.word	0x000d7fbb
   d49f0:	000d7fd0 	.word	0x000d7fd0
   d49f4:	000d7fd9 	.word	0x000d7fd9
   d49f8:	000d7ffb 	.word	0x000d7ffb
   d49fc:	000d801a 	.word	0x000d801a
   d4a00:	000d803a 	.word	0x000d803a

000d4a04 <_Z7addUserv>:

bool addUser(void) {
  // Add a new user and enroll their fingerprint
  // Return 0 if success, 1 if there's an error
  bool success = enrollUser();  // Add fingerprint to FPS memory and MCU EEPROM
   d4a04:	f7ff be9a 	b.w	d473c <_Z10enrollUserv>

000d4a08 <loop>:
  //EEPROM.clear();   // ERASES ALL EEPROM (inits all bits to 1)
  //fps.DeleteAll();  // ERASES FPS ENROLLMENTS
}

uint8_t a = (uint8_t) 1;  // variable for testing BLE - incrementing data
void loop() {
   d4a08:	b570      	push	{r4, r5, r6, lr}
  RGB.color(0, 0, 255);
   d4a0a:	2100      	movs	r1, #0
  //EEPROM.clear();   // ERASES ALL EEPROM (inits all bits to 1)
  //fps.DeleteAll();  // ERASES FPS ENROLLMENTS
}

uint8_t a = (uint8_t) 1;  // variable for testing BLE - incrementing data
void loop() {
   d4a0c:	b086      	sub	sp, #24
  RGB.color(0, 0, 255);
   d4a0e:	4608      	mov	r0, r1
   d4a10:	22ff      	movs	r2, #255	; 0xff
   d4a12:	f002 fb37 	bl	d7084 <_ZN8RGBClass5colorEiii>
 
  // Check for users trying to access using a fingerprint
  if(fps.IsPressFinger()) {
   d4a16:	4853      	ldr	r0, [pc, #332]	; (d4b64 <loop+0x15c>)
   d4a18:	f000 fcca 	bl	d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d4a1c:	b130      	cbz	r0, d4a2c <loop+0x24>
    RGB.color(255, 255, 255);   // white LED for debugging to show that a finger is recognized and the FPS is working on figuring out the user
   d4a1e:	22ff      	movs	r2, #255	; 0xff
   d4a20:	4611      	mov	r1, r2
   d4a22:	4610      	mov	r0, r2
   d4a24:	f002 fb2e 	bl	d7084 <_ZN8RGBClass5colorEiii>
    identifyUser();
   d4a28:	f7ff fc26 	bl	d4278 <_Z12identifyUserv>
    // TODO: Check if user is allowed access (or is disabled)
  }
  
  // Check for users trying to access using the electro-mechanical tumbler lock switch
  if (digitalRead(keySwitch) == LOW && keySwitchFlag == false) {     // Key switch turned on
   d4a2c:	2005      	movs	r0, #5
   d4a2e:	f002 ff5d 	bl	d78ec <digitalRead>
   d4a32:	2800      	cmp	r0, #0
   d4a34:	d14f      	bne.n	d4ad6 <loop+0xce>
   d4a36:	4c4c      	ldr	r4, [pc, #304]	; (d4b68 <loop+0x160>)
   d4a38:	7823      	ldrb	r3, [r4, #0]
   d4a3a:	2b00      	cmp	r3, #0
   d4a3c:	d14b      	bne.n	d4ad6 <loop+0xce>
    delay(250);
   d4a3e:	20fa      	movs	r0, #250	; 0xfa
   d4a40:	f002 fafe 	bl	d7040 <delay>
    if (digitalRead(keySwitch) == HIGH) {  // Enter registration mode manually by flicking the switch on and off quickly      
   d4a44:	2005      	movs	r0, #5
   d4a46:	f002 ff51 	bl	d78ec <digitalRead>
   d4a4a:	2801      	cmp	r0, #1
   d4a4c:	d102      	bne.n	d4a54 <loop+0x4c>
      enrollUser();
   d4a4e:	f7ff fe75 	bl	d473c <_Z10enrollUserv>
   d4a52:	e00f      	b.n	d4a74 <loop+0x6c>
    }
    else {  // normal use of switch to open lock-bin
      //openBin();                      // Allow access. Includes good feedback
      goodFeedback();                 // Only need feedback for 2nd PCB onward b/c switch directly connects 12V to solenoid
   d4a54:	f7ff fbbe 	bl	d41d4 <_Z12goodFeedbackv>
      keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
   d4a58:	2301      	movs	r3, #1
   d4a5a:	e00a      	b.n	d4a72 <loop+0x6a>
  else if (operation != noOP) {  // execute the next operation
    bool error;
    Serial.printlnf("Operation: %x, User: %d", operation, storedID);
    switch (operation) {
      case newUser:
        addUser();
   d4a5c:	f7ff ffd2 	bl	d4a04 <_Z7addUserv>
        error = changeUserName(storedID, storedName);
        break;
      default:  // no-op or unrecognized
        ;
    }
    Serial.printlnf("Operation %d returned %d", operation, error);
   d4a60:	f002 fc82 	bl	d7368 <_Z16_fetch_usbserialv>
   d4a64:	7823      	ldrb	r3, [r4, #0]
   d4a66:	4a41      	ldr	r2, [pc, #260]	; (d4b6c <loop+0x164>)
   d4a68:	9600      	str	r6, [sp, #0]
   d4a6a:	2101      	movs	r1, #1
   d4a6c:	f002 fa9c 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    operation = noOP; // reset operation so we don't loop
   d4a70:	2300      	movs	r3, #0
   d4a72:	7023      	strb	r3, [r4, #0]
  }

  // Check for Bluetooth connections periodically
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
   d4a74:	4c3e      	ldr	r4, [pc, #248]	; (d4b70 <loop+0x168>)
   d4a76:	f000 fdc1 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
   d4a7a:	6823      	ldr	r3, [r4, #0]
   d4a7c:	1ac0      	subs	r0, r0, r3
   d4a7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4a82:	d323      	bcc.n	d4acc <loop+0xc4>
   d4a84:	f000 fdba 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
	  lastUpdate = millis();
   d4a88:	6020      	str	r0, [r4, #0]

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d4a8a:	f001 fc79 	bl	d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4a8e:	f001 fd01 	bl	d6494 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4a92:	4c38      	ldr	r4, [pc, #224]	; (d4b74 <loop+0x16c>)
   d4a94:	4605      	mov	r5, r0
        if (connectionFlag == false) {
   d4a96:	7823      	ldrb	r3, [r4, #0]
  // Check for Bluetooth connections periodically
  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
	  lastUpdate = millis();

    // Check if bluetooth is connected
    if (BLE.connected()) {
   d4a98:	b188      	cbz	r0, d4abe <loop+0xb6>
        if (connectionFlag == false) {
   d4a9a:	b933      	cbnz	r3, d4aaa <loop+0xa2>
          Serial.println("Bluetooth Connected!");
   d4a9c:	f002 fc64 	bl	d7368 <_Z16_fetch_usbserialv>
   d4aa0:	4935      	ldr	r1, [pc, #212]	; (d4b78 <loop+0x170>)
   d4aa2:	f002 fa12 	bl	d6eca <_ZN5Print7printlnEPKc>
          connectionFlag = true;
   d4aa6:	2301      	movs	r3, #1
   d4aa8:	7023      	strb	r3, [r4, #0]
          // TODO: update / send users to mobile app
        }
        a++;                // increment testing variable
   d4aaa:	4934      	ldr	r1, [pc, #208]	; (d4b7c <loop+0x174>)
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4aac:	4834      	ldr	r0, [pc, #208]	; (d4b80 <loop+0x178>)
   d4aae:	780b      	ldrb	r3, [r1, #0]
   d4ab0:	3301      	adds	r3, #1
   d4ab2:	700b      	strb	r3, [r1, #0]
   d4ab4:	2201      	movs	r2, #1
   d4ab6:	2300      	movs	r3, #0
   d4ab8:	f001 fbac 	bl	d6214 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d4abc:	e006      	b.n	d4acc <loop+0xc4>
        TxBLE.setValue(a);  // send test data messages
    }
    else {  // No Bluetooth connection
      if (connectionFlag == true) { // Make sure flag is set correctly
   d4abe:	b12b      	cbz	r3, d4acc <loop+0xc4>
        Serial.println("Bluetooth Disconnected.");
   d4ac0:	f002 fc52 	bl	d7368 <_Z16_fetch_usbserialv>
   d4ac4:	492f      	ldr	r1, [pc, #188]	; (d4b84 <loop+0x17c>)
   d4ac6:	f002 fa00 	bl	d6eca <_ZN5Print7printlnEPKc>
        connectionFlag = false;
   d4aca:	7025      	strb	r5, [r4, #0]
      }
    }
  }

  delay(delayTime);
   d4acc:	2064      	movs	r0, #100	; 0x64
   d4ace:	f002 fab7 	bl	d7040 <delay>
}
   d4ad2:	b006      	add	sp, #24
   d4ad4:	bd70      	pop	{r4, r5, r6, pc}
      //openBin();                      // Allow access. Includes good feedback
      goodFeedback();                 // Only need feedback for 2nd PCB onward b/c switch directly connects 12V to solenoid
      keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
    }
  } 
  else if (digitalRead(keySwitch) == HIGH && keySwitchFlag == true) {  // Key switch turned off
   d4ad6:	2005      	movs	r0, #5
   d4ad8:	f002 ff08 	bl	d78ec <digitalRead>
   d4adc:	2801      	cmp	r0, #1
   d4ade:	d105      	bne.n	d4aec <loop+0xe4>
   d4ae0:	4b21      	ldr	r3, [pc, #132]	; (d4b68 <loop+0x160>)
   d4ae2:	781a      	ldrb	r2, [r3, #0]
   d4ae4:	b112      	cbz	r2, d4aec <loop+0xe4>
    keySwitchFlag = false;          // Reset flag so the key can be used again
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	701a      	strb	r2, [r3, #0]
   d4aea:	e7c3      	b.n	d4a74 <loop+0x6c>
  }
  
  else if (operation != noOP) {  // execute the next operation
   d4aec:	4c26      	ldr	r4, [pc, #152]	; (d4b88 <loop+0x180>)
   d4aee:	7823      	ldrb	r3, [r4, #0]
   d4af0:	2b00      	cmp	r3, #0
   d4af2:	d0bf      	beq.n	d4a74 <loop+0x6c>
    bool error;
    Serial.printlnf("Operation: %x, User: %d", operation, storedID);
   d4af4:	4d25      	ldr	r5, [pc, #148]	; (d4b8c <loop+0x184>)
   d4af6:	f002 fc37 	bl	d7368 <_Z16_fetch_usbserialv>
   d4afa:	782a      	ldrb	r2, [r5, #0]
   d4afc:	7823      	ldrb	r3, [r4, #0]
   d4afe:	9200      	str	r2, [sp, #0]
   d4b00:	2101      	movs	r1, #1
   d4b02:	4a23      	ldr	r2, [pc, #140]	; (d4b90 <loop+0x188>)
   d4b04:	f002 fa50 	bl	d6fa8 <_ZN5Print11printf_implEbPKcz>
    switch (operation) {
   d4b08:	7822      	ldrb	r2, [r4, #0]
   d4b0a:	3a41      	subs	r2, #65	; 0x41
   d4b0c:	462b      	mov	r3, r5
   d4b0e:	2a04      	cmp	r2, #4
   d4b10:	d8a6      	bhi.n	d4a60 <loop+0x58>
   d4b12:	a101      	add	r1, pc, #4	; (adr r1, d4b18 <loop+0x110>)
   d4b14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   d4b18:	000d4a5d 	.word	0x000d4a5d
   d4b1c:	000d4b2d 	.word	0x000d4b2d
   d4b20:	000d4b35 	.word	0x000d4b35
   d4b24:	000d4b39 	.word	0x000d4b39
   d4b28:	000d4b45 	.word	0x000d4b45
      case newUser:
        addUser();
        break;
      case deleteUser:
        //removeUser(storedID);
        removeUser(storedID);
   d4b2c:	7828      	ldrb	r0, [r5, #0]
   d4b2e:	f7ff fdf1 	bl	d4714 <_Z10removeUserh>
        break;
   d4b32:	e795      	b.n	d4a60 <loop+0x58>
}

bool deauthorizeUser(uint8_t id) {
  // Disallow a user to be granted access
  // Return 0 if success, 1 if there's an error
  authWrite(id, 0);   // Authorization bit (0 = not authorized)
   d4b34:	2100      	movs	r1, #0
   d4b36:	e000      	b.n	d4b3a <loop+0x132>
}

bool authorizeUser(uint8_t id) {
  // Allow a disabled user access again
  // Return 0 if success, 1 if there's an error
  authWrite(id, 1);   // Authorization bit (1 = authorized)
   d4b38:	2101      	movs	r1, #1
   d4b3a:	7818      	ldrb	r0, [r3, #0]
   d4b3c:	f7ff fbde 	bl	d42fc <_Z9authWriteii>
        break;
      case disableUser:
        error = deauthorizeUser(storedID);
        break;
      case enableUser:
        error = authorizeUser(storedID);
   d4b40:	2601      	movs	r6, #1
        break;
   d4b42:	e78d      	b.n	d4a60 <loop+0x58>
      case editUser:
        error = changeUserName(storedID, storedName);
   d4b44:	4b13      	ldr	r3, [pc, #76]	; (d4b94 <loop+0x18c>)
   d4b46:	782d      	ldrb	r5, [r5, #0]
   d4b48:	6819      	ldr	r1, [r3, #0]
   d4b4a:	a802      	add	r0, sp, #8
   d4b4c:	f001 f89d 	bl	d5c8a <_ZN6StringC1EPK19__FlashStringHelper>
   d4b50:	a902      	add	r1, sp, #8
   d4b52:	4628      	mov	r0, r5
   d4b54:	f7ff fca2 	bl	d449c <_Z14changeUserNameh6String>
   d4b58:	4606      	mov	r6, r0
   d4b5a:	a802      	add	r0, sp, #8
   d4b5c:	f001 f84e 	bl	d5bfc <_ZN6StringD1Ev>
        break;
   d4b60:	e77e      	b.n	d4a60 <loop+0x58>
   d4b62:	bf00      	nop
   d4b64:	2003e3a9 	.word	0x2003e3a9
   d4b68:	2003e37c 	.word	0x2003e37c
   d4b6c:	000d8092 	.word	0x000d8092
   d4b70:	2003e3b4 	.word	0x2003e3b4
   d4b74:	2003e3b8 	.word	0x2003e3b8
   d4b78:	000d80ab 	.word	0x000d80ab
   d4b7c:	2003e2d8 	.word	0x2003e2d8
   d4b80:	2003e3ac 	.word	0x2003e3ac
   d4b84:	000d80c0 	.word	0x000d80c0
   d4b88:	2003e3a8 	.word	0x2003e3a8
   d4b8c:	2003e37d 	.word	0x2003e37d
   d4b90:	000d807a 	.word	0x000d807a
   d4b94:	2003e398 	.word	0x2003e398

000d4b98 <_GLOBAL__sub_I_SystemMode>:
      }
    }
  }

  delay(delayTime);
}
   d4b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4b9c:	b099      	sub	sp, #100	; 0x64
   d4b9e:	f000 fcdd 	bl	d555c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4ba2:	4b31      	ldr	r3, [pc, #196]	; (d4c68 <_GLOBAL__sub_I_SystemMode+0xd0>)
const int relay     = A4;                     // digital pin for relay signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT521F32 fps;                             // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d4ba4:	4d31      	ldr	r5, [pc, #196]	; (d4c6c <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4ba6:	4f32      	ldr	r7, [pc, #200]	; (d4c70 <_GLOBAL__sub_I_SystemMode+0xd8>)
int goodDuration[]  = {4, 4, 1};
int badSound[]      = {NOTE_G3, NOTE_E3, NOTE_C3};                              // plays when access to the lock-bin is denied
int badDuration[]   = {4, 4, 1};

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d4ba8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d4c98 <_GLOBAL__sub_I_SystemMode+0x100>
   d4bac:	2400      	movs	r4, #0
   d4bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4bb2:	701c      	strb	r4, [r3, #0]
   d4bb4:	805c      	strh	r4, [r3, #2]
   d4bb6:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bb8:	2003      	movs	r0, #3
   d4bba:	f000 ff11 	bl	d59e0 <set_system_mode>
const int relay     = A4;                     // digital pin for relay signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT521F32 fps;                             // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d4bbe:	4628      	mov	r0, r5
   d4bc0:	f000 f992 	bl	d4ee8 <_ZN12FPS_GT521F32C1Ev>
   d4bc4:	463a      	mov	r2, r7
   d4bc6:	492b      	ldr	r1, [pc, #172]	; (d4c74 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d4bc8:	4628      	mov	r0, r5
   d4bca:	f002 fef9 	bl	d79c0 <__aeabi_atexit>
int goodDuration[]  = {4, 4, 1};
int badSound[]      = {NOTE_G3, NOTE_E3, NOTE_C3};                              // plays when access to the lock-bin is denied
int badDuration[]   = {4, 4, 1};

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d4bce:	492a      	ldr	r1, [pc, #168]	; (d4c78 <_GLOBAL__sub_I_SystemMode+0xe0>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4bd0:	4d2a      	ldr	r5, [pc, #168]	; (d4c7c <_GLOBAL__sub_I_SystemMode+0xe4>)
   d4bd2:	4640      	mov	r0, r8
   d4bd4:	f001 fa4b 	bl	d606e <_ZN8particle7BleUuidC1EPKc>
// BLE Characteristics UUIDs - UART Protocol regarding mobile device as host (i.e. Rx for app receives data and Tx for app transmits data)
const char* writeUUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic RxBLE("receive", BleCharacteristicProperty::WRITE_WO_RSP, writeUUID, serviceUuid, onDataReceived, (void*)writeUUID);
   d4bd8:	4641      	mov	r1, r8
   d4bda:	a809      	add	r0, sp, #36	; 0x24
   d4bdc:	f001 f95c 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
   d4be0:	4b27      	ldr	r3, [pc, #156]	; (d4c80 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d4be2:	602c      	str	r4, [r5, #0]
   d4be4:	f8d3 9000 	ldr.w	r9, [r3]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4be8:	606c      	str	r4, [r5, #4]
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4bea:	ae13      	add	r6, sp, #76	; 0x4c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4bec:	4649      	mov	r1, r9
   d4bee:	a80e      	add	r0, sp, #56	; 0x38
   d4bf0:	f001 fa3d 	bl	d606e <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4bf4:	a909      	add	r1, sp, #36	; 0x24
   d4bf6:	4630      	mov	r0, r6
   d4bf8:	f001 f94e 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4bfc:	f8cd 9008 	str.w	r9, [sp, #8]
   d4c00:	4b20      	ldr	r3, [pc, #128]	; (d4c84 <_GLOBAL__sub_I_SystemMode+0xec>)
   d4c02:	f8df 9098 	ldr.w	r9, [pc, #152]	; d4c9c <_GLOBAL__sub_I_SystemMode+0x104>
   d4c06:	9301      	str	r3, [sp, #4]
   d4c08:	4628      	mov	r0, r5
   d4c0a:	ab0e      	add	r3, sp, #56	; 0x38
   d4c0c:	9600      	str	r6, [sp, #0]
   d4c0e:	2204      	movs	r2, #4
   d4c10:	491d      	ldr	r1, [pc, #116]	; (d4c88 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d4c12:	f001 ff4b 	bl	d6aac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4c16:	463a      	mov	r2, r7
   d4c18:	4649      	mov	r1, r9
   d4c1a:	4628      	mov	r0, r5
   d4c1c:	f002 fed0 	bl	d79c0 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4c20:	4d1a      	ldr	r5, [pc, #104]	; (d4c8c <_GLOBAL__sub_I_SystemMode+0xf4>)
BleCharacteristic TxBLE("transmit", BleCharacteristicProperty::NOTIFY, BleUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d4c22:	491b      	ldr	r1, [pc, #108]	; (d4c90 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d4c24:	a804      	add	r0, sp, #16
   d4c26:	f001 fa22 	bl	d606e <_ZN8particle7BleUuidC1EPKc>
   d4c2a:	4641      	mov	r1, r8
   d4c2c:	a809      	add	r0, sp, #36	; 0x24
   d4c2e:	f001 f933 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4c32:	a904      	add	r1, sp, #16
   d4c34:	602c      	str	r4, [r5, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4c36:	606c      	str	r4, [r5, #4]
   d4c38:	a80e      	add	r0, sp, #56	; 0x38
   d4c3a:	f001 f92d 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4c3e:	a909      	add	r1, sp, #36	; 0x24
   d4c40:	4630      	mov	r0, r6
   d4c42:	f001 f929 	bl	d5e98 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4c46:	ab0e      	add	r3, sp, #56	; 0x38
   d4c48:	4628      	mov	r0, r5
   d4c4a:	9402      	str	r4, [sp, #8]
   d4c4c:	9401      	str	r4, [sp, #4]
   d4c4e:	9600      	str	r6, [sp, #0]
   d4c50:	2210      	movs	r2, #16
   d4c52:	4910      	ldr	r1, [pc, #64]	; (d4c94 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4c54:	f001 ff2a 	bl	d6aac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4c58:	463a      	mov	r2, r7
   d4c5a:	4649      	mov	r1, r9
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	f002 feaf 	bl	d79c0 <__aeabi_atexit>
      }
    }
  }

  delay(delayTime);
}
   d4c62:	b019      	add	sp, #100	; 0x64
   d4c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c68:	2003e37e 	.word	0x2003e37e
   d4c6c:	2003e3a9 	.word	0x2003e3a9
   d4c70:	2003e378 	.word	0x2003e378
   d4c74:	000d4f01 	.word	0x000d4f01
   d4c78:	000d80d8 	.word	0x000d80d8
   d4c7c:	2003e39c 	.word	0x2003e39c
   d4c80:	2003e30c 	.word	0x2003e30c
   d4c84:	000d4111 	.word	0x000d4111
   d4c88:	000d80fd 	.word	0x000d80fd
   d4c8c:	2003e3ac 	.word	0x2003e3ac
   d4c90:	000d8105 	.word	0x000d8105
   d4c94:	000d812a 	.word	0x000d812a
   d4c98:	2003e384 	.word	0x2003e384
   d4c9c:	000d64f9 	.word	0x000d64f9

000d4ca0 <_ZN14Command_Packet16ParameterFromIntEi>:

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4ca0:	120b      	asrs	r3, r1, #8
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4ca2:	7041      	strb	r1, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4ca4:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4ca6:	140b      	asrs	r3, r1, #16
	Parameter[3] = (i & 0xff000000) >> 24;
   d4ca8:	0e09      	lsrs	r1, r1, #24
// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4caa:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4cac:	7101      	strb	r1, [r0, #4]
   d4cae:	4770      	bx	lr

000d4cb0 <_ZN14Command_Packet18_CalculateChecksumEv>:
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d4cb0:	7842      	ldrb	r2, [r0, #1]
   d4cb2:	7883      	ldrb	r3, [r0, #2]
   d4cb4:	4413      	add	r3, r2
	w += Parameter[2];
   d4cb6:	78c2      	ldrb	r2, [r0, #3]
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d4cb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
	w += Parameter[2];
   d4cbc:	4413      	add	r3, r2
	w += Parameter[3];
   d4cbe:	7902      	ldrb	r2, [r0, #4]
   d4cc0:	4413      	add	r3, r2
	w += command[0];
   d4cc2:	7942      	ldrb	r2, [r0, #5]
	w += command[1];

	return w;
   d4cc4:	7980      	ldrb	r0, [r0, #6]
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
	w += Parameter[2];
	w += Parameter[3];
	w += command[0];
   d4cc6:	4413      	add	r3, r2
	w += command[1];

	return w;
}
   d4cc8:	4418      	add	r0, r3
   d4cca:	4770      	bx	lr

000d4ccc <_ZN14Command_Packet14GetPacketBytesEv>:
#endif  //__GNUC__

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
   d4ccc:	b570      	push	{r4, r5, r6, lr}
   d4cce:	4604      	mov	r4, r0
	byte* packetbytes= new byte[12];
   d4cd0:	200c      	movs	r0, #12
   d4cd2:	f7ff f9e2 	bl	d409a <_Znaj>

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d4cd6:	2500      	movs	r5, #0
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];

	// update command before calculating checksum (important!)
	word cmd = Command;
   d4cd8:	7826      	ldrb	r6, [r4, #0]
	command[0] = GetLowByte(cmd);
   d4cda:	7166      	strb	r6, [r4, #5]

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];
   d4cdc:	4601      	mov	r1, r0

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d4cde:	71a5      	strb	r5, [r4, #6]

	word checksum = _CalculateChecksum();
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f7ff ffe5 	bl	d4cb0 <_ZN14Command_Packet18_CalculateChecksumEv>

	packetbytes[0] = COMMAND_START_CODE_1;
   d4ce6:	2355      	movs	r3, #85	; 0x55
   d4ce8:	700b      	strb	r3, [r1, #0]
	packetbytes[1] = COMMAND_START_CODE_2;
   d4cea:	23aa      	movs	r3, #170	; 0xaa
   d4cec:	704b      	strb	r3, [r1, #1]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
   d4cee:	2301      	movs	r3, #1
   d4cf0:	708b      	strb	r3, [r1, #2]
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
   d4cf2:	7863      	ldrb	r3, [r4, #1]
   d4cf4:	710b      	strb	r3, [r1, #4]
	packetbytes[5] = Parameter[1];
   d4cf6:	78a3      	ldrb	r3, [r4, #2]
   d4cf8:	714b      	strb	r3, [r1, #5]
	packetbytes[6] = Parameter[2];
   d4cfa:	78e3      	ldrb	r3, [r4, #3]
   d4cfc:	718b      	strb	r3, [r1, #6]
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
   d4cfe:	7288      	strb	r0, [r1, #10]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4d00:	7923      	ldrb	r3, [r4, #4]
	word checksum = _CalculateChecksum();

	packetbytes[0] = COMMAND_START_CODE_1;
	packetbytes[1] = COMMAND_START_CODE_2;
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
   d4d02:	70cd      	strb	r5, [r1, #3]
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);
   d4d04:	0a00      	lsrs	r0, r0, #8
   d4d06:	72c8      	strb	r0, [r1, #11]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4d08:	71cb      	strb	r3, [r1, #7]
	packetbytes[8] = command[0];
   d4d0a:	720e      	strb	r6, [r1, #8]
	packetbytes[9] = command[1];
   d4d0c:	724d      	strb	r5, [r1, #9]
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);

	return packetbytes;
}
   d4d0e:	4608      	mov	r0, r1
   d4d10:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d14 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
	if (high == 0x00)
   d4d14:	b128      	cbz	r0, d4d22 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4d16:	2912      	cmp	r1, #18
   d4d18:	d803      	bhi.n	d4d22 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4d1a:	4b03      	ldr	r3, [pc, #12]	; (d4d28 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x14>)
   d4d1c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   d4d20:	4770      	bx	lr
}

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
   d4d22:	f64f 70ff 	movw	r0, #65535	; 0xffff
			case 0x11: e = NACK_INVALID_PARAM; break;
			case 0x12: e = NACK_FINGER_IS_NOT_PRESSED; break;
		}
	}
	return e;
}
   d4d26:	4770      	bx	lr
   d4d28:	000d8158 	.word	0x000d8158

000d4d2c <_ZN15Response_Packet16IntFromParameterEv>:
int Response_Packet::IntFromParameter()
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
   d4d2c:	7c03      	ldrb	r3, [r0, #16]
   d4d2e:	7c42      	ldrb	r2, [r0, #17]
   d4d30:	eb03 2202 	add.w	r2, r3, r2, lsl #8
	retval = (retval << 8) + ParameterBytes[0];
   d4d34:	7bc3      	ldrb	r3, [r0, #15]
	return retval;
   d4d36:	7b80      	ldrb	r0, [r0, #14]
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
	retval = (retval << 8) + ParameterBytes[0];
   d4d38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return retval;
}
   d4d3c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   d4d40:	4770      	bx	lr

000d4d42 <_ZN15Response_Packet17CalculateChecksumEPhi>:

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
   d4d42:	b510      	push	{r4, lr}
   d4d44:	460b      	mov	r3, r1
	word checksum = 0;
   d4d46:	2000      	movs	r0, #0
	for (int i=0; i<length; i++)
   d4d48:	1a5c      	subs	r4, r3, r1
   d4d4a:	42a2      	cmp	r2, r4
   d4d4c:	dd03      	ble.n	d4d56 <_ZN15Response_Packet17CalculateChecksumEPhi+0x14>
	{
		checksum +=buffer[i];
   d4d4e:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4d52:	4420      	add	r0, r4

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
	word checksum = 0;
	for (int i=0; i<length; i++)
   d4d54:	e7f8      	b.n	d4d48 <_ZN15Response_Packet17CalculateChecksumEPhi+0x6>
	{
		checksum +=buffer[i];
	}
	return checksum;
}
   d4d56:	bd10      	pop	{r4, pc}

000d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>:
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4d58:	4291      	cmp	r1, r2
	return (byte)w&0x00FF;
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
   d4d5a:	b570      	push	{r4, r5, r6, lr}
   d4d5c:	460c      	mov	r4, r1
   d4d5e:	4615      	mov	r5, r2
   d4d60:	461e      	mov	r6, r3
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4d62:	d001      	beq.n	d4d68 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x10>
   d4d64:	4299      	cmp	r1, r3
   d4d66:	d101      	bne.n	d4d6c <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x14>
   d4d68:	2000      	movs	r0, #0
   d4d6a:	bd70      	pop	{r4, r5, r6, pc}
	if ((UseSerialDebug) && (retval))
   d4d6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4d70:	b353      	cbz	r3, d4dc8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x70>
	{
		Serial.print("Response_Packet parsing error ");
   d4d72:	f002 faf9 	bl	d7368 <_Z16_fetch_usbserialv>
   d4d76:	4915      	ldr	r1, [pc, #84]	; (d4dcc <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x74>)
   d4d78:	f002 f894 	bl	d6ea4 <_ZN5Print5printEPKc>
		Serial.print(varname);
   d4d7c:	f002 faf4 	bl	d7368 <_Z16_fetch_usbserialv>
   d4d80:	9904      	ldr	r1, [sp, #16]
   d4d82:	f002 f88f 	bl	d6ea4 <_ZN5Print5printEPKc>
		Serial.print(" ");
   d4d86:	f002 faef 	bl	d7368 <_Z16_fetch_usbserialv>
   d4d8a:	4911      	ldr	r1, [pc, #68]	; (d4dd0 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x78>)
   d4d8c:	f002 f88a 	bl	d6ea4 <_ZN5Print5printEPKc>
		Serial.print(propervalue, HEX);
   d4d90:	f002 faea 	bl	d7368 <_Z16_fetch_usbserialv>
   d4d94:	2210      	movs	r2, #16
   d4d96:	4629      	mov	r1, r5
   d4d98:	f002 f8ce 	bl	d6f38 <_ZN5Print5printEhi>
		Serial.print(" || ");
   d4d9c:	f002 fae4 	bl	d7368 <_Z16_fetch_usbserialv>
   d4da0:	490c      	ldr	r1, [pc, #48]	; (d4dd4 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x7c>)
   d4da2:	f002 f87f 	bl	d6ea4 <_ZN5Print5printEPKc>
		Serial.print(alternatevalue, HEX);
   d4da6:	f002 fadf 	bl	d7368 <_Z16_fetch_usbserialv>
   d4daa:	2210      	movs	r2, #16
   d4dac:	4631      	mov	r1, r6
   d4dae:	f002 f8c3 	bl	d6f38 <_ZN5Print5printEhi>
		Serial.print(" != ");
   d4db2:	f002 fad9 	bl	d7368 <_Z16_fetch_usbserialv>
   d4db6:	4908      	ldr	r1, [pc, #32]	; (d4dd8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x80>)
   d4db8:	f002 f874 	bl	d6ea4 <_ZN5Print5printEPKc>
		Serial.println(b, HEX);
   d4dbc:	f002 fad4 	bl	d7368 <_Z16_fetch_usbserialv>
   d4dc0:	2210      	movs	r2, #16
   d4dc2:	4621      	mov	r1, r4
   d4dc4:	f002 f8ba 	bl	d6f3c <_ZN5Print7printlnEhi>
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4dc8:	2001      	movs	r0, #1
		Serial.print(alternatevalue, HEX);
		Serial.print(" != ");
		Serial.println(b, HEX);
	}
  return retval;
}
   d4dca:	bd70      	pop	{r4, r5, r6, pc}
   d4dcc:	000d817e 	.word	0x000d817e
   d4dd0:	000d861a 	.word	0x000d861a
   d4dd4:	000d819d 	.word	0x000d819d
   d4dd8:	000d81a2 	.word	0x000d81a2

000d4ddc <_ZN15Response_PacketC1EPhb>:

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4dde:	4b3a      	ldr	r3, [pc, #232]	; (d4ec8 <_ZN15Response_PacketC1EPhb+0xec>)

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4de0:	460c      	mov	r4, r1
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4de2:	7809      	ldrb	r1, [r1, #0]
   d4de4:	9300      	str	r3, [sp, #0]
   d4de6:	2355      	movs	r3, #85	; 0x55

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4de8:	4616      	mov	r6, r2
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4dea:	9201      	str	r2, [sp, #4]
   d4dec:	461a      	mov	r2, r3

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d4dee:	4605      	mov	r5, r0
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d4df0:	f7ff ffb2 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[1], COMMAND_START_CODE_2, COMMAND_START_CODE_2, "COMMAND_START_CODE_2", UseSerialDebug);
   d4df4:	4b35      	ldr	r3, [pc, #212]	; (d4ecc <_ZN15Response_PacketC1EPhb+0xf0>)
   d4df6:	7861      	ldrb	r1, [r4, #1]
   d4df8:	9300      	str	r3, [sp, #0]
   d4dfa:	23aa      	movs	r3, #170	; 0xaa
   d4dfc:	461a      	mov	r2, r3
   d4dfe:	9601      	str	r6, [sp, #4]
   d4e00:	4628      	mov	r0, r5
   d4e02:	f7ff ffa9 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[2], COMMAND_DEVICE_ID_1, COMMAND_DEVICE_ID_1, "COMMAND_DEVICE_ID_1", UseSerialDebug);
   d4e06:	4b32      	ldr	r3, [pc, #200]	; (d4ed0 <_ZN15Response_PacketC1EPhb+0xf4>)
   d4e08:	78a1      	ldrb	r1, [r4, #2]
   d4e0a:	9300      	str	r3, [sp, #0]
   d4e0c:	2301      	movs	r3, #1
   d4e0e:	461a      	mov	r2, r3
   d4e10:	9601      	str	r6, [sp, #4]
   d4e12:	4628      	mov	r0, r5
   d4e14:	f7ff ffa0 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[3], COMMAND_DEVICE_ID_2, COMMAND_DEVICE_ID_2, "COMMAND_DEVICE_ID_2", UseSerialDebug);
   d4e18:	4b2e      	ldr	r3, [pc, #184]	; (d4ed4 <_ZN15Response_PacketC1EPhb+0xf8>)
   d4e1a:	78e1      	ldrb	r1, [r4, #3]
   d4e1c:	9300      	str	r3, [sp, #0]
   d4e1e:	2300      	movs	r3, #0
   d4e20:	461a      	mov	r2, r3
   d4e22:	9601      	str	r6, [sp, #4]
   d4e24:	4628      	mov	r0, r5
   d4e26:	f7ff ff97 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[8], 0x30, 0x31, "AckNak_LOW", UseSerialDebug);
   d4e2a:	4b2b      	ldr	r3, [pc, #172]	; (d4ed8 <_ZN15Response_PacketC1EPhb+0xfc>)
   d4e2c:	7a21      	ldrb	r1, [r4, #8]
   d4e2e:	9300      	str	r3, [sp, #0]
   d4e30:	2230      	movs	r2, #48	; 0x30
   d4e32:	2331      	movs	r3, #49	; 0x31
   d4e34:	9601      	str	r6, [sp, #4]
   d4e36:	4628      	mov	r0, r5
   d4e38:	f7ff ff8e 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	if (buffer[8] == 0x30) ACK = true; else ACK = false;
   d4e3c:	7a23      	ldrb	r3, [r4, #8]
   d4e3e:	2b30      	cmp	r3, #48	; 0x30
   d4e40:	bf0c      	ite	eq
   d4e42:	2301      	moveq	r3, #1
   d4e44:	2300      	movne	r3, #0
   d4e46:	752b      	strb	r3, [r5, #20]
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);
   d4e48:	4b24      	ldr	r3, [pc, #144]	; (d4edc <_ZN15Response_PacketC1EPhb+0x100>)
   d4e4a:	7a61      	ldrb	r1, [r4, #9]
   d4e4c:	9300      	str	r3, [sp, #0]
   d4e4e:	2300      	movs	r3, #0
   d4e50:	461a      	mov	r2, r3
   d4e52:	9601      	str	r6, [sp, #4]
   d4e54:	4628      	mov	r0, r5
   d4e56:	f7ff ff7f 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	word checksum = CalculateChecksum(buffer, 10);
   d4e5a:	4621      	mov	r1, r4
   d4e5c:	220a      	movs	r2, #10
   d4e5e:	4628      	mov	r0, r5
   d4e60:	f7ff ff6f 	bl	d4d42 <_ZN15Response_Packet17CalculateChecksumEPhi>
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4e64:	4a1e      	ldr	r2, [pc, #120]	; (d4ee0 <_ZN15Response_PacketC1EPhb+0x104>)
   d4e66:	7aa1      	ldrb	r1, [r4, #10]
   d4e68:	9200      	str	r2, [sp, #0]
}

// Returns the low byte from a word
byte Response_Packet::GetLowByte(word w)
{
	return (byte)w&0x00FF;
   d4e6a:	b2c3      	uxtb	r3, r0
}

// Returns the high byte from a word
byte Response_Packet::GetHighByte(word w)
{
	return (byte)(w>>8)&0x00FF;
   d4e6c:	f3c0 2707 	ubfx	r7, r0, #8, #8
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);

	word checksum = CalculateChecksum(buffer, 10);
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4e70:	461a      	mov	r2, r3
   d4e72:	9601      	str	r6, [sp, #4]
   d4e74:	4628      	mov	r0, r5
   d4e76:	f7ff ff6f 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[11], checksum_high, checksum_high, "Checksum_HIGH", UseSerialDebug);
   d4e7a:	4b1a      	ldr	r3, [pc, #104]	; (d4ee4 <_ZN15Response_PacketC1EPhb+0x108>)
   d4e7c:	7ae1      	ldrb	r1, [r4, #11]
   d4e7e:	9300      	str	r3, [sp, #0]
   d4e80:	463a      	mov	r2, r7
   d4e82:	463b      	mov	r3, r7
   d4e84:	9601      	str	r6, [sp, #4]
   d4e86:	4628      	mov	r0, r5
   d4e88:	f7ff ff66 	bl	d4d58 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	Error = ErrorCodes::ParseFromBytes(buffer[5], buffer[4]);
   d4e8c:	7921      	ldrb	r1, [r4, #4]
   d4e8e:	7960      	ldrb	r0, [r4, #5]
   d4e90:	f7ff ff40 	bl	d4d14 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
   d4e94:	8028      	strh	r0, [r5, #0]

	ParameterBytes[0] = buffer[4];
   d4e96:	7923      	ldrb	r3, [r4, #4]
   d4e98:	73ab      	strb	r3, [r5, #14]
	ParameterBytes[1] = buffer[5];
   d4e9a:	7963      	ldrb	r3, [r4, #5]
   d4e9c:	73eb      	strb	r3, [r5, #15]
	ParameterBytes[2] = buffer[6];
   d4e9e:	79a3      	ldrb	r3, [r4, #6]
   d4ea0:	742b      	strb	r3, [r5, #16]
	ParameterBytes[3] = buffer[7];
   d4ea2:	79e3      	ldrb	r3, [r4, #7]
   d4ea4:	746b      	strb	r3, [r5, #17]
	ResponseBytes[0]=buffer[8];
   d4ea6:	7a23      	ldrb	r3, [r4, #8]
   d4ea8:	74ab      	strb	r3, [r5, #18]
	ResponseBytes[1]=buffer[9];
   d4eaa:	7a63      	ldrb	r3, [r4, #9]
   d4eac:	74eb      	strb	r3, [r5, #19]
   d4eae:	3c01      	subs	r4, #1
   d4eb0:	1c6b      	adds	r3, r5, #1
   d4eb2:	f105 020d 	add.w	r2, r5, #13
	for (int i=0; i < 12; i++)
	{
		RawBytes[i]=buffer[i];
   d4eb6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d4eba:	f803 1f01 	strb.w	r1, [r3, #1]!
	ParameterBytes[1] = buffer[5];
	ParameterBytes[2] = buffer[6];
	ParameterBytes[3] = buffer[7];
	ResponseBytes[0]=buffer[8];
	ResponseBytes[1]=buffer[9];
	for (int i=0; i < 12; i++)
   d4ebe:	4293      	cmp	r3, r2
   d4ec0:	d1f9      	bne.n	d4eb6 <_ZN15Response_PacketC1EPhb+0xda>
	{
		RawBytes[i]=buffer[i];
	}
}
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	b003      	add	sp, #12
   d4ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ec8:	000d81a7 	.word	0x000d81a7
   d4ecc:	000d81bc 	.word	0x000d81bc
   d4ed0:	000d81d1 	.word	0x000d81d1
   d4ed4:	000d81e5 	.word	0x000d81e5
   d4ed8:	000d81f9 	.word	0x000d81f9
   d4edc:	000d8204 	.word	0x000d8204
   d4ee0:	000d8210 	.word	0x000d8210
   d4ee4:	000d821d 	.word	0x000d821d

000d4ee8 <_ZN12FPS_GT521F32C1Ev>:
#ifndef __GNUC__
#pragma region -= Constructor/Destructor =-
#endif  //__GNUC__
// Creates a new object to interface with the fingerprint scanner
//FPS_GT521F32::FPS_GT521F32(uint8_t rx, uint8_t tx)
FPS_GT521F32::FPS_GT521F32()	// Serial pins pre-defined
   d4ee8:	b510      	push	{r4, lr}
   d4eea:	4604      	mov	r4, r0
	//pin_RX = rx;
	//pin_TX = tx;
	//pin_RX = 14;
	//pin_TX = 15;
	//_serial.begin(9600);
	Serial1.begin(9600);
   d4eec:	f002 faf2 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4ef0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ef4:	f002 fae4 	bl	d74c0 <_ZN11USARTSerial5beginEm>
	this->UseSerialDebug = false;
   d4ef8:	2300      	movs	r3, #0
   d4efa:	7023      	strb	r3, [r4, #0]
};
   d4efc:	4620      	mov	r0, r4
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZN12FPS_GT521F32D1Ev>:

// destructor
FPS_GT521F32::~FPS_GT521F32()
   d4f00:	b510      	push	{r4, lr}
   d4f02:	4604      	mov	r4, r0
{
	//_serial.~SoftwareSerial();
	Serial1.~USARTSerial();
   d4f04:	f002 fae6 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4f08:	6803      	ldr	r3, [r0, #0]
   d4f0a:	681b      	ldr	r3, [r3, #0]
   d4f0c:	4798      	blx	r3
	Serial1.end();
   d4f0e:	f002 fae1 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4f12:	f002 fad8 	bl	d74c6 <_ZN11USARTSerial3endEv>
}
   d4f16:	4620      	mov	r0, r4
   d4f18:	bd10      	pop	{r4, pc}
	...

000d4f1c <_ZN12FPS_GT521F3214serialPrintHexEh>:
  Serial.print("\"");
}

// sends a byte to the serial debugger in the hex format we want EX "0F"
void FPS_GT521F32::serialPrintHex(byte data)
{
   d4f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char tmp[16];
  sprintf(tmp, "%.2X",data);
   d4f1e:	460a      	mov	r2, r1
   d4f20:	4668      	mov	r0, sp
   d4f22:	4905      	ldr	r1, [pc, #20]	; (d4f38 <_ZN12FPS_GT521F3214serialPrintHexEh+0x1c>)
   d4f24:	f000 fdf0 	bl	d5b08 <sprintf>
  Serial.print(tmp);
   d4f28:	f002 fa1e 	bl	d7368 <_Z16_fetch_usbserialv>
   d4f2c:	4669      	mov	r1, sp
   d4f2e:	f001 ffb9 	bl	d6ea4 <_ZN5Print5printEPKc>
}
   d4f32:	b005      	add	sp, #20
   d4f34:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f38:	000d822b 	.word	0x000d822b

000d4f3c <_ZN12FPS_GT521F3212SendToSerialEPhi>:
	return rp;
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
   d4f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f3e:	460d      	mov	r5, r1
   d4f40:	4617      	mov	r7, r2
   d4f42:	4606      	mov	r6, r0
  boolean first=true;
  Serial.print("\"");
   d4f44:	f002 fa10 	bl	d7368 <_Z16_fetch_usbserialv>
   d4f48:	490d      	ldr	r1, [pc, #52]	; (d4f80 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x44>)
   d4f4a:	f001 ffab 	bl	d6ea4 <_ZN5Print5printEPKc>
   d4f4e:	462c      	mov	r4, r5
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
  boolean first=true;
   d4f50:	2301      	movs	r3, #1
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4f52:	1b62      	subs	r2, r4, r5
   d4f54:	4297      	cmp	r7, r2
   d4f56:	dd0c      	ble.n	d4f72 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x36>
  {
	if (first) first=false; else Serial.print(" ");
   d4f58:	b923      	cbnz	r3, d4f64 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x28>
   d4f5a:	f002 fa05 	bl	d7368 <_Z16_fetch_usbserialv>
   d4f5e:	4909      	ldr	r1, [pc, #36]	; (d4f84 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x48>)
   d4f60:	f001 ffa0 	bl	d6ea4 <_ZN5Print5printEPKc>
	serialPrintHex(data[i]);
   d4f64:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f68:	4630      	mov	r0, r6
   d4f6a:	f7ff ffd7 	bl	d4f1c <_ZN12FPS_GT521F3214serialPrintHexEh>
   d4f6e:	2300      	movs	r3, #0
// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
  boolean first=true;
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4f70:	e7ef      	b.n	d4f52 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x16>
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4f72:	f002 f9f9 	bl	d7368 <_Z16_fetch_usbserialv>
   d4f76:	4902      	ldr	r1, [pc, #8]	; (d4f80 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x44>)
}
   d4f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for(int i=0; i<length; i++)
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4f7c:	f001 bf92 	b.w	d6ea4 <_ZN5Print5printEPKc>
   d4f80:	000d8230 	.word	0x000d8230
   d4f84:	000d861a 	.word	0x000d861a

000d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>:
#ifndef __GNUC__
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT521F32::SendCommand(byte cmd[], int length)
{
   d4f88:	b570      	push	{r4, r5, r6, lr}
   d4f8a:	4604      	mov	r4, r0
   d4f8c:	460d      	mov	r5, r1
   d4f8e:	4616      	mov	r6, r2
	//_serial.write(cmd, length);
	Serial1.write(cmd, length);
   d4f90:	f002 faa0 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4f94:	6803      	ldr	r3, [r0, #0]
   d4f96:	4632      	mov	r2, r6
   d4f98:	68db      	ldr	r3, [r3, #12]
   d4f9a:	4629      	mov	r1, r5
   d4f9c:	4798      	blx	r3
	if (UseSerialDebug)
   d4f9e:	7823      	ldrb	r3, [r4, #0]
   d4fa0:	b17b      	cbz	r3, d4fc2 <_ZN12FPS_GT521F3211SendCommandEPhi+0x3a>
	{
		Serial.print("FPS - SEND: ");
   d4fa2:	f002 f9e1 	bl	d7368 <_Z16_fetch_usbserialv>
   d4fa6:	4907      	ldr	r1, [pc, #28]	; (d4fc4 <_ZN12FPS_GT521F3211SendCommandEPhi+0x3c>)
   d4fa8:	f001 ff7c 	bl	d6ea4 <_ZN5Print5printEPKc>
		SendToSerial(cmd, length);
   d4fac:	4632      	mov	r2, r6
   d4fae:	4629      	mov	r1, r5
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	f7ff ffc3 	bl	d4f3c <_ZN12FPS_GT521F3212SendToSerialEPhi>
		Serial.println();
   d4fb6:	f002 f9d7 	bl	d7368 <_Z16_fetch_usbserialv>
	}
};
   d4fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial1.write(cmd, length);
	if (UseSerialDebug)
	{
		Serial.print("FPS - SEND: ");
		SendToSerial(cmd, length);
		Serial.println();
   d4fbe:	f001 bf78 	b.w	d6eb2 <_ZN5Print7printlnEv>
   d4fc2:	bd70      	pop	{r4, r5, r6, pc}
   d4fc4:	000d8232 	.word	0x000d8232

000d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>:
	}
};

// Gets the response to the command from the software serial channel (and waits for it)
Response_Packet* FPS_GT521F32::GetResponse()
{
   d4fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fca:	4605      	mov	r5, r0
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
	{
		//firstbyte = (byte)_serial.read();
		firstbyte = (byte)Serial1.read();
   d4fcc:	f002 fa82 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4fd0:	6803      	ldr	r3, [r0, #0]
   d4fd2:	695b      	ldr	r3, [r3, #20]
   d4fd4:	4798      	blx	r3
{
	byte firstbyte = 0;
	bool done = false;
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
   d4fd6:	b2c6      	uxtb	r6, r0
   d4fd8:	2e55      	cmp	r6, #85	; 0x55
   d4fda:	d1f7      	bne.n	d4fcc <_ZN12FPS_GT521F3211GetResponseEv+0x4>
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4fdc:	200c      	movs	r0, #12
   d4fde:	f7ff f85c 	bl	d409a <_Znaj>
	resp[0] = firstbyte;
   d4fe2:	7006      	strb	r6, [r0, #0]
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d4fe4:	4604      	mov	r4, r0
   d4fe6:	4606      	mov	r6, r0
   d4fe8:	f100 070b 	add.w	r7, r0, #11
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
	{
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
   d4fec:	f002 fa72 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d4ff0:	6803      	ldr	r3, [r0, #0]
   d4ff2:	691b      	ldr	r3, [r3, #16]
   d4ff4:	4798      	blx	r3
   d4ff6:	b918      	cbnz	r0, d5000 <_ZN12FPS_GT521F3211GetResponseEv+0x38>
   d4ff8:	200a      	movs	r0, #10
   d4ffa:	f002 f821 	bl	d7040 <delay>
   d4ffe:	e7f5      	b.n	d4fec <_ZN12FPS_GT521F3211GetResponseEv+0x24>
		resp[i]= (byte) Serial1.read();
   d5000:	f002 fa68 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d5004:	6803      	ldr	r3, [r0, #0]
   d5006:	695b      	ldr	r3, [r3, #20]
   d5008:	4798      	blx	r3
   d500a:	f806 0f01 	strb.w	r0, [r6, #1]!
			done = true;
		}
	}
	byte* resp = new byte[12];
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
   d500e:	42b7      	cmp	r7, r6
   d5010:	d1ec      	bne.n	d4fec <_ZN12FPS_GT521F3211GetResponseEv+0x24>
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
		resp[i]= (byte) Serial1.read();
	}
	Response_Packet* rp = new Response_Packet(resp, UseSerialDebug);
   d5012:	2016      	movs	r0, #22
   d5014:	f7ff f83f 	bl	d4096 <_Znwj>
   d5018:	4606      	mov	r6, r0
   d501a:	b118      	cbz	r0, d5024 <_ZN12FPS_GT521F3211GetResponseEv+0x5c>
   d501c:	782a      	ldrb	r2, [r5, #0]
   d501e:	4621      	mov	r1, r4
   d5020:	f7ff fedc 	bl	d4ddc <_ZN15Response_PacketC1EPhb>
	delete resp;
   d5024:	2101      	movs	r1, #1
   d5026:	4620      	mov	r0, r4
   d5028:	f002 fccf 	bl	d79ca <_ZdlPvj>
	if (UseSerialDebug)
   d502c:	782b      	ldrb	r3, [r5, #0]
   d502e:	b18b      	cbz	r3, d5054 <_ZN12FPS_GT521F3211GetResponseEv+0x8c>
	{
		Serial.print("FPS - RECV: ");
   d5030:	f002 f99a 	bl	d7368 <_Z16_fetch_usbserialv>
   d5034:	4908      	ldr	r1, [pc, #32]	; (d5058 <_ZN12FPS_GT521F3211GetResponseEv+0x90>)
   d5036:	f001 ff35 	bl	d6ea4 <_ZN5Print5printEPKc>
		SendToSerial(rp->RawBytes, 12);
   d503a:	220c      	movs	r2, #12
   d503c:	1cb1      	adds	r1, r6, #2
   d503e:	4628      	mov	r0, r5
   d5040:	f7ff ff7c 	bl	d4f3c <_ZN12FPS_GT521F3212SendToSerialEPhi>
		Serial.println();
   d5044:	f002 f990 	bl	d7368 <_Z16_fetch_usbserialv>
   d5048:	f001 ff33 	bl	d6eb2 <_ZN5Print7printlnEv>
		Serial.println();
   d504c:	f002 f98c 	bl	d7368 <_Z16_fetch_usbserialv>
   d5050:	f001 ff2f 	bl	d6eb2 <_ZN5Print7printlnEv>
	}
	return rp;
};
   d5054:	4630      	mov	r0, r6
   d5056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5058:	000d823f 	.word	0x000d823f

000d505c <_ZN12FPS_GT521F324OpenEv>:
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
   d505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UseSerialDebug) Serial.println("FPS - Open");
   d505e:	7803      	ldrb	r3, [r0, #0]
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
   d5060:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - Open");
   d5062:	b123      	cbz	r3, d506e <_ZN12FPS_GT521F324OpenEv+0x12>
   d5064:	f002 f980 	bl	d7368 <_Z16_fetch_usbserialv>
   d5068:	4912      	ldr	r1, [pc, #72]	; (d50b4 <_ZN12FPS_GT521F324OpenEv+0x58>)
   d506a:	f001 ff2e 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d506e:	2007      	movs	r0, #7
   d5070:	f7ff f811 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Open;
   d5074:	2701      	movs	r7, #1
	cp->Parameter[0] = 0x00;
   d5076:	2300      	movs	r3, #0
   d5078:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d507a:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d507c:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d507e:	7103      	strb	r3, [r0, #4]
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Open;
   d5080:	7007      	strb	r7, [r0, #0]
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
   d5082:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d5084:	f7ff fe22 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d5088:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d508a:	4606      	mov	r6, r0
	delete cp;
   d508c:	4620      	mov	r0, r4
   d508e:	f002 fc9c 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5092:	4631      	mov	r1, r6
   d5094:	220c      	movs	r2, #12
   d5096:	4628      	mov	r0, r5
   d5098:	f7ff ff76 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d509c:	4628      	mov	r0, r5
   d509e:	f7ff ff93 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	delete rp;
   d50a2:	2116      	movs	r1, #22
   d50a4:	f002 fc91 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d50a8:	4639      	mov	r1, r7
   d50aa:	4630      	mov	r0, r6
}
   d50ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	delete rp;
	delete packetbytes;
   d50b0:	f002 bc8b 	b.w	d79ca <_ZdlPvj>
   d50b4:	000d824c 	.word	0x000d824c

000d50b8 <_ZN12FPS_GT521F326SetLEDEb>:

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
   d50b8:	b570      	push	{r4, r5, r6, lr}
   d50ba:	4605      	mov	r5, r0
	Command_Packet* cp = new Command_Packet();
   d50bc:	2007      	movs	r0, #7

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
   d50be:	460e      	mov	r6, r1
	Command_Packet* cp = new Command_Packet();
   d50c0:	f7fe ffe9 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CmosLed;
   d50c4:	2312      	movs	r3, #18
   d50c6:	7003      	strb	r3, [r0, #0]
// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
	Command_Packet* cp = new Command_Packet();
   d50c8:	4604      	mov	r4, r0
   d50ca:	782b      	ldrb	r3, [r5, #0]
	cp->Command = Command_Packet::Commands::CmosLed;
	if (on)
   d50cc:	b13e      	cbz	r6, d50de <_ZN12FPS_GT521F326SetLEDEb+0x26>
	{
		if (UseSerialDebug) Serial.println("FPS - LED on");
   d50ce:	b123      	cbz	r3, d50da <_ZN12FPS_GT521F326SetLEDEb+0x22>
   d50d0:	f002 f94a 	bl	d7368 <_Z16_fetch_usbserialv>
   d50d4:	4915      	ldr	r1, [pc, #84]	; (d512c <_ZN12FPS_GT521F326SetLEDEb+0x74>)
   d50d6:	f001 fef8 	bl	d6eca <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x01;
   d50da:	2301      	movs	r3, #1
   d50dc:	e006      	b.n	d50ec <_ZN12FPS_GT521F326SetLEDEb+0x34>
	}
	else
	{
		if (UseSerialDebug) Serial.println("FPS - LED off");
   d50de:	b123      	cbz	r3, d50ea <_ZN12FPS_GT521F326SetLEDEb+0x32>
   d50e0:	f002 f942 	bl	d7368 <_Z16_fetch_usbserialv>
   d50e4:	4912      	ldr	r1, [pc, #72]	; (d5130 <_ZN12FPS_GT521F326SetLEDEb+0x78>)
   d50e6:	f001 fef0 	bl	d6eca <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x00;
   d50ea:	2300      	movs	r3, #0
   d50ec:	7063      	strb	r3, [r4, #1]
	}
	cp->Parameter[1] = 0x00;
   d50ee:	2300      	movs	r3, #0
   d50f0:	70a3      	strb	r3, [r4, #2]
	cp->Parameter[2] = 0x00;
   d50f2:	70e3      	strb	r3, [r4, #3]
	cp->Parameter[3] = 0x00;
   d50f4:	7123      	strb	r3, [r4, #4]
	byte* packetbytes = cp->GetPacketBytes();
   d50f6:	4620      	mov	r0, r4
   d50f8:	f7ff fde8 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d50fc:	2107      	movs	r1, #7
		cp->Parameter[0] = 0x00;
	}
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d50fe:	4606      	mov	r6, r0
	delete cp;
   d5100:	4620      	mov	r0, r4
   d5102:	f002 fc62 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5106:	220c      	movs	r2, #12
   d5108:	4631      	mov	r1, r6
   d510a:	4628      	mov	r0, r5
   d510c:	f7ff ff3c 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d5110:	4628      	mov	r0, r5
   d5112:	f7ff ff59 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = true;
	if (rp->ACK == false) retval = false;
	delete rp;
   d5116:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = true;
	if (rp->ACK == false) retval = false;
   d5118:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d511a:	f002 fc56 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d511e:	4630      	mov	r0, r6
   d5120:	2101      	movs	r1, #1
   d5122:	f002 fc52 	bl	d79ca <_ZdlPvj>
	return retval;
};
   d5126:	4620      	mov	r0, r4
   d5128:	bd70      	pop	{r4, r5, r6, pc}
   d512a:	bf00      	nop
   d512c:	000d8263 	.word	0x000d8263
   d5130:	000d8270 	.word	0x000d8270

000d5134 <_ZN12FPS_GT521F3213CheckEnrolledEi>:
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
   d5134:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d5136:	7803      	ldrb	r3, [r0, #0]
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
   d5138:	4604      	mov	r4, r0
   d513a:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d513c:	b123      	cbz	r3, d5148 <_ZN12FPS_GT521F3213CheckEnrolledEi+0x14>
   d513e:	f002 f913 	bl	d7368 <_Z16_fetch_usbserialv>
   d5142:	4912      	ldr	r1, [pc, #72]	; (d518c <_ZN12FPS_GT521F3213CheckEnrolledEi+0x58>)
   d5144:	f001 fec1 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d5148:	2007      	movs	r0, #7
   d514a:	f7fe ffa4 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CheckEnrolled;
   d514e:	2321      	movs	r3, #33	; 0x21
   d5150:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d5152:	4631      	mov	r1, r6
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
   d5154:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
   d5156:	f7ff fda3 	bl	d4ca0 <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d515a:	f7ff fdb7 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d515e:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d5160:	4606      	mov	r6, r0
	delete cp;
   d5162:	4628      	mov	r0, r5
   d5164:	f002 fc31 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5168:	220c      	movs	r2, #12
   d516a:	4631      	mov	r1, r6
   d516c:	4620      	mov	r0, r4
   d516e:	f7ff ff0b 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d5172:	2101      	movs	r1, #1
   d5174:	4630      	mov	r0, r6
   d5176:	f002 fc28 	bl	d79ca <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ff24 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = false;
	retval = rp->ACK;
   d5180:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d5182:	2116      	movs	r1, #22
   d5184:	f002 fc21 	bl	d79ca <_ZdlPvj>
	return retval;
}
   d5188:	4620      	mov	r0, r4
   d518a:	bd70      	pop	{r4, r5, r6, pc}
   d518c:	000d82aa 	.word	0x000d82aa

000d5190 <_ZN12FPS_GT521F3211EnrollStartEi>:
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
   d5190:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d5192:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
   d5194:	4604      	mov	r4, r0
   d5196:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d5198:	b123      	cbz	r3, d51a4 <_ZN12FPS_GT521F3211EnrollStartEi+0x14>
   d519a:	f002 f8e5 	bl	d7368 <_Z16_fetch_usbserialv>
   d519e:	491d      	ldr	r1, [pc, #116]	; (d5214 <_ZN12FPS_GT521F3211EnrollStartEi+0x84>)
   d51a0:	f001 fe93 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d51a4:	2007      	movs	r0, #7
   d51a6:	f7fe ff76 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::EnrollStart;
   d51aa:	2322      	movs	r3, #34	; 0x22
   d51ac:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d51ae:	4631      	mov	r1, r6
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
   d51b0:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
   d51b2:	f7ff fd75 	bl	d4ca0 <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d51b6:	f7ff fd89 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d51ba:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d51bc:	4606      	mov	r6, r0
	delete cp;
   d51be:	4628      	mov	r0, r5
   d51c0:	f002 fc03 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d51c4:	220c      	movs	r2, #12
   d51c6:	4631      	mov	r1, r6
   d51c8:	4620      	mov	r0, r4
   d51ca:	f7ff fedd 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d51ce:	2101      	movs	r1, #1
   d51d0:	4630      	mov	r0, r6
   d51d2:	f002 fbfa 	bl	d79ca <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7ff fef6 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	int retval = 0;
	if (rp->ACK == false)
   d51dc:	7d03      	ldrb	r3, [r0, #20]
   d51de:	b97b      	cbnz	r3, d5200 <_ZN12FPS_GT521F3211EnrollStartEi+0x70>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d51e0:	8803      	ldrh	r3, [r0, #0]
   d51e2:	f241 0209 	movw	r2, #4105	; 0x1009
   d51e6:	4293      	cmp	r3, r2
   d51e8:	d00c      	beq.n	d5204 <_ZN12FPS_GT521F3211EnrollStartEi+0x74>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d51ea:	f241 0203 	movw	r2, #4099	; 0x1003
   d51ee:	4293      	cmp	r3, r2
   d51f0:	d00a      	beq.n	d5208 <_ZN12FPS_GT521F3211EnrollStartEi+0x78>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
   d51f2:	f241 0405 	movw	r4, #4101	; 0x1005
   d51f6:	42a3      	cmp	r3, r4
   d51f8:	bf0c      	ite	eq
   d51fa:	2403      	moveq	r4, #3
   d51fc:	2400      	movne	r4, #0
   d51fe:	e004      	b.n	d520a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = 0;
   d5200:	2400      	movs	r4, #0
   d5202:	e002      	b.n	d520a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d5204:	2401      	movs	r4, #1
   d5206:	e000      	b.n	d520a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d5208:	2402      	movs	r4, #2
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
	}
	delete rp;
   d520a:	2116      	movs	r1, #22
   d520c:	f002 fbdd 	bl	d79ca <_ZdlPvj>
	return retval;
}
   d5210:	4620      	mov	r0, r4
   d5212:	bd70      	pop	{r4, r5, r6, pc}
   d5214:	000d82be 	.word	0x000d82be

000d5218 <_ZN12FPS_GT521F327Enroll1Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
   d5218:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d521a:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
   d521c:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d521e:	b123      	cbz	r3, d522a <_ZN12FPS_GT521F327Enroll1Ev+0x12>
   d5220:	f002 f8a2 	bl	d7368 <_Z16_fetch_usbserialv>
   d5224:	491d      	ldr	r1, [pc, #116]	; (d529c <_ZN12FPS_GT521F327Enroll1Ev+0x84>)
   d5226:	f001 fe50 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d522a:	2007      	movs	r0, #7
   d522c:	f7fe ff33 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll1;
   d5230:	2323      	movs	r3, #35	; 0x23
   d5232:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
   d5234:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d5236:	f7ff fd49 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d523a:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d523c:	4605      	mov	r5, r0
	delete cp;
   d523e:	4630      	mov	r0, r6
   d5240:	f002 fbc3 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5244:	220c      	movs	r2, #12
   d5246:	4620      	mov	r0, r4
   d5248:	4629      	mov	r1, r5
   d524a:	f7ff fe9d 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d524e:	2101      	movs	r1, #1
   d5250:	4628      	mov	r0, r5
   d5252:	f002 fbba 	bl	d79ca <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff feb6 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
   d525c:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d525e:	f7ff fd65 	bl	d4d2c <_ZN15Response_Packet16IntFromParameterEv>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d5262:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d5264:	28c7      	cmp	r0, #199	; 0xc7
   d5266:	bfd4      	ite	le
   d5268:	2403      	movle	r4, #3
   d526a:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d526c:	b95b      	cbnz	r3, d5286 <_ZN12FPS_GT521F327Enroll1Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d526e:	882b      	ldrh	r3, [r5, #0]
   d5270:	f241 020d 	movw	r2, #4109	; 0x100d
   d5274:	4293      	cmp	r3, r2
   d5276:	d005      	beq.n	d5284 <_ZN12FPS_GT521F327Enroll1Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d5278:	f241 020c 	movw	r2, #4108	; 0x100c
   d527c:	4293      	cmp	r3, r2
   d527e:	bf08      	it	eq
   d5280:	2402      	moveq	r4, #2
   d5282:	e000      	b.n	d5286 <_ZN12FPS_GT521F327Enroll1Ev+0x6e>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d5284:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d5286:	4628      	mov	r0, r5
   d5288:	2116      	movs	r1, #22
   d528a:	f002 fb9e 	bl	d79ca <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d528e:	7d2b      	ldrb	r3, [r5, #20]
   d5290:	2b00      	cmp	r3, #0
}
   d5292:	bf0c      	ite	eq
   d5294:	4620      	moveq	r0, r4
   d5296:	2000      	movne	r0, #0
   d5298:	bd70      	pop	{r4, r5, r6, pc}
   d529a:	bf00      	nop
   d529c:	000d82d0 	.word	0x000d82d0

000d52a0 <_ZN12FPS_GT521F327Enroll2Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
   d52a0:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d52a2:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
   d52a4:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d52a6:	b123      	cbz	r3, d52b2 <_ZN12FPS_GT521F327Enroll2Ev+0x12>
   d52a8:	f002 f85e 	bl	d7368 <_Z16_fetch_usbserialv>
   d52ac:	491d      	ldr	r1, [pc, #116]	; (d5324 <_ZN12FPS_GT521F327Enroll2Ev+0x84>)
   d52ae:	f001 fe0c 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d52b2:	2007      	movs	r0, #7
   d52b4:	f7fe feef 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll2;
   d52b8:	2324      	movs	r3, #36	; 0x24
   d52ba:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
   d52bc:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d52be:	f7ff fd05 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d52c2:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d52c4:	4605      	mov	r5, r0
	delete cp;
   d52c6:	4630      	mov	r0, r6
   d52c8:	f002 fb7f 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d52cc:	220c      	movs	r2, #12
   d52ce:	4620      	mov	r0, r4
   d52d0:	4629      	mov	r1, r5
   d52d2:	f7ff fe59 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d52d6:	2101      	movs	r1, #1
   d52d8:	4628      	mov	r0, r5
   d52da:	f002 fb76 	bl	d79ca <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d52de:	4620      	mov	r0, r4
   d52e0:	f7ff fe72 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
   d52e4:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d52e6:	f7ff fd21 	bl	d4d2c <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d52ea:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d52ec:	28c7      	cmp	r0, #199	; 0xc7
   d52ee:	bfd4      	ite	le
   d52f0:	2403      	movle	r4, #3
   d52f2:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d52f4:	b95b      	cbnz	r3, d530e <_ZN12FPS_GT521F327Enroll2Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d52f6:	882b      	ldrh	r3, [r5, #0]
   d52f8:	f241 020d 	movw	r2, #4109	; 0x100d
   d52fc:	4293      	cmp	r3, r2
   d52fe:	d005      	beq.n	d530c <_ZN12FPS_GT521F327Enroll2Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d5300:	f241 020c 	movw	r2, #4108	; 0x100c
   d5304:	4293      	cmp	r3, r2
   d5306:	bf08      	it	eq
   d5308:	2402      	moveq	r4, #2
   d530a:	e000      	b.n	d530e <_ZN12FPS_GT521F327Enroll2Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d530c:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d530e:	4628      	mov	r0, r5
   d5310:	2116      	movs	r1, #22
   d5312:	f002 fb5a 	bl	d79ca <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d5316:	7d2b      	ldrb	r3, [r5, #20]
   d5318:	2b00      	cmp	r3, #0
}
   d531a:	bf0c      	ite	eq
   d531c:	4620      	moveq	r0, r4
   d531e:	2000      	movne	r0, #0
   d5320:	bd70      	pop	{r4, r5, r6, pc}
   d5322:	bf00      	nop
   d5324:	000d82de 	.word	0x000d82de

000d5328 <_ZN12FPS_GT521F327Enroll3Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
   d5328:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d532a:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
   d532c:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d532e:	b123      	cbz	r3, d533a <_ZN12FPS_GT521F327Enroll3Ev+0x12>
   d5330:	f002 f81a 	bl	d7368 <_Z16_fetch_usbserialv>
   d5334:	491d      	ldr	r1, [pc, #116]	; (d53ac <_ZN12FPS_GT521F327Enroll3Ev+0x84>)
   d5336:	f001 fdc8 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d533a:	2007      	movs	r0, #7
   d533c:	f7fe feab 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll3;
   d5340:	2325      	movs	r3, #37	; 0x25
   d5342:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
   d5344:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d5346:	f7ff fcc1 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d534a:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d534c:	4605      	mov	r5, r0
	delete cp;
   d534e:	4630      	mov	r0, r6
   d5350:	f002 fb3b 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5354:	220c      	movs	r2, #12
   d5356:	4620      	mov	r0, r4
   d5358:	4629      	mov	r1, r5
   d535a:	f7ff fe15 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d535e:	2101      	movs	r1, #1
   d5360:	4628      	mov	r0, r5
   d5362:	f002 fb32 	bl	d79ca <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d5366:	4620      	mov	r0, r4
   d5368:	f7ff fe2e 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
   d536c:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d536e:	f7ff fcdd 	bl	d4d2c <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d5372:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
   d5374:	28c7      	cmp	r0, #199	; 0xc7
   d5376:	bfd4      	ite	le
   d5378:	2403      	movle	r4, #3
   d537a:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d537c:	b95b      	cbnz	r3, d5396 <_ZN12FPS_GT521F327Enroll3Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d537e:	882b      	ldrh	r3, [r5, #0]
   d5380:	f241 020d 	movw	r2, #4109	; 0x100d
   d5384:	4293      	cmp	r3, r2
   d5386:	d005      	beq.n	d5394 <_ZN12FPS_GT521F327Enroll3Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d5388:	f241 020c 	movw	r2, #4108	; 0x100c
   d538c:	4293      	cmp	r3, r2
   d538e:	bf08      	it	eq
   d5390:	2402      	moveq	r4, #2
   d5392:	e000      	b.n	d5396 <_ZN12FPS_GT521F327Enroll3Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d5394:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d5396:	4628      	mov	r0, r5
   d5398:	2116      	movs	r1, #22
   d539a:	f002 fb16 	bl	d79ca <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d539e:	7d2b      	ldrb	r3, [r5, #20]
   d53a0:	2b00      	cmp	r3, #0
}
   d53a2:	bf0c      	ite	eq
   d53a4:	4620      	moveq	r0, r4
   d53a6:	2000      	movne	r0, #0
   d53a8:	bd70      	pop	{r4, r5, r6, pc}
   d53aa:	bf00      	nop
   d53ac:	000d82ec 	.word	0x000d82ec

000d53b0 <_ZN12FPS_GT521F3213IsPressFingerEv>:

// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT521F32::IsPressFinger()
{
   d53b0:	b570      	push	{r4, r5, r6, lr}
   d53b2:	4605      	mov	r5, r0
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d53b4:	2007      	movs	r0, #7
   d53b6:	f7fe fe6e 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::IsPressFinger;
   d53ba:	2326      	movs	r3, #38	; 0x26
   d53bc:	7003      	strb	r3, [r0, #0]
// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT521F32::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d53be:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d53c0:	f7ff fc84 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d53c4:	2107      	movs	r1, #7
bool FPS_GT521F32::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d53c6:	4604      	mov	r4, r0
	delete cp;
   d53c8:	4630      	mov	r0, r6
   d53ca:	f002 fafe 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d53ce:	4628      	mov	r0, r5
   d53d0:	4621      	mov	r1, r4
   d53d2:	220c      	movs	r2, #12
   d53d4:	f7ff fdd8 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d53d8:	4628      	mov	r0, r5
   d53da:	f7ff fdf5 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d53de:	7bc1      	ldrb	r1, [r0, #15]
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
   d53e0:	7b83      	ldrb	r3, [r0, #14]
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d53e2:	7c42      	ldrb	r2, [r0, #17]
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d53e4:	440b      	add	r3, r1
	pval += rp->ParameterBytes[2];
   d53e6:	7c01      	ldrb	r1, [r0, #16]
   d53e8:	440b      	add	r3, r1
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d53ea:	42da      	cmn	r2, r3
	delete rp;
   d53ec:	f04f 0116 	mov.w	r1, #22
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d53f0:	bf0c      	ite	eq
   d53f2:	2501      	moveq	r5, #1
   d53f4:	2500      	movne	r5, #0
	delete rp;
   d53f6:	f002 fae8 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d53fa:	4620      	mov	r0, r4
   d53fc:	2101      	movs	r1, #1
   d53fe:	f002 fae4 	bl	d79ca <_ZdlPvj>
	return retval;
}
   d5402:	4628      	mov	r0, r5
   d5404:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5408 <_ZN12FPS_GT521F328DeleteIDEi>:
// Deletes the specified ID (enrollment) from the database
// Parameter: 0-2999, if using GT-521F52 (id number to be deleted)
//            0-199, if using GT-521F32/GT-511C3(id number to be deleted)
// Returns: true if successful, false if position invalid
bool FPS_GT521F32::DeleteID(int id)
{
   d5408:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - DeleteID");
   d540a:	7803      	ldrb	r3, [r0, #0]
// Deletes the specified ID (enrollment) from the database
// Parameter: 0-2999, if using GT-521F52 (id number to be deleted)
//            0-199, if using GT-521F32/GT-511C3(id number to be deleted)
// Returns: true if successful, false if position invalid
bool FPS_GT521F32::DeleteID(int id)
{
   d540c:	4604      	mov	r4, r0
   d540e:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - DeleteID");
   d5410:	b123      	cbz	r3, d541c <_ZN12FPS_GT521F328DeleteIDEi+0x14>
   d5412:	f001 ffa9 	bl	d7368 <_Z16_fetch_usbserialv>
   d5416:	4912      	ldr	r1, [pc, #72]	; (d5460 <_ZN12FPS_GT521F328DeleteIDEi+0x58>)
   d5418:	f001 fd57 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d541c:	2007      	movs	r0, #7
   d541e:	f7fe fe3a 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::DeleteID;
   d5422:	2340      	movs	r3, #64	; 0x40
   d5424:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d5426:	4631      	mov	r1, r6
//            0-199, if using GT-521F32/GT-511C3(id number to be deleted)
// Returns: true if successful, false if position invalid
bool FPS_GT521F32::DeleteID(int id)
{
	if (UseSerialDebug) Serial.println("FPS - DeleteID");
	Command_Packet* cp = new Command_Packet();
   d5428:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::DeleteID;
	cp->ParameterFromInt(id);
   d542a:	f7ff fc39 	bl	d4ca0 <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d542e:	f7ff fc4d 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d5432:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - DeleteID");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::DeleteID;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d5434:	4606      	mov	r6, r0
	delete cp;
   d5436:	4628      	mov	r0, r5
   d5438:	f002 fac7 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d543c:	220c      	movs	r2, #12
   d543e:	4631      	mov	r1, r6
   d5440:	4620      	mov	r0, r4
   d5442:	f7ff fda1 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d5446:	4620      	mov	r0, r4
   d5448:	f7ff fdbe 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = rp->ACK;
	delete rp;
   d544c:	2116      	movs	r1, #22
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = rp->ACK;
   d544e:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d5450:	f002 fabb 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d5454:	4630      	mov	r0, r6
   d5456:	2101      	movs	r1, #1
   d5458:	f002 fab7 	bl	d79ca <_ZdlPvj>
	return retval;
}
   d545c:	4620      	mov	r0, r4
   d545e:	bd70      	pop	{r4, r5, r6, pc}
   d5460:	000d82fa 	.word	0x000d82fa

000d5464 <_ZN12FPS_GT521F3211Identify1_NEv>:
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
   d5464:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d5466:	7803      	ldrb	r3, [r0, #0]
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
   d5468:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d546a:	b123      	cbz	r3, d5476 <_ZN12FPS_GT521F3211Identify1_NEv+0x12>
   d546c:	f001 ff7c 	bl	d7368 <_Z16_fetch_usbserialv>
   d5470:	4914      	ldr	r1, [pc, #80]	; (d54c4 <_ZN12FPS_GT521F3211Identify1_NEv+0x60>)
   d5472:	f001 fd2a 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d5476:	2007      	movs	r0, #7
   d5478:	f7fe fe0d 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Identify1_N;
   d547c:	2351      	movs	r3, #81	; 0x51
   d547e:	7003      	strb	r3, [r0, #0]
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
   d5480:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d5482:	f7ff fc23 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d5486:	2107      	movs	r1, #7
int FPS_GT521F32::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d5488:	4605      	mov	r5, r0
	delete cp;
   d548a:	4630      	mov	r0, r6
   d548c:	f002 fa9d 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5490:	220c      	movs	r2, #12
   d5492:	4629      	mov	r1, r5
   d5494:	4620      	mov	r0, r4
   d5496:	f7ff fd77 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d549a:	4620      	mov	r0, r4
   d549c:	f7ff fd94 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
   d54a0:	4606      	mov	r6, r0
	int retval = rp->IntFromParameter();
   d54a2:	f7ff fc43 	bl	d4d2c <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d54a6:	2116      	movs	r1, #22
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
   d54a8:	4604      	mov	r4, r0
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d54aa:	4630      	mov	r0, r6
   d54ac:	f002 fa8d 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d54b0:	4628      	mov	r0, r5
   d54b2:	2101      	movs	r1, #1
   d54b4:	f002 fa89 	bl	d79ca <_ZdlPvj>
	return retval;
}
   d54b8:	2cc8      	cmp	r4, #200	; 0xc8
   d54ba:	4620      	mov	r0, r4
   d54bc:	bfa8      	it	ge
   d54be:	20c8      	movge	r0, #200	; 0xc8
   d54c0:	bd70      	pop	{r4, r5, r6, pc}
   d54c2:	bf00      	nop
   d54c4:	000d8329 	.word	0x000d8329

000d54c8 <_ZN12FPS_GT521F3213CaptureFingerEb>:
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
   d54c8:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d54ca:	7803      	ldrb	r3, [r0, #0]
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
   d54cc:	4606      	mov	r6, r0
   d54ce:	460d      	mov	r5, r1
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d54d0:	b123      	cbz	r3, d54dc <_ZN12FPS_GT521F3213CaptureFingerEb+0x14>
   d54d2:	f001 ff49 	bl	d7368 <_Z16_fetch_usbserialv>
   d54d6:	4917      	ldr	r1, [pc, #92]	; (d5534 <_ZN12FPS_GT521F3213CaptureFingerEb+0x6c>)
   d54d8:	f001 fcf7 	bl	d6eca <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d54dc:	2007      	movs	r0, #7
   d54de:	f7fe fdda 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d54e2:	2360      	movs	r3, #96	; 0x60
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
	Command_Packet* cp = new Command_Packet();
   d54e4:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d54e6:	7003      	strb	r3, [r0, #0]
	if (highquality)
   d54e8:	b135      	cbz	r5, d54f8 <_ZN12FPS_GT521F3213CaptureFingerEb+0x30>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d54ea:	2301      	movs	r3, #1
   d54ec:	7043      	strb	r3, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d54ee:	2300      	movs	r3, #0
   d54f0:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d54f2:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d54f4:	7103      	strb	r3, [r0, #4]
   d54f6:	e003      	b.n	d5500 <_ZN12FPS_GT521F3213CaptureFingerEb+0x38>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d54f8:	7045      	strb	r5, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d54fa:	7085      	strb	r5, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d54fc:	70c5      	strb	r5, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d54fe:	7105      	strb	r5, [r0, #4]
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d5500:	4620      	mov	r0, r4
   d5502:	f7ff fbe3 	bl	d4ccc <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d5506:	2107      	movs	r1, #7
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d5508:	4605      	mov	r5, r0
	delete cp;
   d550a:	4620      	mov	r0, r4
   d550c:	f002 fa5d 	bl	d79ca <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d5510:	220c      	movs	r2, #12
   d5512:	4629      	mov	r1, r5
   d5514:	4630      	mov	r0, r6
   d5516:	f7ff fd37 	bl	d4f88 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d551a:	4630      	mov	r0, r6
   d551c:	f7ff fd54 	bl	d4fc8 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = rp->ACK;
	delete rp;
   d5520:	2116      	movs	r1, #22
	}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = rp->ACK;
   d5522:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d5524:	f002 fa51 	bl	d79ca <_ZdlPvj>
	delete packetbytes;
   d5528:	4628      	mov	r0, r5
   d552a:	2101      	movs	r1, #1
   d552c:	f002 fa4d 	bl	d79ca <_ZdlPvj>
	return retval;

}
   d5530:	4620      	mov	r0, r4
   d5532:	bd70      	pop	{r4, r5, r6, pc}
   d5534:	000d833b 	.word	0x000d833b

000d5538 <_GLOBAL__sub_I__ZN14Command_Packet14GetPacketBytesEv>:
   d5538:	f000 b810 	b.w	d555c <HAL_Pin_Map>

000d553c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <netdb_freeaddrinfo+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	689b      	ldr	r3, [r3, #8]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030268 	.word	0x00030268

000d554c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <netdb_getaddrinfo+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	68db      	ldr	r3, [r3, #12]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030268 	.word	0x00030268

000d555c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_Pin_Map+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	681b      	ldr	r3, [r3, #0]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	0003022c 	.word	0x0003022c

000d556c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_Validate_Pin_Function+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	685b      	ldr	r3, [r3, #4]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003022c 	.word	0x0003022c

000d557c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_Pin_Mode+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	689b      	ldr	r3, [r3, #8]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003022c 	.word	0x0003022c

000d558c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_Get_Pin_Mode+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	68db      	ldr	r3, [r3, #12]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003022c 	.word	0x0003022c

000d559c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_GPIO_Write+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	691b      	ldr	r3, [r3, #16]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003022c 	.word	0x0003022c

000d55ac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_GPIO_Read+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	695b      	ldr	r3, [r3, #20]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003022c 	.word	0x0003022c

000d55bc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_SPI_Init+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	69db      	ldr	r3, [r3, #28]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030230 	.word	0x00030230

000d55cc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <HAL_SPI_Is_Enabled+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6a1b      	ldr	r3, [r3, #32]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030230 	.word	0x00030230

000d55dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <HAL_RNG_GetRandomNumber+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	685b      	ldr	r3, [r3, #4]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030218 	.word	0x00030218

000d55ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <HAL_Delay_Microseconds+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	68db      	ldr	r3, [r3, #12]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030218 	.word	0x00030218

000d55fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	695b      	ldr	r3, [r3, #20]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030218 	.word	0x00030218

000d560c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <HAL_EEPROM_Init+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030218 	.word	0x00030218

000d561c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <HAL_EEPROM_Read+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030218 	.word	0x00030218

000d562c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <HAL_EEPROM_Write+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030218 	.word	0x00030218

000d563c <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <HAL_EEPROM_Length+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030218 	.word	0x00030218

000d564c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <HAL_EEPROM_Put+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030218 	.word	0x00030218

000d565c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <hal_ble_stack_init+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	689b      	ldr	r3, [r3, #8]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030274 	.word	0x00030274

000d566c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <hal_ble_gap_set_advertising_data+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030274 	.word	0x00030274

000d567c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <hal_ble_gap_set_scan_response_data+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030274 	.word	0x00030274

000d568c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <hal_ble_gap_start_advertising+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030274 	.word	0x00030274

000d569c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b03      	ldr	r3, [pc, #12]	; (d56ac <hal_ble_gap_disconnect+0x10>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d56a6:	9301      	str	r3, [sp, #4]
   d56a8:	bd08      	pop	{r3, pc}
   d56aa:	0000      	.short	0x0000
   d56ac:	00030274 	.word	0x00030274

000d56b0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b03      	ldr	r3, [pc, #12]	; (d56c0 <hal_ble_gatt_server_add_service+0x10>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d56ba:	9301      	str	r3, [sp, #4]
   d56bc:	bd08      	pop	{r3, pc}
   d56be:	0000      	.short	0x0000
   d56c0:	00030274 	.word	0x00030274

000d56c4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b03      	ldr	r3, [pc, #12]	; (d56d4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d56ce:	9301      	str	r3, [sp, #4]
   d56d0:	bd08      	pop	{r3, pc}
   d56d2:	0000      	.short	0x0000
   d56d4:	00030274 	.word	0x00030274

000d56d8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b03      	ldr	r3, [pc, #12]	; (d56e8 <hal_ble_gatt_client_write_with_response+0x10>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d56e2:	9301      	str	r3, [sp, #4]
   d56e4:	bd08      	pop	{r3, pc}
   d56e6:	0000      	.short	0x0000
   d56e8:	00030274 	.word	0x00030274

000d56ec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b03      	ldr	r3, [pc, #12]	; (d56fc <hal_ble_gatt_client_write_without_response+0x10>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d56f6:	9301      	str	r3, [sp, #4]
   d56f8:	bd08      	pop	{r3, pc}
   d56fa:	0000      	.short	0x0000
   d56fc:	00030274 	.word	0x00030274

000d5700 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b03      	ldr	r3, [pc, #12]	; (d5710 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d570a:	9301      	str	r3, [sp, #4]
   d570c:	bd08      	pop	{r3, pc}
   d570e:	0000      	.short	0x0000
   d5710:	00030274 	.word	0x00030274

000d5714 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b03      	ldr	r3, [pc, #12]	; (d5724 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d571e:	9301      	str	r3, [sp, #4]
   d5720:	bd08      	pop	{r3, pc}
   d5722:	0000      	.short	0x0000
   d5724:	00030274 	.word	0x00030274

000d5728 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b03      	ldr	r3, [pc, #12]	; (d5738 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5732:	9301      	str	r3, [sp, #4]
   d5734:	bd08      	pop	{r3, pc}
   d5736:	0000      	.short	0x0000
   d5738:	00030274 	.word	0x00030274

000d573c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b03      	ldr	r3, [pc, #12]	; (d574c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5746:	9301      	str	r3, [sp, #4]
   d5748:	bd08      	pop	{r3, pc}
   d574a:	0000      	.short	0x0000
   d574c:	00030274 	.word	0x00030274

000d5750 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <os_thread_is_current+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	689b      	ldr	r3, [r3, #8]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030248 	.word	0x00030248

000d5760 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <os_thread_join+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	691b      	ldr	r3, [r3, #16]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030248 	.word	0x00030248

000d5770 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <os_thread_cleanup+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	695b      	ldr	r3, [r3, #20]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030248 	.word	0x00030248

000d5780 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <os_mutex_create+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030248 	.word	0x00030248

000d5790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <os_mutex_recursive_create+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030248 	.word	0x00030248

000d57a0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <os_mutex_recursive_lock+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030248 	.word	0x00030248

000d57b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <os_mutex_recursive_unlock+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030248 	.word	0x00030248

000d57c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <inet_inet_ntop+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	695b      	ldr	r3, [r3, #20]
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030264 	.word	0x00030264

000d57d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <HAL_USART_Init+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	0003023c 	.word	0x0003023c

000d57e0 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <HAL_USART_End+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	689b      	ldr	r3, [r3, #8]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	0003023c 	.word	0x0003023c

000d57f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <HAL_USART_Write_Data+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	68db      	ldr	r3, [r3, #12]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	0003023c 	.word	0x0003023c

000d5800 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <HAL_USART_Available_Data+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	691b      	ldr	r3, [r3, #16]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	0003023c 	.word	0x0003023c

000d5810 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <HAL_USART_Read_Data+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	695b      	ldr	r3, [r3, #20]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	0003023c 	.word	0x0003023c

000d5820 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <HAL_USART_Peek_Data+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	699b      	ldr	r3, [r3, #24]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	0003023c 	.word	0x0003023c

000d5830 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <HAL_USART_Flush_Data+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	69db      	ldr	r3, [r3, #28]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	0003023c 	.word	0x0003023c

000d5840 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <HAL_USART_Is_Enabled+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6a1b      	ldr	r3, [r3, #32]
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	0003023c 	.word	0x0003023c

000d5850 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <HAL_USART_Available_Data_For_Write+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	0003023c 	.word	0x0003023c

000d5860 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <HAL_USART_BeginConfig+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	0003023c 	.word	0x0003023c

000d5870 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <HAL_I2C_Write_Data+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6a1b      	ldr	r3, [r3, #32]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030228 	.word	0x00030228

000d5880 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <HAL_I2C_Available_Data+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030228 	.word	0x00030228

000d5890 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <HAL_I2C_Read_Data+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030228 	.word	0x00030228

000d58a0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_I2C_Peek_Data+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030228 	.word	0x00030228

000d58b0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <HAL_I2C_Flush_Data+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030228 	.word	0x00030228

000d58c0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_I2C_Is_Enabled+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030228 	.word	0x00030228

000d58d0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_I2C_Init+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030228 	.word	0x00030228

000d58e0 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_Tone_Start+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	681b      	ldr	r3, [r3, #0]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030224 	.word	0x00030224

000d58f0 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_Tone_Stop+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	685b      	ldr	r3, [r3, #4]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030224 	.word	0x00030224

000d5900 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_USB_USART_Init+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	681b      	ldr	r3, [r3, #0]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003024c 	.word	0x0003024c

000d5910 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <HAL_USB_USART_Available_Data+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	691b      	ldr	r3, [r3, #16]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	0003024c 	.word	0x0003024c

000d5920 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	695b      	ldr	r3, [r3, #20]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	0003024c 	.word	0x0003024c

000d5930 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <HAL_USB_USART_Receive_Data+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	699b      	ldr	r3, [r3, #24]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	0003024c 	.word	0x0003024c

000d5940 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <HAL_USB_USART_Send_Data+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	69db      	ldr	r3, [r3, #28]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	0003024c 	.word	0x0003024c

000d5950 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <HAL_USB_USART_Flush_Data+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6a1b      	ldr	r3, [r3, #32]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	0003024c 	.word	0x0003024c

000d5960 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <LED_SetSignalingColor+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	685b      	ldr	r3, [r3, #4]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030260 	.word	0x00030260

000d5970 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <LED_Signaling_Start+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	689b      	ldr	r3, [r3, #8]
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030260 	.word	0x00030260

000d5980 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <LED_Signaling_Stop+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	68db      	ldr	r3, [r3, #12]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030260 	.word	0x00030260

000d5990 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <LED_SetBrightness+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	691b      	ldr	r3, [r3, #16]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030260 	.word	0x00030260

000d59a0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <LED_RGB_IsOverRidden+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	699b      	ldr	r3, [r3, #24]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030260 	.word	0x00030260

000d59b0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <LED_On+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	69db      	ldr	r3, [r3, #28]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030260 	.word	0x00030260

000d59c0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <panic_+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030260 	.word	0x00030260

000d59d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <log_message+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030260 	.word	0x00030260

000d59e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <set_system_mode+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	685b      	ldr	r3, [r3, #4]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030220 	.word	0x00030220

000d59f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <system_delay_ms+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	695b      	ldr	r3, [r3, #20]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030220 	.word	0x00030220

000d5a00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b03      	ldr	r3, [pc, #12]	; (d5a10 <system_ctrl_set_app_request_handler+0x10>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5a0a:	9301      	str	r3, [sp, #4]
   d5a0c:	bd08      	pop	{r3, pc}
   d5a0e:	0000      	.short	0x0000
   d5a10:	00030220 	.word	0x00030220

000d5a14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b03      	ldr	r3, [pc, #12]	; (d5a24 <system_ctrl_set_result+0x10>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5a1e:	9301      	str	r3, [sp, #4]
   d5a20:	bd08      	pop	{r3, pc}
   d5a22:	0000      	.short	0x0000
   d5a24:	00030220 	.word	0x00030220

000d5a28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <network_connect+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	685b      	ldr	r3, [r3, #4]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030240 	.word	0x00030240

000d5a38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <network_connecting+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	689b      	ldr	r3, [r3, #8]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	00030240 	.word	0x00030240

000d5a48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <network_disconnect+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	68db      	ldr	r3, [r3, #12]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	00030240 	.word	0x00030240

000d5a58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <network_ready+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	691b      	ldr	r3, [r3, #16]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030240 	.word	0x00030240

000d5a68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <network_on+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	695b      	ldr	r3, [r3, #20]
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030240 	.word	0x00030240

000d5a78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <network_off+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	699b      	ldr	r3, [r3, #24]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030240 	.word	0x00030240

000d5a88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <network_listen+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	69db      	ldr	r3, [r3, #28]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030240 	.word	0x00030240

000d5a98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <network_listening+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6a1b      	ldr	r3, [r3, #32]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030240 	.word	0x00030240

000d5aa8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <network_set_listen_timeout+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030240 	.word	0x00030240

000d5ab8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <network_get_listen_timeout+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030240 	.word	0x00030240

000d5ac8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030244 	.word	0x00030244

000d5ad8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <malloc+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	681b      	ldr	r3, [r3, #0]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	0003021c 	.word	0x0003021c

000d5ae8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <free+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	685b      	ldr	r3, [r3, #4]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	0003021c 	.word	0x0003021c

000d5af8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <realloc+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	689b      	ldr	r3, [r3, #8]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	0003021c 	.word	0x0003021c

000d5b08 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <sprintf+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	68db      	ldr	r3, [r3, #12]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003021c 	.word	0x0003021c

000d5b18 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <vsnprintf+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003021c 	.word	0x0003021c

000d5b28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	4611      	mov	r1, r2
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7ff bfb3 	b.w	d5a98 <network_listening>

000d5b32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b32:	2200      	movs	r2, #0
   d5b34:	4611      	mov	r1, r2
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7ff bfbe 	b.w	d5ab8 <network_get_listen_timeout>

000d5b3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b3c:	2200      	movs	r2, #0
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f7ff bfb2 	b.w	d5aa8 <network_set_listen_timeout>

000d5b44 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b44:	2200      	movs	r2, #0
   d5b46:	f081 0101 	eor.w	r1, r1, #1
   d5b4a:	6840      	ldr	r0, [r0, #4]
   d5b4c:	f7ff bf9c 	b.w	d5a88 <network_listen>

000d5b50 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b50:	2300      	movs	r3, #0
   d5b52:	461a      	mov	r2, r3
   d5b54:	4619      	mov	r1, r3
   d5b56:	6840      	ldr	r0, [r0, #4]
   d5b58:	f7ff bf8e 	b.w	d5a78 <network_off>

000d5b5c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b5c:	2300      	movs	r3, #0
   d5b5e:	461a      	mov	r2, r3
   d5b60:	4619      	mov	r1, r3
   d5b62:	6840      	ldr	r0, [r0, #4]
   d5b64:	f7ff bf80 	b.w	d5a68 <network_on>

000d5b68 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b68:	2200      	movs	r2, #0
   d5b6a:	4611      	mov	r1, r2
   d5b6c:	6840      	ldr	r0, [r0, #4]
   d5b6e:	f7ff bf73 	b.w	d5a58 <network_ready>

000d5b72 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b72:	2200      	movs	r2, #0
   d5b74:	4611      	mov	r1, r2
   d5b76:	6840      	ldr	r0, [r0, #4]
   d5b78:	f7ff bf5e 	b.w	d5a38 <network_connecting>

000d5b7c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b7c:	2200      	movs	r2, #0
   d5b7e:	2102      	movs	r1, #2
   d5b80:	6840      	ldr	r0, [r0, #4]
   d5b82:	f7ff bf61 	b.w	d5a48 <network_disconnect>

000d5b86 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b86:	2300      	movs	r3, #0
   d5b88:	461a      	mov	r2, r3
   d5b8a:	6840      	ldr	r0, [r0, #4]
   d5b8c:	f7ff bf4c 	b.w	d5a28 <network_connect>

000d5b90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b90:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b92:	2203      	movs	r2, #3
   d5b94:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b96:	4a02      	ldr	r2, [pc, #8]	; (d5ba0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b98:	601a      	str	r2, [r3, #0]
   d5b9a:	4770      	bx	lr
   d5b9c:	2003e3bc 	.word	0x2003e3bc
   d5ba0:	000d8358 	.word	0x000d8358

000d5ba4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5ba4:	4770      	bx	lr

000d5ba6 <_ZN8SPIClassD0Ev>:
   d5ba6:	b510      	push	{r4, lr}
   d5ba8:	2110      	movs	r1, #16
   d5baa:	4604      	mov	r4, r0
   d5bac:	f001 ff0d 	bl	d79ca <_ZdlPvj>
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	bd10      	pop	{r4, pc}

000d5bb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5bb4:	b570      	push	{r4, r5, r6, lr}
   d5bb6:	4b08      	ldr	r3, [pc, #32]	; (d5bd8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5bb8:	6003      	str	r3, [r0, #0]
   d5bba:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5bbc:	2500      	movs	r5, #0
   d5bbe:	460e      	mov	r6, r1
   d5bc0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5bc4:	f7ff fddc 	bl	d5780 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5bc8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5bca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5bcc:	f7ff fcf6 	bl	d55bc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5bd0:	60a5      	str	r5, [r4, #8]
}
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	bd70      	pop	{r4, r5, r6, pc}
   d5bd6:	bf00      	nop
   d5bd8:	000d838c 	.word	0x000d838c

000d5bdc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5bdc:	7900      	ldrb	r0, [r0, #4]
   d5bde:	f7ff bcf5 	b.w	d55cc <HAL_SPI_Is_Enabled>
	...

000d5be4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5be4:	4b04      	ldr	r3, [pc, #16]	; (d5bf8 <_GLOBAL__sub_I_System+0x14>)
   d5be6:	2000      	movs	r0, #0
   d5be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5bec:	7018      	strb	r0, [r3, #0]
   d5bee:	8058      	strh	r0, [r3, #2]
   d5bf0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5bf2:	f7ff bef5 	b.w	d59e0 <set_system_mode>
   d5bf6:	bf00      	nop
   d5bf8:	2003e3c4 	.word	0x2003e3c4

000d5bfc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5bfc:	b510      	push	{r4, lr}
   d5bfe:	4604      	mov	r4, r0
{
	free(buffer);
   d5c00:	6800      	ldr	r0, [r0, #0]
   d5c02:	f7ff ff71 	bl	d5ae8 <free>
}
   d5c06:	4620      	mov	r0, r4
   d5c08:	bd10      	pop	{r4, pc}

000d5c0a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5c0a:	b510      	push	{r4, lr}
   d5c0c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5c0e:	6800      	ldr	r0, [r0, #0]
   d5c10:	b108      	cbz	r0, d5c16 <_ZN6String10invalidateEv+0xc>
   d5c12:	f7ff ff69 	bl	d5ae8 <free>
	buffer = NULL;
   d5c16:	2300      	movs	r3, #0
   d5c18:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5c1a:	60a3      	str	r3, [r4, #8]
   d5c1c:	6063      	str	r3, [r4, #4]
   d5c1e:	bd10      	pop	{r4, pc}

000d5c20 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5c20:	b538      	push	{r3, r4, r5, lr}
   d5c22:	4604      	mov	r4, r0
   d5c24:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5c26:	6800      	ldr	r0, [r0, #0]
   d5c28:	3101      	adds	r1, #1
   d5c2a:	f7ff ff65 	bl	d5af8 <realloc>
	if (newbuffer) {
   d5c2e:	b110      	cbz	r0, d5c36 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5c30:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5c34:	2001      	movs	r0, #1
	}
	return 0;
}
   d5c36:	bd38      	pop	{r3, r4, r5, pc}

000d5c38 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c38:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5c3a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c3c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5c3e:	b113      	cbz	r3, d5c46 <_ZN6String7reserveEj+0xe>
   d5c40:	6843      	ldr	r3, [r0, #4]
   d5c42:	428b      	cmp	r3, r1
   d5c44:	d207      	bcs.n	d5c56 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5c46:	4620      	mov	r0, r4
   d5c48:	f7ff ffea 	bl	d5c20 <_ZN6String12changeBufferEj>
   d5c4c:	b120      	cbz	r0, d5c58 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5c4e:	68a3      	ldr	r3, [r4, #8]
   d5c50:	b90b      	cbnz	r3, d5c56 <_ZN6String7reserveEj+0x1e>
   d5c52:	6822      	ldr	r2, [r4, #0]
   d5c54:	7013      	strb	r3, [r2, #0]
   d5c56:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5c58:	bd10      	pop	{r4, pc}

000d5c5a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c5a:	b570      	push	{r4, r5, r6, lr}
   d5c5c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5c5e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c60:	4604      	mov	r4, r0
   d5c62:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5c64:	f7ff ffe8 	bl	d5c38 <_ZN6String7reserveEj>
   d5c68:	b918      	cbnz	r0, d5c72 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	f7ff ffcd 	bl	d5c0a <_ZN6String10invalidateEv>
		return *this;
   d5c70:	e009      	b.n	d5c86 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5c72:	462a      	mov	r2, r5
   d5c74:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5c76:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5c78:	6820      	ldr	r0, [r4, #0]
   d5c7a:	f002 f80e 	bl	d7c9a <memcpy>
	buffer[len] = 0;
   d5c7e:	6822      	ldr	r2, [r4, #0]
   d5c80:	68a3      	ldr	r3, [r4, #8]
   d5c82:	2100      	movs	r1, #0
   d5c84:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5c86:	4620      	mov	r0, r4
   d5c88:	bd70      	pop	{r4, r5, r6, pc}

000d5c8a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c8a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c8c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c8e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c90:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c92:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c94:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c96:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5c98:	460d      	mov	r5, r1
   d5c9a:	b139      	cbz	r1, d5cac <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5c9c:	4608      	mov	r0, r1
   d5c9e:	f002 f85b 	bl	d7d58 <strlen>
   d5ca2:	4629      	mov	r1, r5
   d5ca4:	4602      	mov	r2, r0
   d5ca6:	4620      	mov	r0, r4
   d5ca8:	f7ff ffd7 	bl	d5c5a <_ZN6String4copyEPKcj>
}
   d5cac:	4620      	mov	r0, r4
   d5cae:	bd38      	pop	{r3, r4, r5, pc}

000d5cb0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5cb0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5cb2:	b510      	push	{r4, lr}
   d5cb4:	460b      	mov	r3, r1
   d5cb6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5cb8:	d007      	beq.n	d5cca <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5cba:	6809      	ldr	r1, [r1, #0]
   d5cbc:	b119      	cbz	r1, d5cc6 <_ZN6StringaSERKS_+0x16>
   d5cbe:	689a      	ldr	r2, [r3, #8]
   d5cc0:	f7ff ffcb 	bl	d5c5a <_ZN6String4copyEPKcj>
   d5cc4:	e001      	b.n	d5cca <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5cc6:	f7ff ffa0 	bl	d5c0a <_ZN6String10invalidateEv>

	return *this;
}
   d5cca:	4620      	mov	r0, r4
   d5ccc:	bd10      	pop	{r4, pc}

000d5cce <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cce:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cd0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cd2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cd4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5cd6:	6043      	str	r3, [r0, #4]
	len = 0;
   d5cd8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5cda:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5cdc:	f7ff ffe8 	bl	d5cb0 <_ZN6StringaSERKS_>
}
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5ce4:	b538      	push	{r3, r4, r5, lr}
   d5ce6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5ce8:	460c      	mov	r4, r1
   d5cea:	b141      	cbz	r1, d5cfe <_ZN6StringaSEPKc+0x1a>
   d5cec:	4608      	mov	r0, r1
   d5cee:	f002 f833 	bl	d7d58 <strlen>
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	4602      	mov	r2, r0
   d5cf6:	4628      	mov	r0, r5
   d5cf8:	f7ff ffaf 	bl	d5c5a <_ZN6String4copyEPKcj>
   d5cfc:	e001      	b.n	d5d02 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5cfe:	f7ff ff84 	bl	d5c0a <_ZN6String10invalidateEv>

	return *this;
}
   d5d02:	4628      	mov	r0, r5
   d5d04:	bd38      	pop	{r3, r4, r5, pc}

000d5d06 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5d06:	b570      	push	{r4, r5, r6, lr}
   d5d08:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5d0a:	460e      	mov	r6, r1
   d5d0c:	b909      	cbnz	r1, d5d12 <_ZN6String6concatEPKcj+0xc>
   d5d0e:	2000      	movs	r0, #0
   d5d10:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5d12:	b16a      	cbz	r2, d5d30 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5d14:	6883      	ldr	r3, [r0, #8]
   d5d16:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5d18:	4629      	mov	r1, r5
   d5d1a:	f7ff ff8d 	bl	d5c38 <_ZN6String7reserveEj>
   d5d1e:	2800      	cmp	r0, #0
   d5d20:	d0f5      	beq.n	d5d0e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5d22:	6820      	ldr	r0, [r4, #0]
   d5d24:	68a3      	ldr	r3, [r4, #8]
   d5d26:	4631      	mov	r1, r6
   d5d28:	4418      	add	r0, r3
   d5d2a:	f002 f80d 	bl	d7d48 <strcpy>
	len = newlen;
   d5d2e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5d30:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5d32:	bd70      	pop	{r4, r5, r6, pc}

000d5d34 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d5d34:	b538      	push	{r3, r4, r5, lr}
   d5d36:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d5d38:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d5d3a:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d5d3c:	b141      	cbz	r1, d5d50 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d5d3e:	f002 f80b 	bl	d7d58 <strlen>
   d5d42:	4621      	mov	r1, r4
   d5d44:	4602      	mov	r2, r0
   d5d46:	4628      	mov	r0, r5
}
   d5d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d5d4c:	f7ff bfdb 	b.w	d5d06 <_ZN6String6concatEPKcj>
}
   d5d50:	bd38      	pop	{r3, r4, r5, pc}

000d5d52 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d5d52:	b538      	push	{r3, r4, r5, lr}
   d5d54:	4604      	mov	r4, r0
   d5d56:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d5d58:	68a3      	ldr	r3, [r4, #8]
   d5d5a:	428b      	cmp	r3, r1
   d5d5c:	d911      	bls.n	d5d82 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d5d5e:	b182      	cbz	r2, d5d82 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d5d60:	4411      	add	r1, r2
   d5d62:	428b      	cmp	r3, r1
   d5d64:	bf38      	it	cc
   d5d66:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d5d68:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d5d6a:	1a9b      	subs	r3, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d5d6c:	1811      	adds	r1, r2, r0
String& String::remove(unsigned int index, unsigned int count){
	if (index >= len) { return *this; }
	if (count <= 0) { return *this; }
	if (index + count > len) { count = len - index; }
	char *writeTo = buffer + index;
	len = len - count;
   d5d6e:	60a3      	str	r3, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d5d70:	1a1a      	subs	r2, r3, r0
   d5d72:	4429      	add	r1, r5
   d5d74:	4428      	add	r0, r5
   d5d76:	f001 ff9b 	bl	d7cb0 <memmove>
	buffer[len] = 0;
   d5d7a:	6822      	ldr	r2, [r4, #0]
   d5d7c:	68a3      	ldr	r3, [r4, #8]
   d5d7e:	2100      	movs	r1, #0
   d5d80:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5d82:	4620      	mov	r0, r4
   d5d84:	bd38      	pop	{r3, r4, r5, pc}

000d5d86 <_ZN6String6removeEj>:
        return *this;
}

String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
   d5d86:	6882      	ldr	r2, [r0, #8]
   d5d88:	1a52      	subs	r2, r2, r1
   d5d8a:	f7ff bfe2 	b.w	d5d52 <_ZN6String6removeEjj>

000d5d8e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5d8e:	4770      	bx	lr

000d5d90 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5d90:	2000      	movs	r0, #0
   d5d92:	4770      	bx	lr

000d5d94 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5d94:	4770      	bx	lr

000d5d96 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5d96:	2000      	movs	r0, #0
   d5d98:	4770      	bx	lr

000d5d9a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5d9a:	4770      	bx	lr

000d5d9c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5d9c:	2000      	movs	r0, #0
   d5d9e:	4770      	bx	lr

000d5da0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5da0:	b510      	push	{r4, lr}
   d5da2:	2114      	movs	r1, #20
   d5da4:	4604      	mov	r4, r0
   d5da6:	f001 fe10 	bl	d79ca <_ZdlPvj>
   d5daa:	4620      	mov	r0, r4
   d5dac:	bd10      	pop	{r4, pc}

000d5dae <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5dae:	b510      	push	{r4, lr}
   d5db0:	2114      	movs	r1, #20
   d5db2:	4604      	mov	r4, r0
   d5db4:	f001 fe09 	bl	d79ca <_ZdlPvj>
   d5db8:	4620      	mov	r0, r4
   d5dba:	bd10      	pop	{r4, pc}

000d5dbc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5dbc:	b510      	push	{r4, lr}
   d5dbe:	2114      	movs	r1, #20
   d5dc0:	4604      	mov	r4, r0
   d5dc2:	f001 fe02 	bl	d79ca <_ZdlPvj>
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	bd10      	pop	{r4, pc}

000d5dca <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5dca:	f7fe b968 	b.w	d409e <_ZdlPv>

000d5dce <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5dce:	f7fe b966 	b.w	d409e <_ZdlPv>

000d5dd2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5dd2:	f7fe b964 	b.w	d409e <_ZdlPv>
	...

000d5dd8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5dd8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5dda:	200a      	movs	r0, #10
   d5ddc:	4a02      	ldr	r2, [pc, #8]	; (d5de8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d5dde:	2100      	movs	r1, #0
   d5de0:	f7ff fdee 	bl	d59c0 <panic_>
    }
}
   d5de4:	bd08      	pop	{r3, pc}
   d5de6:	bf00      	nop
   d5de8:	000d55ed 	.word	0x000d55ed

000d5dec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5dec:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5dee:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5df0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5df2:	689b      	ldr	r3, [r3, #8]
   d5df4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5df6:	68a3      	ldr	r3, [r4, #8]
   d5df8:	3b01      	subs	r3, #1
   d5dfa:	60a3      	str	r3, [r4, #8]
   d5dfc:	b92b      	cbnz	r3, d5e0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d5dfe:	6823      	ldr	r3, [r4, #0]
   d5e00:	4620      	mov	r0, r4
   d5e02:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5e08:	4718      	bx	r3
   d5e0a:	bd10      	pop	{r4, pc}

000d5e0c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5e0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5e10:	b2da      	uxtb	r2, r3
   d5e12:	2a09      	cmp	r2, #9
   d5e14:	d801      	bhi.n	d5e1a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5e16:	4618      	mov	r0, r3
   d5e18:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5e1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5e1e:	2b05      	cmp	r3, #5
   d5e20:	d801      	bhi.n	d5e26 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5e22:	3857      	subs	r0, #87	; 0x57
   d5e24:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5e26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5e2a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5e2c:	bf94      	ite	ls
   d5e2e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5e30:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5e34:	4770      	bx	lr
	...

000d5e38 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5e38:	b510      	push	{r4, lr}
            locked_(false) {
   d5e3a:	2300      	movs	r3, #0
   d5e3c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5e3e:	4b04      	ldr	r3, [pc, #16]	; (d5e50 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5e40:	4604      	mov	r4, r0
   d5e42:	6818      	ldr	r0, [r3, #0]
   d5e44:	f7ff fcac 	bl	d57a0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5e48:	2301      	movs	r3, #1
   d5e4a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	bd10      	pop	{r4, pc}
   d5e50:	2003e3d8 	.word	0x2003e3d8

000d5e54 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5e54:	b510      	push	{r4, lr}
        if (locked_) {
   d5e56:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5e58:	4604      	mov	r4, r0
        if (locked_) {
   d5e5a:	b11b      	cbz	r3, d5e64 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5e5c:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5e5e:	6818      	ldr	r0, [r3, #0]
   d5e60:	f7ff fca6 	bl	d57b0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5e64:	4620      	mov	r0, r4
   d5e66:	bd10      	pop	{r4, pc}
   d5e68:	2003e3d8 	.word	0x2003e3d8

000d5e6c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5e6c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5e6e:	7982      	ldrb	r2, [r0, #6]
   d5e70:	798b      	ldrb	r3, [r1, #6]
   d5e72:	429a      	cmp	r2, r3
   d5e74:	d106      	bne.n	d5e84 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5e76:	2206      	movs	r2, #6
   d5e78:	f001 ff00 	bl	d7c7c <memcmp>
   d5e7c:	fab0 f080 	clz	r0, r0
   d5e80:	0940      	lsrs	r0, r0, #5
   d5e82:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5e84:	2000      	movs	r0, #0
}
   d5e86:	bd08      	pop	{r3, pc}

000d5e88 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5e88:	b510      	push	{r4, lr}
        : uuid_() {
   d5e8a:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5e8c:	4604      	mov	r4, r0
        : uuid_() {
   d5e8e:	2100      	movs	r1, #0
   d5e90:	f001 ff29 	bl	d7ce6 <memset>
}
   d5e94:	4620      	mov	r0, r4
   d5e96:	bd10      	pop	{r4, pc}

000d5e98 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d5e98:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d5e9a:	4603      	mov	r3, r0
   d5e9c:	f101 0214 	add.w	r2, r1, #20
   d5ea0:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ea4:	f843 4b04 	str.w	r4, [r3], #4
   d5ea8:	4291      	cmp	r1, r2
   d5eaa:	d1f9      	bne.n	d5ea0 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d5eac:	bd10      	pop	{r4, pc}

000d5eae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d5eae:	b570      	push	{r4, r5, r6, lr}
   d5eb0:	460c      	mov	r4, r1
   d5eb2:	4605      	mov	r5, r0
   d5eb4:	4616      	mov	r6, r2
        : BleUuid() {
   d5eb6:	f7ff ffe7 	bl	d5e88 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d5eba:	b92c      	cbnz	r4, d5ec8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5ebc:	2210      	movs	r2, #16
   d5ebe:	4621      	mov	r1, r4
   d5ec0:	4628      	mov	r0, r5
   d5ec2:	f001 ff10 	bl	d7ce6 <memset>
   d5ec6:	e016      	b.n	d5ef6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d5ec8:	2e01      	cmp	r6, #1
   d5eca:	d109      	bne.n	d5ee0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5ecc:	462b      	mov	r3, r5
   d5ece:	f104 0210 	add.w	r2, r4, #16
   d5ed2:	f854 1b04 	ldr.w	r1, [r4], #4
   d5ed6:	f843 1b04 	str.w	r1, [r3], #4
   d5eda:	4294      	cmp	r4, r2
   d5edc:	d1f9      	bne.n	d5ed2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d5ede:	e008      	b.n	d5ef2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d5ee0:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d5ee2:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d5ee4:	5ce1      	ldrb	r1, [r4, r3]
   d5ee6:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5eea:	3b01      	subs	r3, #1
   d5eec:	b2db      	uxtb	r3, r3
   d5eee:	2bff      	cmp	r3, #255	; 0xff
   d5ef0:	d1f8      	bne.n	d5ee4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5ef2:	2301      	movs	r3, #1
   d5ef4:	742b      	strb	r3, [r5, #16]
    }
}
   d5ef6:	4628      	mov	r0, r5
   d5ef8:	bd70      	pop	{r4, r5, r6, pc}

000d5efa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5efa:	b538      	push	{r3, r4, r5, lr}
   d5efc:	4604      	mov	r4, r0
   d5efe:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5f00:	461a      	mov	r2, r3
   d5f02:	f7ff ffd4 	bl	d5eae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d5f06:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5f08:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5f0a:	0a2d      	lsrs	r5, r5, #8
   d5f0c:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5f0e:	7423      	strb	r3, [r4, #16]
}
   d5f10:	4620      	mov	r0, r4
   d5f12:	bd38      	pop	{r3, r4, r5, pc}

000d5f14 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d5f14:	7c03      	ldrb	r3, [r0, #16]
   d5f16:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d5f1a:	bf14      	ite	ne
   d5f1c:	2001      	movne	r0, #1
   d5f1e:	2000      	moveq	r0, #0
   d5f20:	4770      	bx	lr

000d5f22 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d5f22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5f24:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5f26:	f7ff fff5 	bl	d5f14 <_ZNK8particle7BleUuid4typeEv>
   d5f2a:	b908      	cbnz	r0, d5f30 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d5f2c:	8820      	ldrh	r0, [r4, #0]
   d5f2e:	e009      	b.n	d5f44 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d5f30:	2210      	movs	r2, #16
   d5f32:	2100      	movs	r1, #0
   d5f34:	4668      	mov	r0, sp
   d5f36:	f001 fed6 	bl	d7ce6 <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d5f3a:	2210      	movs	r2, #16
   d5f3c:	4669      	mov	r1, sp
   d5f3e:	4620      	mov	r0, r4
   d5f40:	f001 fe9c 	bl	d7c7c <memcmp>
   d5f44:	3000      	adds	r0, #0
   d5f46:	bf18      	it	ne
   d5f48:	2001      	movne	r0, #1
    }
}
   d5f4a:	b004      	add	sp, #16
   d5f4c:	bd10      	pop	{r4, pc}

000d5f4e <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d5f4e:	8800      	ldrh	r0, [r0, #0]
   d5f50:	4770      	bx	lr

000d5f52 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d5f52:	4770      	bx	lr

000d5f54 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5f54:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d5f56:	4603      	mov	r3, r0
   d5f58:	f101 0214 	add.w	r2, r1, #20
   d5f5c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f60:	f843 4b04 	str.w	r4, [r3], #4
   d5f64:	4291      	cmp	r1, r2
   d5f66:	d1f9      	bne.n	d5f5c <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d5f68:	bd10      	pop	{r4, pc}

000d5f6a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5f6a:	b510      	push	{r4, lr}
    if (uuid128) {
   d5f6c:	b151      	cbz	r1, d5f84 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5f6e:	4603      	mov	r3, r0
   d5f70:	f101 0210 	add.w	r2, r1, #16
   d5f74:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f78:	f843 4b04 	str.w	r4, [r3], #4
   d5f7c:	4291      	cmp	r1, r2
   d5f7e:	d1f9      	bne.n	d5f74 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5f80:	2301      	movs	r3, #1
   d5f82:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d5f84:	bd10      	pop	{r4, pc}

000d5f86 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5f86:	b510      	push	{r4, lr}
   d5f88:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d5f8a:	f7ff ffc3 	bl	d5f14 <_ZNK8particle7BleUuid4typeEv>
   d5f8e:	b928      	cbnz	r0, d5f9c <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d5f90:	8808      	ldrh	r0, [r1, #0]
   d5f92:	8823      	ldrh	r3, [r4, #0]
   d5f94:	1a1b      	subs	r3, r3, r0
   d5f96:	4258      	negs	r0, r3
   d5f98:	4158      	adcs	r0, r3
   d5f9a:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5f9c:	2210      	movs	r2, #16
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f001 fe6c 	bl	d7c7c <memcmp>
   d5fa4:	fab0 f080 	clz	r0, r0
   d5fa8:	0940      	lsrs	r0, r0, #5
    }
}
   d5faa:	bd10      	pop	{r4, pc}

000d5fac <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d5fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5fae:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5fb0:	460e      	mov	r6, r1
   d5fb2:	b919      	cbnz	r1, d5fbc <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5fb4:	2210      	movs	r2, #16
   d5fb6:	f001 fe96 	bl	d7ce6 <memset>
   d5fba:	e051      	b.n	d6060 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5fbc:	2124      	movs	r1, #36	; 0x24
   d5fbe:	4630      	mov	r0, r6
   d5fc0:	f001 fed2 	bl	d7d68 <strnlen>
   d5fc4:	2804      	cmp	r0, #4
   d5fc6:	d002      	beq.n	d5fce <_ZN8particle7BleUuid9constructEPKc+0x22>
   d5fc8:	2700      	movs	r7, #0
   d5fca:	2410      	movs	r4, #16
   d5fcc:	e03b      	b.n	d6046 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5fce:	7830      	ldrb	r0, [r6, #0]
   d5fd0:	f7ff ff1c 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5fd4:	1e04      	subs	r4, r0, #0
   d5fd6:	db47      	blt.n	d6068 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5fd8:	7870      	ldrb	r0, [r6, #1]
   d5fda:	f7ff ff17 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5fde:	2800      	cmp	r0, #0
   d5fe0:	db42      	blt.n	d6068 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5fe2:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5fe6:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5fea:	78b0      	ldrb	r0, [r6, #2]
   d5fec:	f7ff ff0e 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5ff0:	1e04      	subs	r4, r0, #0
   d5ff2:	db39      	blt.n	d6068 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5ff4:	78f0      	ldrb	r0, [r6, #3]
   d5ff6:	f7ff ff09 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5ffa:	2800      	cmp	r0, #0
   d5ffc:	db34      	blt.n	d6068 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5ffe:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d6002:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6006:	b2c0      	uxtb	r0, r0
   d6008:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d600c:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d600e:	2300      	movs	r3, #0
   d6010:	e027      	b.n	d6062 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6012:	b32c      	cbz	r4, d6060 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d6014:	5df0      	ldrb	r0, [r6, r7]
   d6016:	f7ff fef9 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d601a:	0603      	lsls	r3, r0, #24
   d601c:	d412      	bmi.n	d6044 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d601e:	3c01      	subs	r4, #1
   d6020:	0100      	lsls	r0, r0, #4
   d6022:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6024:	2124      	movs	r1, #36	; 0x24
   d6026:	4630      	mov	r0, r6
   d6028:	f001 fe9e 	bl	d7d68 <strnlen>
   d602c:	3701      	adds	r7, #1
   d602e:	4287      	cmp	r7, r0
   d6030:	d208      	bcs.n	d6044 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d6032:	5df0      	ldrb	r0, [r6, r7]
   d6034:	f7ff feea 	bl	d5e0c <_ZN8particle11hexToNibbleEc>
   d6038:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d603a:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d603c:	bfa2      	ittt	ge
   d603e:	5d2b      	ldrbge	r3, [r5, r4]
   d6040:	4318      	orrge	r0, r3
   d6042:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6044:	3701      	adds	r7, #1
   d6046:	2124      	movs	r1, #36	; 0x24
   d6048:	4630      	mov	r0, r6
   d604a:	f001 fe8d 	bl	d7d68 <strnlen>
   d604e:	4287      	cmp	r7, r0
   d6050:	d3df      	bcc.n	d6012 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d6052:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d6054:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d6056:	42a5      	cmp	r5, r4
   d6058:	d002      	beq.n	d6060 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d605a:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d605e:	e7fa      	b.n	d6056 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6060:	2301      	movs	r3, #1
   d6062:	742b      	strb	r3, [r5, #16]
}
   d6064:	b003      	add	sp, #12
   d6066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d6068:	2300      	movs	r3, #0
   d606a:	802b      	strh	r3, [r5, #0]
   d606c:	e7cf      	b.n	d600e <_ZN8particle7BleUuid9constructEPKc+0x62>

000d606e <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d606e:	b538      	push	{r3, r4, r5, lr}
   d6070:	4604      	mov	r4, r0
   d6072:	460d      	mov	r5, r1
        : BleUuid() {
   d6074:	f7ff ff08 	bl	d5e88 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6078:	4620      	mov	r0, r4
   d607a:	4629      	mov	r1, r5
   d607c:	f7ff ff96 	bl	d5fac <_ZN8particle7BleUuid9constructEPKc>
}
   d6080:	4620      	mov	r0, r4
   d6082:	bd38      	pop	{r3, r4, r5, pc}

000d6084 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6086:	b18b      	cbz	r3, d60ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6088:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d608a:	1ce5      	adds	r5, r4, #3
   d608c:	428d      	cmp	r5, r1
   d608e:	d80f      	bhi.n	d60b0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6090:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d6092:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6094:	5d87      	ldrb	r7, [r0, r6]
   d6096:	4297      	cmp	r7, r2
   d6098:	d105      	bne.n	d60a6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d609a:	442e      	add	r6, r5
   d609c:	42b1      	cmp	r1, r6
   d609e:	d307      	bcc.n	d60b0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d60a0:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d60a2:	1c68      	adds	r0, r5, #1
                return adsLen;
   d60a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d60a6:	3501      	adds	r5, #1
   d60a8:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d60aa:	e7ee      	b.n	d608a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d60ac:	4618      	mov	r0, r3
   d60ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d60b0:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d60b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d60b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d60b8:	4604      	mov	r4, r0
   d60ba:	460e      	mov	r6, r1
   d60bc:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d60be:	4617      	mov	r7, r2
   d60c0:	2a00      	cmp	r2, #0
   d60c2:	d03a      	beq.n	d613a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d60c4:	460a      	mov	r2, r1
   d60c6:	ab01      	add	r3, sp, #4
   d60c8:	6a01      	ldr	r1, [r0, #32]
   d60ca:	f7ff ffdb 	bl	d6084 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d60ce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d60d2:	6a22      	ldr	r2, [r4, #32]
   d60d4:	bb03      	cbnz	r3, d6118 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d60d6:	b1f8      	cbz	r0, d6118 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d60d8:	1c96      	adds	r6, r2, #2
   d60da:	442e      	add	r6, r5
   d60dc:	1a36      	subs	r6, r6, r0
   d60de:	2e1f      	cmp	r6, #31
   d60e0:	d82b      	bhi.n	d613a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d60e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d60e6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d60ea:	ebc8 0202 	rsb	r2, r8, r2
   d60ee:	1a12      	subs	r2, r2, r0
   d60f0:	eb00 0108 	add.w	r1, r0, r8
   d60f4:	eb05 0009 	add.w	r0, r5, r9
   d60f8:	b292      	uxth	r2, r2
   d60fa:	4421      	add	r1, r4
   d60fc:	4420      	add	r0, r4
   d60fe:	f001 fdd7 	bl	d7cb0 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d6102:	1c6b      	adds	r3, r5, #1
   d6104:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d6108:	462a      	mov	r2, r5
   d610a:	4639      	mov	r1, r7
   d610c:	eb04 0009 	add.w	r0, r4, r9
   d6110:	f001 fdc3 	bl	d7c9a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d6114:	6226      	str	r6, [r4, #32]
   d6116:	e010      	b.n	d613a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d6118:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d611a:	182b      	adds	r3, r5, r0
   d611c:	2b1f      	cmp	r3, #31
   d611e:	d80c      	bhi.n	d613a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d6120:	1c6b      	adds	r3, r5, #1
   d6122:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6124:	4422      	add	r2, r4
   d6126:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6128:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d612a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d612c:	4420      	add	r0, r4
   d612e:	462a      	mov	r2, r5
   d6130:	f001 fdb3 	bl	d7c9a <memcpy>
        selfLen_ += len;
   d6134:	6a22      	ldr	r2, [r4, #32]
   d6136:	442a      	add	r2, r5
   d6138:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d613a:	6a20      	ldr	r0, [r4, #32]
}
   d613c:	b003      	add	sp, #12
   d613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6142 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d6142:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6144:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d6146:	4603      	mov	r3, r0
   d6148:	f100 021f 	add.w	r2, r0, #31
   d614c:	2000      	movs	r0, #0
   d614e:	f803 0b01 	strb.w	r0, [r3], #1
   d6152:	4293      	cmp	r3, r2
   d6154:	f04f 0100 	mov.w	r1, #0
   d6158:	d1f9      	bne.n	d614e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d615a:	aa04      	add	r2, sp, #16
   d615c:	2306      	movs	r3, #6
   d615e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6162:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d6164:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6166:	9100      	str	r1, [sp, #0]
   d6168:	4620      	mov	r0, r4
   d616a:	4619      	mov	r1, r3
   d616c:	f7ff ffa2 	bl	d60b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6170:	4620      	mov	r0, r4
   d6172:	b004      	add	sp, #16
   d6174:	bd10      	pop	{r4, pc}

000d6176 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6176:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6178:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d617a:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d617c:	ab01      	add	r3, sp, #4
   d617e:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6180:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6182:	f7ff ff7f 	bl	d6084 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d6186:	4605      	mov	r5, r0
   d6188:	b178      	cbz	r0, d61aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d618a:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d618c:	6a22      	ldr	r2, [r4, #32]
   d618e:	1829      	adds	r1, r5, r0
   d6190:	1a12      	subs	r2, r2, r0
   d6192:	1b52      	subs	r2, r2, r5
   d6194:	4421      	add	r1, r4
   d6196:	4420      	add	r0, r4
   d6198:	f001 fd7f 	bl	d7c9a <memcpy>
        selfLen_ -= len;
   d619c:	6a23      	ldr	r3, [r4, #32]
   d619e:	1b5d      	subs	r5, r3, r5
   d61a0:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d61a2:	4631      	mov	r1, r6
   d61a4:	4620      	mov	r0, r4
   d61a6:	f7ff ffe6 	bl	d6176 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d61aa:	b002      	add	sp, #8
   d61ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d61b0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d61b0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d61b2:	2500      	movs	r5, #0
   d61b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d61b8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d61ba:	8043      	strh	r3, [r0, #2]
   d61bc:	220e      	movs	r2, #14
   d61be:	4629      	mov	r1, r5
   d61c0:	7005      	strb	r5, [r0, #0]
   d61c2:	7105      	strb	r5, [r0, #4]
   d61c4:	3006      	adds	r0, #6
   d61c6:	f001 fd8e 	bl	d7ce6 <memset>
   d61ca:	f104 0014 	add.w	r0, r4, #20
   d61ce:	f7ff fe5b 	bl	d5e88 <_ZN8particle7BleUuidC1Ev>
   d61d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d61d6:	f7ff fe57 	bl	d5e88 <_ZN8particle7BleUuidC1Ev>
   d61da:	4904      	ldr	r1, [pc, #16]	; (d61ec <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d61dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d61e0:	f7ff fd53 	bl	d5c8a <_ZN6StringC1EPK19__FlashStringHelper>
   d61e4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d61e6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d61e8:	4620      	mov	r0, r4
   d61ea:	bd38      	pop	{r3, r4, r5, pc}
   d61ec:	000d863c 	.word	0x000d863c

000d61f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d61f0:	b510      	push	{r4, lr}
   d61f2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d61f4:	69c2      	ldr	r2, [r0, #28]
   d61f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d61fa:	4293      	cmp	r3, r2
   d61fc:	4618      	mov	r0, r3
   d61fe:	d006      	beq.n	d620e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6200:	6804      	ldr	r4, [r0, #0]
   d6202:	8824      	ldrh	r4, [r4, #0]
   d6204:	428c      	cmp	r4, r1
   d6206:	f103 0308 	add.w	r3, r3, #8
   d620a:	d1f6      	bne.n	d61fa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d620c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d620e:	2000      	movs	r0, #0
    }
   d6210:	bd10      	pop	{r4, pc}
	...

000d6214 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6214:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6218:	4680      	mov	r8, r0
   d621a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d621c:	460e      	mov	r6, r1
   d621e:	b369      	cbz	r1, d627c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d6220:	b362      	cbz	r2, d627c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d6222:	2af4      	cmp	r2, #244	; 0xf4
   d6224:	6805      	ldr	r5, [r0, #0]
   d6226:	bf28      	it	cs
   d6228:	22f4      	movcs	r2, #244	; 0xf4
   d622a:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d622c:	782a      	ldrb	r2, [r5, #0]
   d622e:	b1a2      	cbz	r2, d625a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d6230:	792b      	ldrb	r3, [r5, #4]
   d6232:	0798      	lsls	r0, r3, #30
   d6234:	d507      	bpl.n	d6246 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6236:	2300      	movs	r3, #0
   d6238:	4622      	mov	r2, r4
   d623a:	89a8      	ldrh	r0, [r5, #12]
   d623c:	f7ff fa42 	bl	d56c4 <hal_ble_gatt_server_set_characteristic_value>
   d6240:	2800      	cmp	r0, #0
   d6242:	da02      	bge.n	d624a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d6244:	e043      	b.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6246:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d624a:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d624e:	792b      	ldrb	r3, [r5, #4]
   d6250:	06da      	lsls	r2, r3, #27
   d6252:	d518      	bpl.n	d6286 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d6254:	2f01      	cmp	r7, #1
   d6256:	d123      	bne.n	d62a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d6258:	e015      	b.n	d6286 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d625a:	8868      	ldrh	r0, [r5, #2]
   d625c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6260:	4298      	cmp	r0, r3
   d6262:	d00d      	beq.n	d6280 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d6264:	792b      	ldrb	r3, [r5, #4]
   d6266:	0759      	lsls	r1, r3, #29
   d6268:	d523      	bpl.n	d62b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d626a:	2f01      	cmp	r7, #1
   d626c:	d021      	beq.n	d62b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d626e:	89a9      	ldrh	r1, [r5, #12]
   d6270:	9200      	str	r2, [sp, #0]
   d6272:	4623      	mov	r3, r4
   d6274:	4632      	mov	r2, r6
   d6276:	f7ff fa39 	bl	d56ec <hal_ble_gatt_client_write_without_response>
   d627a:	e028      	b.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d627c:	4815      	ldr	r0, [pc, #84]	; (d62d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d627e:	e026      	b.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d6280:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6284:	e023      	b.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d6286:	069a      	lsls	r2, r3, #26
   d6288:	d521      	bpl.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d628a:	2f02      	cmp	r7, #2
   d628c:	d01f      	beq.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d628e:	89a8      	ldrh	r0, [r5, #12]
   d6290:	2300      	movs	r3, #0
   d6292:	4622      	mov	r2, r4
   d6294:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6296:	b002      	add	sp, #8
   d6298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d629c:	f7ff ba4e 	b.w	d573c <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d62a0:	89a8      	ldrh	r0, [r5, #12]
   d62a2:	2300      	movs	r3, #0
   d62a4:	4622      	mov	r2, r4
   d62a6:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d62a8:	b002      	add	sp, #8
   d62aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d62ae:	f7ff ba3b 	b.w	d5728 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d62b2:	071b      	lsls	r3, r3, #28
   d62b4:	d501      	bpl.n	d62ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d62b6:	2f02      	cmp	r7, #2
   d62b8:	d102      	bne.n	d62c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d62ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d62be:	e006      	b.n	d62ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d62c0:	2300      	movs	r3, #0
   d62c2:	89a9      	ldrh	r1, [r5, #12]
   d62c4:	9300      	str	r3, [sp, #0]
   d62c6:	4632      	mov	r2, r6
   d62c8:	4623      	mov	r3, r4
   d62ca:	f7ff fa05 	bl	d56d8 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d62ce:	b002      	add	sp, #8
   d62d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62d4:	fffffef2 	.word	0xfffffef2

000d62d8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d62d8:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d62da:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d62dc:	651a      	str	r2, [r3, #80]	; 0x50
   d62de:	4770      	bx	lr

000d62e0 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d62e0:	b510      	push	{r4, lr}
    return impl()->address();
   d62e2:	680a      	ldr	r2, [r1, #0]
   d62e4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d62e8:	6003      	str	r3, [r0, #0]
   d62ea:	6853      	ldr	r3, [r2, #4]
   d62ec:	6043      	str	r3, [r0, #4]
}
   d62ee:	bd10      	pop	{r4, pc}

000d62f0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d62f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d62f2:	6802      	ldr	r2, [r0, #0]
   d62f4:	680b      	ldr	r3, [r1, #0]
   d62f6:	8812      	ldrh	r2, [r2, #0]
   d62f8:	881b      	ldrh	r3, [r3, #0]
   d62fa:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d62fc:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d62fe:	d10c      	bne.n	d631a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6300:	4601      	mov	r1, r0
   d6302:	4668      	mov	r0, sp
   d6304:	f7ff ffec 	bl	d62e0 <_ZNK8particle13BlePeerDevice7addressEv>
   d6308:	4621      	mov	r1, r4
   d630a:	a802      	add	r0, sp, #8
   d630c:	f7ff ffe8 	bl	d62e0 <_ZNK8particle13BlePeerDevice7addressEv>
   d6310:	a902      	add	r1, sp, #8
   d6312:	4668      	mov	r0, sp
   d6314:	f7ff fdaa 	bl	d5e6c <_ZNK8particle10BleAddresseqERKS0_>
   d6318:	b900      	cbnz	r0, d631c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d631a:	2000      	movs	r0, #0
}
   d631c:	b004      	add	sp, #16
   d631e:	bd10      	pop	{r4, pc}

000d6320 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6320:	b510      	push	{r4, lr}
   d6322:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6324:	2034      	movs	r0, #52	; 0x34
   d6326:	f7fd feb6 	bl	d4096 <_Znwj>
   d632a:	4601      	mov	r1, r0
   d632c:	b168      	cbz	r0, d634a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d632e:	2300      	movs	r3, #0
   d6330:	6003      	str	r3, [r0, #0]
   d6332:	6043      	str	r3, [r0, #4]
   d6334:	6083      	str	r3, [r0, #8]
   d6336:	60c3      	str	r3, [r0, #12]
   d6338:	6103      	str	r3, [r0, #16]
   d633a:	6143      	str	r3, [r0, #20]
   d633c:	6183      	str	r3, [r0, #24]
   d633e:	61c3      	str	r3, [r0, #28]
   d6340:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d6342:	6243      	str	r3, [r0, #36]	; 0x24
   d6344:	6283      	str	r3, [r0, #40]	; 0x28
   d6346:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6348:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d634a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d634c:	b919      	cbnz	r1, d6356 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d634e:	4a0a      	ldr	r2, [pc, #40]	; (d6378 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6350:	200a      	movs	r0, #10
   d6352:	f7ff fb35 	bl	d59c0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6356:	2000      	movs	r0, #0
   d6358:	f7ff f980 	bl	d565c <hal_ble_stack_init>
   d635c:	b120      	cbz	r0, d6368 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d635e:	4a06      	ldr	r2, [pc, #24]	; (d6378 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6360:	2100      	movs	r1, #0
   d6362:	200a      	movs	r0, #10
   d6364:	f7ff fb2c 	bl	d59c0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6368:	2200      	movs	r2, #0
   d636a:	6821      	ldr	r1, [r4, #0]
   d636c:	4803      	ldr	r0, [pc, #12]	; (d637c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d636e:	f7ff f9d1 	bl	d5714 <hal_ble_set_callback_on_periph_link_events>
}
   d6372:	4620      	mov	r0, r4
   d6374:	bd10      	pop	{r4, pc}
   d6376:	bf00      	nop
   d6378:	000d55ed 	.word	0x000d55ed
   d637c:	000d6759 	.word	0x000d6759

000d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6380:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6382:	4c0a      	ldr	r4, [pc, #40]	; (d63ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d6384:	6823      	ldr	r3, [r4, #0]
   d6386:	07db      	lsls	r3, r3, #31
   d6388:	d40e      	bmi.n	d63a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d638a:	4620      	mov	r0, r4
   d638c:	f7fd fe8b 	bl	d40a6 <__cxa_guard_acquire>
   d6390:	b150      	cbz	r0, d63a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6392:	4807      	ldr	r0, [pc, #28]	; (d63b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6394:	f7ff ffc4 	bl	d6320 <_ZN8particle14BleLocalDeviceC1Ev>
   d6398:	4620      	mov	r0, r4
   d639a:	f7fd fe89 	bl	d40b0 <__cxa_guard_release>
   d639e:	4a05      	ldr	r2, [pc, #20]	; (d63b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d63a0:	4905      	ldr	r1, [pc, #20]	; (d63b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d63a2:	4803      	ldr	r0, [pc, #12]	; (d63b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d63a4:	f001 fb0c 	bl	d79c0 <__aeabi_atexit>
    return instance;
}
   d63a8:	4801      	ldr	r0, [pc, #4]	; (d63b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d63aa:	bd10      	pop	{r4, pc}
   d63ac:	2003e3d0 	.word	0x2003e3d0
   d63b0:	2003e3cc 	.word	0x2003e3cc
   d63b4:	2003e378 	.word	0x2003e378
   d63b8:	000d656d 	.word	0x000d656d

000d63bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d63bc:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d63be:	6803      	ldr	r3, [r0, #0]
   d63c0:	3b09      	subs	r3, #9
   d63c2:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d63c4:	b08a      	sub	sp, #40	; 0x28
   d63c6:	4604      	mov	r4, r0
   d63c8:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d63ca:	d819      	bhi.n	d6400 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d63cc:	f7ff ffd8 	bl	d6380 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d63d0:	88a1      	ldrh	r1, [r4, #4]
   d63d2:	6800      	ldr	r0, [r0, #0]
   d63d4:	f7ff ff0c 	bl	d61f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d63d8:	4602      	mov	r2, r0
   d63da:	b958      	cbnz	r0, d63f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d63dc:	2320      	movs	r3, #32
   d63de:	9302      	str	r3, [sp, #8]
   d63e0:	4b08      	ldr	r3, [pc, #32]	; (d6404 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d63e2:	9003      	str	r0, [sp, #12]
   d63e4:	9300      	str	r3, [sp, #0]
   d63e6:	aa02      	add	r2, sp, #8
   d63e8:	4603      	mov	r3, r0
   d63ea:	4907      	ldr	r1, [pc, #28]	; (d6408 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d63ec:	2032      	movs	r0, #50	; 0x32
   d63ee:	f7ff faef 	bl	d59d0 <log_message>
   d63f2:	e005      	b.n	d6400 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d63f4:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d63f6:	b11d      	cbz	r5, d6400 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d63f8:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d63fa:	68e1      	ldr	r1, [r4, #12]
   d63fc:	6920      	ldr	r0, [r4, #16]
   d63fe:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d6400:	b00a      	add	sp, #40	; 0x28
   d6402:	bd70      	pop	{r4, r5, r6, pc}
   d6404:	000d8442 	.word	0x000d8442
   d6408:	000d83f8 	.word	0x000d83f8

000d640c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d640c:	4608      	mov	r0, r1
   d640e:	b909      	cbnz	r1, d6414 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6410:	460a      	mov	r2, r1
   d6412:	e001      	b.n	d6418 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6414:	6a09      	ldr	r1, [r1, #32]
   d6416:	2200      	movs	r2, #0
   d6418:	f7ff b928 	b.w	d566c <hal_ble_gap_set_advertising_data>

000d641c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d641c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d641e:	460c      	mov	r4, r1
   d6420:	b911      	cbnz	r1, d6428 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6422:	460a      	mov	r2, r1
   d6424:	4608      	mov	r0, r1
   d6426:	e006      	b.n	d6436 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6428:	2101      	movs	r1, #1
   d642a:	4620      	mov	r0, r4
   d642c:	f7ff fea3 	bl	d6176 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6430:	6a21      	ldr	r1, [r4, #32]
   d6432:	2200      	movs	r2, #0
   d6434:	4620      	mov	r0, r4
    }
}
   d6436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d643a:	f7ff b91f 	b.w	d567c <hal_ble_gap_set_scan_response_data>

000d643e <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d643e:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6440:	a801      	add	r0, sp, #4
   d6442:	f7ff fcf9 	bl	d5e38 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d6446:	2000      	movs	r0, #0
   d6448:	f7ff f920 	bl	d568c <hal_ble_gap_start_advertising>
   d644c:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d644e:	a801      	add	r0, sp, #4
   d6450:	f7ff fd00 	bl	d5e54 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d6454:	4620      	mov	r0, r4
   d6456:	b002      	add	sp, #8
   d6458:	bd10      	pop	{r4, pc}

000d645a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d645a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d645c:	4605      	mov	r5, r0
   d645e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6460:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6462:	4616      	mov	r6, r2
    WiringBleLock lk;
   d6464:	f7ff fce8 	bl	d5e38 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d6468:	4621      	mov	r1, r4
   d646a:	4628      	mov	r0, r5
   d646c:	f7ff ffce 	bl	d640c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6470:	2800      	cmp	r0, #0
   d6472:	db08      	blt.n	d6486 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d6474:	4631      	mov	r1, r6
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff ffd0 	bl	d641c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d647c:	2800      	cmp	r0, #0
   d647e:	db02      	blt.n	d6486 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d6480:	4628      	mov	r0, r5
   d6482:	f7ff ffdc 	bl	d643e <_ZNK8particle14BleLocalDevice9advertiseEv>
   d6486:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d6488:	a801      	add	r0, sp, #4
   d648a:	f7ff fce3 	bl	d5e54 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d648e:	4620      	mov	r0, r4
   d6490:	b002      	add	sp, #8
   d6492:	bd70      	pop	{r4, r5, r6, pc}

000d6494 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d6494:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d6496:	69d8      	ldr	r0, [r3, #28]
}
   d6498:	2800      	cmp	r0, #0
   d649a:	bfd4      	ite	le
   d649c:	2000      	movle	r0, #0
   d649e:	2001      	movgt	r0, #1
   d64a0:	4770      	bx	lr

000d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d64a2:	680b      	ldr	r3, [r1, #0]
   d64a4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d64a6:	b113      	cbz	r3, d64ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d64a8:	685a      	ldr	r2, [r3, #4]
   d64aa:	3201      	adds	r2, #1
   d64ac:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d64ae:	4770      	bx	lr

000d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d64b0:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64b2:	f851 3b04 	ldr.w	r3, [r1], #4
   d64b6:	4604      	mov	r4, r0
   d64b8:	f840 3b04 	str.w	r3, [r0], #4
   d64bc:	f7ff fff1 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d64c0:	6823      	ldr	r3, [r4, #0]
   d64c2:	b90b      	cbnz	r3, d64c8 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d64c4:	f7ff fc88 	bl	d5dd8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d64c8:	4620      	mov	r0, r4
   d64ca:	bd10      	pop	{r4, pc}

000d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d64cc:	b510      	push	{r4, lr}
   d64ce:	f851 3b04 	ldr.w	r3, [r1], #4
   d64d2:	4604      	mov	r4, r0
   d64d4:	f840 3b04 	str.w	r3, [r0], #4
   d64d8:	f7ff ffe3 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d64dc:	4620      	mov	r0, r4
   d64de:	bd10      	pop	{r4, pc}

000d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d64e0:	b510      	push	{r4, lr}
   d64e2:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d64e4:	6800      	ldr	r0, [r0, #0]
   d64e6:	b128      	cbz	r0, d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d64e8:	6843      	ldr	r3, [r0, #4]
   d64ea:	3b01      	subs	r3, #1
   d64ec:	6043      	str	r3, [r0, #4]
   d64ee:	b90b      	cbnz	r3, d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d64f0:	f7ff fc7c 	bl	d5dec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d64f4:	4620      	mov	r0, r4
   d64f6:	bd10      	pop	{r4, pc}

000d64f8 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d64f8:	b510      	push	{r4, lr}
   d64fa:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64fc:	3004      	adds	r0, #4
   d64fe:	f7ff ffef 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6502:	4620      	mov	r0, r4
   d6504:	bd10      	pop	{r4, pc}

000d6506 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6506:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6508:	6804      	ldr	r4, [r0, #0]
   d650a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d650c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d650e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6512:	42a6      	cmp	r6, r4
   d6514:	d004      	beq.n	d6520 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6516:	1d20      	adds	r0, r4, #4
   d6518:	f7ff ffe2 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d651c:	3408      	adds	r4, #8
   d651e:	e7f8      	b.n	d6512 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6520:	6828      	ldr	r0, [r5, #0]
   d6522:	f7ff fae1 	bl	d5ae8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6526:	4628      	mov	r0, r5
   d6528:	bd70      	pop	{r4, r5, r6, pc}

000d652a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d652a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d652c:	6804      	ldr	r4, [r0, #0]
   d652e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6530:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6532:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6536:	42a6      	cmp	r6, r4
   d6538:	d004      	beq.n	d6544 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d653a:	1d20      	adds	r0, r4, #4
   d653c:	f7ff ffd0 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6540:	3408      	adds	r4, #8
   d6542:	e7f8      	b.n	d6536 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6544:	6828      	ldr	r0, [r5, #0]
   d6546:	f7ff facf 	bl	d5ae8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d654a:	4628      	mov	r0, r5
   d654c:	bd70      	pop	{r4, r5, r6, pc}

000d654e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d654e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6550:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d6552:	f104 0018 	add.w	r0, r4, #24
   d6556:	f7ff ffe8 	bl	d652a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d655a:	f104 000c 	add.w	r0, r4, #12
   d655e:	f7ff ffd2 	bl	d6506 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d6562:	4620      	mov	r0, r4
   d6564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6568:	f7fd bd99 	b.w	d409e <_ZdlPv>

000d656c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d656e:	6804      	ldr	r4, [r0, #0]
   d6570:	4607      	mov	r7, r0
   d6572:	b1c4      	cbz	r4, d65a6 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6574:	69a5      	ldr	r5, [r4, #24]
   d6576:	69e3      	ldr	r3, [r4, #28]
   d6578:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d657c:	42ae      	cmp	r6, r5
   d657e:	d004      	beq.n	d658a <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6580:	1d28      	adds	r0, r5, #4
   d6582:	f7ff ffad 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6586:	3508      	adds	r5, #8
   d6588:	e7f8      	b.n	d657c <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d658a:	69a0      	ldr	r0, [r4, #24]
   d658c:	f7ff faac 	bl	d5ae8 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6590:	f104 000c 	add.w	r0, r4, #12
   d6594:	f7ff ffc9 	bl	d652a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6598:	4620      	mov	r0, r4
   d659a:	f7ff ffb4 	bl	d6506 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d659e:	2134      	movs	r1, #52	; 0x34
   d65a0:	4620      	mov	r0, r4
   d65a2:	f001 fa12 	bl	d79ca <_ZdlPvj>
   d65a6:	4638      	mov	r0, r7
   d65a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d65ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d65ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d65ae:	2500      	movs	r5, #0
   d65b0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65b2:	6045      	str	r5, [r0, #4]
   d65b4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65b6:	2024      	movs	r0, #36	; 0x24
   d65b8:	f7fd fd6d 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d65bc:	4604      	mov	r4, r0
   d65be:	b178      	cbz	r0, d65e0 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d65c0:	4603      	mov	r3, r0
   d65c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d65c6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d65ca:	f8c0 5002 	str.w	r5, [r0, #2]
   d65ce:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d65d0:	7285      	strb	r5, [r0, #10]
   d65d2:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d65d4:	60c5      	str	r5, [r0, #12]
   d65d6:	6105      	str	r5, [r0, #16]
   d65d8:	6145      	str	r5, [r0, #20]
   d65da:	6185      	str	r5, [r0, #24]
   d65dc:	61c5      	str	r5, [r0, #28]
   d65de:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d65e0:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65e2:	2014      	movs	r0, #20
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	f7fd fd56 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d65ea:	4603      	mov	r3, r0
   d65ec:	b128      	cbz	r0, d65fa <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d65ee:	2201      	movs	r2, #1
   d65f0:	6042      	str	r2, [r0, #4]
   d65f2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d65f4:	4a08      	ldr	r2, [pc, #32]	; (d6618 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d65f6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d65f8:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d65fa:	a802      	add	r0, sp, #8
   d65fc:	6872      	ldr	r2, [r6, #4]
   d65fe:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6602:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6604:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6606:	f7ff ff6b 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d660a:	6833      	ldr	r3, [r6, #0]
   d660c:	b90b      	cbnz	r3, d6612 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d660e:	f7ff fbe3 	bl	d5dd8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d6612:	4630      	mov	r0, r6
   d6614:	b002      	add	sp, #8
   d6616:	bd70      	pop	{r4, r5, r6, pc}
   d6618:	000d83d4 	.word	0x000d83d4

000d661c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d661c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d661e:	b570      	push	{r4, r5, r6, lr}
   d6620:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6622:	d91a      	bls.n	d665a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6624:	4290      	cmp	r0, r2
   d6626:	d219      	bcs.n	d665c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6628:	f1a1 0608 	sub.w	r6, r1, #8
   d662c:	1a51      	subs	r1, r2, r1
   d662e:	3904      	subs	r1, #4
   d6630:	1f15      	subs	r5, r2, #4
   d6632:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6634:	1f2b      	subs	r3, r5, #4
   d6636:	429e      	cmp	r6, r3
   d6638:	d025      	beq.n	d6686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d663a:	2c04      	cmp	r4, #4
   d663c:	d007      	beq.n	d664e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d663e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6642:	f844 3c04 	str.w	r3, [r4, #-4]
   d6646:	4629      	mov	r1, r5
   d6648:	4620      	mov	r0, r4
   d664a:	f7ff ff2a 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d664e:	4628      	mov	r0, r5
   d6650:	f7ff ff46 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6654:	3d08      	subs	r5, #8
   d6656:	3c08      	subs	r4, #8
   d6658:	e7ec      	b.n	d6634 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d665a:	d014      	beq.n	d6686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d665c:	1d0c      	adds	r4, r1, #4
   d665e:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6660:	1f23      	subs	r3, r4, #4
   d6662:	429d      	cmp	r5, r3
   d6664:	d00f      	beq.n	d6686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6666:	2e04      	cmp	r6, #4
   d6668:	d007      	beq.n	d667a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d666a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d666e:	f846 3c04 	str.w	r3, [r6, #-4]
   d6672:	4621      	mov	r1, r4
   d6674:	4630      	mov	r0, r6
   d6676:	f7ff ff14 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d667a:	4620      	mov	r0, r4
   d667c:	f7ff ff30 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6680:	3408      	adds	r4, #8
   d6682:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6684:	e7ec      	b.n	d6660 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6686:	bd70      	pop	{r4, r5, r6, pc}

000d6688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d668c:	6804      	ldr	r4, [r0, #0]
   d668e:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6690:	4605      	mov	r5, r0
   d6692:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6694:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6698:	42a7      	cmp	r7, r4
   d669a:	d018      	beq.n	d66ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d669c:	4641      	mov	r1, r8
   d669e:	4620      	mov	r0, r4
   d66a0:	f7ff fe26 	bl	d62f0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d66a4:	4606      	mov	r6, r0
   d66a6:	b908      	cbnz	r0, d66ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d66a8:	3408      	adds	r4, #8
   d66aa:	e7f5      	b.n	d6698 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d66ac:	b18c      	cbz	r4, d66d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d66ae:	1d20      	adds	r0, r4, #4
   d66b0:	f7ff ff16 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d66b4:	682b      	ldr	r3, [r5, #0]
   d66b6:	686a      	ldr	r2, [r5, #4]
   d66b8:	f104 0108 	add.w	r1, r4, #8
   d66bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d66c0:	4620      	mov	r0, r4
   d66c2:	f7ff ffab 	bl	d661c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d66c6:	686b      	ldr	r3, [r5, #4]
   d66c8:	3b01      	subs	r3, #1
   d66ca:	606b      	str	r3, [r5, #4]
    return true;
   d66cc:	e002      	b.n	d66d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d66ce:	2600      	movs	r6, #0
   d66d0:	e000      	b.n	d66d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d66d2:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d66d4:	4630      	mov	r0, r6
   d66d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d66da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d66da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d66dc:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66de:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d66e2:	6847      	ldr	r7, [r0, #4]
   d66e4:	9300      	str	r3, [sp, #0]
   d66e6:	a801      	add	r0, sp, #4
   d66e8:	f7ff fedb 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d66ec:	6866      	ldr	r6, [r4, #4]
   d66ee:	68a3      	ldr	r3, [r4, #8]
   d66f0:	429e      	cmp	r6, r3
   d66f2:	db14      	blt.n	d671e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d66f4:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d66f6:	2e00      	cmp	r6, #0
   d66f8:	dd0b      	ble.n	d6712 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d66fa:	00f0      	lsls	r0, r6, #3
   d66fc:	f7ff f9ec 	bl	d5ad8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6700:	4605      	mov	r5, r0
   d6702:	b318      	cbz	r0, d674c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6704:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6708:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d670c:	f7ff ff86 	bl	d661c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6710:	e000      	b.n	d6714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6712:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6714:	6820      	ldr	r0, [r4, #0]
   d6716:	f7ff f9e7 	bl	d5ae8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d671a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d671c:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d671e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6720:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6722:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6726:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d672a:	4629      	mov	r1, r5
   d672c:	f105 0008 	add.w	r0, r5, #8
   d6730:	f7ff ff74 	bl	d661c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6734:	b135      	cbz	r5, d6744 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6736:	9b00      	ldr	r3, [sp, #0]
   d6738:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d673c:	a901      	add	r1, sp, #4
   d673e:	1d28      	adds	r0, r5, #4
   d6740:	f7ff feaf 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6744:	6863      	ldr	r3, [r4, #4]
   d6746:	3301      	adds	r3, #1
   d6748:	6063      	str	r3, [r4, #4]
   d674a:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d674c:	a801      	add	r0, sp, #4
   d674e:	f7ff fec7 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6752:	4628      	mov	r0, r5
   d6754:	b003      	add	sp, #12
   d6756:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6758 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d675c:	4604      	mov	r4, r0
   d675e:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6760:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6762:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6764:	f7ff fb68 	bl	d5e38 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6768:	6823      	ldr	r3, [r4, #0]
   d676a:	2b03      	cmp	r3, #3
   d676c:	d002      	beq.n	d6774 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d676e:	2b04      	cmp	r3, #4
   d6770:	d042      	beq.n	d67f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6772:	e087      	b.n	d6884 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6774:	a804      	add	r0, sp, #16
   d6776:	f7ff ff19 	bl	d65ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d677a:	9b04      	ldr	r3, [sp, #16]
   d677c:	8922      	ldrh	r2, [r4, #8]
   d677e:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6780:	6862      	ldr	r2, [r4, #4]
   d6782:	9904      	ldr	r1, [sp, #16]
   d6784:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6788:	f8c1 3002 	str.w	r3, [r1, #2]
   d678c:	6853      	ldr	r3, [r2, #4]
   d678e:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6792:	a807      	add	r0, sp, #28
   d6794:	9b04      	ldr	r3, [sp, #16]
   d6796:	9306      	str	r3, [sp, #24]
   d6798:	a905      	add	r1, sp, #20
   d679a:	f7ff fe82 	bl	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d679e:	a906      	add	r1, sp, #24
   d67a0:	f105 0018 	add.w	r0, r5, #24
   d67a4:	f7ff ff99 	bl	d66da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d67a8:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67aa:	a807      	add	r0, sp, #28
   d67ac:	f7ff fe98 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67b0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d67b2:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d67b4:	b974      	cbnz	r4, d67d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d67b6:	4b36      	ldr	r3, [pc, #216]	; (d6890 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d67b8:	9300      	str	r3, [sp, #0]
   d67ba:	aa06      	add	r2, sp, #24
   d67bc:	4623      	mov	r3, r4
   d67be:	4935      	ldr	r1, [pc, #212]	; (d6894 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d67c0:	9407      	str	r4, [sp, #28]
   d67c2:	2032      	movs	r0, #50	; 0x32
   d67c4:	f7ff f904 	bl	d59d0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d67c8:	9b04      	ldr	r3, [sp, #16]
   d67ca:	4621      	mov	r1, r4
   d67cc:	8818      	ldrh	r0, [r3, #0]
   d67ce:	f7fe ff65 	bl	d569c <hal_ble_gap_disconnect>
   d67d2:	e00d      	b.n	d67f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d67d4:	4a30      	ldr	r2, [pc, #192]	; (d6898 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d67d6:	9200      	str	r2, [sp, #0]
   d67d8:	2300      	movs	r3, #0
   d67da:	aa06      	add	r2, sp, #24
   d67dc:	492d      	ldr	r1, [pc, #180]	; (d6894 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d67de:	9307      	str	r3, [sp, #28]
   d67e0:	2001      	movs	r0, #1
   d67e2:	f7ff f8f5 	bl	d59d0 <log_message>
                if (impl->connectedCb_) {
   d67e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d67e8:	b113      	cbz	r3, d67f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d67ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d67ec:	a804      	add	r0, sp, #16
   d67ee:	4798      	blx	r3
   d67f0:	a805      	add	r0, sp, #20
   d67f2:	f7ff fe75 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67f6:	e045      	b.n	d6884 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d67f8:	8921      	ldrh	r1, [r4, #8]
   d67fa:	4628      	mov	r0, r5
   d67fc:	f7ff fcf8 	bl	d61f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6800:	4607      	mov	r7, r0
   d6802:	2800      	cmp	r0, #0
   d6804:	d03e      	beq.n	d6884 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6806:	6804      	ldr	r4, [r0, #0]
   d6808:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d680a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d680c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6810:	8022      	strh	r2, [r4, #0]
   d6812:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6816:	4299      	cmp	r1, r3
   d6818:	d003      	beq.n	d6822 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d681a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d681e:	8042      	strh	r2, [r0, #2]
   d6820:	e7f9      	b.n	d6816 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6822:	68e6      	ldr	r6, [r4, #12]
   d6824:	6923      	ldr	r3, [r4, #16]
   d6826:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d682a:	45b0      	cmp	r8, r6
   d682c:	d004      	beq.n	d6838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d682e:	1d30      	adds	r0, r6, #4
   d6830:	f7ff fe56 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6834:	3608      	adds	r6, #8
   d6836:	e7f8      	b.n	d682a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6838:	2300      	movs	r3, #0
   d683a:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d683c:	69a6      	ldr	r6, [r4, #24]
   d683e:	69e3      	ldr	r3, [r4, #28]
   d6840:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6844:	45b0      	cmp	r8, r6
   d6846:	d004      	beq.n	d6852 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6848:	1d30      	adds	r0, r6, #4
   d684a:	f7ff fe49 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d684e:	3608      	adds	r6, #8
   d6850:	e7f8      	b.n	d6844 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6852:	2300      	movs	r3, #0
   d6854:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6856:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6858:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d685a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d685c:	b113      	cbz	r3, d6864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d685e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6860:	4638      	mov	r0, r7
   d6862:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6864:	2320      	movs	r3, #32
   d6866:	4a0d      	ldr	r2, [pc, #52]	; (d689c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6868:	9306      	str	r3, [sp, #24]
   d686a:	9200      	str	r2, [sp, #0]
   d686c:	2300      	movs	r3, #0
   d686e:	4909      	ldr	r1, [pc, #36]	; (d6894 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6870:	9307      	str	r3, [sp, #28]
   d6872:	2001      	movs	r0, #1
   d6874:	aa06      	add	r2, sp, #24
   d6876:	f7ff f8ab 	bl	d59d0 <log_message>
                    impl->peers_.removeOne(*peer);
   d687a:	4639      	mov	r1, r7
   d687c:	f105 0018 	add.w	r0, r5, #24
   d6880:	f7ff ff02 	bl	d6688 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6884:	a803      	add	r0, sp, #12
   d6886:	f7ff fae5 	bl	d5e54 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d688a:	b00e      	add	sp, #56	; 0x38
   d688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6890:	000d845a 	.word	0x000d845a
   d6894:	000d83f8 	.word	0x000d83f8
   d6898:	000d8480 	.word	0x000d8480
   d689c:	000d849d 	.word	0x000d849d

000d68a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d68a0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d68a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68a4:	4606      	mov	r6, r0
   d68a6:	460c      	mov	r4, r1
   d68a8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d68aa:	d914      	bls.n	d68d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d68ac:	4290      	cmp	r0, r2
   d68ae:	d213      	bcs.n	d68d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d68b0:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d68b4:	1a6c      	subs	r4, r5, r1
   d68b6:	f1a1 0708 	sub.w	r7, r1, #8
   d68ba:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d68bc:	42af      	cmp	r7, r5
   d68be:	d018      	beq.n	d68f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d68c0:	b11c      	cbz	r4, d68ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d68c2:	4629      	mov	r1, r5
   d68c4:	4620      	mov	r0, r4
   d68c6:	f7ff fe01 	bl	d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d68ca:	1d28      	adds	r0, r5, #4
   d68cc:	f7ff fe08 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d68d0:	3d08      	subs	r5, #8
   d68d2:	3c08      	subs	r4, #8
   d68d4:	e7f2      	b.n	d68bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d68d6:	d00c      	beq.n	d68f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d68d8:	42ac      	cmp	r4, r5
   d68da:	d00a      	beq.n	d68f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d68dc:	b11e      	cbz	r6, d68e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d68de:	4621      	mov	r1, r4
   d68e0:	4630      	mov	r0, r6
   d68e2:	f7ff fdf3 	bl	d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d68e6:	1d20      	adds	r0, r4, #4
   d68e8:	f7ff fdfa 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d68ec:	3408      	adds	r4, #8
   d68ee:	3608      	adds	r6, #8
   d68f0:	e7f2      	b.n	d68d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d68f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d68f4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d68f6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d68f8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d68fa:	dd0b      	ble.n	d6914 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d68fc:	00f0      	lsls	r0, r6, #3
   d68fe:	f7ff f8eb 	bl	d5ad8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6902:	4604      	mov	r4, r0
   d6904:	b170      	cbz	r0, d6924 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6906:	e895 0006 	ldmia.w	r5, {r1, r2}
   d690a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d690e:	f7ff ffc7 	bl	d68a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6912:	e000      	b.n	d6916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6914:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6916:	6828      	ldr	r0, [r5, #0]
   d6918:	f7ff f8e6 	bl	d5ae8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d691c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d691e:	60ae      	str	r6, [r5, #8]
        return true;
   d6920:	2001      	movs	r0, #1
   d6922:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6924:	bd70      	pop	{r4, r5, r6, pc}

000d6926 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6926:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6928:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d692a:	6845      	ldr	r5, [r0, #4]
   d692c:	4668      	mov	r0, sp
   d692e:	f7ff fdcd 	bl	d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6932:	6861      	ldr	r1, [r4, #4]
   d6934:	68a3      	ldr	r3, [r4, #8]
   d6936:	4299      	cmp	r1, r3
   d6938:	db05      	blt.n	d6946 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d693a:	3101      	adds	r1, #1
   d693c:	4620      	mov	r0, r4
   d693e:	f7ff ffd9 	bl	d68f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6942:	4606      	mov	r6, r0
   d6944:	b198      	cbz	r0, d696e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6946:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6948:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d694a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d694e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6952:	4629      	mov	r1, r5
   d6954:	f105 0008 	add.w	r0, r5, #8
   d6958:	f7ff ffa2 	bl	d68a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d695c:	b11d      	cbz	r5, d6966 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d695e:	4669      	mov	r1, sp
   d6960:	4628      	mov	r0, r5
   d6962:	f7ff fdb3 	bl	d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6966:	6863      	ldr	r3, [r4, #4]
   d6968:	3301      	adds	r3, #1
   d696a:	6063      	str	r3, [r4, #4]
   d696c:	2601      	movs	r6, #1
   d696e:	a801      	add	r0, sp, #4
   d6970:	f7ff fdb6 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6974:	4630      	mov	r0, r6
   d6976:	b002      	add	sp, #8
   d6978:	bd70      	pop	{r4, r5, r6, pc}

000d697a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d697a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d697e:	4606      	mov	r6, r0
   d6980:	460c      	mov	r4, r1
   d6982:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6984:	d914      	bls.n	d69b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6986:	4290      	cmp	r0, r2
   d6988:	d213      	bcs.n	d69b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d698a:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d698e:	1a6c      	subs	r4, r5, r1
   d6990:	f1a1 0708 	sub.w	r7, r1, #8
   d6994:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6996:	42af      	cmp	r7, r5
   d6998:	d018      	beq.n	d69cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d699a:	b11c      	cbz	r4, d69a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d699c:	4629      	mov	r1, r5
   d699e:	4620      	mov	r0, r4
   d69a0:	f7ff fd86 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69a4:	1d28      	adds	r0, r5, #4
   d69a6:	f7ff fd9b 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69aa:	3d08      	subs	r5, #8
   d69ac:	3c08      	subs	r4, #8
   d69ae:	e7f2      	b.n	d6996 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d69b0:	d00c      	beq.n	d69cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d69b2:	42ac      	cmp	r4, r5
   d69b4:	d00a      	beq.n	d69cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d69b6:	b11e      	cbz	r6, d69c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d69b8:	4621      	mov	r1, r4
   d69ba:	4630      	mov	r0, r6
   d69bc:	f7ff fd78 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69c0:	1d20      	adds	r0, r4, #4
   d69c2:	f7ff fd8d 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d69c6:	3408      	adds	r4, #8
   d69c8:	3608      	adds	r6, #8
   d69ca:	e7f2      	b.n	d69b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d69cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d69ce:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d69d0:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d69d2:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d69d4:	dd0b      	ble.n	d69ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d69d6:	00f0      	lsls	r0, r6, #3
   d69d8:	f7ff f87e 	bl	d5ad8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d69dc:	4604      	mov	r4, r0
   d69de:	b170      	cbz	r0, d69fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d69e0:	e895 0006 	ldmia.w	r5, {r1, r2}
   d69e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d69e8:	f7ff ffc7 	bl	d697a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d69ec:	e000      	b.n	d69f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d69ee:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d69f0:	6828      	ldr	r0, [r5, #0]
   d69f2:	f7ff f879 	bl	d5ae8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d69f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d69f8:	60ae      	str	r6, [r5, #8]
        return true;
   d69fa:	2001      	movs	r0, #1
   d69fc:	bd70      	pop	{r4, r5, r6, pc}
    }
   d69fe:	bd70      	pop	{r4, r5, r6, pc}

000d6a00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a02:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6a04:	6845      	ldr	r5, [r0, #4]
   d6a06:	4668      	mov	r0, sp
   d6a08:	f7ff fd52 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a0c:	6861      	ldr	r1, [r4, #4]
   d6a0e:	68a3      	ldr	r3, [r4, #8]
   d6a10:	4299      	cmp	r1, r3
   d6a12:	db05      	blt.n	d6a20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6a14:	3101      	adds	r1, #1
   d6a16:	4620      	mov	r0, r4
   d6a18:	f7ff ffd9 	bl	d69ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6a1c:	4606      	mov	r6, r0
   d6a1e:	b198      	cbz	r0, d6a48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6a20:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6a22:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6a28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6a2c:	4629      	mov	r1, r5
   d6a2e:	f105 0008 	add.w	r0, r5, #8
   d6a32:	f7ff ffa2 	bl	d697a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6a36:	b11d      	cbz	r5, d6a40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6a38:	4669      	mov	r1, sp
   d6a3a:	4628      	mov	r0, r5
   d6a3c:	f7ff fd38 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6a40:	6863      	ldr	r3, [r4, #4]
   d6a42:	3301      	adds	r3, #1
   d6a44:	6063      	str	r3, [r4, #4]
   d6a46:	2601      	movs	r6, #1
   d6a48:	a801      	add	r0, sp, #4
   d6a4a:	f7ff fd49 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6a4e:	4630      	mov	r0, r6
   d6a50:	b002      	add	sp, #8
   d6a52:	bd70      	pop	{r4, r5, r6, pc}

000d6a54 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6a54:	b510      	push	{r4, lr}
   d6a56:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6a58:	6840      	ldr	r0, [r0, #4]
   d6a5a:	b108      	cbz	r0, d6a60 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6a5c:	f7fd fb1f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}

000d6a64 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6a64:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6a66:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6a68:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6a6a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6a6e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6a72:	f7ff f8c3 	bl	d5bfc <_ZN6StringD1Ev>
   d6a76:	4668      	mov	r0, sp
   d6a78:	f7ff ffec 	bl	d6a54 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6a7c:	b003      	add	sp, #12
   d6a7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6a84:	b538      	push	{r3, r4, r5, lr}
   d6a86:	2300      	movs	r3, #0
   d6a88:	4604      	mov	r4, r0
   d6a8a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a8c:	2014      	movs	r0, #20
   d6a8e:	460d      	mov	r5, r1
   d6a90:	f7fd fb01 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6a94:	b128      	cbz	r0, d6aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a96:	2301      	movs	r3, #1
   d6a98:	6043      	str	r3, [r0, #4]
   d6a9a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6a9c:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6a9e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6aa0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6aa2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	bd38      	pop	{r3, r4, r5, pc}
   d6aa8:	000d839c 	.word	0x000d839c

000d6aac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ab0:	b088      	sub	sp, #32
   d6ab2:	4605      	mov	r5, r0
   d6ab4:	461e      	mov	r6, r3
   d6ab6:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6ab8:	2300      	movs	r3, #0
   d6aba:	460f      	mov	r7, r1
   d6abc:	4690      	mov	r8, r2
   d6abe:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6ac0:	9305      	str	r3, [sp, #20]
   d6ac2:	f7fd fae8 	bl	d4096 <_Znwj>
   d6ac6:	f8cd d018 	str.w	sp, [sp, #24]
   d6aca:	4604      	mov	r4, r0
   d6acc:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6ace:	b1b0      	cbz	r0, d6afe <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d6ad0:	f7ff fb6e 	bl	d61b0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d6ad4:	4639      	mov	r1, r7
   d6ad6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d6ada:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d6ade:	f7ff f901 	bl	d5ce4 <_ZN6StringaSEPKc>
        callback_ = callback;
   d6ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6ae4:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6ae6:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d6ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6aea:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6aec:	f104 0014 	add.w	r0, r4, #20
   d6af0:	f7ff fa30 	bl	d5f54 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d6af4:	990e      	ldr	r1, [sp, #56]	; 0x38
   d6af6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6afa:	f7ff fa2b 	bl	d5f54 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6afe:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6b00:	2600      	movs	r6, #0
   d6b02:	ab01      	add	r3, sp, #4
   d6b04:	aa02      	add	r2, sp, #8
   d6b06:	a803      	add	r0, sp, #12
   d6b08:	9607      	str	r6, [sp, #28]
   d6b0a:	f7ff ffbb 	bl	d6a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6b0e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6b10:	9a05      	ldr	r2, [sp, #20]
   d6b12:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6b14:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6b16:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6b18:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6b1a:	f7ff fce1 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6b1e:	a806      	add	r0, sp, #24
   d6b20:	f7ff ff98 	bl	d6a54 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6b24:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b26:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6b28:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b2a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6b2c:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6b2e:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b30:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d6b32:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d6b34:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6b38:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6b3a:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b3c:	f7ff fcd0 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b40:	a805      	add	r0, sp, #20
   d6b42:	f7ff fccd 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d6b46:	6829      	ldr	r1, [r5, #0]
   d6b48:	b919      	cbnz	r1, d6b52 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d6b4a:	4a03      	ldr	r2, [pc, #12]	; (d6b58 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d6b4c:	200a      	movs	r0, #10
   d6b4e:	f7fe ff37 	bl	d59c0 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6b52:	b008      	add	sp, #32
   d6b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b58:	000d55ed 	.word	0x000d55ed

000d6b5c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	b108      	cbz	r0, d6b68 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6b64:	f7fd fa9b 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6b68:	4620      	mov	r0, r4
   d6b6a:	bd10      	pop	{r4, pc}

000d6b6c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6b6c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6b6e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6b70:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6b72:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6b76:	4668      	mov	r0, sp
   d6b78:	f7ff fff0 	bl	d6b5c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6b7c:	b003      	add	sp, #12
   d6b7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6b84:	b538      	push	{r3, r4, r5, lr}
   d6b86:	2300      	movs	r3, #0
   d6b88:	4604      	mov	r4, r0
   d6b8a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6b8c:	2014      	movs	r0, #20
   d6b8e:	460d      	mov	r5, r1
   d6b90:	f7fd fa81 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6b94:	b128      	cbz	r0, d6ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6b96:	2301      	movs	r3, #1
   d6b98:	6043      	str	r3, [r0, #4]
   d6b9a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6b9c:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6b9e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6ba0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6ba2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	bd38      	pop	{r3, r4, r5, pc}
   d6ba8:	000d83b8 	.word	0x000d83b8

000d6bac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6bac:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6bae:	2600      	movs	r6, #0
   d6bb0:	b087      	sub	sp, #28
   d6bb2:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bb4:	6046      	str	r6, [r0, #4]
   d6bb6:	4604      	mov	r4, r0
   d6bb8:	2018      	movs	r0, #24
   d6bba:	460f      	mov	r7, r1
   d6bbc:	f7fd fa6b 	bl	d4096 <_Znwj>
   d6bc0:	f8cd d010 	str.w	sp, [sp, #16]
   d6bc4:	4605      	mov	r5, r0
   d6bc6:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6bc8:	b138      	cbz	r0, d6bda <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6bca:	f7ff f95d 	bl	d5e88 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6bce:	4639      	mov	r1, r7
   d6bd0:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6bd2:	82ae      	strh	r6, [r5, #20]
   d6bd4:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6bd6:	f7ff f9bd 	bl	d5f54 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6bda:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6bdc:	4629      	mov	r1, r5
   d6bde:	9305      	str	r3, [sp, #20]
   d6be0:	aa02      	add	r2, sp, #8
   d6be2:	ab01      	add	r3, sp, #4
   d6be4:	a803      	add	r0, sp, #12
   d6be6:	f7ff ffcd 	bl	d6b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6bea:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6bec:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6bee:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6bf0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6bf2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6bf4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6bf6:	f7ff fc73 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6bfa:	a804      	add	r0, sp, #16
   d6bfc:	f7ff ffae 	bl	d6b5c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d6c00:	6823      	ldr	r3, [r4, #0]
   d6c02:	b90b      	cbnz	r3, d6c08 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d6c04:	f7ff f8e8 	bl	d5dd8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d6c08:	4620      	mov	r0, r4
   d6c0a:	b007      	add	sp, #28
   d6c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6c10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c14:	4617      	mov	r7, r2
   d6c16:	b09f      	sub	sp, #124	; 0x7c
   d6c18:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6c1a:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6c1c:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6c1e:	f7ff f90b 	bl	d5e38 <_ZN8particle3ble13WiringBleLockC1Ev>
   d6c22:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6c24:	7923      	ldrb	r3, [r4, #4]
   d6c26:	2b00      	cmp	r3, #0
   d6c28:	f000 80f3 	beq.w	d6e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6c2c:	6833      	ldr	r3, [r6, #0]
   d6c2e:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6c30:	691b      	ldr	r3, [r3, #16]
   d6c32:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6c36:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6c38:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d6c3c:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6c40:	9b03      	ldr	r3, [sp, #12]
   d6c42:	42ab      	cmp	r3, r5
   d6c44:	d023      	beq.n	d6c8e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d6c46:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6c4a:	4650      	mov	r0, sl
   d6c4c:	f109 0114 	add.w	r1, r9, #20
   d6c50:	f7ff f999 	bl	d5f86 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6c54:	2800      	cmp	r0, #0
   d6c56:	f000 80e1 	beq.w	d6e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d6c5a:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6c5e:	4658      	mov	r0, fp
   d6c60:	f7ff f991 	bl	d5f86 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6c64:	2800      	cmp	r0, #0
   d6c66:	f000 80d9 	beq.w	d6e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6c6a:	6823      	ldr	r3, [r4, #0]
   d6c6c:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d6c70:	f8d9 3000 	ldr.w	r3, [r9]
   d6c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d6c78:	4299      	cmp	r1, r3
   d6c7a:	f040 80cf 	bne.w	d6e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6c7e:	2320      	movs	r3, #32
   d6c80:	4a6b      	ldr	r2, [pc, #428]	; (d6e30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d6c82:	9313      	str	r3, [sp, #76]	; 0x4c
   d6c84:	2300      	movs	r3, #0
   d6c86:	9200      	str	r2, [sp, #0]
   d6c88:	9314      	str	r3, [sp, #80]	; 0x50
   d6c8a:	aa13      	add	r2, sp, #76	; 0x4c
   d6c8c:	e0bd      	b.n	d6e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d6c8e:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d6c92:	4628      	mov	r0, r5
   d6c94:	f7ff f945 	bl	d5f22 <_ZNK8particle7BleUuid7isValidEv>
   d6c98:	b918      	cbnz	r0, d6ca2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6c9a:	4966      	ldr	r1, [pc, #408]	; (d6e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d6c9c:	4628      	mov	r0, r5
   d6c9e:	f7ff f964 	bl	d5f6a <_ZN8particle7BleUuidaSEPKh>
   d6ca2:	6833      	ldr	r3, [r6, #0]
   d6ca4:	f8d3 9000 	ldr.w	r9, [r3]
   d6ca8:	685b      	ldr	r3, [r3, #4]
   d6caa:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6cae:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6cb0:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6cb2:	d008      	beq.n	d6cc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6cb4:	f8d9 0000 	ldr.w	r0, [r9]
   d6cb8:	f7ff f965 	bl	d5f86 <_ZNK8particle7BleUuideqERKS0_>
   d6cbc:	2800      	cmp	r0, #0
   d6cbe:	d137      	bne.n	d6d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d6cc0:	f109 0908 	add.w	r9, r9, #8
   d6cc4:	e7f3      	b.n	d6cae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d6cc6:	a806      	add	r0, sp, #24
   d6cc8:	f7ff ff70 	bl	d6bac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6ccc:	aa13      	add	r2, sp, #76	; 0x4c
   d6cce:	462b      	mov	r3, r5
   d6cd0:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d6cd4:	4696      	mov	lr, r2
   d6cd6:	6818      	ldr	r0, [r3, #0]
   d6cd8:	6859      	ldr	r1, [r3, #4]
   d6cda:	4615      	mov	r5, r2
   d6cdc:	c503      	stmia	r5!, {r0, r1}
   d6cde:	3308      	adds	r3, #8
   d6ce0:	4563      	cmp	r3, ip
   d6ce2:	462a      	mov	r2, r5
   d6ce4:	d1f7      	bne.n	d6cd6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d6ce6:	6818      	ldr	r0, [r3, #0]
   d6ce8:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6cea:	9a06      	ldr	r2, [sp, #24]
   d6cec:	2300      	movs	r3, #0
   d6cee:	3214      	adds	r2, #20
   d6cf0:	4671      	mov	r1, lr
   d6cf2:	2001      	movs	r0, #1
   d6cf4:	f7fe fcdc 	bl	d56b0 <hal_ble_gatt_server_add_service>
   d6cf8:	2800      	cmp	r0, #0
   d6cfa:	d17e      	bne.n	d6dfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d6cfc:	6835      	ldr	r5, [r6, #0]
   d6cfe:	a906      	add	r1, sp, #24
   d6d00:	a80b      	add	r0, sp, #44	; 0x2c
   d6d02:	f7ff fbe3 	bl	d64cc <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d6d06:	4628      	mov	r0, r5
   d6d08:	a90b      	add	r1, sp, #44	; 0x2c
   d6d0a:	f7ff fe0c 	bl	d6926 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6d0e:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6d10:	a80c      	add	r0, sp, #48	; 0x30
   d6d12:	f7ff fbe5 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d16:	2d00      	cmp	r5, #0
   d6d18:	d06f      	beq.n	d6dfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d6d1a:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d6d1c:	6853      	ldr	r3, [r2, #4]
   d6d1e:	6812      	ldr	r2, [r2, #0]
   d6d20:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6d24:	3b01      	subs	r3, #1
   d6d26:	a807      	add	r0, sp, #28
   d6d28:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6d2c:	f7ff fbd8 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d6d30:	f104 0514 	add.w	r5, r4, #20
   d6d34:	4628      	mov	r0, r5
   d6d36:	f7ff f8f4 	bl	d5f22 <_ZNK8particle7BleUuid7isValidEv>
   d6d3a:	b968      	cbnz	r0, d6d58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6d3c:	4b3e      	ldr	r3, [pc, #248]	; (d6e38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6d3e:	493d      	ldr	r1, [pc, #244]	; (d6e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6d40:	881a      	ldrh	r2, [r3, #0]
   d6d42:	3201      	adds	r2, #1
   d6d44:	b292      	uxth	r2, r2
   d6d46:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6d48:	a813      	add	r0, sp, #76	; 0x4c
   d6d4a:	2301      	movs	r3, #1
   d6d4c:	f7ff f8d5 	bl	d5efa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6d50:	a913      	add	r1, sp, #76	; 0x4c
   d6d52:	4628      	mov	r0, r5
   d6d54:	f7ff f8fe 	bl	d5f54 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6d58:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6d5c:	4652      	mov	r2, sl
   d6d5e:	2100      	movs	r1, #0
   d6d60:	a813      	add	r0, sp, #76	; 0x4c
   d6d62:	f000 ffc0 	bl	d7ce6 <memset>
    charInit.version = BLE_API_VERSION;
   d6d66:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6d68:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d6d6a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d6d6e:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d6d72:	462b      	mov	r3, r5
   d6d74:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d6d78:	4615      	mov	r5, r2
   d6d7a:	6818      	ldr	r0, [r3, #0]
   d6d7c:	6859      	ldr	r1, [r3, #4]
   d6d7e:	4696      	mov	lr, r2
   d6d80:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6d84:	3308      	adds	r3, #8
   d6d86:	4563      	cmp	r3, ip
   d6d88:	4672      	mov	r2, lr
   d6d8a:	d1f6      	bne.n	d6d7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d6d8c:	6818      	ldr	r0, [r3, #0]
   d6d8e:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d6d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d94:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d6d98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6d9c:	682b      	ldr	r3, [r5, #0]
   d6d9e:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d6da2:	7923      	ldrb	r3, [r4, #4]
   d6da4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d6da8:	f8d9 3000 	ldr.w	r3, [r9]
   d6dac:	8a9b      	ldrh	r3, [r3, #20]
   d6dae:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d6db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6db4:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6db6:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6db8:	4b20      	ldr	r3, [pc, #128]	; (d6e3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d6dba:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6dbc:	1da1      	adds	r1, r4, #6
   d6dbe:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d6dc0:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6dc2:	f7fe fc9d 	bl	d5700 <hal_ble_gatt_server_add_characteristic>
   d6dc6:	bb20      	cbnz	r0, d6e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d6dc8:	2301      	movs	r3, #1
   d6dca:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6dcc:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6dce:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6dd0:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d6dd2:	a80b      	add	r0, sp, #44	; 0x2c
   d6dd4:	f7ff fb6c 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6dd8:	4620      	mov	r0, r4
   d6dda:	a90b      	add	r1, sp, #44	; 0x2c
   d6ddc:	f7ff fe10 	bl	d6a00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6de0:	4604      	mov	r4, r0
   d6de2:	a80c      	add	r0, sp, #48	; 0x30
   d6de4:	f7ff fb7c 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6de8:	b99c      	cbnz	r4, d6e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d6dea:	2320      	movs	r3, #32
   d6dec:	930b      	str	r3, [sp, #44]	; 0x2c
   d6dee:	4b14      	ldr	r3, [pc, #80]	; (d6e40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d6df0:	9300      	str	r3, [sp, #0]
   d6df2:	940c      	str	r4, [sp, #48]	; 0x30
   d6df4:	4623      	mov	r3, r4
   d6df6:	aa0b      	add	r2, sp, #44	; 0x2c
   d6df8:	e007      	b.n	d6e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d6dfa:	4639      	mov	r1, r7
   d6dfc:	4640      	mov	r0, r8
   d6dfe:	f7ff fb57 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e02:	a807      	add	r0, sp, #28
   d6e04:	f7ff fb6c 	bl	d64e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e08:	e00a      	b.n	d6e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6e0a:	490e      	ldr	r1, [pc, #56]	; (d6e44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d6e0c:	2032      	movs	r0, #50	; 0x32
   d6e0e:	f7fe fddf 	bl	d59d0 <log_message>
            return characteristic;
   d6e12:	4639      	mov	r1, r7
   d6e14:	4640      	mov	r0, r8
   d6e16:	f7ff fb4b 	bl	d64b0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e1a:	e001      	b.n	d6e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d6e1c:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6e1e:	e70f      	b.n	d6c40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d6e20:	a805      	add	r0, sp, #20
   d6e22:	f7ff f817 	bl	d5e54 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6e26:	4640      	mov	r0, r8
   d6e28:	b01f      	add	sp, #124	; 0x7c
   d6e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e2e:	bf00      	nop
   d6e30:	000d856d 	.word	0x000d856d
   d6e34:	000d83e8 	.word	0x000d83e8
   d6e38:	2003e3d4 	.word	0x2003e3d4
   d6e3c:	000d63bd 	.word	0x000d63bd
   d6e40:	000d8546 	.word	0x000d8546
   d6e44:	000d83f8 	.word	0x000d83f8

000d6e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6e48:	4802      	ldr	r0, [pc, #8]	; (d6e54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6e4a:	2300      	movs	r3, #0
   d6e4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6e4e:	f7fe bc9f 	b.w	d5790 <os_mutex_recursive_create>
   d6e52:	bf00      	nop
   d6e54:	2003e3d8 	.word	0x2003e3d8

000d6e58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e5a:	4606      	mov	r6, r0
   d6e5c:	460d      	mov	r5, r1
   d6e5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6e60:	2400      	movs	r4, #0
  while (size--) {
   d6e62:	42bd      	cmp	r5, r7
   d6e64:	d00c      	beq.n	d6e80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e66:	6833      	ldr	r3, [r6, #0]
   d6e68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e6c:	689b      	ldr	r3, [r3, #8]
   d6e6e:	4630      	mov	r0, r6
   d6e70:	4798      	blx	r3
     if (chunk>=0)
   d6e72:	2800      	cmp	r0, #0
   d6e74:	db01      	blt.n	d6e7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6e78:	e7f3      	b.n	d6e62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e7a:	2c00      	cmp	r4, #0
   d6e7c:	bf08      	it	eq
   d6e7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e80:	4620      	mov	r0, r4
   d6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e84:	b570      	push	{r4, r5, r6, lr}
   d6e86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6e88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6e8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6e8c:	b149      	cbz	r1, d6ea2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6e8e:	f000 ff63 	bl	d7d58 <strlen>
   d6e92:	682b      	ldr	r3, [r5, #0]
   d6e94:	4602      	mov	r2, r0
   d6e96:	4621      	mov	r1, r4
   d6e98:	4628      	mov	r0, r5
   d6e9a:	68db      	ldr	r3, [r3, #12]
    }
   d6e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6ea0:	4718      	bx	r3
    }
   d6ea2:	bd70      	pop	{r4, r5, r6, pc}

000d6ea4 <_ZN5Print5printEPKc>:
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	f7ff ffed 	bl	d6e84 <_ZN5Print5writeEPKc>
   d6eaa:	bd08      	pop	{r3, pc}

000d6eac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6eac:	6803      	ldr	r3, [r0, #0]
   d6eae:	689b      	ldr	r3, [r3, #8]
   d6eb0:	4718      	bx	r3

000d6eb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6eb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6eb4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6eb6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6eb8:	f7ff fff8 	bl	d6eac <_ZN5Print5printEc>
  n += print('\n');
   d6ebc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6ebe:	4604      	mov	r4, r0
  n += print('\n');
   d6ec0:	4628      	mov	r0, r5
   d6ec2:	f7ff fff3 	bl	d6eac <_ZN5Print5printEc>
  return n;
}
   d6ec6:	4420      	add	r0, r4
   d6ec8:	bd38      	pop	{r3, r4, r5, pc}

000d6eca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6eca:	b538      	push	{r3, r4, r5, lr}
   d6ecc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6ece:	f7ff ffd9 	bl	d6e84 <_ZN5Print5writeEPKc>
   d6ed2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6ed4:	4628      	mov	r0, r5
   d6ed6:	f7ff ffec 	bl	d6eb2 <_ZN5Print7printlnEv>
  return n;
}
   d6eda:	4420      	add	r0, r4
   d6edc:	bd38      	pop	{r3, r4, r5, pc}

000d6ede <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6ede:	b530      	push	{r4, r5, lr}
   d6ee0:	b08b      	sub	sp, #44	; 0x2c
   d6ee2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6ee4:	2100      	movs	r1, #0
   d6ee6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6eea:	2a01      	cmp	r2, #1
   d6eec:	bf98      	it	ls
   d6eee:	220a      	movls	r2, #10
   d6ef0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6ef4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6ef8:	fb05 3312 	mls	r3, r5, r2, r3
   d6efc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6f00:	2b09      	cmp	r3, #9
   d6f02:	bf94      	ite	ls
   d6f04:	3330      	addls	r3, #48	; 0x30
   d6f06:	3337      	addhi	r3, #55	; 0x37
   d6f08:	b2db      	uxtb	r3, r3
   d6f0a:	4621      	mov	r1, r4
   d6f0c:	f804 3901 	strb.w	r3, [r4], #-1
   d6f10:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6f12:	2d00      	cmp	r5, #0
   d6f14:	d1ee      	bne.n	d6ef4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6f16:	f7ff ffb5 	bl	d6e84 <_ZN5Print5writeEPKc>
}
   d6f1a:	b00b      	add	sp, #44	; 0x2c
   d6f1c:	bd30      	pop	{r4, r5, pc}

000d6f1e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6f1e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6f20:	b92a      	cbnz	r2, d6f2e <_ZN5Print5printEmi+0x10>
   d6f22:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6f24:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6f28:	689b      	ldr	r3, [r3, #8]
   d6f2a:	b2c9      	uxtb	r1, r1
   d6f2c:	4718      	bx	r3
  else return printNumber(n, base);
   d6f2e:	b2d2      	uxtb	r2, r2
}
   d6f30:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6f34:	f7ff bfd3 	b.w	d6ede <_ZN5Print11printNumberEmh>

000d6f38 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6f38:	f7ff bff1 	b.w	d6f1e <_ZN5Print5printEmi>

000d6f3c <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d6f3c:	b538      	push	{r3, r4, r5, lr}
   d6f3e:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6f40:	f7ff ffed 	bl	d6f1e <_ZN5Print5printEmi>
   d6f44:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d6f46:	4628      	mov	r0, r5
   d6f48:	f7ff ffb3 	bl	d6eb2 <_ZN5Print7printlnEv>
  return n;
}
   d6f4c:	4420      	add	r0, r4
   d6f4e:	bd38      	pop	{r3, r4, r5, pc}

000d6f50 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f54:	4607      	mov	r7, r0
   d6f56:	460e      	mov	r6, r1
  if (base == 0) {
   d6f58:	4615      	mov	r5, r2
   d6f5a:	b92a      	cbnz	r2, d6f68 <_ZN5Print5printEli+0x18>
    return write(n);
   d6f5c:	6803      	ldr	r3, [r0, #0]
   d6f5e:	b2c9      	uxtb	r1, r1
   d6f60:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6f66:	4718      	bx	r3
  } else if (base == 10) {
   d6f68:	2a0a      	cmp	r2, #10
   d6f6a:	d102      	bne.n	d6f72 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6f6c:	2900      	cmp	r1, #0
   d6f6e:	da01      	bge.n	d6f74 <_ZN5Print5printEli+0x24>
   d6f70:	e004      	b.n	d6f7c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6f72:	b2d2      	uxtb	r2, r2
  }
}
   d6f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6f78:	f7ff bfb1 	b.w	d6ede <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6f7c:	212d      	movs	r1, #45	; 0x2d
   d6f7e:	f7ff ff95 	bl	d6eac <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6f82:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6f84:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6f86:	4271      	negs	r1, r6
   d6f88:	4638      	mov	r0, r7
   d6f8a:	f7ff ffa8 	bl	d6ede <_ZN5Print11printNumberEmh>
   d6f8e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f94 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d6f94:	b538      	push	{r3, r4, r5, lr}
   d6f96:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6f98:	f7ff ffda 	bl	d6f50 <_ZN5Print5printEli>
   d6f9c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d6f9e:	4628      	mov	r0, r5
   d6fa0:	f7ff ff87 	bl	d6eb2 <_ZN5Print7printlnEv>
  return n;
}
   d6fa4:	4420      	add	r0, r4
   d6fa6:	bd38      	pop	{r3, r4, r5, pc}

000d6fa8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6fa8:	b40c      	push	{r2, r3}
   d6faa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fae:	b087      	sub	sp, #28
   d6fb0:	af00      	add	r7, sp, #0
   d6fb2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6fb6:	4605      	mov	r5, r0
   d6fb8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6fbc:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6fbe:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6fc0:	4623      	mov	r3, r4
   d6fc2:	464a      	mov	r2, r9
   d6fc4:	2114      	movs	r1, #20
   d6fc6:	1d38      	adds	r0, r7, #4
   d6fc8:	f7fe fda6 	bl	d5b18 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6fcc:	2813      	cmp	r0, #19
   d6fce:	d805      	bhi.n	d6fdc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6fd0:	1d39      	adds	r1, r7, #4
   d6fd2:	4628      	mov	r0, r5
   d6fd4:	f7ff ff56 	bl	d6e84 <_ZN5Print5writeEPKc>
   d6fd8:	4604      	mov	r4, r0
   d6fda:	e013      	b.n	d7004 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6fdc:	f100 0308 	add.w	r3, r0, #8
   d6fe0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6fe4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6fe6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6fea:	1c41      	adds	r1, r0, #1
   d6fec:	4623      	mov	r3, r4
   d6fee:	464a      	mov	r2, r9
   d6ff0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6ff2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6ff4:	f7fe fd90 	bl	d5b18 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6ff8:	4669      	mov	r1, sp
   d6ffa:	4628      	mov	r0, r5
   d6ffc:	f7ff ff42 	bl	d6e84 <_ZN5Print5writeEPKc>
   d7000:	4604      	mov	r4, r0
   d7002:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7004:	b11e      	cbz	r6, d700e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7006:	4628      	mov	r0, r5
   d7008:	f7ff ff53 	bl	d6eb2 <_ZN5Print7printlnEv>
   d700c:	4404      	add	r4, r0
    return n;
}
   d700e:	4620      	mov	r0, r4
   d7010:	371c      	adds	r7, #28
   d7012:	46bd      	mov	sp, r7
   d7014:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7018:	b002      	add	sp, #8
   d701a:	4770      	bx	lr

000d701c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d701c:	4b01      	ldr	r3, [pc, #4]	; (d7024 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d701e:	4a02      	ldr	r2, [pc, #8]	; (d7028 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7020:	601a      	str	r2, [r3, #0]
   d7022:	4770      	bx	lr
   d7024:	2003e3dc 	.word	0x2003e3dc
   d7028:	000d860b 	.word	0x000d860b

000d702c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d702c:	4b02      	ldr	r3, [pc, #8]	; (d7038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d702e:	681a      	ldr	r2, [r3, #0]
   d7030:	4b02      	ldr	r3, [pc, #8]	; (d703c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7032:	601a      	str	r2, [r3, #0]
   d7034:	4770      	bx	lr
   d7036:	bf00      	nop
   d7038:	2003e310 	.word	0x2003e310
   d703c:	2003e3e0 	.word	0x2003e3e0

000d7040 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7040:	2100      	movs	r1, #0
   d7042:	f7fe bcd5 	b.w	d59f0 <system_delay_ms>

000d7046 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7046:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7048:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d704a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d704c:	b113      	cbz	r3, d7054 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d704e:	2203      	movs	r2, #3
   d7050:	4601      	mov	r1, r0
   d7052:	4798      	blx	r3
    }
   d7054:	4620      	mov	r0, r4
   d7056:	bd10      	pop	{r4, pc}

000d7058 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7058:	b510      	push	{r4, lr}
   d705a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d705c:	f7ff fff3 	bl	d7046 <_ZNSt14_Function_baseD1Ev>
   d7060:	4620      	mov	r0, r4
   d7062:	bd10      	pop	{r4, pc}

000d7064 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d7064:	b510      	push	{r4, lr}
   d7066:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7068:	f7fe fc9a 	bl	d59a0 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d706c:	4284      	cmp	r4, r0
   d706e:	d008      	beq.n	d7082 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7070:	b11c      	cbz	r4, d707a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d7076:	f7fe bc7b 	b.w	d5970 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d707a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d707e:	f7fe bc7f 	b.w	d5980 <LED_Signaling_Stop>
   d7082:	bd10      	pop	{r4, pc}

000d7084 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d7084:	b570      	push	{r4, r5, r6, lr}
   d7086:	4605      	mov	r5, r0
   d7088:	460e      	mov	r6, r1
   d708a:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d708c:	f7fe fc88 	bl	d59a0 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d7090:	b150      	cbz	r0, d70a8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d7092:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d7096:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d709a:	f7fe fc61 	bl	d5960 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d709e:	20e7      	movs	r0, #231	; 0xe7
}
   d70a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d70a4:	f7fe bc84 	b.w	d59b0 <LED_On>
   d70a8:	bd70      	pop	{r4, r5, r6, pc}

000d70aa <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d70aa:	b510      	push	{r4, lr}
   d70ac:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d70ae:	f7fe fc6f 	bl	d5990 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d70b2:	f7fe fc75 	bl	d59a0 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d70b6:	b128      	cbz	r0, d70c4 <_ZN8RGBClass10brightnessEhb+0x1a>
   d70b8:	b124      	cbz	r4, d70c4 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d70ba:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d70bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d70c0:	f7fe bc76 	b.w	d59b0 <LED_On>
   d70c4:	bd10      	pop	{r4, pc}
	...

000d70c8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70c8:	4803      	ldr	r0, [pc, #12]	; (d70d8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d70ca:	4a04      	ldr	r2, [pc, #16]	; (d70dc <_GLOBAL__sub_I_RGB+0x14>)
   d70cc:	4904      	ldr	r1, [pc, #16]	; (d70e0 <_GLOBAL__sub_I_RGB+0x18>)
   d70ce:	2300      	movs	r3, #0
   d70d0:	6083      	str	r3, [r0, #8]
   d70d2:	f000 bc75 	b.w	d79c0 <__aeabi_atexit>
   d70d6:	bf00      	nop
   d70d8:	2003e3e4 	.word	0x2003e3e4
   d70dc:	2003e378 	.word	0x2003e378
   d70e0:	000d7059 	.word	0x000d7059

000d70e4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d70e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d70e6:	4b0f      	ldr	r3, [pc, #60]	; (d7124 <serialEventRun+0x40>)
   d70e8:	b133      	cbz	r3, d70f8 <serialEventRun+0x14>
   d70ea:	f000 f93d 	bl	d7368 <_Z16_fetch_usbserialv>
   d70ee:	6803      	ldr	r3, [r0, #0]
   d70f0:	691b      	ldr	r3, [r3, #16]
   d70f2:	4798      	blx	r3
   d70f4:	2800      	cmp	r0, #0
   d70f6:	dc0d      	bgt.n	d7114 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d70f8:	4b0b      	ldr	r3, [pc, #44]	; (d7128 <serialEventRun+0x44>)
   d70fa:	b133      	cbz	r3, d710a <serialEventRun+0x26>
   d70fc:	f000 f9ea 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d7100:	6803      	ldr	r3, [r0, #0]
   d7102:	691b      	ldr	r3, [r3, #16]
   d7104:	4798      	blx	r3
   d7106:	2800      	cmp	r0, #0
   d7108:	dc07      	bgt.n	d711a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d710a:	4b08      	ldr	r3, [pc, #32]	; (d712c <serialEventRun+0x48>)
   d710c:	b143      	cbz	r3, d7120 <serialEventRun+0x3c>
   d710e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d7112:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7114:	f3af 8000 	nop.w
   d7118:	e7ee      	b.n	d70f8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d711a:	f3af 8000 	nop.w
   d711e:	e7f4      	b.n	d710a <serialEventRun+0x26>
   d7120:	bd08      	pop	{r3, pc}
   d7122:	bf00      	nop
	...

000d7130 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7130:	b508      	push	{r3, lr}
	serialEventRun();
   d7132:	f7ff ffd7 	bl	d70e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7136:	f7fe fa61 	bl	d55fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d713a:	4b01      	ldr	r3, [pc, #4]	; (d7140 <_post_loop+0x10>)
   d713c:	6018      	str	r0, [r3, #0]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	2003e72c 	.word	0x2003e72c

000d7144 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7144:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7146:	2300      	movs	r3, #0
   d7148:	9300      	str	r3, [sp, #0]
   d714a:	461a      	mov	r2, r3
   d714c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7150:	f7fe fc60 	bl	d5a14 <system_ctrl_set_result>
}
   d7154:	b003      	add	sp, #12
   d7156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d715c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d715c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d715e:	8843      	ldrh	r3, [r0, #2]
   d7160:	2b0a      	cmp	r3, #10
   d7162:	d008      	beq.n	d7176 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7164:	2b50      	cmp	r3, #80	; 0x50
   d7166:	d109      	bne.n	d717c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7168:	4b09      	ldr	r3, [pc, #36]	; (d7190 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d716a:	681b      	ldr	r3, [r3, #0]
   d716c:	b13b      	cbz	r3, d717e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d716e:	b003      	add	sp, #12
   d7170:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7174:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7176:	f7ff ffe5 	bl	d7144 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d717a:	e006      	b.n	d718a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d717c:	2300      	movs	r3, #0
   d717e:	9300      	str	r3, [sp, #0]
   d7180:	461a      	mov	r2, r3
   d7182:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7186:	f7fe fc45 	bl	d5a14 <system_ctrl_set_result>
        break;
    }
}
   d718a:	b003      	add	sp, #12
   d718c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7190:	2003e3f4 	.word	0x2003e3f4

000d7194 <module_user_init_hook>:

void module_user_init_hook()
{
   d7194:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7196:	f7fe fa21 	bl	d55dc <HAL_RNG_GetRandomNumber>
   d719a:	4604      	mov	r4, r0
    srand(seed);
   d719c:	f000 fdac 	bl	d7cf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d71a0:	4b07      	ldr	r3, [pc, #28]	; (d71c0 <module_user_init_hook+0x2c>)
   d71a2:	b113      	cbz	r3, d71aa <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d71a4:	4620      	mov	r0, r4
   d71a6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d71aa:	2100      	movs	r1, #0
   d71ac:	4804      	ldr	r0, [pc, #16]	; (d71c0 <module_user_init_hook+0x2c>)
   d71ae:	f7fe fc8b 	bl	d5ac8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d71b2:	2100      	movs	r1, #0
   d71b4:	4803      	ldr	r0, [pc, #12]	; (d71c4 <module_user_init_hook+0x30>)
}
   d71b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d71ba:	f7fe bc21 	b.w	d5a00 <system_ctrl_set_app_request_handler>
   d71be:	bf00      	nop
   d71c0:	00000000 	.word	0x00000000
   d71c4:	000d715d 	.word	0x000d715d

000d71c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d71c8:	4770      	bx	lr

000d71ca <_ZN9IPAddressD0Ev>:
   d71ca:	b510      	push	{r4, lr}
   d71cc:	2118      	movs	r1, #24
   d71ce:	4604      	mov	r4, r0
   d71d0:	f000 fbfb 	bl	d79ca <_ZdlPvj>
   d71d4:	4620      	mov	r0, r4
   d71d6:	bd10      	pop	{r4, pc}

000d71d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d71d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d71da:	7d03      	ldrb	r3, [r0, #20]
   d71dc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d71de:	b08d      	sub	sp, #52	; 0x34
   d71e0:	460e      	mov	r6, r1
   d71e2:	f100 0704 	add.w	r7, r0, #4
   d71e6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d71ea:	d002      	beq.n	d71f2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d71ec:	f100 0508 	add.w	r5, r0, #8
   d71f0:	e018      	b.n	d7224 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d71f2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d71f4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d71f6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d71fa:	232f      	movs	r3, #47	; 0x2f
   d71fc:	462a      	mov	r2, r5
   d71fe:	200a      	movs	r0, #10
   d7200:	f7fe fade 	bl	d57c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7204:	4628      	mov	r0, r5
   d7206:	f000 fda7 	bl	d7d58 <strlen>
   d720a:	6833      	ldr	r3, [r6, #0]
   d720c:	4602      	mov	r2, r0
   d720e:	68db      	ldr	r3, [r3, #12]
   d7210:	4629      	mov	r1, r5
   d7212:	4630      	mov	r0, r6
   d7214:	4798      	blx	r3
   d7216:	e00f      	b.n	d7238 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7218:	b124      	cbz	r4, d7224 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d721a:	212e      	movs	r1, #46	; 0x2e
   d721c:	4630      	mov	r0, r6
   d721e:	f7ff fe45 	bl	d6eac <_ZN5Print5printEc>
   d7222:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7224:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7228:	220a      	movs	r2, #10
   d722a:	4630      	mov	r0, r6
   d722c:	f7ff fe84 	bl	d6f38 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7230:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7232:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7234:	d1f0      	bne.n	d7218 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7236:	4620      	mov	r0, r4
    }
    return n;
}
   d7238:	b00d      	add	sp, #52	; 0x34
   d723a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d723c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d723c:	b510      	push	{r4, lr}
   d723e:	4b05      	ldr	r3, [pc, #20]	; (d7254 <_ZN9IPAddressC1Ev+0x18>)
   d7240:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7242:	2211      	movs	r2, #17
   d7244:	f840 3b04 	str.w	r3, [r0], #4
   d7248:	2100      	movs	r1, #0
   d724a:	f000 fd4c 	bl	d7ce6 <memset>
{
    clear();
}
   d724e:	4620      	mov	r0, r4
   d7250:	bd10      	pop	{r4, pc}
   d7252:	bf00      	nop
   d7254:	000d86a8 	.word	0x000d86a8

000d7258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7258:	4603      	mov	r3, r0
   d725a:	4a07      	ldr	r2, [pc, #28]	; (d7278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d725c:	b510      	push	{r4, lr}
   d725e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7262:	f101 0210 	add.w	r2, r1, #16
   d7266:	f851 4b04 	ldr.w	r4, [r1], #4
   d726a:	f843 4b04 	str.w	r4, [r3], #4
   d726e:	4291      	cmp	r1, r2
   d7270:	d1f9      	bne.n	d7266 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7272:	780a      	ldrb	r2, [r1, #0]
   d7274:	701a      	strb	r2, [r3, #0]
}
   d7276:	bd10      	pop	{r4, pc}
   d7278:	000d86a8 	.word	0x000d86a8

000d727c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d727c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d727e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7282:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7286:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d728a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d728e:	2304      	movs	r3, #4
   d7290:	6041      	str	r1, [r0, #4]
   d7292:	7503      	strb	r3, [r0, #20]
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7296:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7298:	780d      	ldrb	r5, [r1, #0]
   d729a:	788b      	ldrb	r3, [r1, #2]
   d729c:	784a      	ldrb	r2, [r1, #1]
   d729e:	78c9      	ldrb	r1, [r1, #3]
   d72a0:	9100      	str	r1, [sp, #0]
   d72a2:	4629      	mov	r1, r5
   d72a4:	f7ff ffea 	bl	d727c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d72a8:	b003      	add	sp, #12
   d72aa:	bd30      	pop	{r4, r5, pc}

000d72ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72ac:	7441      	strb	r1, [r0, #17]
   d72ae:	4770      	bx	lr

000d72b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d72b0:	4770      	bx	lr

000d72b2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d72b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d72b4:	2100      	movs	r1, #0
   d72b6:	7c00      	ldrb	r0, [r0, #16]
   d72b8:	f7fe fb3a 	bl	d5930 <HAL_USB_USART_Receive_Data>
}
   d72bc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72c0:	bf28      	it	cs
   d72c2:	f04f 30ff 	movcs.w	r0, #4294967295
   d72c6:	bd08      	pop	{r3, pc}

000d72c8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d72c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d72ca:	2101      	movs	r1, #1
   d72cc:	7c00      	ldrb	r0, [r0, #16]
   d72ce:	f7fe fb2f 	bl	d5930 <HAL_USB_USART_Receive_Data>
}
   d72d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d72d6:	bf28      	it	cs
   d72d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d72dc:	bd08      	pop	{r3, pc}

000d72de <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d72de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d72e0:	7c00      	ldrb	r0, [r0, #16]
   d72e2:	f7fe fb1d 	bl	d5920 <HAL_USB_USART_Available_Data_For_Write>
}
   d72e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72ea:	bd08      	pop	{r3, pc}

000d72ec <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d72ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d72ee:	7c00      	ldrb	r0, [r0, #16]
   d72f0:	f7fe fb0e 	bl	d5910 <HAL_USB_USART_Available_Data>
}
   d72f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72f8:	bd08      	pop	{r3, pc}

000d72fa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d72fa:	7c00      	ldrb	r0, [r0, #16]
   d72fc:	f7fe bb28 	b.w	d5950 <HAL_USB_USART_Flush_Data>

000d7300 <_ZN9USBSerialD0Ev>:
   d7300:	b510      	push	{r4, lr}
   d7302:	2114      	movs	r1, #20
   d7304:	4604      	mov	r4, r0
   d7306:	f000 fb60 	bl	d79ca <_ZdlPvj>
   d730a:	4620      	mov	r0, r4
   d730c:	bd10      	pop	{r4, pc}

000d730e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d730e:	b538      	push	{r3, r4, r5, lr}
   d7310:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7312:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7314:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7316:	f7fe fb03 	bl	d5920 <HAL_USB_USART_Available_Data_For_Write>
   d731a:	2800      	cmp	r0, #0
   d731c:	dc01      	bgt.n	d7322 <_ZN9USBSerial5writeEh+0x14>
   d731e:	7c60      	ldrb	r0, [r4, #17]
   d7320:	b128      	cbz	r0, d732e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7322:	4629      	mov	r1, r5
   d7324:	7c20      	ldrb	r0, [r4, #16]
   d7326:	f7fe fb0b 	bl	d5940 <HAL_USB_USART_Send_Data>
   d732a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d732e:	bd38      	pop	{r3, r4, r5, pc}

000d7330 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7330:	b510      	push	{r4, lr}
   d7332:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7334:	2300      	movs	r3, #0
   d7336:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d733c:	60a3      	str	r3, [r4, #8]
   d733e:	4b05      	ldr	r3, [pc, #20]	; (d7354 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7340:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7342:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7344:	4608      	mov	r0, r1
{
  _serial = serial;
   d7346:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7348:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d734a:	4611      	mov	r1, r2
   d734c:	f7fe fad8 	bl	d5900 <HAL_USB_USART_Init>
}
   d7350:	4620      	mov	r0, r4
   d7352:	bd10      	pop	{r4, pc}
   d7354:	000d86bc 	.word	0x000d86bc

000d7358 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7358:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d735a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d735c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d735e:	2100      	movs	r1, #0
   d7360:	f000 fcc1 	bl	d7ce6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7364:	4620      	mov	r0, r4
   d7366:	bd10      	pop	{r4, pc}

000d7368 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7368:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d736a:	4d0e      	ldr	r5, [pc, #56]	; (d73a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d736c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d736e:	a801      	add	r0, sp, #4
   d7370:	f7ff fff2 	bl	d7358 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7374:	6829      	ldr	r1, [r5, #0]
   d7376:	f011 0401 	ands.w	r4, r1, #1
   d737a:	d110      	bne.n	d739e <_Z16_fetch_usbserialv+0x36>
   d737c:	4628      	mov	r0, r5
   d737e:	f7fc fe92 	bl	d40a6 <__cxa_guard_acquire>
   d7382:	b160      	cbz	r0, d739e <_Z16_fetch_usbserialv+0x36>
   d7384:	aa01      	add	r2, sp, #4
   d7386:	4621      	mov	r1, r4
   d7388:	4807      	ldr	r0, [pc, #28]	; (d73a8 <_Z16_fetch_usbserialv+0x40>)
   d738a:	f7ff ffd1 	bl	d7330 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d738e:	4628      	mov	r0, r5
   d7390:	f7fc fe8e 	bl	d40b0 <__cxa_guard_release>
   d7394:	4a05      	ldr	r2, [pc, #20]	; (d73ac <_Z16_fetch_usbserialv+0x44>)
   d7396:	4906      	ldr	r1, [pc, #24]	; (d73b0 <_Z16_fetch_usbserialv+0x48>)
   d7398:	4803      	ldr	r0, [pc, #12]	; (d73a8 <_Z16_fetch_usbserialv+0x40>)
   d739a:	f000 fb11 	bl	d79c0 <__aeabi_atexit>
	return _usbserial;
}
   d739e:	4802      	ldr	r0, [pc, #8]	; (d73a8 <_Z16_fetch_usbserialv+0x40>)
   d73a0:	b007      	add	sp, #28
   d73a2:	bd30      	pop	{r4, r5, pc}
   d73a4:	2003e3f8 	.word	0x2003e3f8
   d73a8:	2003e3fc 	.word	0x2003e3fc
   d73ac:	2003e378 	.word	0x2003e378
   d73b0:	000d72b1 	.word	0x000d72b1

000d73b4 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d73b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d73b6:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d73b8:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d73ba:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d73bc:	460e      	mov	r6, r1
   d73be:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d73c0:	f000 fa46 	bl	d7850 <pinAvailable>
   d73c4:	b160      	cbz	r0, d73e0 <tone+0x2c>
   d73c6:	2102      	movs	r1, #2
   d73c8:	4628      	mov	r0, r5
   d73ca:	f7fe f8cf 	bl	d556c <HAL_Validate_Pin_Function>
   d73ce:	2802      	cmp	r0, #2
   d73d0:	d106      	bne.n	d73e0 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d73d2:	463a      	mov	r2, r7
   d73d4:	4631      	mov	r1, r6
   d73d6:	4620      	mov	r0, r4
    }
}
   d73d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   d73dc:	f7fe ba80 	b.w	d58e0 <HAL_Tone_Start>
   d73e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73e2 <noTone>:
    }
}

void noTone(uint8_t pin)
{
   d73e2:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d73e4:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
   d73e6:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d73e8:	4628      	mov	r0, r5
   d73ea:	f000 fa31 	bl	d7850 <pinAvailable>
   d73ee:	b150      	cbz	r0, d7406 <noTone+0x24>
   d73f0:	2102      	movs	r1, #2
   d73f2:	4628      	mov	r0, r5
   d73f4:	f7fe f8ba 	bl	d556c <HAL_Validate_Pin_Function>
   d73f8:	2802      	cmp	r0, #2
   d73fa:	d104      	bne.n	d7406 <noTone+0x24>
        HAL_Tone_Stop(pin);
   d73fc:	4620      	mov	r0, r4
    }
}
   d73fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
   d7402:	f7fe ba75 	b.w	d58f0 <HAL_Tone_Stop>
   d7406:	bd38      	pop	{r3, r4, r5, pc}

000d7408 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7408:	4770      	bx	lr

000d740a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d740a:	7441      	strb	r1, [r0, #17]
   d740c:	4770      	bx	lr

000d740e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d740e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7410:	7c00      	ldrb	r0, [r0, #16]
   d7412:	f7fe fa1d 	bl	d5850 <HAL_USART_Available_Data_For_Write>
}
   d7416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d741a:	bd08      	pop	{r3, pc}

000d741c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d741c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d741e:	7c00      	ldrb	r0, [r0, #16]
   d7420:	f7fe f9ee 	bl	d5800 <HAL_USART_Available_Data>
}
   d7424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7428:	bd08      	pop	{r3, pc}

000d742a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d742a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d742c:	7c00      	ldrb	r0, [r0, #16]
   d742e:	f7fe f9f7 	bl	d5820 <HAL_USART_Peek_Data>
}
   d7432:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7436:	bf28      	it	cs
   d7438:	f04f 30ff 	movcs.w	r0, #4294967295
   d743c:	bd08      	pop	{r3, pc}

000d743e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d743e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7440:	7c00      	ldrb	r0, [r0, #16]
   d7442:	f7fe f9e5 	bl	d5810 <HAL_USART_Read_Data>
}
   d7446:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d744a:	bf28      	it	cs
   d744c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7450:	bd08      	pop	{r3, pc}

000d7452 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7452:	7c00      	ldrb	r0, [r0, #16]
   d7454:	f7fe b9ec 	b.w	d5830 <HAL_USART_Flush_Data>

000d7458 <_ZN11USARTSerialD0Ev>:
   d7458:	b510      	push	{r4, lr}
   d745a:	2114      	movs	r1, #20
   d745c:	4604      	mov	r4, r0
   d745e:	f000 fab4 	bl	d79ca <_ZdlPvj>
   d7462:	4620      	mov	r0, r4
   d7464:	bd10      	pop	{r4, pc}

000d7466 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7466:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7468:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d746a:	4604      	mov	r4, r0
   d746c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d746e:	b925      	cbnz	r5, d747a <_ZN11USARTSerial5writeEh+0x14>
   d7470:	7c00      	ldrb	r0, [r0, #16]
   d7472:	f7fe f9ed 	bl	d5850 <HAL_USART_Available_Data_For_Write>
   d7476:	2800      	cmp	r0, #0
   d7478:	dd05      	ble.n	d7486 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d747a:	4631      	mov	r1, r6
   d747c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d747e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7482:	f7fe b9b5 	b.w	d57f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7486:	4628      	mov	r0, r5
   d7488:	bd70      	pop	{r4, r5, r6, pc}
	...

000d748c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d748c:	b510      	push	{r4, lr}
   d748e:	4604      	mov	r4, r0
   d7490:	4608      	mov	r0, r1
   d7492:	4611      	mov	r1, r2
   d7494:	2200      	movs	r2, #0
   d7496:	6062      	str	r2, [r4, #4]
   d7498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d749c:	60a2      	str	r2, [r4, #8]
   d749e:	4a05      	ldr	r2, [pc, #20]	; (d74b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d74a0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d74a2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d74a4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d74a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d74a8:	461a      	mov	r2, r3
   d74aa:	f7fe f991 	bl	d57d0 <HAL_USART_Init>
}
   d74ae:	4620      	mov	r0, r4
   d74b0:	bd10      	pop	{r4, pc}
   d74b2:	bf00      	nop
   d74b4:	000d86ec 	.word	0x000d86ec

000d74b8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d74b8:	2300      	movs	r3, #0
   d74ba:	7c00      	ldrb	r0, [r0, #16]
   d74bc:	f7fe b9d0 	b.w	d5860 <HAL_USART_BeginConfig>

000d74c0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d74c0:	2200      	movs	r2, #0
   d74c2:	f7ff bff9 	b.w	d74b8 <_ZN11USARTSerial5beginEmm>

000d74c6 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d74c6:	7c00      	ldrb	r0, [r0, #16]
   d74c8:	f7fe b98a 	b.w	d57e0 <HAL_USART_End>

000d74cc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d74cc:	7c00      	ldrb	r0, [r0, #16]
   d74ce:	f7fe b9b7 	b.w	d5840 <HAL_USART_Is_Enabled>
	...

000d74d4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d74d4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d74d6:	4d0c      	ldr	r5, [pc, #48]	; (d7508 <_Z22__fetch_global_Serial1v+0x34>)
   d74d8:	6829      	ldr	r1, [r5, #0]
   d74da:	f011 0401 	ands.w	r4, r1, #1
   d74de:	d111      	bne.n	d7504 <_Z22__fetch_global_Serial1v+0x30>
   d74e0:	4628      	mov	r0, r5
   d74e2:	f7fc fde0 	bl	d40a6 <__cxa_guard_acquire>
   d74e6:	b168      	cbz	r0, d7504 <_Z22__fetch_global_Serial1v+0x30>
   d74e8:	4a08      	ldr	r2, [pc, #32]	; (d750c <_Z22__fetch_global_Serial1v+0x38>)
   d74ea:	4b09      	ldr	r3, [pc, #36]	; (d7510 <_Z22__fetch_global_Serial1v+0x3c>)
   d74ec:	4809      	ldr	r0, [pc, #36]	; (d7514 <_Z22__fetch_global_Serial1v+0x40>)
   d74ee:	4621      	mov	r1, r4
   d74f0:	f7ff ffcc 	bl	d748c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d74f4:	4628      	mov	r0, r5
   d74f6:	f7fc fddb 	bl	d40b0 <__cxa_guard_release>
   d74fa:	4a07      	ldr	r2, [pc, #28]	; (d7518 <_Z22__fetch_global_Serial1v+0x44>)
   d74fc:	4907      	ldr	r1, [pc, #28]	; (d751c <_Z22__fetch_global_Serial1v+0x48>)
   d74fe:	4805      	ldr	r0, [pc, #20]	; (d7514 <_Z22__fetch_global_Serial1v+0x40>)
   d7500:	f000 fa5e 	bl	d79c0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7504:	4803      	ldr	r0, [pc, #12]	; (d7514 <_Z22__fetch_global_Serial1v+0x40>)
   d7506:	bd38      	pop	{r3, r4, r5, pc}
   d7508:	2003e4a8 	.word	0x2003e4a8
   d750c:	2003e4ac 	.word	0x2003e4ac
   d7510:	2003e424 	.word	0x2003e424
   d7514:	2003e410 	.word	0x2003e410
   d7518:	2003e378 	.word	0x2003e378
   d751c:	000d7409 	.word	0x000d7409

000d7520 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7520:	4770      	bx	lr

000d7522 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7524:	4606      	mov	r6, r0
   d7526:	4615      	mov	r5, r2
   d7528:	460c      	mov	r4, r1
   d752a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d752c:	42bc      	cmp	r4, r7
   d752e:	d006      	beq.n	d753e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7530:	6833      	ldr	r3, [r6, #0]
   d7532:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7536:	689b      	ldr	r3, [r3, #8]
   d7538:	4630      	mov	r0, r6
   d753a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d753c:	e7f6      	b.n	d752c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d753e:	4628      	mov	r0, r5
   d7540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7542 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7542:	2200      	movs	r2, #0
   d7544:	7c00      	ldrb	r0, [r0, #16]
   d7546:	f7fe b993 	b.w	d5870 <HAL_I2C_Write_Data>

000d754a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d754a:	2100      	movs	r1, #0
   d754c:	7c00      	ldrb	r0, [r0, #16]
   d754e:	f7fe b997 	b.w	d5880 <HAL_I2C_Available_Data>

000d7552 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7552:	2100      	movs	r1, #0
   d7554:	7c00      	ldrb	r0, [r0, #16]
   d7556:	f7fe b99b 	b.w	d5890 <HAL_I2C_Read_Data>

000d755a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d755a:	2100      	movs	r1, #0
   d755c:	7c00      	ldrb	r0, [r0, #16]
   d755e:	f7fe b99f 	b.w	d58a0 <HAL_I2C_Peek_Data>

000d7562 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7562:	2100      	movs	r1, #0
   d7564:	7c00      	ldrb	r0, [r0, #16]
   d7566:	f7fe b9a3 	b.w	d58b0 <HAL_I2C_Flush_Data>

000d756a <_ZN7TwoWireD0Ev>:
   d756a:	b510      	push	{r4, lr}
   d756c:	2114      	movs	r1, #20
   d756e:	4604      	mov	r4, r0
   d7570:	f000 fa2b 	bl	d79ca <_ZdlPvj>
   d7574:	4620      	mov	r0, r4
   d7576:	bd10      	pop	{r4, pc}

000d7578 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7578:	b510      	push	{r4, lr}
   d757a:	4604      	mov	r4, r0
   d757c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7580:	4608      	mov	r0, r1
   d7582:	60a3      	str	r3, [r4, #8]
   d7584:	2100      	movs	r1, #0
   d7586:	4b04      	ldr	r3, [pc, #16]	; (d7598 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7588:	7420      	strb	r0, [r4, #16]
   d758a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d758c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d758e:	f7fe f99f 	bl	d58d0 <HAL_I2C_Init>

}
   d7592:	4620      	mov	r0, r4
   d7594:	bd10      	pop	{r4, pc}
   d7596:	bf00      	nop
   d7598:	000d871c 	.word	0x000d871c

000d759c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d759c:	2100      	movs	r1, #0
   d759e:	7c00      	ldrb	r0, [r0, #16]
   d75a0:	f7fe b98e 	b.w	d58c0 <HAL_I2C_Is_Enabled>

000d75a4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75a4:	2200      	movs	r2, #0
   d75a6:	4611      	mov	r1, r2
   d75a8:	6840      	ldr	r0, [r0, #4]
   d75aa:	f7fe ba75 	b.w	d5a98 <network_listening>

000d75ae <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d75ae:	2200      	movs	r2, #0
   d75b0:	4611      	mov	r1, r2
   d75b2:	6840      	ldr	r0, [r0, #4]
   d75b4:	f7fe ba80 	b.w	d5ab8 <network_get_listen_timeout>

000d75b8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d75b8:	2200      	movs	r2, #0
   d75ba:	6840      	ldr	r0, [r0, #4]
   d75bc:	f7fe ba74 	b.w	d5aa8 <network_set_listen_timeout>

000d75c0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d75c0:	2200      	movs	r2, #0
   d75c2:	f081 0101 	eor.w	r1, r1, #1
   d75c6:	6840      	ldr	r0, [r0, #4]
   d75c8:	f7fe ba5e 	b.w	d5a88 <network_listen>

000d75cc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d75cc:	2300      	movs	r3, #0
   d75ce:	461a      	mov	r2, r3
   d75d0:	2101      	movs	r1, #1
   d75d2:	6840      	ldr	r0, [r0, #4]
   d75d4:	f7fe ba50 	b.w	d5a78 <network_off>

000d75d8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d75d8:	2300      	movs	r3, #0
   d75da:	461a      	mov	r2, r3
   d75dc:	4619      	mov	r1, r3
   d75de:	6840      	ldr	r0, [r0, #4]
   d75e0:	f7fe ba42 	b.w	d5a68 <network_on>

000d75e4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d75e4:	2200      	movs	r2, #0
   d75e6:	4611      	mov	r1, r2
   d75e8:	6840      	ldr	r0, [r0, #4]
   d75ea:	f7fe ba35 	b.w	d5a58 <network_ready>

000d75ee <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d75ee:	2200      	movs	r2, #0
   d75f0:	4611      	mov	r1, r2
   d75f2:	6840      	ldr	r0, [r0, #4]
   d75f4:	f7fe ba20 	b.w	d5a38 <network_connecting>

000d75f8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d75f8:	2200      	movs	r2, #0
   d75fa:	2102      	movs	r1, #2
   d75fc:	6840      	ldr	r0, [r0, #4]
   d75fe:	f7fe ba23 	b.w	d5a48 <network_disconnect>

000d7602 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7602:	2300      	movs	r3, #0
   d7604:	461a      	mov	r2, r3
   d7606:	6840      	ldr	r0, [r0, #4]
   d7608:	f7fe ba0e 	b.w	d5a28 <network_connect>

000d760c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d760c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d760e:	4605      	mov	r5, r0
   d7610:	b188      	cbz	r0, d7636 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7612:	6804      	ldr	r4, [r0, #0]
   d7614:	b14c      	cbz	r4, d762a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7616:	68a3      	ldr	r3, [r4, #8]
   d7618:	b11b      	cbz	r3, d7622 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d761a:	2203      	movs	r2, #3
   d761c:	4621      	mov	r1, r4
   d761e:	4620      	mov	r0, r4
   d7620:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7622:	2110      	movs	r1, #16
   d7624:	4620      	mov	r0, r4
   d7626:	f000 f9d0 	bl	d79ca <_ZdlPvj>
   d762a:	4628      	mov	r0, r5
   d762c:	2114      	movs	r1, #20
      }
   d762e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7632:	f000 b9ca 	b.w	d79ca <_ZdlPvj>
   d7636:	bd38      	pop	{r3, r4, r5, pc}

000d7638 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7638:	b110      	cbz	r0, d7640 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d763a:	6803      	ldr	r3, [r0, #0]
   d763c:	685b      	ldr	r3, [r3, #4]
   d763e:	4718      	bx	r3
   d7640:	4770      	bx	lr

000d7642 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7642:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7644:	6803      	ldr	r3, [r0, #0]
   d7646:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7648:	b1bb      	cbz	r3, d767a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d764a:	6858      	ldr	r0, [r3, #4]
   d764c:	f7fe f880 	bl	d5750 <os_thread_is_current>
   d7650:	b978      	cbnz	r0, d7672 <_ZN6ThreadD1Ev+0x30>
   d7652:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7654:	7c5a      	ldrb	r2, [r3, #17]
   d7656:	b912      	cbnz	r2, d765e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7658:	6858      	ldr	r0, [r3, #4]
   d765a:	f7fe f881 	bl	d5760 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d765e:	6823      	ldr	r3, [r4, #0]
   d7660:	6858      	ldr	r0, [r3, #4]
   d7662:	f7fe f885 	bl	d5770 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7666:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7668:	2300      	movs	r3, #0
   d766a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d766c:	b128      	cbz	r0, d767a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d766e:	f7ff ffcd 	bl	d760c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7672:	6820      	ldr	r0, [r4, #0]
   d7674:	b108      	cbz	r0, d767a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7676:	f7ff ffc9 	bl	d760c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d767a:	4620      	mov	r0, r4
   d767c:	bd10      	pop	{r4, pc}
	...

000d7680 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7680:	b538      	push	{r3, r4, r5, lr}
   d7682:	4b0c      	ldr	r3, [pc, #48]	; (d76b4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7684:	6003      	str	r3, [r0, #0]
   d7686:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7688:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d768c:	b108      	cbz	r0, d7692 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d768e:	f7fc fd08 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7692:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7696:	b135      	cbz	r5, d76a6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7698:	4628      	mov	r0, r5
   d769a:	f7ff ffd2 	bl	d7642 <_ZN6ThreadD1Ev>
   d769e:	2104      	movs	r1, #4
   d76a0:	4628      	mov	r0, r5
   d76a2:	f000 f992 	bl	d79ca <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76a6:	68a0      	ldr	r0, [r4, #8]
   d76a8:	b108      	cbz	r0, d76ae <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d76aa:	f7ff ffc5 	bl	d7638 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d76ae:	4620      	mov	r0, r4
   d76b0:	bd38      	pop	{r3, r4, r5, pc}
   d76b2:	bf00      	nop
   d76b4:	000d8744 	.word	0x000d8744

000d76b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d76b8:	b538      	push	{r3, r4, r5, lr}
   d76ba:	4c0e      	ldr	r4, [pc, #56]	; (d76f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d76bc:	4b0e      	ldr	r3, [pc, #56]	; (d76f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d76be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d76c0:	2500      	movs	r5, #0
   d76c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d76c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d76c8:	6063      	str	r3, [r4, #4]
   d76ca:	60a5      	str	r5, [r4, #8]
   d76cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d76d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d76d4:	f7fe f85c 	bl	d5790 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d76d8:	4b08      	ldr	r3, [pc, #32]	; (d76fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d76da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d76e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d76e4:	4620      	mov	r0, r4
   d76e6:	4a06      	ldr	r2, [pc, #24]	; (d7700 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d76e8:	4906      	ldr	r1, [pc, #24]	; (d7704 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d76ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d76ee:	f000 b967 	b.w	d79c0 <__aeabi_atexit>
   d76f2:	bf00      	nop
   d76f4:	2003e530 	.word	0x2003e530
   d76f8:	000d8778 	.word	0x000d8778
   d76fc:	000d8744 	.word	0x000d8744
   d7700:	2003e378 	.word	0x2003e378
   d7704:	000d7681 	.word	0x000d7681

000d7708 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7708:	2300      	movs	r3, #0
   d770a:	461a      	mov	r2, r3
   d770c:	6840      	ldr	r0, [r0, #4]
   d770e:	f7fe b98b 	b.w	d5a28 <network_connect>

000d7712 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7712:	2200      	movs	r2, #0
   d7714:	2102      	movs	r1, #2
   d7716:	6840      	ldr	r0, [r0, #4]
   d7718:	f7fe b996 	b.w	d5a48 <network_disconnect>

000d771c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d771c:	2200      	movs	r2, #0
   d771e:	4611      	mov	r1, r2
   d7720:	6840      	ldr	r0, [r0, #4]
   d7722:	f7fe b989 	b.w	d5a38 <network_connecting>

000d7726 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7726:	2200      	movs	r2, #0
   d7728:	4611      	mov	r1, r2
   d772a:	6840      	ldr	r0, [r0, #4]
   d772c:	f7fe b994 	b.w	d5a58 <network_ready>

000d7730 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7730:	2300      	movs	r3, #0
   d7732:	461a      	mov	r2, r3
   d7734:	4619      	mov	r1, r3
   d7736:	6840      	ldr	r0, [r0, #4]
   d7738:	f7fe b996 	b.w	d5a68 <network_on>

000d773c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d773c:	2300      	movs	r3, #0
   d773e:	461a      	mov	r2, r3
   d7740:	4619      	mov	r1, r3
   d7742:	6840      	ldr	r0, [r0, #4]
   d7744:	f7fe b998 	b.w	d5a78 <network_off>

000d7748 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7748:	2200      	movs	r2, #0
   d774a:	f081 0101 	eor.w	r1, r1, #1
   d774e:	6840      	ldr	r0, [r0, #4]
   d7750:	f7fe b99a 	b.w	d5a88 <network_listen>

000d7754 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7754:	2200      	movs	r2, #0
   d7756:	6840      	ldr	r0, [r0, #4]
   d7758:	f7fe b9a6 	b.w	d5aa8 <network_set_listen_timeout>

000d775c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d775c:	2200      	movs	r2, #0
   d775e:	4611      	mov	r1, r2
   d7760:	6840      	ldr	r0, [r0, #4]
   d7762:	f7fe b9a9 	b.w	d5ab8 <network_get_listen_timeout>

000d7766 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7766:	2200      	movs	r2, #0
   d7768:	4611      	mov	r1, r2
   d776a:	6840      	ldr	r0, [r0, #4]
   d776c:	f7fe b994 	b.w	d5a98 <network_listening>

000d7770 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7774:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7776:	b095      	sub	sp, #84	; 0x54
   d7778:	4616      	mov	r6, r2
   d777a:	460d      	mov	r5, r1
   d777c:	4607      	mov	r7, r0
    IPAddress addr;
   d777e:	f7ff fd5d 	bl	d723c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7782:	4621      	mov	r1, r4
   d7784:	2220      	movs	r2, #32
   d7786:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7788:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d778a:	f000 faac 	bl	d7ce6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d778e:	2340      	movs	r3, #64	; 0x40
   d7790:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7792:	4621      	mov	r1, r4
   d7794:	466b      	mov	r3, sp
   d7796:	aa0c      	add	r2, sp, #48	; 0x30
   d7798:	4630      	mov	r0, r6
   d779a:	f7fd fed7 	bl	d554c <netdb_getaddrinfo>
    if (!r) {
   d779e:	4604      	mov	r4, r0
   d77a0:	2800      	cmp	r0, #0
   d77a2:	d144      	bne.n	d782e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77a4:	4602      	mov	r2, r0
   d77a6:	2101      	movs	r1, #1
   d77a8:	6868      	ldr	r0, [r5, #4]
   d77aa:	f7fe f955 	bl	d5a58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77b2:	4622      	mov	r2, r4
   d77b4:	6868      	ldr	r0, [r5, #4]
   d77b6:	f7fe f94f 	bl	d5a58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d77be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77c0:	2e00      	cmp	r6, #0
   d77c2:	d034      	beq.n	d782e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d77c4:	2900      	cmp	r1, #0
   d77c6:	d132      	bne.n	d782e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d77c8:	6873      	ldr	r3, [r6, #4]
   d77ca:	2b02      	cmp	r3, #2
   d77cc:	d002      	beq.n	d77d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d77ce:	2b0a      	cmp	r3, #10
   d77d0:	d009      	beq.n	d77e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d77d2:	e02a      	b.n	d782a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d77d4:	f1b8 0f00 	cmp.w	r8, #0
   d77d8:	d027      	beq.n	d782a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d77da:	6971      	ldr	r1, [r6, #20]
   d77dc:	4638      	mov	r0, r7
   d77de:	3104      	adds	r1, #4
   d77e0:	f7ff fd59 	bl	d7296 <_ZN9IPAddressaSEPKh>
   d77e4:	e020      	b.n	d7828 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d77e6:	f1b9 0f00 	cmp.w	r9, #0
   d77ea:	d01e      	beq.n	d782a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d77ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d77ee:	2211      	movs	r2, #17
   d77f0:	a801      	add	r0, sp, #4
   d77f2:	f000 fa78 	bl	d7ce6 <memset>
                    a.v = 6;
   d77f6:	2306      	movs	r3, #6
   d77f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d77fc:	ad01      	add	r5, sp, #4
   d77fe:	f104 0308 	add.w	r3, r4, #8
   d7802:	3418      	adds	r4, #24
   d7804:	6818      	ldr	r0, [r3, #0]
   d7806:	6859      	ldr	r1, [r3, #4]
   d7808:	462a      	mov	r2, r5
   d780a:	c203      	stmia	r2!, {r0, r1}
   d780c:	3308      	adds	r3, #8
   d780e:	42a3      	cmp	r3, r4
   d7810:	4615      	mov	r5, r2
   d7812:	d1f7      	bne.n	d7804 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7814:	a901      	add	r1, sp, #4
   d7816:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7818:	ad07      	add	r5, sp, #28
   d781a:	f7ff fd1d 	bl	d7258 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d781e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7820:	1d3c      	adds	r4, r7, #4
   d7822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7824:	682b      	ldr	r3, [r5, #0]
   d7826:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7828:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d782a:	69f6      	ldr	r6, [r6, #28]
   d782c:	e7c8      	b.n	d77c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d782e:	9800      	ldr	r0, [sp, #0]
   d7830:	f7fd fe84 	bl	d553c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7834:	4638      	mov	r0, r7
   d7836:	b015      	add	sp, #84	; 0x54
   d7838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d783c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d783c:	4b02      	ldr	r3, [pc, #8]	; (d7848 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d783e:	4a03      	ldr	r2, [pc, #12]	; (d784c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7840:	601a      	str	r2, [r3, #0]
   d7842:	2200      	movs	r2, #0
   d7844:	605a      	str	r2, [r3, #4]
   d7846:	4770      	bx	lr
   d7848:	2003e704 	.word	0x2003e704
   d784c:	000d8778 	.word	0x000d8778

000d7850 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7850:	b510      	push	{r4, lr}
   d7852:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7854:	480f      	ldr	r0, [pc, #60]	; (d7894 <pinAvailable+0x44>)
   d7856:	f7fe f9c1 	bl	d5bdc <_ZN8SPIClass9isEnabledEv>
   d785a:	b128      	cbz	r0, d7868 <pinAvailable+0x18>
   d785c:	f1a4 030b 	sub.w	r3, r4, #11
   d7860:	2b02      	cmp	r3, #2
   d7862:	d801      	bhi.n	d7868 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7864:	2000      	movs	r0, #0
   d7866:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7868:	f000 f88a 	bl	d7980 <_Z19__fetch_global_Wirev>
   d786c:	f7ff fe96 	bl	d759c <_ZN7TwoWire9isEnabledEv>
   d7870:	b108      	cbz	r0, d7876 <pinAvailable+0x26>
   d7872:	2c01      	cmp	r4, #1
   d7874:	d9f6      	bls.n	d7864 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7876:	f7ff fe2d 	bl	d74d4 <_Z22__fetch_global_Serial1v>
   d787a:	f7ff fe27 	bl	d74cc <_ZN11USARTSerial9isEnabledEv>
   d787e:	b118      	cbz	r0, d7888 <pinAvailable+0x38>
   d7880:	f1a4 0309 	sub.w	r3, r4, #9
   d7884:	2b01      	cmp	r3, #1
   d7886:	d9ed      	bls.n	d7864 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7888:	2c1e      	cmp	r4, #30
   d788a:	bf8c      	ite	hi
   d788c:	2000      	movhi	r0, #0
   d788e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7890:	bd10      	pop	{r4, pc}
   d7892:	bf00      	nop
   d7894:	2003e70c 	.word	0x2003e70c

000d7898 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7898:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d789a:	b538      	push	{r3, r4, r5, lr}
   d789c:	4604      	mov	r4, r0
   d789e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78a0:	d80a      	bhi.n	d78b8 <pinMode+0x20>
   d78a2:	29ff      	cmp	r1, #255	; 0xff
   d78a4:	d008      	beq.n	d78b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d78a6:	f7ff ffd3 	bl	d7850 <pinAvailable>
   d78aa:	b128      	cbz	r0, d78b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d78ac:	4629      	mov	r1, r5
   d78ae:	4620      	mov	r0, r4
}
   d78b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d78b4:	f7fd be62 	b.w	d557c <HAL_Pin_Mode>
   d78b8:	bd38      	pop	{r3, r4, r5, pc}

000d78ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d78ba:	b538      	push	{r3, r4, r5, lr}
   d78bc:	4604      	mov	r4, r0
   d78be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d78c0:	f7fd fe64 	bl	d558c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d78c4:	28ff      	cmp	r0, #255	; 0xff
   d78c6:	d010      	beq.n	d78ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d78c8:	2806      	cmp	r0, #6
   d78ca:	d804      	bhi.n	d78d6 <digitalWrite+0x1c>
   d78cc:	234d      	movs	r3, #77	; 0x4d
   d78ce:	fa23 f000 	lsr.w	r0, r3, r0
   d78d2:	07c3      	lsls	r3, r0, #31
   d78d4:	d409      	bmi.n	d78ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d78d6:	4620      	mov	r0, r4
   d78d8:	f7ff ffba 	bl	d7850 <pinAvailable>
   d78dc:	b128      	cbz	r0, d78ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d78de:	4629      	mov	r1, r5
   d78e0:	4620      	mov	r0, r4
}
   d78e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d78e6:	f7fd be59 	b.w	d559c <HAL_GPIO_Write>
   d78ea:	bd38      	pop	{r3, r4, r5, pc}

000d78ec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d78ec:	b510      	push	{r4, lr}
   d78ee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d78f0:	f7fd fe4c 	bl	d558c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d78f4:	3804      	subs	r0, #4
   d78f6:	b2c0      	uxtb	r0, r0
   d78f8:	2801      	cmp	r0, #1
   d78fa:	d908      	bls.n	d790e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d78fc:	4620      	mov	r0, r4
   d78fe:	f7ff ffa7 	bl	d7850 <pinAvailable>
   d7902:	b120      	cbz	r0, d790e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7904:	4620      	mov	r0, r4
}
   d7906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d790a:	f7fd be4f 	b.w	d55ac <HAL_GPIO_Read>
}
   d790e:	2000      	movs	r0, #0
   d7910:	bd10      	pop	{r4, pc}
	...

000d7914 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7914:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7916:	4c0c      	ldr	r4, [pc, #48]	; (d7948 <_GLOBAL__sub_I_SPI+0x34>)
   d7918:	4e0c      	ldr	r6, [pc, #48]	; (d794c <_GLOBAL__sub_I_SPI+0x38>)
   d791a:	4d0d      	ldr	r5, [pc, #52]	; (d7950 <_GLOBAL__sub_I_SPI+0x3c>)
   d791c:	2100      	movs	r1, #0
   d791e:	4620      	mov	r0, r4
   d7920:	f7fe f948 	bl	d5bb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7924:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7926:	4c0b      	ldr	r4, [pc, #44]	; (d7954 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7928:	4632      	mov	r2, r6
   d792a:	4629      	mov	r1, r5
   d792c:	f000 f848 	bl	d79c0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7930:	2101      	movs	r1, #1
   d7932:	4620      	mov	r0, r4
   d7934:	f7fe f93e 	bl	d5bb4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7938:	4632      	mov	r2, r6
   d793a:	4629      	mov	r1, r5
   d793c:	4620      	mov	r0, r4
   d793e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7942:	f000 b83d 	b.w	d79c0 <__aeabi_atexit>
   d7946:	bf00      	nop
   d7948:	2003e70c 	.word	0x2003e70c
   d794c:	2003e378 	.word	0x2003e378
   d7950:	000d5ba5 	.word	0x000d5ba5
   d7954:	2003e71c 	.word	0x2003e71c

000d7958 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7958:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d795a:	4c07      	ldr	r4, [pc, #28]	; (d7978 <_Z21__fetch_global_EEPROMv+0x20>)
   d795c:	6823      	ldr	r3, [r4, #0]
   d795e:	07db      	lsls	r3, r3, #31
   d7960:	d408      	bmi.n	d7974 <_Z21__fetch_global_EEPROMv+0x1c>
   d7962:	4620      	mov	r0, r4
   d7964:	f7fc fb9f 	bl	d40a6 <__cxa_guard_acquire>
   d7968:	b120      	cbz	r0, d7974 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d796a:	f7fd fe4f 	bl	d560c <HAL_EEPROM_Init>
   d796e:	4620      	mov	r0, r4
   d7970:	f7fc fb9e 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7974:	4801      	ldr	r0, [pc, #4]	; (d797c <_Z21__fetch_global_EEPROMv+0x24>)
   d7976:	bd10      	pop	{r4, pc}
   d7978:	2003e730 	.word	0x2003e730
   d797c:	2003e734 	.word	0x2003e734

000d7980 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7980:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7982:	4d0b      	ldr	r5, [pc, #44]	; (d79b0 <_Z19__fetch_global_Wirev+0x30>)
   d7984:	6829      	ldr	r1, [r5, #0]
   d7986:	f011 0401 	ands.w	r4, r1, #1
   d798a:	d10f      	bne.n	d79ac <_Z19__fetch_global_Wirev+0x2c>
   d798c:	4628      	mov	r0, r5
   d798e:	f7fc fb8a 	bl	d40a6 <__cxa_guard_acquire>
   d7992:	b158      	cbz	r0, d79ac <_Z19__fetch_global_Wirev+0x2c>
   d7994:	4621      	mov	r1, r4
   d7996:	4807      	ldr	r0, [pc, #28]	; (d79b4 <_Z19__fetch_global_Wirev+0x34>)
   d7998:	f7ff fdee 	bl	d7578 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d799c:	4628      	mov	r0, r5
   d799e:	f7fc fb87 	bl	d40b0 <__cxa_guard_release>
   d79a2:	4a05      	ldr	r2, [pc, #20]	; (d79b8 <_Z19__fetch_global_Wirev+0x38>)
   d79a4:	4905      	ldr	r1, [pc, #20]	; (d79bc <_Z19__fetch_global_Wirev+0x3c>)
   d79a6:	4803      	ldr	r0, [pc, #12]	; (d79b4 <_Z19__fetch_global_Wirev+0x34>)
   d79a8:	f000 f80a 	bl	d79c0 <__aeabi_atexit>
	return wire;
}
   d79ac:	4801      	ldr	r0, [pc, #4]	; (d79b4 <_Z19__fetch_global_Wirev+0x34>)
   d79ae:	bd38      	pop	{r3, r4, r5, pc}
   d79b0:	2003e738 	.word	0x2003e738
   d79b4:	2003e73c 	.word	0x2003e73c
   d79b8:	2003e378 	.word	0x2003e378
   d79bc:	000d7521 	.word	0x000d7521

000d79c0 <__aeabi_atexit>:
   d79c0:	460b      	mov	r3, r1
   d79c2:	4601      	mov	r1, r0
   d79c4:	4618      	mov	r0, r3
   d79c6:	f000 b94b 	b.w	d7c60 <__cxa_atexit>

000d79ca <_ZdlPvj>:
   d79ca:	f7fc bb68 	b.w	d409e <_ZdlPv>
	...

000d79d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79d0:	4b18      	ldr	r3, [pc, #96]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79d2:	681a      	ldr	r2, [r3, #0]
   d79d4:	07d1      	lsls	r1, r2, #31
   d79d6:	bf5c      	itt	pl
   d79d8:	2201      	movpl	r2, #1
   d79da:	601a      	strpl	r2, [r3, #0]
   d79dc:	4b16      	ldr	r3, [pc, #88]	; (d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79de:	681a      	ldr	r2, [r3, #0]
   d79e0:	07d2      	lsls	r2, r2, #31
   d79e2:	bf5c      	itt	pl
   d79e4:	2201      	movpl	r2, #1
   d79e6:	601a      	strpl	r2, [r3, #0]
   d79e8:	4b14      	ldr	r3, [pc, #80]	; (d7a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79ea:	681a      	ldr	r2, [r3, #0]
   d79ec:	07d0      	lsls	r0, r2, #31
   d79ee:	bf5c      	itt	pl
   d79f0:	2201      	movpl	r2, #1
   d79f2:	601a      	strpl	r2, [r3, #0]
   d79f4:	4b12      	ldr	r3, [pc, #72]	; (d7a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d79f6:	681a      	ldr	r2, [r3, #0]
   d79f8:	07d1      	lsls	r1, r2, #31
   d79fa:	bf5c      	itt	pl
   d79fc:	2201      	movpl	r2, #1
   d79fe:	601a      	strpl	r2, [r3, #0]
   d7a00:	4b10      	ldr	r3, [pc, #64]	; (d7a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a02:	681a      	ldr	r2, [r3, #0]
   d7a04:	07d2      	lsls	r2, r2, #31
   d7a06:	bf5c      	itt	pl
   d7a08:	2201      	movpl	r2, #1
   d7a0a:	601a      	strpl	r2, [r3, #0]
   d7a0c:	4b0e      	ldr	r3, [pc, #56]	; (d7a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a0e:	681a      	ldr	r2, [r3, #0]
   d7a10:	07d0      	lsls	r0, r2, #31
   d7a12:	bf5c      	itt	pl
   d7a14:	2201      	movpl	r2, #1
   d7a16:	601a      	strpl	r2, [r3, #0]
   d7a18:	4b0c      	ldr	r3, [pc, #48]	; (d7a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a1a:	681a      	ldr	r2, [r3, #0]
   d7a1c:	07d1      	lsls	r1, r2, #31
   d7a1e:	bf5c      	itt	pl
   d7a20:	2201      	movpl	r2, #1
   d7a22:	601a      	strpl	r2, [r3, #0]
   d7a24:	4b0a      	ldr	r3, [pc, #40]	; (d7a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a26:	681a      	ldr	r2, [r3, #0]
   d7a28:	07d2      	lsls	r2, r2, #31
   d7a2a:	bf5c      	itt	pl
   d7a2c:	2201      	movpl	r2, #1
   d7a2e:	601a      	strpl	r2, [r3, #0]
   d7a30:	4770      	bx	lr
   d7a32:	bf00      	nop
   d7a34:	2003e76c 	.word	0x2003e76c
   d7a38:	2003e768 	.word	0x2003e768
   d7a3c:	2003e764 	.word	0x2003e764
   d7a40:	2003e760 	.word	0x2003e760
   d7a44:	2003e75c 	.word	0x2003e75c
   d7a48:	2003e758 	.word	0x2003e758
   d7a4c:	2003e754 	.word	0x2003e754
   d7a50:	2003e750 	.word	0x2003e750

000d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7a54:	4b24      	ldr	r3, [pc, #144]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7a56:	681a      	ldr	r2, [r3, #0]
   d7a58:	07d0      	lsls	r0, r2, #31
   d7a5a:	bf5c      	itt	pl
   d7a5c:	2201      	movpl	r2, #1
   d7a5e:	601a      	strpl	r2, [r3, #0]
   d7a60:	4b22      	ldr	r3, [pc, #136]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7a62:	681a      	ldr	r2, [r3, #0]
   d7a64:	07d1      	lsls	r1, r2, #31
   d7a66:	bf5c      	itt	pl
   d7a68:	2201      	movpl	r2, #1
   d7a6a:	601a      	strpl	r2, [r3, #0]
   d7a6c:	4b20      	ldr	r3, [pc, #128]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7a6e:	681a      	ldr	r2, [r3, #0]
   d7a70:	07d2      	lsls	r2, r2, #31
   d7a72:	bf5c      	itt	pl
   d7a74:	2201      	movpl	r2, #1
   d7a76:	601a      	strpl	r2, [r3, #0]
   d7a78:	4b1e      	ldr	r3, [pc, #120]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7a7a:	681a      	ldr	r2, [r3, #0]
   d7a7c:	07d0      	lsls	r0, r2, #31
   d7a7e:	bf5c      	itt	pl
   d7a80:	2201      	movpl	r2, #1
   d7a82:	601a      	strpl	r2, [r3, #0]
   d7a84:	4b1c      	ldr	r3, [pc, #112]	; (d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7a86:	681a      	ldr	r2, [r3, #0]
   d7a88:	07d1      	lsls	r1, r2, #31
   d7a8a:	bf5c      	itt	pl
   d7a8c:	2201      	movpl	r2, #1
   d7a8e:	601a      	strpl	r2, [r3, #0]
   d7a90:	4b1a      	ldr	r3, [pc, #104]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7a92:	681a      	ldr	r2, [r3, #0]
   d7a94:	07d2      	lsls	r2, r2, #31
   d7a96:	bf5c      	itt	pl
   d7a98:	2201      	movpl	r2, #1
   d7a9a:	601a      	strpl	r2, [r3, #0]
   d7a9c:	4b18      	ldr	r3, [pc, #96]	; (d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7a9e:	681a      	ldr	r2, [r3, #0]
   d7aa0:	07d0      	lsls	r0, r2, #31
   d7aa2:	bf5c      	itt	pl
   d7aa4:	2201      	movpl	r2, #1
   d7aa6:	601a      	strpl	r2, [r3, #0]
   d7aa8:	4b16      	ldr	r3, [pc, #88]	; (d7b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7aaa:	681a      	ldr	r2, [r3, #0]
   d7aac:	07d1      	lsls	r1, r2, #31
   d7aae:	bf5c      	itt	pl
   d7ab0:	2201      	movpl	r2, #1
   d7ab2:	601a      	strpl	r2, [r3, #0]
   d7ab4:	4b14      	ldr	r3, [pc, #80]	; (d7b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7ab6:	681a      	ldr	r2, [r3, #0]
   d7ab8:	07d2      	lsls	r2, r2, #31
   d7aba:	bf5c      	itt	pl
   d7abc:	2201      	movpl	r2, #1
   d7abe:	601a      	strpl	r2, [r3, #0]
   d7ac0:	4b12      	ldr	r3, [pc, #72]	; (d7b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7ac2:	681a      	ldr	r2, [r3, #0]
   d7ac4:	07d0      	lsls	r0, r2, #31
   d7ac6:	bf5c      	itt	pl
   d7ac8:	2201      	movpl	r2, #1
   d7aca:	601a      	strpl	r2, [r3, #0]
   d7acc:	4b10      	ldr	r3, [pc, #64]	; (d7b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7ace:	681a      	ldr	r2, [r3, #0]
   d7ad0:	07d1      	lsls	r1, r2, #31
   d7ad2:	bf5c      	itt	pl
   d7ad4:	2201      	movpl	r2, #1
   d7ad6:	601a      	strpl	r2, [r3, #0]
   d7ad8:	4b0e      	ldr	r3, [pc, #56]	; (d7b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7ada:	681a      	ldr	r2, [r3, #0]
   d7adc:	07d2      	lsls	r2, r2, #31
   d7ade:	bf5c      	itt	pl
   d7ae0:	2201      	movpl	r2, #1
   d7ae2:	601a      	strpl	r2, [r3, #0]
   d7ae4:	4770      	bx	lr
   d7ae6:	bf00      	nop
   d7ae8:	2003e79c 	.word	0x2003e79c
   d7aec:	2003e798 	.word	0x2003e798
   d7af0:	2003e794 	.word	0x2003e794
   d7af4:	2003e790 	.word	0x2003e790
   d7af8:	2003e78c 	.word	0x2003e78c
   d7afc:	2003e788 	.word	0x2003e788
   d7b00:	2003e784 	.word	0x2003e784
   d7b04:	2003e780 	.word	0x2003e780
   d7b08:	2003e77c 	.word	0x2003e77c
   d7b0c:	2003e778 	.word	0x2003e778
   d7b10:	2003e774 	.word	0x2003e774
   d7b14:	2003e770 	.word	0x2003e770

000d7b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7b18:	4b24      	ldr	r3, [pc, #144]	; (d7bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7b1a:	681a      	ldr	r2, [r3, #0]
   d7b1c:	07d0      	lsls	r0, r2, #31
   d7b1e:	bf5c      	itt	pl
   d7b20:	2201      	movpl	r2, #1
   d7b22:	601a      	strpl	r2, [r3, #0]
   d7b24:	4b22      	ldr	r3, [pc, #136]	; (d7bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	07d1      	lsls	r1, r2, #31
   d7b2a:	bf5c      	itt	pl
   d7b2c:	2201      	movpl	r2, #1
   d7b2e:	601a      	strpl	r2, [r3, #0]
   d7b30:	4b20      	ldr	r3, [pc, #128]	; (d7bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7b32:	681a      	ldr	r2, [r3, #0]
   d7b34:	07d2      	lsls	r2, r2, #31
   d7b36:	bf5c      	itt	pl
   d7b38:	2201      	movpl	r2, #1
   d7b3a:	601a      	strpl	r2, [r3, #0]
   d7b3c:	4b1e      	ldr	r3, [pc, #120]	; (d7bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7b3e:	681a      	ldr	r2, [r3, #0]
   d7b40:	07d0      	lsls	r0, r2, #31
   d7b42:	bf5c      	itt	pl
   d7b44:	2201      	movpl	r2, #1
   d7b46:	601a      	strpl	r2, [r3, #0]
   d7b48:	4b1c      	ldr	r3, [pc, #112]	; (d7bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7b4a:	681a      	ldr	r2, [r3, #0]
   d7b4c:	07d1      	lsls	r1, r2, #31
   d7b4e:	bf5c      	itt	pl
   d7b50:	2201      	movpl	r2, #1
   d7b52:	601a      	strpl	r2, [r3, #0]
   d7b54:	4b1a      	ldr	r3, [pc, #104]	; (d7bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7b56:	681a      	ldr	r2, [r3, #0]
   d7b58:	07d2      	lsls	r2, r2, #31
   d7b5a:	bf5c      	itt	pl
   d7b5c:	2201      	movpl	r2, #1
   d7b5e:	601a      	strpl	r2, [r3, #0]
   d7b60:	4b18      	ldr	r3, [pc, #96]	; (d7bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7b62:	681a      	ldr	r2, [r3, #0]
   d7b64:	07d0      	lsls	r0, r2, #31
   d7b66:	bf5c      	itt	pl
   d7b68:	2201      	movpl	r2, #1
   d7b6a:	601a      	strpl	r2, [r3, #0]
   d7b6c:	4b16      	ldr	r3, [pc, #88]	; (d7bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7b6e:	681a      	ldr	r2, [r3, #0]
   d7b70:	07d1      	lsls	r1, r2, #31
   d7b72:	bf5c      	itt	pl
   d7b74:	2201      	movpl	r2, #1
   d7b76:	601a      	strpl	r2, [r3, #0]
   d7b78:	4b14      	ldr	r3, [pc, #80]	; (d7bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7b7a:	681a      	ldr	r2, [r3, #0]
   d7b7c:	07d2      	lsls	r2, r2, #31
   d7b7e:	bf5c      	itt	pl
   d7b80:	2201      	movpl	r2, #1
   d7b82:	601a      	strpl	r2, [r3, #0]
   d7b84:	4b12      	ldr	r3, [pc, #72]	; (d7bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7b86:	681a      	ldr	r2, [r3, #0]
   d7b88:	07d0      	lsls	r0, r2, #31
   d7b8a:	bf5c      	itt	pl
   d7b8c:	2201      	movpl	r2, #1
   d7b8e:	601a      	strpl	r2, [r3, #0]
   d7b90:	4b10      	ldr	r3, [pc, #64]	; (d7bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	07d1      	lsls	r1, r2, #31
   d7b96:	bf5c      	itt	pl
   d7b98:	2201      	movpl	r2, #1
   d7b9a:	601a      	strpl	r2, [r3, #0]
   d7b9c:	4b0e      	ldr	r3, [pc, #56]	; (d7bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7b9e:	681a      	ldr	r2, [r3, #0]
   d7ba0:	07d2      	lsls	r2, r2, #31
   d7ba2:	bf5c      	itt	pl
   d7ba4:	2201      	movpl	r2, #1
   d7ba6:	601a      	strpl	r2, [r3, #0]
   d7ba8:	4770      	bx	lr
   d7baa:	bf00      	nop
   d7bac:	2003e7cc 	.word	0x2003e7cc
   d7bb0:	2003e7c8 	.word	0x2003e7c8
   d7bb4:	2003e7c4 	.word	0x2003e7c4
   d7bb8:	2003e7c0 	.word	0x2003e7c0
   d7bbc:	2003e7bc 	.word	0x2003e7bc
   d7bc0:	2003e7b8 	.word	0x2003e7b8
   d7bc4:	2003e7b4 	.word	0x2003e7b4
   d7bc8:	2003e7b0 	.word	0x2003e7b0
   d7bcc:	2003e7ac 	.word	0x2003e7ac
   d7bd0:	2003e7a8 	.word	0x2003e7a8
   d7bd4:	2003e7a4 	.word	0x2003e7a4
   d7bd8:	2003e7a0 	.word	0x2003e7a0

000d7bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7bdc:	4b18      	ldr	r3, [pc, #96]	; (d7c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7bde:	681a      	ldr	r2, [r3, #0]
   d7be0:	07d1      	lsls	r1, r2, #31
   d7be2:	bf5c      	itt	pl
   d7be4:	2201      	movpl	r2, #1
   d7be6:	601a      	strpl	r2, [r3, #0]
   d7be8:	4b16      	ldr	r3, [pc, #88]	; (d7c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7bea:	681a      	ldr	r2, [r3, #0]
   d7bec:	07d2      	lsls	r2, r2, #31
   d7bee:	bf5c      	itt	pl
   d7bf0:	2201      	movpl	r2, #1
   d7bf2:	601a      	strpl	r2, [r3, #0]
   d7bf4:	4b14      	ldr	r3, [pc, #80]	; (d7c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7bf6:	681a      	ldr	r2, [r3, #0]
   d7bf8:	07d0      	lsls	r0, r2, #31
   d7bfa:	bf5c      	itt	pl
   d7bfc:	2201      	movpl	r2, #1
   d7bfe:	601a      	strpl	r2, [r3, #0]
   d7c00:	4b12      	ldr	r3, [pc, #72]	; (d7c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c02:	681a      	ldr	r2, [r3, #0]
   d7c04:	07d1      	lsls	r1, r2, #31
   d7c06:	bf5c      	itt	pl
   d7c08:	2201      	movpl	r2, #1
   d7c0a:	601a      	strpl	r2, [r3, #0]
   d7c0c:	4b10      	ldr	r3, [pc, #64]	; (d7c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c0e:	681a      	ldr	r2, [r3, #0]
   d7c10:	07d2      	lsls	r2, r2, #31
   d7c12:	bf5c      	itt	pl
   d7c14:	2201      	movpl	r2, #1
   d7c16:	601a      	strpl	r2, [r3, #0]
   d7c18:	4b0e      	ldr	r3, [pc, #56]	; (d7c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c1a:	681a      	ldr	r2, [r3, #0]
   d7c1c:	07d0      	lsls	r0, r2, #31
   d7c1e:	bf5c      	itt	pl
   d7c20:	2201      	movpl	r2, #1
   d7c22:	601a      	strpl	r2, [r3, #0]
   d7c24:	4b0c      	ldr	r3, [pc, #48]	; (d7c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c26:	681a      	ldr	r2, [r3, #0]
   d7c28:	07d1      	lsls	r1, r2, #31
   d7c2a:	bf5c      	itt	pl
   d7c2c:	2201      	movpl	r2, #1
   d7c2e:	601a      	strpl	r2, [r3, #0]
   d7c30:	4b0a      	ldr	r3, [pc, #40]	; (d7c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c32:	681a      	ldr	r2, [r3, #0]
   d7c34:	07d2      	lsls	r2, r2, #31
   d7c36:	bf5c      	itt	pl
   d7c38:	2201      	movpl	r2, #1
   d7c3a:	601a      	strpl	r2, [r3, #0]
   d7c3c:	4770      	bx	lr
   d7c3e:	bf00      	nop
   d7c40:	2003e7ec 	.word	0x2003e7ec
   d7c44:	2003e7e8 	.word	0x2003e7e8
   d7c48:	2003e7e4 	.word	0x2003e7e4
   d7c4c:	2003e7e0 	.word	0x2003e7e0
   d7c50:	2003e7dc 	.word	0x2003e7dc
   d7c54:	2003e7d8 	.word	0x2003e7d8
   d7c58:	2003e7d4 	.word	0x2003e7d4
   d7c5c:	2003e7d0 	.word	0x2003e7d0

000d7c60 <__cxa_atexit>:
   d7c60:	b510      	push	{r4, lr}
   d7c62:	4c05      	ldr	r4, [pc, #20]	; (d7c78 <__cxa_atexit+0x18>)
   d7c64:	4613      	mov	r3, r2
   d7c66:	b12c      	cbz	r4, d7c74 <__cxa_atexit+0x14>
   d7c68:	460a      	mov	r2, r1
   d7c6a:	4601      	mov	r1, r0
   d7c6c:	2002      	movs	r0, #2
   d7c6e:	f3af 8000 	nop.w
   d7c72:	bd10      	pop	{r4, pc}
   d7c74:	4620      	mov	r0, r4
   d7c76:	bd10      	pop	{r4, pc}
   d7c78:	00000000 	.word	0x00000000

000d7c7c <memcmp>:
   d7c7c:	b510      	push	{r4, lr}
   d7c7e:	3901      	subs	r1, #1
   d7c80:	4402      	add	r2, r0
   d7c82:	4290      	cmp	r0, r2
   d7c84:	d007      	beq.n	d7c96 <memcmp+0x1a>
   d7c86:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7c8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7c8e:	42a3      	cmp	r3, r4
   d7c90:	d0f7      	beq.n	d7c82 <memcmp+0x6>
   d7c92:	1b18      	subs	r0, r3, r4
   d7c94:	bd10      	pop	{r4, pc}
   d7c96:	2000      	movs	r0, #0
   d7c98:	bd10      	pop	{r4, pc}

000d7c9a <memcpy>:
   d7c9a:	b510      	push	{r4, lr}
   d7c9c:	1e43      	subs	r3, r0, #1
   d7c9e:	440a      	add	r2, r1
   d7ca0:	4291      	cmp	r1, r2
   d7ca2:	d004      	beq.n	d7cae <memcpy+0x14>
   d7ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7cac:	e7f8      	b.n	d7ca0 <memcpy+0x6>
   d7cae:	bd10      	pop	{r4, pc}

000d7cb0 <memmove>:
   d7cb0:	4288      	cmp	r0, r1
   d7cb2:	b510      	push	{r4, lr}
   d7cb4:	eb01 0302 	add.w	r3, r1, r2
   d7cb8:	d801      	bhi.n	d7cbe <memmove+0xe>
   d7cba:	1e42      	subs	r2, r0, #1
   d7cbc:	e00b      	b.n	d7cd6 <memmove+0x26>
   d7cbe:	4298      	cmp	r0, r3
   d7cc0:	d2fb      	bcs.n	d7cba <memmove+0xa>
   d7cc2:	1881      	adds	r1, r0, r2
   d7cc4:	1ad2      	subs	r2, r2, r3
   d7cc6:	42d3      	cmn	r3, r2
   d7cc8:	d004      	beq.n	d7cd4 <memmove+0x24>
   d7cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7cce:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7cd2:	e7f8      	b.n	d7cc6 <memmove+0x16>
   d7cd4:	bd10      	pop	{r4, pc}
   d7cd6:	4299      	cmp	r1, r3
   d7cd8:	d004      	beq.n	d7ce4 <memmove+0x34>
   d7cda:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7cde:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7ce2:	e7f8      	b.n	d7cd6 <memmove+0x26>
   d7ce4:	bd10      	pop	{r4, pc}

000d7ce6 <memset>:
   d7ce6:	4402      	add	r2, r0
   d7ce8:	4603      	mov	r3, r0
   d7cea:	4293      	cmp	r3, r2
   d7cec:	d002      	beq.n	d7cf4 <memset+0xe>
   d7cee:	f803 1b01 	strb.w	r1, [r3], #1
   d7cf2:	e7fa      	b.n	d7cea <memset+0x4>
   d7cf4:	4770      	bx	lr
	...

000d7cf8 <srand>:
   d7cf8:	b538      	push	{r3, r4, r5, lr}
   d7cfa:	4b12      	ldr	r3, [pc, #72]	; (d7d44 <srand+0x4c>)
   d7cfc:	681c      	ldr	r4, [r3, #0]
   d7cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d00:	4605      	mov	r5, r0
   d7d02:	b9d3      	cbnz	r3, d7d3a <srand+0x42>
   d7d04:	2018      	movs	r0, #24
   d7d06:	f7fd fee7 	bl	d5ad8 <malloc>
   d7d0a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7d0e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7d10:	8003      	strh	r3, [r0, #0]
   d7d12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7d16:	8043      	strh	r3, [r0, #2]
   d7d18:	f241 2334 	movw	r3, #4660	; 0x1234
   d7d1c:	8083      	strh	r3, [r0, #4]
   d7d1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7d22:	80c3      	strh	r3, [r0, #6]
   d7d24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7d28:	8103      	strh	r3, [r0, #8]
   d7d2a:	2305      	movs	r3, #5
   d7d2c:	8143      	strh	r3, [r0, #10]
   d7d2e:	230b      	movs	r3, #11
   d7d30:	8183      	strh	r3, [r0, #12]
   d7d32:	2201      	movs	r2, #1
   d7d34:	2300      	movs	r3, #0
   d7d36:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d3c:	2200      	movs	r2, #0
   d7d3e:	611d      	str	r5, [r3, #16]
   d7d40:	615a      	str	r2, [r3, #20]
   d7d42:	bd38      	pop	{r3, r4, r5, pc}
   d7d44:	2003e374 	.word	0x2003e374

000d7d48 <strcpy>:
   d7d48:	4603      	mov	r3, r0
   d7d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7d4e:	f803 2b01 	strb.w	r2, [r3], #1
   d7d52:	2a00      	cmp	r2, #0
   d7d54:	d1f9      	bne.n	d7d4a <strcpy+0x2>
   d7d56:	4770      	bx	lr

000d7d58 <strlen>:
   d7d58:	4603      	mov	r3, r0
   d7d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d5e:	2a00      	cmp	r2, #0
   d7d60:	d1fb      	bne.n	d7d5a <strlen+0x2>
   d7d62:	1a18      	subs	r0, r3, r0
   d7d64:	3801      	subs	r0, #1
   d7d66:	4770      	bx	lr

000d7d68 <strnlen>:
   d7d68:	b510      	push	{r4, lr}
   d7d6a:	4603      	mov	r3, r0
   d7d6c:	4401      	add	r1, r0
   d7d6e:	428b      	cmp	r3, r1
   d7d70:	d004      	beq.n	d7d7c <strnlen+0x14>
   d7d72:	781a      	ldrb	r2, [r3, #0]
   d7d74:	1c5c      	adds	r4, r3, #1
   d7d76:	b10a      	cbz	r2, d7d7c <strnlen+0x14>
   d7d78:	4623      	mov	r3, r4
   d7d7a:	e7f8      	b.n	d7d6e <strnlen+0x6>
   d7d7c:	1a18      	subs	r0, r3, r0
   d7d7e:	bd10      	pop	{r4, pc}

000d7d80 <dynalib_user>:
   d7d80:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7d90:	0000 0000 0ee9 0000 0bd6 0000 0002 0000     ................
   d7da0:	0002 0000 4c42 2045 6552 6563 7669 6465     ....BLE Received
   d7db0:	203a 7325 4820 7865 203a 7825 5000 7361     : %s Hex: %x.Pas
   d7dc0:	6973 676e 6e20 6d61 3a65 2520 0073 4c42     sing name: %s.BL
   d7dd0:	2045 706f 7265 7461 6f69 206e 6572 7573     E operation resu
   d7de0:	746c 3a73 2520 0064 6556 6972 6966 6465     lts: %d.Verified
   d7df0:	4920 3a44 4600 6e69 6567 2072 6f6e 2074      ID:.Finger not 
   d7e00:	6f66 6e75 0064 6944 6173 6c62 6e69 2067     found.Disabling 
   d7e10:	7375 7265 2523 2e64 4120 6464 3a72 2520     user#%d. Addr: %
   d7e20:	2e64 5220 6165 3a64 2520 2e78 5720 6972     d. Read: %x. Wri
   d7e30:	6574 203a 7825 002e 7541 6874 726f 7a69     te: %x..Authoriz
   d7e40:	6e69 2067 7375 7265 2523 2e64 4120 6464     ing user#%d. Add
   d7e50:	3a72 2520 2e64 5220 6165 3a64 2520 2e78     r: %d. Read: %x.
   d7e60:	5720 6972 6574 203a 7825 002e 7355 7265      Write: %x..User
   d7e70:	4920 2044 2523 2064 6f6e 2077 6168 2073      ID #%d now has 
   d7e80:	6361 6563 7373 6c20 7665 6c65 203a 6425     access level: %d
   d7e90:	4e00 6d61 6e69 2067 7375 7265 4920 2044     .Naming user ID 
   d7ea0:	2523 3a64 2520 0073 4545 5250 4d4f 4120     #%d: %s.EEPROM A
   d7eb0:	6176 6c69 6261 656c 203a 5700 6972 6974     vailable: .Writi
   d7ec0:	676e 7420 206f 4545 5250 4d4f 202e 6441     ng to EEPROM. Ad
   d7ed0:	7264 203a 6425 202e 6552 6461 203a 7825     dr: %d. Read: %x
   d7ee0:	202e 7257 7469 3a65 2520 2e78 5500 6573     . Write: %x..Use
   d7ef0:	2072 4449 2320 6425 6e20 776f 7520 6573     r ID #%d now use
   d7f00:	0064 7355 7265 4920 2044 2523 2064 6f6e     d.User ID #%d no
   d7f10:	2077 7661 6961 616c 6c62 0065 4449 2320     w available.ID #
   d7f20:	6425 6120 6176 6c69 6261 656c 002e 7473     %d available..st
   d7f30:	7261 2074 6e45 6f72 6c6c 4500 726e 6c6f     art Enroll.Enrol
   d7f40:	206c 7473 7261 6574 0064 7250 7365 2073     l started.Press 
   d7f50:	6966 676e 7265 7420 206f 6e45 6f72 6c6c     finger to Enroll
   d7f60:	2320 4900 2044 2523 2064 4f4e 2054 7661      #.ID #%d NOT av
   d7f70:	6961 616c 6c62 2e65 5200 6d65 766f 2065     ailable..Remove 
   d7f80:	6966 676e 7265 5000 6572 7373 7320 6d61     finger.Press sam
   d7f90:	2065 6966 676e 7265 6120 6167 6e69 5000     e finger again.P
   d7fa0:	6572 7373 7320 6d61 2065 6966 676e 7265     ress same finger
   d7fb0:	7920 7465 6120 6167 6e69 4500 726e 6c6f      yet again.Enrol
   d7fc0:	696c 676e 5320 6375 6563 7373 7566 006c     ling Successful.
   d7fd0:	654e 2077 7355 7265 4500 726e 6c6f 696c     New User.Enrolli
   d7fe0:	676e 4620 6961 656c 2064 6977 6874 6520     ng Failed with e
   d7ff0:	7272 726f 6320 646f 3a65 4600 6961 656c     rror code:.Faile
   d8000:	2064 6f74 6320 7061 7574 6572 7420 6968     d to capture thi
   d8010:	6472 6620 6e69 6567 0072 6146 6c69 6465     rd finger.Failed
   d8020:	7420 206f 6163 7470 7275 2065 6573 6f63      to capture seco
   d8030:	646e 6620 6e69 6567 0072 6146 6c69 6465     nd finger.Failed
   d8040:	7420 206f 6163 7470 7275 2065 6966 7372      to capture firs
   d8050:	2074 6966 676e 7265 4900 2044 2523 2064     t finger.ID #%d 
   d8060:	7369 6e20 7865 2074 7661 6961 616c 6c62     is next availabl
   d8070:	2065 6e6f 4620 5350 002e 704f 7265 7461     e on FPS..Operat
   d8080:	6f69 3a6e 2520 2c78 5520 6573 3a72 2520     ion: %x, User: %
   d8090:	0064 704f 7265 7461 6f69 206e 6425 7220     d.Operation %d r
   d80a0:	7465 7275 656e 2064 6425 4200 756c 7465     eturned %d.Bluet
   d80b0:	6f6f 6874 4320 6e6f 656e 7463 6465 0021     ooth Connected!.
   d80c0:	6c42 6575 6f74 746f 2068 6944 6373 6e6f     Bluetooth Discon
   d80d0:	656e 7463 6465 002e 4536 3034 3030 3030     nected..6E400000
   d80e0:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   d80f0:	3545 4530 3432 4344 4143 4539 7200 6365     E50E24DCCA9E.rec
   d8100:	6965 6576 3600 3445 3030 3030 2d32 3542     eive.6E400002-B5
   d8110:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d8120:	3245 4434 4343 3941 0045 7274 6e61 6d73     E24DCCA9E.transm
   d8130:	7469 3600 3445 3030 3030 2d31 3542 3341     it.6E400001-B5A3
   d8140:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   d8150:	4434 4343 3941 0045                         4DCCA9E.

000d8158 <CSWTCH.51>:
   d8158:	0000 1001 1002 1003 1004 1005 1006 1007     ................
   d8168:	1008 1009 100a 100b 100c 100d 100e 100f     ................
   d8178:	1010 1011 1012 6552 7073 6e6f 6573 505f     ......Response_P
   d8188:	6361 656b 2074 6170 7372 6e69 2067 7265     acket parsing er
   d8198:	6f72 2072 2000 7c7c 0020 2120 203d 4300     ror . || . != .C
   d81a8:	4d4f 414d 444e 535f 4154 5452 435f 444f     OMMAND_START_COD
   d81b8:	5f45 0031 4f43 4d4d 4e41 5f44 5453 5241     E_1.COMMAND_STAR
   d81c8:	5f54 4f43 4544 325f 4300 4d4f 414d 444e     T_CODE_2.COMMAND
   d81d8:	445f 5645 4349 5f45 4449 315f 4300 4d4f     _DEVICE_ID_1.COM
   d81e8:	414d 444e 445f 5645 4349 5f45 4449 325f     MAND_DEVICE_ID_2
   d81f8:	4100 6b63 614e 5f6b 4f4c 0057 6341 4e6b     .AckNak_LOW.AckN
   d8208:	6b61 485f 4749 0048 6843 6365 736b 6d75     ak_HIGH.Checksum
   d8218:	4c5f 574f 4300 6568 6b63 7573 5f6d 4948     _LOW.Checksum_HI
   d8228:	4847 2500 322e 0058 0022 5046 2053 202d     GH.%.2X.".FPS - 
   d8238:	4553 444e 203a 4600 5350 2d20 5220 4345     SEND: .FPS - REC
   d8248:	3a56 0020 5046 2053 202d 704f 6e65 4600     V: .FPS - Open.F
   d8258:	5350 2d20 4320 6f6c 6573 4600 5350 2d20     PS - Close.FPS -
   d8268:	4c20 4445 6f20 006e 5046 2053 202d 454c      LED on.FPS - LE
   d8278:	2044 666f 0066 5046 2053 202d 6843 6e61     D off.FPS - Chan
   d8288:	6567 6142 6475 6152 6574 4600 5350 2d20     geBaudRate.FPS -
   d8298:	4720 7465 6e45 6f72 6c6c 6465 6f43 6e75      GetEnrolledCoun
   d82a8:	0074 5046 2053 202d 6843 6365 456b 726e     t.FPS - CheckEnr
   d82b8:	6c6f 656c 0064 5046 2053 202d 6e45 6f72     olled.FPS - Enro
   d82c8:	6c6c 7453 7261 0074 5046 2053 202d 6e45     llStart.FPS - En
   d82d8:	6f72 6c6c 0031 5046 2053 202d 6e45 6f72     roll1.FPS - Enro
   d82e8:	6c6c 0032 5046 2053 202d 6e45 6f72 6c6c     ll2.FPS - Enroll
   d82f8:	0033 5046 2053 202d 6544 656c 6574 4449     3.FPS - DeleteID
   d8308:	4600 5350 2d20 4420 6c65 7465 4165 6c6c     .FPS - DeleteAll
   d8318:	4600 5350 2d20 5620 7265 6669 3179 315f     .FPS - Verify1_1
   d8328:	4600 5350 2d20 4920 6564 746e 6669 3179     .FPS - Identify1
   d8338:	4e5f 4600 5350 2d20 4320 7061 7574 6572     _N.FPS - Capture
   d8348:	6946 676e 7265 0000                         Finger..

000d8350 <_ZTVN5spark13EthernetClassE>:
	...
   d8358:	5b87 000d 5b7d 000d 5b73 000d 5b69 000d     .[..}[..s[..i[..
   d8368:	5b5d 000d 5b51 000d 5b45 000d 5b3d 000d     ][..Q[..E[..=[..
   d8378:	5b33 000d 5b29 000d 7771 000d               3[..)[..qw..

000d8384 <_ZTV8SPIClass>:
	...
   d838c:	5ba5 000d 5ba7 000d                         .[...[..

000d8394 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d839c:	5d9b 000d 5da1 000d 6a65 000d 5dcb 000d     .]...]..ej...]..
   d83ac:	5d9d 000d                                   .]..

000d83b0 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d83b8:	5d95 000d 5daf 000d 6b6d 000d 5dcf 000d     .]...]..mk...]..
   d83c8:	5d97 000d                                   .]..

000d83cc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d83d4:	5d8f 000d 5dbd 000d 654f 000d 5dd3 000d     .]...]..Oe...]..
   d83e4:	5d91 000d                                   .]..

000d83e8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d83e8:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d83f8:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d8408:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d8418:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d8428:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d8438:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d8448:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d8458:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d8468:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d8478:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d8488:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d8498:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d84a8:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d84b8:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d84c8:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d84d8:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d84e8:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d84f8:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d8508:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d8518:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d8528:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d8538:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d8548:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d8558:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d8568:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d8578:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d8588:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d8598:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d85a8:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d85b8:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d85c8:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d85d8:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d85e8:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d85f8:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d8608:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d8618:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   d8628:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   d8638:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   d8648:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   d8658:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d8668:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
   d8678:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d8688:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d8698:	6974 656d 0000 0000                         time....

000d86a0 <_ZTV9IPAddress>:
	...
   d86a8:	71d9 000d 71c9 000d 71cb 000d               .q...q...q..

000d86b4 <_ZTV9USBSerial>:
	...
   d86bc:	72b1 000d 7301 000d 730f 000d 6e59 000d     .r...s...s..Yn..
   d86cc:	72ed 000d 72b3 000d 72c9 000d 72fb 000d     .r...r...r...r..
   d86dc:	72df 000d 72ad 000d                         .r...r..

000d86e4 <_ZTV11USARTSerial>:
	...
   d86ec:	7409 000d 7459 000d 7467 000d 6e59 000d     .t..Yt..gt..Yn..
   d86fc:	741d 000d 743f 000d 742b 000d 7453 000d     .t..?t..+t..St..
   d870c:	740b 000d 740f 000d                         .t...t..

000d8714 <_ZTV7TwoWire>:
	...
   d871c:	7521 000d 756b 000d 7543 000d 7523 000d     !u..ku..Cu..#u..
   d872c:	754b 000d 7553 000d 755b 000d 7563 000d     Ku..Su..[u..cu..

000d873c <_ZTVN5spark9MeshClassE>:
	...
   d8744:	7603 000d 75f9 000d 75ef 000d 75e5 000d     .v...u...u...u..
   d8754:	75d9 000d 75cd 000d 75c1 000d 75b9 000d     .u...u...u...u..
   d8764:	75af 000d 75a5 000d 7771 000d               .u...u..qw..

000d8770 <_ZTVN5spark12NetworkClassE>:
	...
   d8778:	7709 000d 7713 000d 771d 000d 7727 000d     .w...w...w..'w..
   d8788:	7731 000d 773d 000d 7749 000d 7755 000d     1w..=w..Iw..Uw..
   d8798:	775d 000d 7767 000d 7771 000d               ]w..gw..qw..

000d87a4 <__sf_fake_stdin>:
	...

000d87c4 <__sf_fake_stdout>:
	...

000d87e4 <__sf_fake_stderr>:
	...
   d8804:	0043                                        C.

000d8806 <link_const_variable_data_end>:
	...

000d8808 <link_constructors_location>:
   d8808:	000d410d 	.word	0x000d410d
   d880c:	000d4b99 	.word	0x000d4b99
   d8810:	000d5539 	.word	0x000d5539
   d8814:	000d5b91 	.word	0x000d5b91
   d8818:	000d5be5 	.word	0x000d5be5
   d881c:	000d6e49 	.word	0x000d6e49
   d8820:	000d701d 	.word	0x000d701d
   d8824:	000d702d 	.word	0x000d702d
   d8828:	000d70c9 	.word	0x000d70c9
   d882c:	000d76b9 	.word	0x000d76b9
   d8830:	000d783d 	.word	0x000d783d
   d8834:	000d7915 	.word	0x000d7915
   d8838:	000d79d1 	.word	0x000d79d1
   d883c:	000d7a55 	.word	0x000d7a55
   d8840:	000d7b19 	.word	0x000d7b19
   d8844:	000d7bdd 	.word	0x000d7bdd

000d8848 <link_constructors_end>:
	...
