
a:/Documents/Programming/GitHub/CoolSafe/Microcontroller/cool_safe_code-StandAlone/target/1.4.4/xenon/cool_safe_code-StandAlone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002964  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016a78  2**0
                  CONTENTS
  4 .data         000000cc  2003e2ec  000d6980  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000438  2003e3b8  2003e3b8  0001e3b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6a4c  000d6a4c  00016a4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6a74  000d6a74  00016a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c5bc4  00000000  00000000  00016a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000105c0  00000000  00000000  000dc63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a8b5  00000000  00000000  000ecbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002370  00000000  00000000  001074b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f40  00000000  00000000  00109821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037cbd  00000000  00000000  0010d761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002945c  00000000  00000000  0014541e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fe96f  00000000  00000000  0016e87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c538  00000000  00000000  0026d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f91b 	bl	d6268 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f920 	bl	d627e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ec 	.word	0x2003e2ec
   d4048:	000d6980 	.word	0x000d6980
   d404c:	2003e3b8 	.word	0x2003e3b8
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fba5 	bl	d57a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6974 	.word	0x000d6974
   d4080:	000d6934 	.word	0x000d6934

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba54 	b.w	d4530 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa8f 	bl	d45ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb57 	b.w	d5744 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b957 	b.w	d5348 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b955 	b.w	d5348 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b95b 	b.w	d5358 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b959 	b.w	d5358 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z4playiiPiS_>:
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40bc:	f8df b048 	ldr.w	fp, [pc, #72]	; d4108 <_Z4playiiPiS_+0x50>
// Notes defined in microseconds (Period/2) 
// from note C to B, Octaves 3 through 7

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
   d40c0:	460f      	mov	r7, r1
   d40c2:	4690      	mov	r8, r2
   d40c4:	4699      	mov	r9, r3
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40c6:	2400      	movs	r4, #0
   d40c8:	b2c6      	uxtb	r6, r0

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40ca:	f44f 7a16 	mov.w	sl, #600	; 0x258

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40ce:	42bc      	cmp	r4, r7
   d40d0:	da15      	bge.n	d40fe <_Z4playiiPiS_+0x46>

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40d2:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    // e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 60*1000/BPM/noteDurations[thisNote];
   d40d6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
   d40da:	fb9a f5f5 	sdiv	r5, sl, r5
    tone(speakerPin, (noteFrequencies[thisNote]!=0)?(500000/noteFrequencies[thisNote]):0,noteDuration-RELEASE);
   d40de:	b109      	cbz	r1, d40e4 <_Z4playiiPiS_+0x2c>
   d40e0:	fb9b f1f1 	sdiv	r1, fp, r1
   d40e4:	f1a5 0214 	sub.w	r2, r5, #20
   d40e8:	4630      	mov	r0, r6
   d40ea:	f001 fc6d 	bl	d59c8 <tone>

    // blocking delay needed because tone() does not block
    delay(noteDuration);
   d40ee:	4628      	mov	r0, r5
   d40f0:	f001 fab0 	bl	d5654 <delay>

    noTone(speakerPin);
   d40f4:	4630      	mov	r0, r6
   d40f6:	f001 fc7e 	bl	d59f6 <noTone>

#include "playTones.h"

void play(int speakerPin, int numNotes, int* noteFrequencies, int* noteDurations) {
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < numNotes; thisNote++) {
   d40fa:	3401      	adds	r4, #1
   d40fc:	e7e7      	b.n	d40ce <_Z4playiiPiS_+0x16>
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d40fe:	4630      	mov	r0, r6
   d4100:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    delay(noteDuration);

    noTone(speakerPin);
  }

  noTone(speakerPin);
   d4104:	f001 bc77 	b.w	d59f6 <noTone>
   d4108:	0007a120 	.word	0x0007a120

000d410c <_GLOBAL__sub_I__Z4playiiPiS_>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d410c:	f000 bf28 	b.w	d4f60 <HAL_Pin_Map>

000d4110 <_Z12goodFeedbackv>:
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(solenoid, LOW);         // Solenoid is back out, ready to lock again
}

void goodFeedback() {
   d4110:	b508      	push	{r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
   d4112:	2101      	movs	r1, #1
   d4114:	2006      	movs	r0, #6
   d4116:	f001 feda 	bl	d5ece <digitalWrite>
  RGB.color(0, 255, 0);                                         // on-board green light
   d411a:	2200      	movs	r2, #0
   d411c:	4610      	mov	r0, r2
   d411e:	21ff      	movs	r1, #255	; 0xff
   d4120:	f001 faba 	bl	d5698 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
   d4124:	4b08      	ldr	r3, [pc, #32]	; (d4148 <_Z12goodFeedbackv+0x38>)
   d4126:	4a09      	ldr	r2, [pc, #36]	; (d414c <_Z12goodFeedbackv+0x3c>)
   d4128:	2103      	movs	r1, #3
   d412a:	2013      	movs	r0, #19
   d412c:	f7ff ffc4 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(greenLED, LOW);                                  // turn lights back off
   d4130:	2100      	movs	r1, #0
   d4132:	2006      	movs	r0, #6
   d4134:	f001 fecb 	bl	d5ece <digitalWrite>
  RGB.color(0, 0, 0);
   d4138:	2200      	movs	r2, #0
   d413a:	4611      	mov	r1, r2
   d413c:	4610      	mov	r0, r2
}
   d413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // green light and good sound
  digitalWrite(greenLED, HIGH);                                 // external green light
  RGB.color(0, 255, 0);                                         // on-board green light
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
   d4142:	f001 baa9 	b.w	d5698 <_ZN8RGBClass5colorEiii>
   d4146:	bf00      	nop
   d4148:	2003e340 	.word	0x2003e340
   d414c:	2003e334 	.word	0x2003e334

000d4150 <_Z7openBinv>:
bool changeUserName(uint8_t id, String name);

int manualEnrollTimer = 0;  // tracks time for manually initiating enrollment with the key switch
int manualEnrollTriggerTime = 500;  // time (in ms) alotted for triggering manual enrollment

void openBin() {
   d4150:	b508      	push	{r3, lr}
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(solenoid, HIGH);        // Unlock the bin
   d4152:	2101      	movs	r1, #1
   d4154:	200f      	movs	r0, #15
   d4156:	f001 feba 	bl	d5ece <digitalWrite>
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
   d415a:	f7ff ffd9 	bl	d4110 <_Z12goodFeedbackv>
  delay(unlockTime);                // How long the solenoid stays pulled in
   d415e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4162:	f001 fa77 	bl	d5654 <delay>
  digitalWrite(solenoid, LOW);         // Solenoid is back out, ready to lock again
   d4166:	2100      	movs	r1, #0
   d4168:	200f      	movs	r0, #15
}
   d416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void openBin() {
  // Open the lock-bin by connecting the relays common and normally open, actuating the solenoid.
  digitalWrite(solenoid, HIGH);        // Unlock the bin
  goodFeedback();                   // Use lights and sounds to let the user know the lock-bin is unlocked
  delay(unlockTime);                // How long the solenoid stays pulled in
  digitalWrite(solenoid, LOW);         // Solenoid is back out, ready to lock again
   d416e:	f001 beae 	b.w	d5ece <digitalWrite>
	...

000d4174 <_Z11badFeedbackv>:
  play(buzzer, arraySize(goodSound), goodSound, goodDuration);  // sound has some delay
  digitalWrite(greenLED, LOW);                                  // turn lights back off
  RGB.color(0, 0, 0);
}

void badFeedback() {
   d4174:	b508      	push	{r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
   d4176:	2101      	movs	r1, #1
   d4178:	2008      	movs	r0, #8
   d417a:	f001 fea8 	bl	d5ece <digitalWrite>
  RGB.color(255, 0, 0);                                         // on-board red light
   d417e:	2200      	movs	r2, #0
   d4180:	4611      	mov	r1, r2
   d4182:	20ff      	movs	r0, #255	; 0xff
   d4184:	f001 fa88 	bl	d5698 <_ZN8RGBClass5colorEiii>
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
   d4188:	4b08      	ldr	r3, [pc, #32]	; (d41ac <_Z11badFeedbackv+0x38>)
   d418a:	4a09      	ldr	r2, [pc, #36]	; (d41b0 <_Z11badFeedbackv+0x3c>)
   d418c:	2103      	movs	r1, #3
   d418e:	2013      	movs	r0, #19
   d4190:	f7ff ff92 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(redLED, LOW);                                    // turn lights back off
   d4194:	2100      	movs	r1, #0
   d4196:	2008      	movs	r0, #8
   d4198:	f001 fe99 	bl	d5ece <digitalWrite>
  RGB.color(0, 0, 0);
   d419c:	2200      	movs	r2, #0
   d419e:	4611      	mov	r1, r2
   d41a0:	4610      	mov	r0, r2
}
   d41a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // red light and bad sound
  digitalWrite(redLED, HIGH);                                   // external red light
  RGB.color(255, 0, 0);                                         // on-board red light
  play(buzzer, arraySize(badSound), badSound, badDuration);     // sound has some delay
  digitalWrite(redLED, LOW);                                    // turn lights back off
  RGB.color(0, 0, 0);
   d41a6:	f001 ba77 	b.w	d5698 <_ZN8RGBClass5colorEiii>
   d41aa:	bf00      	nop
   d41ac:	2003e328 	.word	0x2003e328
   d41b0:	2003e31c 	.word	0x2003e31c

000d41b4 <_Z18enrollScanFeedbackv>:
}

void enrollScanFeedback() {
   d41b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d41b6:	4c13      	ldr	r4, [pc, #76]	; (d4204 <_Z18enrollScanFeedbackv+0x50>)
   d41b8:	e894 0003 	ldmia.w	r4, {r0, r1}
  int duration[] = {2, 2};
   d41bc:	3408      	adds	r4, #8
  RGB.color(0, 0, 0);
}

void enrollScanFeedback() {
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d41be:	e88d 0003 	stmia.w	sp, {r0, r1}
  int duration[] = {2, 2};
   d41c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d41c6:	ab02      	add	r3, sp, #8
   d41c8:	e883 0003 	stmia.w	r3, {r0, r1}
  RGB.color(0, 0, 0);
}

void enrollScanFeedback() {
  // Blink amber (busy) LED and make a sound to signify a scan has been taken and the user can remove their finger
  int sound[] = {NOTE_C3, NOTE_E3};
   d41cc:	466a      	mov	r2, sp
  int duration[] = {2, 2};
  play(buzzer, 2, sound, duration);
   d41ce:	2102      	movs	r1, #2
   d41d0:	2013      	movs	r0, #19
   d41d2:	f7ff ff71 	bl	d40b8 <_Z4playiiPiS_>
  digitalWrite(busyLED, LOW);
   d41d6:	2100      	movs	r1, #0
   d41d8:	2007      	movs	r0, #7
   d41da:	f001 fe78 	bl	d5ece <digitalWrite>
  RGB.color(0, 0, 0);
   d41de:	2200      	movs	r2, #0
   d41e0:	4611      	mov	r1, r2
   d41e2:	4610      	mov	r0, r2
   d41e4:	f001 fa58 	bl	d5698 <_ZN8RGBClass5colorEiii>
  delay(100);
   d41e8:	2064      	movs	r0, #100	; 0x64
   d41ea:	f001 fa33 	bl	d5654 <delay>
  digitalWrite(busyLED, HIGH);
   d41ee:	2101      	movs	r1, #1
   d41f0:	2007      	movs	r0, #7
   d41f2:	f001 fe6c 	bl	d5ece <digitalWrite>
  RGB.color(100, 100, 0);
   d41f6:	2164      	movs	r1, #100	; 0x64
   d41f8:	2200      	movs	r2, #0
   d41fa:	4608      	mov	r0, r1
   d41fc:	f001 fa4c 	bl	d5698 <_ZN8RGBClass5colorEiii>
}
   d4200:	b004      	add	sp, #16
   d4202:	bd10      	pop	{r4, pc}
   d4204:	000d6304 	.word	0x000d6304

000d4208 <_Z12identifyUserv>:

int identifyUser() {
   d4208:	b510      	push	{r4, lr}
  // Once a finger is detected then identify a user with the FPS
  //fps.CaptureFinger(false);   // false = take a low quality image (faster)
  fps.CaptureFinger(true);
   d420a:	2101      	movs	r1, #1
   d420c:	480f      	ldr	r0, [pc, #60]	; (d424c <_Z12identifyUserv+0x44>)
   d420e:	f000 fe5d 	bl	d4ecc <_ZN12FPS_GT521F3213CaptureFingerEb>
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d4212:	480e      	ldr	r0, [pc, #56]	; (d424c <_Z12identifyUserv+0x44>)
   d4214:	f000 fe28 	bl	d4e68 <_ZN12FPS_GT521F3211Identify1_NEv>

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d4218:	28c7      	cmp	r0, #199	; 0xc7

int identifyUser() {
  // Once a finger is detected then identify a user with the FPS
  //fps.CaptureFinger(false);   // false = take a low quality image (faster)
  fps.CaptureFinger(true);
  int id = fps.Identify1_N(); // check if the fingerprint is stored in the FPS
   d421a:	4604      	mov	r4, r0

  if (id >= 0 && id < 200) {  // valid value for a user id on the GT-521F32 FPS
   d421c:	d80d      	bhi.n	d423a <_Z12identifyUserv+0x32>
    Serial.print("Verified ID:");
   d421e:	f001 fbad 	bl	d597c <_Z16_fetch_usbserialv>
   d4222:	490b      	ldr	r1, [pc, #44]	; (d4250 <_Z12identifyUserv+0x48>)
   d4224:	f001 f948 	bl	d54b8 <_ZN5Print5printEPKc>
    Serial.println(id);
   d4228:	f001 fba8 	bl	d597c <_Z16_fetch_usbserialv>
   d422c:	220a      	movs	r2, #10
   d422e:	4621      	mov	r1, r4
   d4230:	f001 f9ba 	bl	d55a8 <_ZN5Print7printlnEii>
    openBin();  // Allow access. Includes good feedback
   d4234:	f7ff ff8c 	bl	d4150 <_Z7openBinv>
   d4238:	e006      	b.n	d4248 <_Z12identifyUserv+0x40>
  }
  else {//if unable to recognize
    Serial.println("Finger not found");
   d423a:	f001 fb9f 	bl	d597c <_Z16_fetch_usbserialv>
   d423e:	4905      	ldr	r1, [pc, #20]	; (d4254 <_Z12identifyUserv+0x4c>)
   d4240:	f001 f94d 	bl	d54de <_ZN5Print7printlnEPKc>
    badFeedback();  // Deny access
   d4244:	f7ff ff96 	bl	d4174 <_Z11badFeedbackv>
  }

  return id;  // Return id of the user from the FPS
}
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}
   d424c:	2003e3cc 	.word	0x2003e3cc
   d4250:	000d6314 	.word	0x000d6314
   d4254:	000d6321 	.word	0x000d6321

000d4258 <_Z10enrollUserv>:

bool enrollUser() {
   d4258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Enroll a new fingerprint for the scanner. Returns true if successful. Returns false if timed out or error.

  // Signal to users that the system is busy. Normal functions won't work at this time
  digitalWrite(busyLED, HIGH);
   d425a:	2101      	movs	r1, #1
   d425c:	2007      	movs	r0, #7
   d425e:	f001 fe36 	bl	d5ece <digitalWrite>
  RGB.color(100, 100, 0);
   d4262:	2164      	movs	r1, #100	; 0x64
   d4264:	4608      	mov	r0, r1
   d4266:	2200      	movs	r2, #0
   d4268:	f001 fa16 	bl	d5698 <_ZN8RGBClass5colorEiii>
 
  // Is there room?
  if (fps.GetEnrollCount() == maxUsers) {  // FPS full
   d426c:	488b      	ldr	r0, [pc, #556]	; (d449c <_Z10enrollUserv+0x244>)
   d426e:	f000 fc5d 	bl	d4b2c <_ZN12FPS_GT521F3214GetEnrollCountEv>
   d4272:	28c8      	cmp	r0, #200	; 0xc8
   d4274:	d105      	bne.n	d4282 <_Z10enrollUserv+0x2a>
    Serial.println("Error: no more enrollment IDs available.");
   d4276:	f001 fb81 	bl	d597c <_Z16_fetch_usbserialv>
   d427a:	4989      	ldr	r1, [pc, #548]	; (d44a0 <_Z10enrollUserv+0x248>)
   d427c:	f001 f92f 	bl	d54de <_ZN5Print7printlnEPKc>
   d4280:	e00b      	b.n	d429a <_Z10enrollUserv+0x42>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4282:	f000 feb5 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
    RGB.color(0, 0, 0);
    return false;
  }

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d4286:	4d87      	ldr	r5, [pc, #540]	; (d44a4 <_Z10enrollUserv+0x24c>)

  int enrollid = 0;
   d4288:	2400      	movs	r4, #0
    RGB.color(0, 0, 0);
    return false;
  }

  // Jot down the time this enrollment started.
  enrollStartTime = millis();
   d428a:	6028      	str	r0, [r5, #0]

  int enrollid = 0;
  bool usedid = true;
  while (usedid == true) {
    usedid = fps.CheckEnrolled(enrollid);
   d428c:	4621      	mov	r1, r4
   d428e:	4883      	ldr	r0, [pc, #524]	; (d449c <_Z10enrollUserv+0x244>)
   d4290:	f000 fc80 	bl	d4b94 <_ZN12FPS_GT521F3213CheckEnrolledEi>
    if (usedid==true) enrollid++;
   d4294:	b160      	cbz	r0, d42b0 <_Z10enrollUserv+0x58>
   d4296:	3401      	adds	r4, #1
   d4298:	e7f8      	b.n	d428c <_Z10enrollUserv+0x34>
  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
      digitalWrite(busyLED, LOW);
   d429a:	2100      	movs	r1, #0
   d429c:	2007      	movs	r0, #7
   d429e:	f001 fe16 	bl	d5ece <digitalWrite>
      RGB.color(0, 0, 0);
   d42a2:	2200      	movs	r2, #0
   d42a4:	4611      	mov	r1, r2
   d42a6:	4610      	mov	r0, r2
   d42a8:	f001 f9f6 	bl	d5698 <_ZN8RGBClass5colorEiii>
      return false; // exit w/ timeout function if we've been here for too long
   d42ac:	2400      	movs	r4, #0
   d42ae:	e0f3      	b.n	d4498 <_Z10enrollUserv+0x240>
  bool usedid = true;
  while (usedid == true) {
    usedid = fps.CheckEnrolled(enrollid);
    if (usedid==true) enrollid++;
  }
  Serial.printlnf("ID #%d is next available on FPS.", enrollid);
   d42b0:	f001 fb64 	bl	d597c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42b4:	4623      	mov	r3, r4
   d42b6:	4a7c      	ldr	r2, [pc, #496]	; (d44a8 <_Z10enrollUserv+0x250>)
   d42b8:	2101      	movs	r1, #1
   d42ba:	f001 f97f 	bl	d55bc <_ZN5Print11printf_implEbPKcz>

  Serial.println("start Enroll");
   d42be:	f001 fb5d 	bl	d597c <_Z16_fetch_usbserialv>
   d42c2:	497a      	ldr	r1, [pc, #488]	; (d44ac <_Z10enrollUserv+0x254>)
   d42c4:	f001 f90b 	bl	d54de <_ZN5Print7printlnEPKc>
  fps.EnrollStart(enrollid);
   d42c8:	4621      	mov	r1, r4
   d42ca:	4874      	ldr	r0, [pc, #464]	; (d449c <_Z10enrollUserv+0x244>)
   d42cc:	f000 fc90 	bl	d4bf0 <_ZN12FPS_GT521F3211EnrollStartEi>
  Serial.println("Enroll started");
   d42d0:	f001 fb54 	bl	d597c <_Z16_fetch_usbserialv>
   d42d4:	4976      	ldr	r1, [pc, #472]	; (d44b0 <_Z10enrollUserv+0x258>)
   d42d6:	f001 f902 	bl	d54de <_ZN5Print7printlnEPKc>

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
   d42da:	f001 fb4f 	bl	d597c <_Z16_fetch_usbserialv>
   d42de:	4975      	ldr	r1, [pc, #468]	; (d44b4 <_Z10enrollUserv+0x25c>)
   d42e0:	f001 f8ea 	bl	d54b8 <_ZN5Print5printEPKc>
  Serial.println(enrollid);
   d42e4:	f001 fb4a 	bl	d597c <_Z16_fetch_usbserialv>
   d42e8:	4621      	mov	r1, r4
   d42ea:	220a      	movs	r2, #10
   d42ec:	f001 f95c 	bl	d55a8 <_ZN5Print7printlnEii>
  while(fps.IsPressFinger() == false) {
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d42f0:	f64e 245f 	movw	r4, #59999	; 0xea5f
  Serial.println("Enroll started");

  // enroll w/ 3 seperate scans
  Serial.print("Press finger to Enroll #");
  Serial.println(enrollid);
  while(fps.IsPressFinger() == false) {
   d42f4:	4869      	ldr	r0, [pc, #420]	; (d449c <_Z10enrollUserv+0x244>)
   d42f6:	f000 fd8b 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d42fa:	b948      	cbnz	r0, d4310 <_Z10enrollUserv+0xb8>
   d42fc:	f000 fe78 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
    if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d4300:	682b      	ldr	r3, [r5, #0]
   d4302:	1ac0      	subs	r0, r0, r3
   d4304:	42a0      	cmp	r0, r4
   d4306:	d8c8      	bhi.n	d429a <_Z10enrollUserv+0x42>
      digitalWrite(busyLED, LOW);
      RGB.color(0, 0, 0);
      return false; // exit w/ timeout function if we've been here for too long
    }
    delay(100);
   d4308:	2064      	movs	r0, #100	; 0x64
   d430a:	f001 f9a3 	bl	d5654 <delay>
   d430e:	e7f1      	b.n	d42f4 <_Z10enrollUserv+0x9c>
  }
  bool bret = fps.CaptureFinger(true);  // true = use high quality scan
   d4310:	2101      	movs	r1, #1
   d4312:	4862      	ldr	r0, [pc, #392]	; (d449c <_Z10enrollUserv+0x244>)
   d4314:	f000 fdda 	bl	d4ecc <_ZN12FPS_GT521F3213CaptureFingerEb>
  int iret = 0;
  if (bret != false) {
   d4318:	4604      	mov	r4, r0
   d431a:	2800      	cmp	r0, #0
   d431c:	f000 80ac 	beq.w	d4478 <_Z10enrollUserv+0x220>
    // Successful first scan
    enrollScanFeedback();  //goodFeedback();
   d4320:	f7ff ff48 	bl	d41b4 <_Z18enrollScanFeedbackv>
    Serial.println("Remove finger");
   d4324:	f001 fb2a 	bl	d597c <_Z16_fetch_usbserialv>
   d4328:	4963      	ldr	r1, [pc, #396]	; (d44b8 <_Z10enrollUserv+0x260>)
   d432a:	f001 f8d8 	bl	d54de <_ZN5Print7printlnEPKc>
    fps.Enroll1(); 
   d432e:	485b      	ldr	r0, [pc, #364]	; (d449c <_Z10enrollUserv+0x244>)
   d4330:	f000 fca2 	bl	d4c78 <_ZN12FPS_GT521F327Enroll1Ev>
    while(fps.IsPressFinger() == true) delay(100);
   d4334:	4859      	ldr	r0, [pc, #356]	; (d449c <_Z10enrollUserv+0x244>)
   d4336:	f000 fd6b 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d433a:	4604      	mov	r4, r0
   d433c:	b118      	cbz	r0, d4346 <_Z10enrollUserv+0xee>
   d433e:	2064      	movs	r0, #100	; 0x64
   d4340:	f001 f988 	bl	d5654 <delay>
   d4344:	e7f6      	b.n	d4334 <_Z10enrollUserv+0xdc>
    Serial.println("Press same finger again");
   d4346:	f001 fb19 	bl	d597c <_Z16_fetch_usbserialv>
   d434a:	495c      	ldr	r1, [pc, #368]	; (d44bc <_Z10enrollUserv+0x264>)
   d434c:	f001 f8c7 	bl	d54de <_ZN5Print7printlnEPKc>
    while(fps.IsPressFinger() == false) {
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d4350:	f64e 265f 	movw	r6, #59999	; 0xea5f
    enrollScanFeedback();  //goodFeedback();
    Serial.println("Remove finger");
    fps.Enroll1(); 
    while(fps.IsPressFinger() == true) delay(100);
    Serial.println("Press same finger again");
    while(fps.IsPressFinger() == false) {
   d4354:	4851      	ldr	r0, [pc, #324]	; (d449c <_Z10enrollUserv+0x244>)
   d4356:	f000 fd5b 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d435a:	b948      	cbnz	r0, d4370 <_Z10enrollUserv+0x118>
   d435c:	f000 fe48 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
      if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d4360:	682b      	ldr	r3, [r5, #0]
   d4362:	1ac0      	subs	r0, r0, r3
   d4364:	42b0      	cmp	r0, r6
   d4366:	d898      	bhi.n	d429a <_Z10enrollUserv+0x42>
        digitalWrite(busyLED, LOW);
        RGB.color(0, 0, 0);
        return false; // exit w/ timeout function if we've been here for too long
      }
      delay(100);
   d4368:	2064      	movs	r0, #100	; 0x64
   d436a:	f001 f973 	bl	d5654 <delay>
   d436e:	e7f1      	b.n	d4354 <_Z10enrollUserv+0xfc>
    }
    bret = fps.CaptureFinger(true);
   d4370:	2101      	movs	r1, #1
   d4372:	484a      	ldr	r0, [pc, #296]	; (d449c <_Z10enrollUserv+0x244>)
   d4374:	f000 fdaa 	bl	d4ecc <_ZN12FPS_GT521F3213CaptureFingerEb>
    if (bret != false) {
   d4378:	4606      	mov	r6, r0
   d437a:	2800      	cmp	r0, #0
   d437c:	d06d      	beq.n	d445a <_Z10enrollUserv+0x202>
      // Successful second scan
      enrollScanFeedback();  //goodFeedback();
   d437e:	f7ff ff19 	bl	d41b4 <_Z18enrollScanFeedbackv>
      Serial.println("Remove finger");
   d4382:	f001 fafb 	bl	d597c <_Z16_fetch_usbserialv>
   d4386:	494c      	ldr	r1, [pc, #304]	; (d44b8 <_Z10enrollUserv+0x260>)
   d4388:	f001 f8a9 	bl	d54de <_ZN5Print7printlnEPKc>
      fps.Enroll2();
   d438c:	4843      	ldr	r0, [pc, #268]	; (d449c <_Z10enrollUserv+0x244>)
   d438e:	f000 fcb7 	bl	d4d00 <_ZN12FPS_GT521F327Enroll2Ev>
      while(fps.IsPressFinger() == true) delay(100);
   d4392:	4842      	ldr	r0, [pc, #264]	; (d449c <_Z10enrollUserv+0x244>)
   d4394:	f000 fd3c 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d4398:	4604      	mov	r4, r0
   d439a:	b118      	cbz	r0, d43a4 <_Z10enrollUserv+0x14c>
   d439c:	2064      	movs	r0, #100	; 0x64
   d439e:	f001 f959 	bl	d5654 <delay>
   d43a2:	e7f6      	b.n	d4392 <_Z10enrollUserv+0x13a>
      Serial.println("Press same finger yet again");
   d43a4:	f001 faea 	bl	d597c <_Z16_fetch_usbserialv>
   d43a8:	4945      	ldr	r1, [pc, #276]	; (d44c0 <_Z10enrollUserv+0x268>)
   d43aa:	f001 f898 	bl	d54de <_ZN5Print7printlnEPKc>
      while(fps.IsPressFinger() == false)  {
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d43ae:	f64e 275f 	movw	r7, #59999	; 0xea5f
      enrollScanFeedback();  //goodFeedback();
      Serial.println("Remove finger");
      fps.Enroll2();
      while(fps.IsPressFinger() == true) delay(100);
      Serial.println("Press same finger yet again");
      while(fps.IsPressFinger() == false)  {
   d43b2:	483a      	ldr	r0, [pc, #232]	; (d449c <_Z10enrollUserv+0x244>)
   d43b4:	f000 fd2c 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d43b8:	4606      	mov	r6, r0
   d43ba:	b950      	cbnz	r0, d43d2 <_Z10enrollUserv+0x17a>
   d43bc:	f000 fe18 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
        if ( (millis() - enrollStartTime) >= (ENROLLMENT_WAIT * 1000) ) {
   d43c0:	682b      	ldr	r3, [r5, #0]
   d43c2:	1ac0      	subs	r0, r0, r3
   d43c4:	42b8      	cmp	r0, r7
   d43c6:	f63f af68 	bhi.w	d429a <_Z10enrollUserv+0x42>
          digitalWrite(busyLED, LOW);
          RGB.color(0, 0, 0);
          return false; // exit w/ timeout function if we've been here for too long
        }
        delay(100);
   d43ca:	2064      	movs	r0, #100	; 0x64
   d43cc:	f001 f942 	bl	d5654 <delay>
   d43d0:	e7ef      	b.n	d43b2 <_Z10enrollUserv+0x15a>
      }
      bret = fps.CaptureFinger(true);
   d43d2:	2101      	movs	r1, #1
   d43d4:	4831      	ldr	r0, [pc, #196]	; (d449c <_Z10enrollUserv+0x244>)
   d43d6:	f000 fd79 	bl	d4ecc <_ZN12FPS_GT521F3213CaptureFingerEb>
      if (bret != false) {
   d43da:	4605      	mov	r5, r0
   d43dc:	b380      	cbz	r0, d4440 <_Z10enrollUserv+0x1e8>
        // Successful third scan
        enrollScanFeedback();  //goodFeedback();
   d43de:	f7ff fee9 	bl	d41b4 <_Z18enrollScanFeedbackv>
        Serial.println("Remove finger");
   d43e2:	f001 facb 	bl	d597c <_Z16_fetch_usbserialv>
   d43e6:	4934      	ldr	r1, [pc, #208]	; (d44b8 <_Z10enrollUserv+0x260>)
   d43e8:	f001 f879 	bl	d54de <_ZN5Print7printlnEPKc>
        iret = fps.Enroll3();
   d43ec:	482b      	ldr	r0, [pc, #172]	; (d449c <_Z10enrollUserv+0x244>)
   d43ee:	f000 fccb 	bl	d4d88 <_ZN12FPS_GT521F327Enroll3Ev>
        if (iret == 0) {
   d43f2:	4605      	mov	r5, r0
   d43f4:	b988      	cbnz	r0, d441a <_Z10enrollUserv+0x1c2>
          // All scans successful
          goodFeedback();
   d43f6:	f7ff fe8b 	bl	d4110 <_Z12goodFeedbackv>
          Serial.println("Enrolling Successful");
   d43fa:	f001 fabf 	bl	d597c <_Z16_fetch_usbserialv>
   d43fe:	4931      	ldr	r1, [pc, #196]	; (d44c4 <_Z10enrollUserv+0x26c>)
   d4400:	f001 f86d 	bl	d54de <_ZN5Print7printlnEPKc>
    RGB.color(0, 0, 0);
    return false; // stop w/ failure
  }

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
   d4404:	4629      	mov	r1, r5
   d4406:	2007      	movs	r0, #7
   d4408:	f001 fd61 	bl	d5ece <digitalWrite>
  RGB.color(0, 0, 0);
   d440c:	462a      	mov	r2, r5
   d440e:	4629      	mov	r1, r5
   d4410:	4628      	mov	r0, r5
   d4412:	f001 f941 	bl	d5698 <_ZN8RGBClass5colorEiii>
  return true;  // exit w/ success
   d4416:	4634      	mov	r4, r6
   d4418:	e03e      	b.n	d4498 <_Z10enrollUserv+0x240>
          goodFeedback();
          Serial.println("Enrolling Successful");
        }
        else {
          // Something went wrong
          badFeedback();
   d441a:	f7ff feab 	bl	d4174 <_Z11badFeedbackv>
          Serial.print("Enrolling Failed with error code:");
   d441e:	f001 faad 	bl	d597c <_Z16_fetch_usbserialv>
   d4422:	4929      	ldr	r1, [pc, #164]	; (d44c8 <_Z10enrollUserv+0x270>)
   d4424:	f001 f848 	bl	d54b8 <_ZN5Print5printEPKc>
          Serial.println(iret);
   d4428:	f001 faa8 	bl	d597c <_Z16_fetch_usbserialv>
   d442c:	220a      	movs	r2, #10
   d442e:	4629      	mov	r1, r5
   d4430:	f001 f8ba 	bl	d55a8 <_ZN5Print7printlnEii>
          digitalWrite(busyLED, LOW);
   d4434:	2100      	movs	r1, #0
   d4436:	2007      	movs	r0, #7
   d4438:	f001 fd49 	bl	d5ece <digitalWrite>
          RGB.color(0, 0, 0);
   d443c:	2200      	movs	r2, #0
   d443e:	e018      	b.n	d4472 <_Z10enrollUserv+0x21a>
          return false; // stop w/ failure
        }
      }
      else {
        badFeedback();
   d4440:	f7ff fe98 	bl	d4174 <_Z11badFeedbackv>
        Serial.println("Failed to capture third finger");
   d4444:	f001 fa9a 	bl	d597c <_Z16_fetch_usbserialv>
   d4448:	4920      	ldr	r1, [pc, #128]	; (d44cc <_Z10enrollUserv+0x274>)
   d444a:	f001 f848 	bl	d54de <_ZN5Print7printlnEPKc>
        digitalWrite(busyLED, LOW);
   d444e:	4629      	mov	r1, r5
   d4450:	2007      	movs	r0, #7
   d4452:	f001 fd3c 	bl	d5ece <digitalWrite>
        RGB.color(0, 0, 0);
   d4456:	462a      	mov	r2, r5
   d4458:	e00b      	b.n	d4472 <_Z10enrollUserv+0x21a>
        return false; // stop w/ failure
      }
    }
    else {
      badFeedback();
   d445a:	f7ff fe8b 	bl	d4174 <_Z11badFeedbackv>
      Serial.println("Failed to capture second finger");
   d445e:	f001 fa8d 	bl	d597c <_Z16_fetch_usbserialv>
   d4462:	491b      	ldr	r1, [pc, #108]	; (d44d0 <_Z10enrollUserv+0x278>)
   d4464:	f001 f83b 	bl	d54de <_ZN5Print7printlnEPKc>
      digitalWrite(busyLED, LOW);
   d4468:	4631      	mov	r1, r6
   d446a:	2007      	movs	r0, #7
   d446c:	f001 fd2f 	bl	d5ece <digitalWrite>
      RGB.color(0, 0, 0);
   d4470:	4632      	mov	r2, r6
   d4472:	4611      	mov	r1, r2
   d4474:	4610      	mov	r0, r2
   d4476:	e00d      	b.n	d4494 <_Z10enrollUserv+0x23c>
      return false; // stop w/ failure
    }
  }
  else {
    badFeedback();
   d4478:	f7ff fe7c 	bl	d4174 <_Z11badFeedbackv>
    Serial.println("Failed to capture first finger");
   d447c:	f001 fa7e 	bl	d597c <_Z16_fetch_usbserialv>
   d4480:	4914      	ldr	r1, [pc, #80]	; (d44d4 <_Z10enrollUserv+0x27c>)
   d4482:	f001 f82c 	bl	d54de <_ZN5Print7printlnEPKc>
    digitalWrite(busyLED, LOW);
   d4486:	4621      	mov	r1, r4
   d4488:	2007      	movs	r0, #7
   d448a:	f001 fd20 	bl	d5ece <digitalWrite>
    RGB.color(0, 0, 0);
   d448e:	4622      	mov	r2, r4
   d4490:	4621      	mov	r1, r4
   d4492:	4620      	mov	r0, r4
   d4494:	f001 f900 	bl	d5698 <_ZN8RGBClass5colorEiii>

  // Let the users know the system is back to normal
  digitalWrite(busyLED, LOW);
  RGB.color(0, 0, 0);
  return true;  // exit w/ success
}
   d4498:	4620      	mov	r0, r4
   d449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d449c:	2003e3cc 	.word	0x2003e3cc
   d44a0:	000d6332 	.word	0x000d6332
   d44a4:	2003e3c8 	.word	0x2003e3c8
   d44a8:	000d6432 	.word	0x000d6432
   d44ac:	000d6453 	.word	0x000d6453
   d44b0:	000d6460 	.word	0x000d6460
   d44b4:	000d646f 	.word	0x000d646f
   d44b8:	000d635b 	.word	0x000d635b
   d44bc:	000d6369 	.word	0x000d6369
   d44c0:	000d6381 	.word	0x000d6381
   d44c4:	000d639d 	.word	0x000d639d
   d44c8:	000d63b2 	.word	0x000d63b2
   d44cc:	000d63d4 	.word	0x000d63d4
   d44d0:	000d63f3 	.word	0x000d63f3
   d44d4:	000d6413 	.word	0x000d6413

000d44d8 <_Z11LEDsequencev>:

void LEDsequence() {
   d44d8:	b508      	push	{r3, lr}
  // Do a wave of all 3 LEDs on and then off. Used for making sure they work at startup
  digitalWrite(greenLED, HIGH);
   d44da:	2101      	movs	r1, #1
   d44dc:	2006      	movs	r0, #6
   d44de:	f001 fcf6 	bl	d5ece <digitalWrite>
  delay(100);
   d44e2:	2064      	movs	r0, #100	; 0x64
   d44e4:	f001 f8b6 	bl	d5654 <delay>
  digitalWrite(busyLED, HIGH);
   d44e8:	2101      	movs	r1, #1
   d44ea:	2007      	movs	r0, #7
   d44ec:	f001 fcef 	bl	d5ece <digitalWrite>
  delay(100);
   d44f0:	2064      	movs	r0, #100	; 0x64
   d44f2:	f001 f8af 	bl	d5654 <delay>
  digitalWrite(redLED, HIGH);
   d44f6:	2101      	movs	r1, #1
   d44f8:	2008      	movs	r0, #8
   d44fa:	f001 fce8 	bl	d5ece <digitalWrite>
  delay(500);
   d44fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4502:	f001 f8a7 	bl	d5654 <delay>
  digitalWrite(greenLED, LOW);
   d4506:	2100      	movs	r1, #0
   d4508:	2006      	movs	r0, #6
   d450a:	f001 fce0 	bl	d5ece <digitalWrite>
  delay(100);
   d450e:	2064      	movs	r0, #100	; 0x64
   d4510:	f001 f8a0 	bl	d5654 <delay>
  digitalWrite(busyLED, LOW);
   d4514:	2100      	movs	r1, #0
   d4516:	2007      	movs	r0, #7
   d4518:	f001 fcd9 	bl	d5ece <digitalWrite>
  delay(100);
   d451c:	2064      	movs	r0, #100	; 0x64
   d451e:	f001 f899 	bl	d5654 <delay>
  digitalWrite(redLED, LOW);
   d4522:	2100      	movs	r1, #0
   d4524:	2008      	movs	r0, #8
}
   d4526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);
  digitalWrite(greenLED, LOW);
  delay(100);
  digitalWrite(busyLED, LOW);
  delay(100);
  digitalWrite(redLED, LOW);
   d452a:	f001 bcd0 	b.w	d5ece <digitalWrite>
	...

000d4530 <setup>:
}

void setup() {
   d4530:	b510      	push	{r4, lr}
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
   d4532:	2001      	movs	r0, #1
   d4534:	f001 f8a0 	bl	d5678 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);     // Format red, green, blue, from 0 to 255
   d4538:	22ff      	movs	r2, #255	; 0xff
   d453a:	4611      	mov	r1, r2
   d453c:	4610      	mov	r0, r2
  // Check EEPROM
  //Serial.print("EEPROM Available: ");
  //Serial.println(EEPROM.length());    // 4096 bytes available

  // Device I/O
	fps.Open();                   // Send serial command to initialize fps. FPS UART uses Rx (pin 14) & Tx (pin 15) on Particle Xenon. Make sure FPS is connected or the program won't go past this part
   d453e:	4c18      	ldr	r4, [pc, #96]	; (d45a0 <setup+0x70>)
  // Debugging
  //Serial.begin(9600);         // Open USB serial port for debugging
  //fps.UseSerialDebug = true;  // Sends messages from FPS to USB Serial for debugging
  // On-board LED control
  RGB.control(true);            // take control of the On-Board RGB LED
  RGB.color(255, 255, 255);     // Format red, green, blue, from 0 to 255
   d4540:	f001 f8aa 	bl	d5698 <_ZN8RGBClass5colorEiii>
  RGB.brightness(64);           // scales brightness of all three colors, 0-255
   d4544:	2101      	movs	r1, #1
   d4546:	2040      	movs	r0, #64	; 0x40
   d4548:	f001 f8b9 	bl	d56be <_ZN8RGBClass10brightnessEhb>
  // Check EEPROM
  //Serial.print("EEPROM Available: ");
  //Serial.println(EEPROM.length());    // 4096 bytes available

  // Device I/O
	fps.Open();                   // Send serial command to initialize fps. FPS UART uses Rx (pin 14) & Tx (pin 15) on Particle Xenon. Make sure FPS is connected or the program won't go past this part
   d454c:	4620      	mov	r0, r4
   d454e:	f000 fa81 	bl	d4a54 <_ZN12FPS_GT521F324OpenEv>
  fps.SetLED(true);             // Visual test to make sure the fps is connected. Leave on for being able to detect fingerprints
   d4552:	2101      	movs	r1, #1
   d4554:	4620      	mov	r0, r4
   d4556:	f000 faab 	bl	d4ab0 <_ZN12FPS_GT521F326SetLEDEb>
  pinMode(buzzer, OUTPUT);          // sound buzzer, not necessary for using tone()
   d455a:	2101      	movs	r1, #1
   d455c:	2013      	movs	r0, #19
   d455e:	f001 fca5 	bl	d5eac <pinMode>
  pinMode(solenoid, OUTPUT);        // signal to relay/driver for switching solenoid
   d4562:	2101      	movs	r1, #1
   d4564:	200f      	movs	r0, #15
   d4566:	f001 fca1 	bl	d5eac <pinMode>
  pinMode(keySwitch, INPUT_PULLUP); // detect when the switch is activated w/ a key
   d456a:	2102      	movs	r1, #2
   d456c:	2005      	movs	r0, #5
   d456e:	f001 fc9d 	bl	d5eac <pinMode>
  pinMode(greenLED, OUTPUT);        // green access permitted LED
   d4572:	2101      	movs	r1, #1
   d4574:	2006      	movs	r0, #6
   d4576:	f001 fc99 	bl	d5eac <pinMode>
  pinMode(busyLED, OUTPUT);         // amber registration mode LED
   d457a:	2101      	movs	r1, #1
   d457c:	2007      	movs	r0, #7
   d457e:	f001 fc95 	bl	d5eac <pinMode>
  pinMode(redLED, OUTPUT);          // red access denied LED
   d4582:	2101      	movs	r1, #1
   d4584:	2008      	movs	r0, #8
   d4586:	f001 fc91 	bl	d5eac <pinMode>
  // Reset System: DO NOT UNCOMMENT UNLESS YOU ARE SURE
  //EEPROM.clear();   // ERASES ALL EEPROM (inits all bits to 1)
  //fps.DeleteAll();  // ERASES FPS ENROLLMENTS

  // Setup done. Signify that the system is ready to be used with some light and sound
  LEDsequence();  // turn all LEDs on at start to make sure they work
   d458a:	f7ff ffa5 	bl	d44d8 <_Z11LEDsequencev>
  play(buzzer, arraySize(startDuration), startSound, startDuration);  // play start-up sound
   d458e:	4b05      	ldr	r3, [pc, #20]	; (d45a4 <setup+0x74>)
   d4590:	4a05      	ldr	r2, [pc, #20]	; (d45a8 <setup+0x78>)
   d4592:	2106      	movs	r1, #6
   d4594:	2013      	movs	r0, #19
}
   d4596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //EEPROM.clear();   // ERASES ALL EEPROM (inits all bits to 1)
  //fps.DeleteAll();  // ERASES FPS ENROLLMENTS

  // Setup done. Signify that the system is ready to be used with some light and sound
  LEDsequence();  // turn all LEDs on at start to make sure they work
  play(buzzer, arraySize(startDuration), startSound, startDuration);  // play start-up sound
   d459a:	f7ff bd8d 	b.w	d40b8 <_Z4playiiPiS_>
   d459e:	bf00      	nop
   d45a0:	2003e3cc 	.word	0x2003e3cc
   d45a4:	2003e2ec 	.word	0x2003e2ec
   d45a8:	2003e304 	.word	0x2003e304

000d45ac <loop>:
}

void loop() {
  RGB.color(0, 0, 255);
   d45ac:	2100      	movs	r1, #0
  // Setup done. Signify that the system is ready to be used with some light and sound
  LEDsequence();  // turn all LEDs on at start to make sure they work
  play(buzzer, arraySize(startDuration), startSound, startDuration);  // play start-up sound
}

void loop() {
   d45ae:	b570      	push	{r4, r5, r6, lr}
  RGB.color(0, 0, 255);
   d45b0:	4608      	mov	r0, r1
   d45b2:	22ff      	movs	r2, #255	; 0xff
   d45b4:	f001 f870 	bl	d5698 <_ZN8RGBClass5colorEiii>

  // Check for users trying to access using a fingerprint
  if(fps.IsPressFinger()) {
   d45b8:	4823      	ldr	r0, [pc, #140]	; (d4648 <loop+0x9c>)
   d45ba:	f000 fc29 	bl	d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>
   d45be:	b130      	cbz	r0, d45ce <loop+0x22>
    RGB.color(255, 255, 255); // white LED for debugging to show that a finger is recognized and the FPS is working on figuring out the user
   d45c0:	22ff      	movs	r2, #255	; 0xff
   d45c2:	4611      	mov	r1, r2
   d45c4:	4610      	mov	r0, r2
   d45c6:	f001 f867 	bl	d5698 <_ZN8RGBClass5colorEiii>
    identifyUser(); // Is this finger recognized by the FPS. If yes open bin, if no send bad feedback
   d45ca:	f7ff fe1d 	bl	d4208 <_Z12identifyUserv>
  }

  // Check for users trying to access using the electro-mechanical tumbler lock switch
  // 2nd PCB: HIGH=open switch, LOW=closed switch
  if (digitalRead(keySwitch) == LOW && keySwitchFlag == false) {     // Key switch turned on
   d45ce:	2005      	movs	r0, #5
   d45d0:	f001 fc96 	bl	d5f00 <digitalRead>
   d45d4:	bb38      	cbnz	r0, d4626 <loop+0x7a>
   d45d6:	4c1d      	ldr	r4, [pc, #116]	; (d464c <loop+0xa0>)
   d45d8:	7823      	ldrb	r3, [r4, #0]
   d45da:	bb23      	cbnz	r3, d4626 <loop+0x7a>
    //openBin();                    // Allow access. Includes good feedback
    goodFeedback();                 // Only need feedback for 2nd PCB onward b/c switch directly connects 12V to solenoid
   d45dc:	f7ff fd98 	bl	d4110 <_Z12goodFeedbackv>
    keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
   d45e0:	2301      	movs	r3, #1
   d45e2:	7023      	strb	r3, [r4, #0]
   d45e4:	f000 fd04 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
    
    manualEnrollTimer = millis();
   d45e8:	4c19      	ldr	r4, [pc, #100]	; (d4650 <loop+0xa4>)
    while ( (millis() - manualEnrollTimer) < manualEnrollTriggerTime) { // Enter registration mode manually by flicking the switch on and off and on quickly      
   d45ea:	4d1a      	ldr	r5, [pc, #104]	; (d4654 <loop+0xa8>)
  if (digitalRead(keySwitch) == LOW && keySwitchFlag == false) {     // Key switch turned on
    //openBin();                    // Allow access. Includes good feedback
    goodFeedback();                 // Only need feedback for 2nd PCB onward b/c switch directly connects 12V to solenoid
    keySwitchFlag = true;           // Set flag so we don't unlock again before turning the key off
    
    manualEnrollTimer = millis();
   d45ec:	6020      	str	r0, [r4, #0]
   d45ee:	462e      	mov	r6, r5
   d45f0:	f000 fcfe 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
    while ( (millis() - manualEnrollTimer) < manualEnrollTriggerTime) { // Enter registration mode manually by flicking the switch on and off and on quickly      
   d45f4:	6823      	ldr	r3, [r4, #0]
   d45f6:	1ac0      	subs	r0, r0, r3
   d45f8:	682b      	ldr	r3, [r5, #0]
   d45fa:	4298      	cmp	r0, r3
   d45fc:	d218      	bcs.n	d4630 <loop+0x84>
      if (digitalRead(keySwitch) == HIGH) {   // Key switch turned off
   d45fe:	2005      	movs	r0, #5
   d4600:	f001 fc7e 	bl	d5f00 <digitalRead>
   d4604:	2801      	cmp	r0, #1
   d4606:	d1f3      	bne.n	d45f0 <loop+0x44>
   d4608:	f000 fcf2 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
        while ( (millis() - manualEnrollTimer) < manualEnrollTriggerTime) { // wait a max of 500ms
   d460c:	6823      	ldr	r3, [r4, #0]
   d460e:	1ac0      	subs	r0, r0, r3
   d4610:	6833      	ldr	r3, [r6, #0]
   d4612:	4298      	cmp	r0, r3
   d4614:	d2ec      	bcs.n	d45f0 <loop+0x44>
          if (digitalRead(keySwitch) == LOW) {  // Key switch turned on
   d4616:	2005      	movs	r0, #5
   d4618:	f001 fc72 	bl	d5f00 <digitalRead>
   d461c:	2800      	cmp	r0, #0
   d461e:	d1f3      	bne.n	d4608 <loop+0x5c>
              enrollUser();
   d4620:	f7ff fe1a 	bl	d4258 <_Z10enrollUserv>
   d4624:	e7f0      	b.n	d4608 <loop+0x5c>
          }
        }
      }
    }
  } 
  else if (digitalRead(keySwitch) == HIGH && keySwitchFlag == true) {  // Key switch turned off
   d4626:	2005      	movs	r0, #5
   d4628:	f001 fc6a 	bl	d5f00 <digitalRead>
   d462c:	2801      	cmp	r0, #1
   d462e:	d004      	beq.n	d463a <loop+0x8e>
    keySwitchFlag = false;          // Reset flag so the key can be used again
  }

  delay(delayTime);
   d4630:	2064      	movs	r0, #100	; 0x64
}
   d4632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  } 
  else if (digitalRead(keySwitch) == HIGH && keySwitchFlag == true) {  // Key switch turned off
    keySwitchFlag = false;          // Reset flag so the key can be used again
  }

  delay(delayTime);
   d4636:	f001 b80d 	b.w	d5654 <delay>
          }
        }
      }
    }
  } 
  else if (digitalRead(keySwitch) == HIGH && keySwitchFlag == true) {  // Key switch turned off
   d463a:	4b04      	ldr	r3, [pc, #16]	; (d464c <loop+0xa0>)
   d463c:	781a      	ldrb	r2, [r3, #0]
   d463e:	2a00      	cmp	r2, #0
   d4640:	d0f6      	beq.n	d4630 <loop+0x84>
    keySwitchFlag = false;          // Reset flag so the key can be used again
   d4642:	2200      	movs	r2, #0
   d4644:	701a      	strb	r2, [r3, #0]
   d4646:	e7f3      	b.n	d4630 <loop+0x84>
   d4648:	2003e3cc 	.word	0x2003e3cc
   d464c:	2003e3c0 	.word	0x2003e3c0
   d4650:	2003e3bc 	.word	0x2003e3bc
   d4654:	2003e34c 	.word	0x2003e34c

000d4658 <_GLOBAL__sub_I_SystemMode>:
  }

  delay(delayTime);
}
   d4658:	b510      	push	{r4, lr}
   d465a:	f000 fc81 	bl	d4f60 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d465e:	4b0a      	ldr	r3, [pc, #40]	; (d4688 <_GLOBAL__sub_I_SystemMode+0x30>)
const int solenoid  = A4;                     // digital pin for relay/driver signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT521F32 fps;                             // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d4660:	4c0a      	ldr	r4, [pc, #40]	; (d468c <_GLOBAL__sub_I_SystemMode+0x34>)
   d4662:	2200      	movs	r2, #0
   d4664:	701a      	strb	r2, [r3, #0]
   d4666:	805a      	strh	r2, [r3, #2]
   d4668:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d466c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d466e:	2003      	movs	r0, #3
   d4670:	f000 fdee 	bl	d5250 <set_system_mode>
   d4674:	4620      	mov	r0, r4
   d4676:	f000 f933 	bl	d48e0 <_ZN12FPS_GT521F32C1Ev>
   d467a:	4620      	mov	r0, r4
   d467c:	4a04      	ldr	r2, [pc, #16]	; (d4690 <_GLOBAL__sub_I_SystemMode+0x38>)
   d467e:	4905      	ldr	r1, [pc, #20]	; (d4694 <_GLOBAL__sub_I_SystemMode+0x3c>)
  else if (digitalRead(keySwitch) == HIGH && keySwitchFlag == true) {  // Key switch turned off
    keySwitchFlag = false;          // Reset flag so the key can be used again
  }

  delay(delayTime);
}
   d4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const int solenoid  = A4;                     // digital pin for relay/driver signal. HIGH connects to normally open, LOW connects to normally closed
const int keySwitch = D5;                     // digital pin for the electro-mechanical switch with a key. Backup to fps.
const int greenLED  = D6;                     // green LED signifies an authorized
const int busyLED   = D7;                     // amber LED signifies the system is busy (usually with registration mode). Same as the Xenon's on-board blue LED
const int redLED    = D8;                     // red LED signifies an unauthorized user
FPS_GT521F32 fps;                             // fingerprint scanner module - uses Serial1 (Rx:pin14, Tx:pin15)
   d4684:	f001 bc92 	b.w	d5fac <__aeabi_atexit>
   d4688:	2003e3c2 	.word	0x2003e3c2
   d468c:	2003e3cc 	.word	0x2003e3cc
   d4690:	2003e3b8 	.word	0x2003e3b8
   d4694:	000d48f9 	.word	0x000d48f9

000d4698 <_ZN14Command_Packet16ParameterFromIntEi>:

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4698:	120b      	asrs	r3, r1, #8
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d469a:	7041      	strb	r1, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d469c:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d469e:	140b      	asrs	r3, r1, #16
	Parameter[3] = (i & 0xff000000) >> 24;
   d46a0:	0e09      	lsrs	r1, r1, #24
// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
	Parameter[1] = (i & 0x0000ff00) >> 8;
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d46a2:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d46a4:	7101      	strb	r1, [r0, #4]
   d46a6:	4770      	bx	lr

000d46a8 <_ZN14Command_Packet18_CalculateChecksumEv>:
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d46a8:	7842      	ldrb	r2, [r0, #1]
   d46aa:	7883      	ldrb	r3, [r0, #2]
   d46ac:	4413      	add	r3, r2
	w += Parameter[2];
   d46ae:	78c2      	ldrb	r2, [r0, #3]
	w += COMMAND_START_CODE_1;
	w += COMMAND_START_CODE_2;
	w += COMMAND_DEVICE_ID_1;
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
   d46b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
	w += Parameter[2];
   d46b4:	4413      	add	r3, r2
	w += Parameter[3];
   d46b6:	7902      	ldrb	r2, [r0, #4]
   d46b8:	4413      	add	r3, r2
	w += command[0];
   d46ba:	7942      	ldrb	r2, [r0, #5]
	w += command[1];

	return w;
   d46bc:	7980      	ldrb	r0, [r0, #6]
	w += COMMAND_DEVICE_ID_2;
	w += Parameter[0];
	w += Parameter[1];
	w += Parameter[2];
	w += Parameter[3];
	w += command[0];
   d46be:	4413      	add	r3, r2
	w += command[1];

	return w;
}
   d46c0:	4418      	add	r0, r3
   d46c2:	4770      	bx	lr

000d46c4 <_ZN14Command_Packet14GetPacketBytesEv>:
#endif  //__GNUC__

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
   d46c4:	b570      	push	{r4, r5, r6, lr}
   d46c6:	4604      	mov	r4, r0
	byte* packetbytes= new byte[12];
   d46c8:	200c      	movs	r0, #12
   d46ca:	f7ff fce6 	bl	d409a <_Znaj>

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d46ce:	2500      	movs	r5, #0
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];

	// update command before calculating checksum (important!)
	word cmd = Command;
   d46d0:	7826      	ldrb	r6, [r4, #0]
	command[0] = GetLowByte(cmd);
   d46d2:	7166      	strb	r6, [r4, #5]

// returns the 12 bytes of the generated command packet
// remember to call delete on the returned array
byte* Command_Packet::GetPacketBytes()
{
	byte* packetbytes= new byte[12];
   d46d4:	4601      	mov	r1, r0

	// update command before calculating checksum (important!)
	word cmd = Command;
	command[0] = GetLowByte(cmd);
	command[1] = GetHighByte(cmd);
   d46d6:	71a5      	strb	r5, [r4, #6]

	word checksum = _CalculateChecksum();
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ffe5 	bl	d46a8 <_ZN14Command_Packet18_CalculateChecksumEv>

	packetbytes[0] = COMMAND_START_CODE_1;
   d46de:	2355      	movs	r3, #85	; 0x55
   d46e0:	700b      	strb	r3, [r1, #0]
	packetbytes[1] = COMMAND_START_CODE_2;
   d46e2:	23aa      	movs	r3, #170	; 0xaa
   d46e4:	704b      	strb	r3, [r1, #1]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
   d46e6:	2301      	movs	r3, #1
   d46e8:	708b      	strb	r3, [r1, #2]
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
   d46ea:	7863      	ldrb	r3, [r4, #1]
   d46ec:	710b      	strb	r3, [r1, #4]
	packetbytes[5] = Parameter[1];
   d46ee:	78a3      	ldrb	r3, [r4, #2]
   d46f0:	714b      	strb	r3, [r1, #5]
	packetbytes[6] = Parameter[2];
   d46f2:	78e3      	ldrb	r3, [r4, #3]
   d46f4:	718b      	strb	r3, [r1, #6]
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
   d46f6:	7288      	strb	r0, [r1, #10]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d46f8:	7923      	ldrb	r3, [r4, #4]
	word checksum = _CalculateChecksum();

	packetbytes[0] = COMMAND_START_CODE_1;
	packetbytes[1] = COMMAND_START_CODE_2;
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
   d46fa:	70cd      	strb	r5, [r1, #3]
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
	packetbytes[8] = command[0];
	packetbytes[9] = command[1];
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);
   d46fc:	0a00      	lsrs	r0, r0, #8
   d46fe:	72c8      	strb	r0, [r1, #11]
	packetbytes[2] = COMMAND_DEVICE_ID_1;
	packetbytes[3] = COMMAND_DEVICE_ID_2;
	packetbytes[4] = Parameter[0];
	packetbytes[5] = Parameter[1];
	packetbytes[6] = Parameter[2];
	packetbytes[7] = Parameter[3];
   d4700:	71cb      	strb	r3, [r1, #7]
	packetbytes[8] = command[0];
   d4702:	720e      	strb	r6, [r1, #8]
	packetbytes[9] = command[1];
   d4704:	724d      	strb	r5, [r1, #9]
	packetbytes[10] = GetLowByte(checksum);
	packetbytes[11] = GetHighByte(checksum);

	return packetbytes;
}
   d4706:	4608      	mov	r0, r1
   d4708:	bd70      	pop	{r4, r5, r6, pc}
	...

000d470c <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>:

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
	if (high == 0x00)
   d470c:	b128      	cbz	r0, d471a <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d470e:	2912      	cmp	r1, #18
   d4710:	d803      	bhi.n	d471a <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0xe>
   d4712:	4b03      	ldr	r3, [pc, #12]	; (d4720 <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh+0x14>)
   d4714:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   d4718:	4770      	bx	lr
}

// parses bytes into one of the possible errors from the finger print scanner
Response_Packet::ErrorCodes::Errors_Enum Response_Packet::ErrorCodes::ParseFromBytes(byte high, byte low)
{
	Errors_Enum e = INVALID;
   d471a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			case 0x11: e = NACK_INVALID_PARAM; break;
			case 0x12: e = NACK_FINGER_IS_NOT_PRESSED; break;
		}
	}
	return e;
}
   d471e:	4770      	bx	lr
   d4720:	000d6488 	.word	0x000d6488

000d4724 <_ZN15Response_Packet16IntFromParameterEv>:
int Response_Packet::IntFromParameter()
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
   d4724:	7c03      	ldrb	r3, [r0, #16]
   d4726:	7c42      	ldrb	r2, [r0, #17]
   d4728:	eb03 2202 	add.w	r2, r3, r2, lsl #8
	retval = (retval << 8) + ParameterBytes[0];
   d472c:	7bc3      	ldrb	r3, [r0, #15]
	return retval;
   d472e:	7b80      	ldrb	r0, [r0, #14]
{
	int retval = 0;
	retval = (retval << 8) + ParameterBytes[3];
	retval = (retval << 8) + ParameterBytes[2];
	retval = (retval << 8) + ParameterBytes[1];
	retval = (retval << 8) + ParameterBytes[0];
   d4730:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return retval;
}
   d4734:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   d4738:	4770      	bx	lr

000d473a <_ZN15Response_Packet17CalculateChecksumEPhi>:

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
   d473a:	b510      	push	{r4, lr}
   d473c:	460b      	mov	r3, r1
	word checksum = 0;
   d473e:	2000      	movs	r0, #0
	for (int i=0; i<length; i++)
   d4740:	1a5c      	subs	r4, r3, r1
   d4742:	42a2      	cmp	r2, r4
   d4744:	dd03      	ble.n	d474e <_ZN15Response_Packet17CalculateChecksumEPhi+0x14>
	{
		checksum +=buffer[i];
   d4746:	f813 4b01 	ldrb.w	r4, [r3], #1
   d474a:	4420      	add	r0, r4

// calculates the checksum from the bytes in the packet
word Response_Packet::CalculateChecksum(byte* buffer, int length)
{
	word checksum = 0;
	for (int i=0; i<length; i++)
   d474c:	e7f8      	b.n	d4740 <_ZN15Response_Packet17CalculateChecksumEPhi+0x6>
	{
		checksum +=buffer[i];
	}
	return checksum;
}
   d474e:	bd10      	pop	{r4, pc}

000d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>:
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d4750:	4291      	cmp	r1, r2
	return (byte)w&0x00FF;
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
   d4752:	b570      	push	{r4, r5, r6, lr}
   d4754:	460c      	mov	r4, r1
   d4756:	4615      	mov	r5, r2
   d4758:	461e      	mov	r6, r3
	bool retval = (b != propervalue) && (b != alternatevalue);
   d475a:	d001      	beq.n	d4760 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x10>
   d475c:	4299      	cmp	r1, r3
   d475e:	d101      	bne.n	d4764 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x14>
   d4760:	2000      	movs	r0, #0
   d4762:	bd70      	pop	{r4, r5, r6, pc}
	if ((UseSerialDebug) && (retval))
   d4764:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4768:	b353      	cbz	r3, d47c0 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x70>
	{
		Serial.print("Response_Packet parsing error ");
   d476a:	f001 f907 	bl	d597c <_Z16_fetch_usbserialv>
   d476e:	4915      	ldr	r1, [pc, #84]	; (d47c4 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x74>)
   d4770:	f000 fea2 	bl	d54b8 <_ZN5Print5printEPKc>
		Serial.print(varname);
   d4774:	f001 f902 	bl	d597c <_Z16_fetch_usbserialv>
   d4778:	9904      	ldr	r1, [sp, #16]
   d477a:	f000 fe9d 	bl	d54b8 <_ZN5Print5printEPKc>
		Serial.print(" ");
   d477e:	f001 f8fd 	bl	d597c <_Z16_fetch_usbserialv>
   d4782:	4911      	ldr	r1, [pc, #68]	; (d47c8 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x78>)
   d4784:	f000 fe98 	bl	d54b8 <_ZN5Print5printEPKc>
		Serial.print(propervalue, HEX);
   d4788:	f001 f8f8 	bl	d597c <_Z16_fetch_usbserialv>
   d478c:	2210      	movs	r2, #16
   d478e:	4629      	mov	r1, r5
   d4790:	f000 fedc 	bl	d554c <_ZN5Print5printEhi>
		Serial.print(" || ");
   d4794:	f001 f8f2 	bl	d597c <_Z16_fetch_usbserialv>
   d4798:	490c      	ldr	r1, [pc, #48]	; (d47cc <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x7c>)
   d479a:	f000 fe8d 	bl	d54b8 <_ZN5Print5printEPKc>
		Serial.print(alternatevalue, HEX);
   d479e:	f001 f8ed 	bl	d597c <_Z16_fetch_usbserialv>
   d47a2:	2210      	movs	r2, #16
   d47a4:	4631      	mov	r1, r6
   d47a6:	f000 fed1 	bl	d554c <_ZN5Print5printEhi>
		Serial.print(" != ");
   d47aa:	f001 f8e7 	bl	d597c <_Z16_fetch_usbserialv>
   d47ae:	4908      	ldr	r1, [pc, #32]	; (d47d0 <_ZN15Response_Packet12CheckParsingEhhhPKcb+0x80>)
   d47b0:	f000 fe82 	bl	d54b8 <_ZN5Print5printEPKc>
		Serial.println(b, HEX);
   d47b4:	f001 f8e2 	bl	d597c <_Z16_fetch_usbserialv>
   d47b8:	2210      	movs	r2, #16
   d47ba:	4621      	mov	r1, r4
   d47bc:	f000 fec8 	bl	d5550 <_ZN5Print7printlnEhi>
}

// checks to see if the byte is the proper value, and logs it to the serial channel if not
bool Response_Packet::CheckParsing(byte b, byte propervalue, byte alternatevalue, const char* varname, bool UseSerialDebug)
{
	bool retval = (b != propervalue) && (b != alternatevalue);
   d47c0:	2001      	movs	r0, #1
		Serial.print(alternatevalue, HEX);
		Serial.print(" != ");
		Serial.println(b, HEX);
	}
  return retval;
}
   d47c2:	bd70      	pop	{r4, r5, r6, pc}
   d47c4:	000d64ae 	.word	0x000d64ae
   d47c8:	000d6749 	.word	0x000d6749
   d47cc:	000d64cd 	.word	0x000d64cd
   d47d0:	000d64d2 	.word	0x000d64d2

000d47d4 <_ZN15Response_PacketC1EPhb>:

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d47d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d47d6:	4b3a      	ldr	r3, [pc, #232]	; (d48c0 <_ZN15Response_PacketC1EPhb+0xec>)

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d47d8:	460c      	mov	r4, r1
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d47da:	7809      	ldrb	r1, [r1, #0]
   d47dc:	9300      	str	r3, [sp, #0]
   d47de:	2355      	movs	r3, #85	; 0x55

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d47e0:	4616      	mov	r6, r2
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d47e2:	9201      	str	r2, [sp, #4]
   d47e4:	461a      	mov	r2, r3

#ifndef __GNUC__
#pragma region -= Response_Packet Definitions =-
#endif  //__GNUC__
// creates and parses a response packet from the finger print scanner
Response_Packet::Response_Packet(byte* buffer, bool UseSerialDebug)
   d47e6:	4605      	mov	r5, r0
{
	CheckParsing(buffer[0], COMMAND_START_CODE_1, COMMAND_START_CODE_1, "COMMAND_START_CODE_1", UseSerialDebug);
   d47e8:	f7ff ffb2 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[1], COMMAND_START_CODE_2, COMMAND_START_CODE_2, "COMMAND_START_CODE_2", UseSerialDebug);
   d47ec:	4b35      	ldr	r3, [pc, #212]	; (d48c4 <_ZN15Response_PacketC1EPhb+0xf0>)
   d47ee:	7861      	ldrb	r1, [r4, #1]
   d47f0:	9300      	str	r3, [sp, #0]
   d47f2:	23aa      	movs	r3, #170	; 0xaa
   d47f4:	461a      	mov	r2, r3
   d47f6:	9601      	str	r6, [sp, #4]
   d47f8:	4628      	mov	r0, r5
   d47fa:	f7ff ffa9 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[2], COMMAND_DEVICE_ID_1, COMMAND_DEVICE_ID_1, "COMMAND_DEVICE_ID_1", UseSerialDebug);
   d47fe:	4b32      	ldr	r3, [pc, #200]	; (d48c8 <_ZN15Response_PacketC1EPhb+0xf4>)
   d4800:	78a1      	ldrb	r1, [r4, #2]
   d4802:	9300      	str	r3, [sp, #0]
   d4804:	2301      	movs	r3, #1
   d4806:	461a      	mov	r2, r3
   d4808:	9601      	str	r6, [sp, #4]
   d480a:	4628      	mov	r0, r5
   d480c:	f7ff ffa0 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[3], COMMAND_DEVICE_ID_2, COMMAND_DEVICE_ID_2, "COMMAND_DEVICE_ID_2", UseSerialDebug);
   d4810:	4b2e      	ldr	r3, [pc, #184]	; (d48cc <_ZN15Response_PacketC1EPhb+0xf8>)
   d4812:	78e1      	ldrb	r1, [r4, #3]
   d4814:	9300      	str	r3, [sp, #0]
   d4816:	2300      	movs	r3, #0
   d4818:	461a      	mov	r2, r3
   d481a:	9601      	str	r6, [sp, #4]
   d481c:	4628      	mov	r0, r5
   d481e:	f7ff ff97 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[8], 0x30, 0x31, "AckNak_LOW", UseSerialDebug);
   d4822:	4b2b      	ldr	r3, [pc, #172]	; (d48d0 <_ZN15Response_PacketC1EPhb+0xfc>)
   d4824:	7a21      	ldrb	r1, [r4, #8]
   d4826:	9300      	str	r3, [sp, #0]
   d4828:	2230      	movs	r2, #48	; 0x30
   d482a:	2331      	movs	r3, #49	; 0x31
   d482c:	9601      	str	r6, [sp, #4]
   d482e:	4628      	mov	r0, r5
   d4830:	f7ff ff8e 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	if (buffer[8] == 0x30) ACK = true; else ACK = false;
   d4834:	7a23      	ldrb	r3, [r4, #8]
   d4836:	2b30      	cmp	r3, #48	; 0x30
   d4838:	bf0c      	ite	eq
   d483a:	2301      	moveq	r3, #1
   d483c:	2300      	movne	r3, #0
   d483e:	752b      	strb	r3, [r5, #20]
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);
   d4840:	4b24      	ldr	r3, [pc, #144]	; (d48d4 <_ZN15Response_PacketC1EPhb+0x100>)
   d4842:	7a61      	ldrb	r1, [r4, #9]
   d4844:	9300      	str	r3, [sp, #0]
   d4846:	2300      	movs	r3, #0
   d4848:	461a      	mov	r2, r3
   d484a:	9601      	str	r6, [sp, #4]
   d484c:	4628      	mov	r0, r5
   d484e:	f7ff ff7f 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	word checksum = CalculateChecksum(buffer, 10);
   d4852:	4621      	mov	r1, r4
   d4854:	220a      	movs	r2, #10
   d4856:	4628      	mov	r0, r5
   d4858:	f7ff ff6f 	bl	d473a <_ZN15Response_Packet17CalculateChecksumEPhi>
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d485c:	4a1e      	ldr	r2, [pc, #120]	; (d48d8 <_ZN15Response_PacketC1EPhb+0x104>)
   d485e:	7aa1      	ldrb	r1, [r4, #10]
   d4860:	9200      	str	r2, [sp, #0]
}

// Returns the low byte from a word
byte Response_Packet::GetLowByte(word w)
{
	return (byte)w&0x00FF;
   d4862:	b2c3      	uxtb	r3, r0
}

// Returns the high byte from a word
byte Response_Packet::GetHighByte(word w)
{
	return (byte)(w>>8)&0x00FF;
   d4864:	f3c0 2707 	ubfx	r7, r0, #8, #8
	CheckParsing(buffer[9], 0x00, 0x00, "AckNak_HIGH", UseSerialDebug);

	word checksum = CalculateChecksum(buffer, 10);
	byte checksum_low = GetLowByte(checksum);
	byte checksum_high = GetHighByte(checksum);
	CheckParsing(buffer[10], checksum_low, checksum_low, "Checksum_LOW", UseSerialDebug);
   d4868:	461a      	mov	r2, r3
   d486a:	9601      	str	r6, [sp, #4]
   d486c:	4628      	mov	r0, r5
   d486e:	f7ff ff6f 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>
	CheckParsing(buffer[11], checksum_high, checksum_high, "Checksum_HIGH", UseSerialDebug);
   d4872:	4b1a      	ldr	r3, [pc, #104]	; (d48dc <_ZN15Response_PacketC1EPhb+0x108>)
   d4874:	7ae1      	ldrb	r1, [r4, #11]
   d4876:	9300      	str	r3, [sp, #0]
   d4878:	463a      	mov	r2, r7
   d487a:	463b      	mov	r3, r7
   d487c:	9601      	str	r6, [sp, #4]
   d487e:	4628      	mov	r0, r5
   d4880:	f7ff ff66 	bl	d4750 <_ZN15Response_Packet12CheckParsingEhhhPKcb>

	Error = ErrorCodes::ParseFromBytes(buffer[5], buffer[4]);
   d4884:	7921      	ldrb	r1, [r4, #4]
   d4886:	7960      	ldrb	r0, [r4, #5]
   d4888:	f7ff ff40 	bl	d470c <_ZN15Response_Packet10ErrorCodes14ParseFromBytesEhh>
   d488c:	8028      	strh	r0, [r5, #0]

	ParameterBytes[0] = buffer[4];
   d488e:	7923      	ldrb	r3, [r4, #4]
   d4890:	73ab      	strb	r3, [r5, #14]
	ParameterBytes[1] = buffer[5];
   d4892:	7963      	ldrb	r3, [r4, #5]
   d4894:	73eb      	strb	r3, [r5, #15]
	ParameterBytes[2] = buffer[6];
   d4896:	79a3      	ldrb	r3, [r4, #6]
   d4898:	742b      	strb	r3, [r5, #16]
	ParameterBytes[3] = buffer[7];
   d489a:	79e3      	ldrb	r3, [r4, #7]
   d489c:	746b      	strb	r3, [r5, #17]
	ResponseBytes[0]=buffer[8];
   d489e:	7a23      	ldrb	r3, [r4, #8]
   d48a0:	74ab      	strb	r3, [r5, #18]
	ResponseBytes[1]=buffer[9];
   d48a2:	7a63      	ldrb	r3, [r4, #9]
   d48a4:	74eb      	strb	r3, [r5, #19]
   d48a6:	3c01      	subs	r4, #1
   d48a8:	1c6b      	adds	r3, r5, #1
   d48aa:	f105 020d 	add.w	r2, r5, #13
	for (int i=0; i < 12; i++)
	{
		RawBytes[i]=buffer[i];
   d48ae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d48b2:	f803 1f01 	strb.w	r1, [r3, #1]!
	ParameterBytes[1] = buffer[5];
	ParameterBytes[2] = buffer[6];
	ParameterBytes[3] = buffer[7];
	ResponseBytes[0]=buffer[8];
	ResponseBytes[1]=buffer[9];
	for (int i=0; i < 12; i++)
   d48b6:	4293      	cmp	r3, r2
   d48b8:	d1f9      	bne.n	d48ae <_ZN15Response_PacketC1EPhb+0xda>
	{
		RawBytes[i]=buffer[i];
	}
}
   d48ba:	4628      	mov	r0, r5
   d48bc:	b003      	add	sp, #12
   d48be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48c0:	000d64d7 	.word	0x000d64d7
   d48c4:	000d64ec 	.word	0x000d64ec
   d48c8:	000d6501 	.word	0x000d6501
   d48cc:	000d6515 	.word	0x000d6515
   d48d0:	000d6529 	.word	0x000d6529
   d48d4:	000d6534 	.word	0x000d6534
   d48d8:	000d6540 	.word	0x000d6540
   d48dc:	000d654d 	.word	0x000d654d

000d48e0 <_ZN12FPS_GT521F32C1Ev>:
#ifndef __GNUC__
#pragma region -= Constructor/Destructor =-
#endif  //__GNUC__
// Creates a new object to interface with the fingerprint scanner
//FPS_GT521F32::FPS_GT521F32(uint8_t rx, uint8_t tx)
FPS_GT521F32::FPS_GT521F32()	// Serial pins pre-defined
   d48e0:	b510      	push	{r4, lr}
   d48e2:	4604      	mov	r4, r0
	//pin_RX = rx;
	//pin_TX = tx;
	//pin_RX = 14;
	//pin_TX = 15;
	//_serial.begin(9600);
	Serial1.begin(9600);
   d48e4:	f001 f900 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d48e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d48ec:	f001 f8f2 	bl	d5ad4 <_ZN11USARTSerial5beginEm>
	this->UseSerialDebug = false;
   d48f0:	2300      	movs	r3, #0
   d48f2:	7023      	strb	r3, [r4, #0]
};
   d48f4:	4620      	mov	r0, r4
   d48f6:	bd10      	pop	{r4, pc}

000d48f8 <_ZN12FPS_GT521F32D1Ev>:

// destructor
FPS_GT521F32::~FPS_GT521F32()
   d48f8:	b510      	push	{r4, lr}
   d48fa:	4604      	mov	r4, r0
{
	//_serial.~SoftwareSerial();
	Serial1.~USARTSerial();
   d48fc:	f001 f8f4 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d4900:	6803      	ldr	r3, [r0, #0]
   d4902:	681b      	ldr	r3, [r3, #0]
   d4904:	4798      	blx	r3
	Serial1.end();
   d4906:	f001 f8ef 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d490a:	f001 f8e6 	bl	d5ada <_ZN11USARTSerial3endEv>
}
   d490e:	4620      	mov	r0, r4
   d4910:	bd10      	pop	{r4, pc}
	...

000d4914 <_ZN12FPS_GT521F3214serialPrintHexEh>:
  Serial.print("\"");
}

// sends a byte to the serial debugger in the hex format we want EX "0F"
void FPS_GT521F32::serialPrintHex(byte data)
{
   d4914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char tmp[16];
  sprintf(tmp, "%.2X",data);
   d4916:	460a      	mov	r2, r1
   d4918:	4668      	mov	r0, sp
   d491a:	4905      	ldr	r1, [pc, #20]	; (d4930 <_ZN12FPS_GT521F3214serialPrintHexEh+0x1c>)
   d491c:	f000 fd24 	bl	d5368 <sprintf>
  Serial.print(tmp);
   d4920:	f001 f82c 	bl	d597c <_Z16_fetch_usbserialv>
   d4924:	4669      	mov	r1, sp
   d4926:	f000 fdc7 	bl	d54b8 <_ZN5Print5printEPKc>
}
   d492a:	b005      	add	sp, #20
   d492c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4930:	000d655b 	.word	0x000d655b

000d4934 <_ZN12FPS_GT521F3212SendToSerialEPhi>:
	return rp;
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
   d4934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4936:	460d      	mov	r5, r1
   d4938:	4617      	mov	r7, r2
   d493a:	4606      	mov	r6, r0
  boolean first=true;
  Serial.print("\"");
   d493c:	f001 f81e 	bl	d597c <_Z16_fetch_usbserialv>
   d4940:	490d      	ldr	r1, [pc, #52]	; (d4978 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x44>)
   d4942:	f000 fdb9 	bl	d54b8 <_ZN5Print5printEPKc>
   d4946:	462c      	mov	r4, r5
};

// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
  boolean first=true;
   d4948:	2301      	movs	r3, #1
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d494a:	1b62      	subs	r2, r4, r5
   d494c:	4297      	cmp	r7, r2
   d494e:	dd0c      	ble.n	d496a <_ZN12FPS_GT521F3212SendToSerialEPhi+0x36>
  {
	if (first) first=false; else Serial.print(" ");
   d4950:	b923      	cbnz	r3, d495c <_ZN12FPS_GT521F3212SendToSerialEPhi+0x28>
   d4952:	f001 f813 	bl	d597c <_Z16_fetch_usbserialv>
   d4956:	4909      	ldr	r1, [pc, #36]	; (d497c <_ZN12FPS_GT521F3212SendToSerialEPhi+0x48>)
   d4958:	f000 fdae 	bl	d54b8 <_ZN5Print5printEPKc>
	serialPrintHex(data[i]);
   d495c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4960:	4630      	mov	r0, r6
   d4962:	f7ff ffd7 	bl	d4914 <_ZN12FPS_GT521F3214serialPrintHexEh>
   d4966:	2300      	movs	r3, #0
// sends the bye aray to the serial debugger in our hex format EX: "00 AF FF 10 00 13"
void FPS_GT521F32::SendToSerial(byte data[], int length)
{
  boolean first=true;
  Serial.print("\"");
  for(int i=0; i<length; i++)
   d4968:	e7ef      	b.n	d494a <_ZN12FPS_GT521F3212SendToSerialEPhi+0x16>
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d496a:	f001 f807 	bl	d597c <_Z16_fetch_usbserialv>
   d496e:	4902      	ldr	r1, [pc, #8]	; (d4978 <_ZN12FPS_GT521F3212SendToSerialEPhi+0x44>)
}
   d4970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for(int i=0; i<length; i++)
  {
	if (first) first=false; else Serial.print(" ");
	serialPrintHex(data[i]);
  }
  Serial.print("\"");
   d4974:	f000 bda0 	b.w	d54b8 <_ZN5Print5printEPKc>
   d4978:	000d6560 	.word	0x000d6560
   d497c:	000d6749 	.word	0x000d6749

000d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>:
#ifndef __GNUC__
#pragma region -= Private Methods =-
#endif  //__GNUC__
// Sends the command to the software serial channel
void FPS_GT521F32::SendCommand(byte cmd[], int length)
{
   d4980:	b570      	push	{r4, r5, r6, lr}
   d4982:	4604      	mov	r4, r0
   d4984:	460d      	mov	r5, r1
   d4986:	4616      	mov	r6, r2
	//_serial.write(cmd, length);
	Serial1.write(cmd, length);
   d4988:	f001 f8ae 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d498c:	6803      	ldr	r3, [r0, #0]
   d498e:	4632      	mov	r2, r6
   d4990:	68db      	ldr	r3, [r3, #12]
   d4992:	4629      	mov	r1, r5
   d4994:	4798      	blx	r3
	if (UseSerialDebug)
   d4996:	7823      	ldrb	r3, [r4, #0]
   d4998:	b17b      	cbz	r3, d49ba <_ZN12FPS_GT521F3211SendCommandEPhi+0x3a>
	{
		Serial.print("FPS - SEND: ");
   d499a:	f000 ffef 	bl	d597c <_Z16_fetch_usbserialv>
   d499e:	4907      	ldr	r1, [pc, #28]	; (d49bc <_ZN12FPS_GT521F3211SendCommandEPhi+0x3c>)
   d49a0:	f000 fd8a 	bl	d54b8 <_ZN5Print5printEPKc>
		SendToSerial(cmd, length);
   d49a4:	4632      	mov	r2, r6
   d49a6:	4629      	mov	r1, r5
   d49a8:	4620      	mov	r0, r4
   d49aa:	f7ff ffc3 	bl	d4934 <_ZN12FPS_GT521F3212SendToSerialEPhi>
		Serial.println();
   d49ae:	f000 ffe5 	bl	d597c <_Z16_fetch_usbserialv>
	}
};
   d49b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial1.write(cmd, length);
	if (UseSerialDebug)
	{
		Serial.print("FPS - SEND: ");
		SendToSerial(cmd, length);
		Serial.println();
   d49b6:	f000 bd86 	b.w	d54c6 <_ZN5Print7printlnEv>
   d49ba:	bd70      	pop	{r4, r5, r6, pc}
   d49bc:	000d6562 	.word	0x000d6562

000d49c0 <_ZN12FPS_GT521F3211GetResponseEv>:
	}
};

// Gets the response to the command from the software serial channel (and waits for it)
Response_Packet* FPS_GT521F32::GetResponse()
{
   d49c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49c2:	4605      	mov	r5, r0
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
	{
		//firstbyte = (byte)_serial.read();
		firstbyte = (byte)Serial1.read();
   d49c4:	f001 f890 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d49c8:	6803      	ldr	r3, [r0, #0]
   d49ca:	695b      	ldr	r3, [r3, #20]
   d49cc:	4798      	blx	r3
{
	byte firstbyte = 0;
	bool done = false;
	//_serial.listen();	// let's the fake digital UART listen (b/c only one can at a time)
	//Serial1.listen();	// uneccesary b/c Serial1 is always listening unlike SoftwareSerial
	while (done == false)
   d49ce:	b2c6      	uxtb	r6, r0
   d49d0:	2e55      	cmp	r6, #85	; 0x55
   d49d2:	d1f7      	bne.n	d49c4 <_ZN12FPS_GT521F3211GetResponseEv+0x4>
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d49d4:	200c      	movs	r0, #12
   d49d6:	f7ff fb60 	bl	d409a <_Znaj>
	resp[0] = firstbyte;
   d49da:	7006      	strb	r6, [r0, #0]
		if (firstbyte == Response_Packet::COMMAND_START_CODE_1)
		{
			done = true;
		}
	}
	byte* resp = new byte[12];
   d49dc:	4604      	mov	r4, r0
   d49de:	4606      	mov	r6, r0
   d49e0:	f100 070b 	add.w	r7, r0, #11
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
	{
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
   d49e4:	f001 f880 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d49e8:	6803      	ldr	r3, [r0, #0]
   d49ea:	691b      	ldr	r3, [r3, #16]
   d49ec:	4798      	blx	r3
   d49ee:	b918      	cbnz	r0, d49f8 <_ZN12FPS_GT521F3211GetResponseEv+0x38>
   d49f0:	200a      	movs	r0, #10
   d49f2:	f000 fe2f 	bl	d5654 <delay>
   d49f6:	e7f5      	b.n	d49e4 <_ZN12FPS_GT521F3211GetResponseEv+0x24>
		resp[i]= (byte) Serial1.read();
   d49f8:	f001 f876 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d49fc:	6803      	ldr	r3, [r0, #0]
   d49fe:	695b      	ldr	r3, [r3, #20]
   d4a00:	4798      	blx	r3
   d4a02:	f806 0f01 	strb.w	r0, [r6, #1]!
			done = true;
		}
	}
	byte* resp = new byte[12];
	resp[0] = firstbyte;
	for (int i=1; i < 12; i++)
   d4a06:	42b7      	cmp	r7, r6
   d4a08:	d1ec      	bne.n	d49e4 <_ZN12FPS_GT521F3211GetResponseEv+0x24>
		//while (_serial.available() == false) delay(10);
		//resp[i]= (byte) _serial.read();
		while (Serial1.available() == false) delay(10);
		resp[i]= (byte) Serial1.read();
	}
	Response_Packet* rp = new Response_Packet(resp, UseSerialDebug);
   d4a0a:	2016      	movs	r0, #22
   d4a0c:	f7ff fb43 	bl	d4096 <_Znwj>
   d4a10:	4606      	mov	r6, r0
   d4a12:	b118      	cbz	r0, d4a1c <_ZN12FPS_GT521F3211GetResponseEv+0x5c>
   d4a14:	782a      	ldrb	r2, [r5, #0]
   d4a16:	4621      	mov	r1, r4
   d4a18:	f7ff fedc 	bl	d47d4 <_ZN15Response_PacketC1EPhb>
	delete resp;
   d4a1c:	2101      	movs	r1, #1
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f001 fac9 	bl	d5fb6 <_ZdlPvj>
	if (UseSerialDebug)
   d4a24:	782b      	ldrb	r3, [r5, #0]
   d4a26:	b18b      	cbz	r3, d4a4c <_ZN12FPS_GT521F3211GetResponseEv+0x8c>
	{
		Serial.print("FPS - RECV: ");
   d4a28:	f000 ffa8 	bl	d597c <_Z16_fetch_usbserialv>
   d4a2c:	4908      	ldr	r1, [pc, #32]	; (d4a50 <_ZN12FPS_GT521F3211GetResponseEv+0x90>)
   d4a2e:	f000 fd43 	bl	d54b8 <_ZN5Print5printEPKc>
		SendToSerial(rp->RawBytes, 12);
   d4a32:	220c      	movs	r2, #12
   d4a34:	1cb1      	adds	r1, r6, #2
   d4a36:	4628      	mov	r0, r5
   d4a38:	f7ff ff7c 	bl	d4934 <_ZN12FPS_GT521F3212SendToSerialEPhi>
		Serial.println();
   d4a3c:	f000 ff9e 	bl	d597c <_Z16_fetch_usbserialv>
   d4a40:	f000 fd41 	bl	d54c6 <_ZN5Print7printlnEv>
		Serial.println();
   d4a44:	f000 ff9a 	bl	d597c <_Z16_fetch_usbserialv>
   d4a48:	f000 fd3d 	bl	d54c6 <_ZN5Print7printlnEv>
	}
	return rp;
};
   d4a4c:	4630      	mov	r0, r6
   d4a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a50:	000d656f 	.word	0x000d656f

000d4a54 <_ZN12FPS_GT521F324OpenEv>:
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
   d4a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UseSerialDebug) Serial.println("FPS - Open");
   d4a56:	7803      	ldrb	r3, [r0, #0]
#ifndef __GNUC__
#pragma region -= Device Commands =-
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
   d4a58:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - Open");
   d4a5a:	b123      	cbz	r3, d4a66 <_ZN12FPS_GT521F324OpenEv+0x12>
   d4a5c:	f000 ff8e 	bl	d597c <_Z16_fetch_usbserialv>
   d4a60:	4912      	ldr	r1, [pc, #72]	; (d4aac <_ZN12FPS_GT521F324OpenEv+0x58>)
   d4a62:	f000 fd3c 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4a66:	2007      	movs	r0, #7
   d4a68:	f7ff fb15 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Open;
   d4a6c:	2701      	movs	r7, #1
	cp->Parameter[0] = 0x00;
   d4a6e:	2300      	movs	r3, #0
   d4a70:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d4a72:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d4a74:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d4a76:	7103      	strb	r3, [r0, #4]
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Open;
   d4a78:	7007      	strb	r7, [r0, #0]
#endif  //__GNUC__
//Initialises the device and gets ready for commands
void FPS_GT521F32::Open()
{
	if (UseSerialDebug) Serial.println("FPS - Open");
	Command_Packet* cp = new Command_Packet();
   d4a7a:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4a7c:	f7ff fe22 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4a80:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::Open;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4a82:	4606      	mov	r6, r0
	delete cp;
   d4a84:	4620      	mov	r0, r4
   d4a86:	f001 fa96 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4a8a:	4631      	mov	r1, r6
   d4a8c:	220c      	movs	r2, #12
   d4a8e:	4628      	mov	r0, r5
   d4a90:	f7ff ff76 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4a94:	4628      	mov	r0, r5
   d4a96:	f7ff ff93 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	delete rp;
   d4a9a:	2116      	movs	r1, #22
   d4a9c:	f001 fa8b 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4aa0:	4639      	mov	r1, r7
   d4aa2:	4630      	mov	r0, r6
}
   d4aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	delete rp;
	delete packetbytes;
   d4aa8:	f001 ba85 	b.w	d5fb6 <_ZdlPvj>
   d4aac:	000d657c 	.word	0x000d657c

000d4ab0 <_ZN12FPS_GT521F326SetLEDEb>:

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
   d4ab0:	b570      	push	{r4, r5, r6, lr}
   d4ab2:	4605      	mov	r5, r0
	Command_Packet* cp = new Command_Packet();
   d4ab4:	2007      	movs	r0, #7

// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
   d4ab6:	460e      	mov	r6, r1
	Command_Packet* cp = new Command_Packet();
   d4ab8:	f7ff faed 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CmosLed;
   d4abc:	2312      	movs	r3, #18
   d4abe:	7003      	strb	r3, [r0, #0]
// Turns on or off the LED backlight
// Parameter: true turns on the backlight, false turns it off
// Returns: True if successful, false if not
bool FPS_GT521F32::SetLED(bool on)
{
	Command_Packet* cp = new Command_Packet();
   d4ac0:	4604      	mov	r4, r0
   d4ac2:	782b      	ldrb	r3, [r5, #0]
	cp->Command = Command_Packet::Commands::CmosLed;
	if (on)
   d4ac4:	b13e      	cbz	r6, d4ad6 <_ZN12FPS_GT521F326SetLEDEb+0x26>
	{
		if (UseSerialDebug) Serial.println("FPS - LED on");
   d4ac6:	b123      	cbz	r3, d4ad2 <_ZN12FPS_GT521F326SetLEDEb+0x22>
   d4ac8:	f000 ff58 	bl	d597c <_Z16_fetch_usbserialv>
   d4acc:	4915      	ldr	r1, [pc, #84]	; (d4b24 <_ZN12FPS_GT521F326SetLEDEb+0x74>)
   d4ace:	f000 fd06 	bl	d54de <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x01;
   d4ad2:	2301      	movs	r3, #1
   d4ad4:	e006      	b.n	d4ae4 <_ZN12FPS_GT521F326SetLEDEb+0x34>
	}
	else
	{
		if (UseSerialDebug) Serial.println("FPS - LED off");
   d4ad6:	b123      	cbz	r3, d4ae2 <_ZN12FPS_GT521F326SetLEDEb+0x32>
   d4ad8:	f000 ff50 	bl	d597c <_Z16_fetch_usbserialv>
   d4adc:	4912      	ldr	r1, [pc, #72]	; (d4b28 <_ZN12FPS_GT521F326SetLEDEb+0x78>)
   d4ade:	f000 fcfe 	bl	d54de <_ZN5Print7printlnEPKc>
		cp->Parameter[0] = 0x00;
   d4ae2:	2300      	movs	r3, #0
   d4ae4:	7063      	strb	r3, [r4, #1]
	}
	cp->Parameter[1] = 0x00;
   d4ae6:	2300      	movs	r3, #0
   d4ae8:	70a3      	strb	r3, [r4, #2]
	cp->Parameter[2] = 0x00;
   d4aea:	70e3      	strb	r3, [r4, #3]
	cp->Parameter[3] = 0x00;
   d4aec:	7123      	strb	r3, [r4, #4]
	byte* packetbytes = cp->GetPacketBytes();
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff fde8 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4af4:	2107      	movs	r1, #7
		cp->Parameter[0] = 0x00;
	}
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4af6:	4606      	mov	r6, r0
	delete cp;
   d4af8:	4620      	mov	r0, r4
   d4afa:	f001 fa5c 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4afe:	220c      	movs	r2, #12
   d4b00:	4631      	mov	r1, r6
   d4b02:	4628      	mov	r0, r5
   d4b04:	f7ff ff3c 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4b08:	4628      	mov	r0, r5
   d4b0a:	f7ff ff59 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = true;
	if (rp->ACK == false) retval = false;
	delete rp;
   d4b0e:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = true;
	if (rp->ACK == false) retval = false;
   d4b10:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4b12:	f001 fa50 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4b16:	4630      	mov	r0, r6
   d4b18:	2101      	movs	r1, #1
   d4b1a:	f001 fa4c 	bl	d5fb6 <_ZdlPvj>
	return retval;
};
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd70      	pop	{r4, r5, r6, pc}
   d4b22:	bf00      	nop
   d4b24:	000d6593 	.word	0x000d6593
   d4b28:	000d65a0 	.word	0x000d65a0

000d4b2c <_ZN12FPS_GT521F3214GetEnrollCountEv>:
}

// Gets the number of enrolled fingerprints
// Return: The total number of enrolled fingerprints
int FPS_GT521F32::GetEnrollCount()
{
   d4b2c:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - GetEnrolledCount");
   d4b2e:	7803      	ldrb	r3, [r0, #0]
}

// Gets the number of enrolled fingerprints
// Return: The total number of enrolled fingerprints
int FPS_GT521F32::GetEnrollCount()
{
   d4b30:	4605      	mov	r5, r0
	if (UseSerialDebug) Serial.println("FPS - GetEnrolledCount");
   d4b32:	b123      	cbz	r3, d4b3e <_ZN12FPS_GT521F3214GetEnrollCountEv+0x12>
   d4b34:	f000 ff22 	bl	d597c <_Z16_fetch_usbserialv>
   d4b38:	4915      	ldr	r1, [pc, #84]	; (d4b90 <_ZN12FPS_GT521F3214GetEnrollCountEv+0x64>)
   d4b3a:	f000 fcd0 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4b3e:	2007      	movs	r0, #7
   d4b40:	f7ff faa9 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::GetEnrollCount;
   d4b44:	2320      	movs	r3, #32
   d4b46:	7003      	strb	r3, [r0, #0]
	cp->Parameter[0] = 0x00;
   d4b48:	2300      	movs	r3, #0
   d4b4a:	7043      	strb	r3, [r0, #1]
	cp->Parameter[1] = 0x00;
   d4b4c:	7083      	strb	r3, [r0, #2]
	cp->Parameter[2] = 0x00;
   d4b4e:	70c3      	strb	r3, [r0, #3]
	cp->Parameter[3] = 0x00;
   d4b50:	7103      	strb	r3, [r0, #4]
// Gets the number of enrolled fingerprints
// Return: The total number of enrolled fingerprints
int FPS_GT521F32::GetEnrollCount()
{
	if (UseSerialDebug) Serial.println("FPS - GetEnrolledCount");
	Command_Packet* cp = new Command_Packet();
   d4b52:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::GetEnrollCount;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4b54:	f7ff fdb6 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4b58:	2107      	movs	r1, #7
	cp->Command = Command_Packet::Commands::GetEnrollCount;
	cp->Parameter[0] = 0x00;
	cp->Parameter[1] = 0x00;
	cp->Parameter[2] = 0x00;
	cp->Parameter[3] = 0x00;
	byte* packetbytes = cp->GetPacketBytes();
   d4b5a:	4606      	mov	r6, r0
	delete cp;
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	f001 fa2a 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4b62:	220c      	movs	r2, #12
   d4b64:	4631      	mov	r1, r6
   d4b66:	4628      	mov	r0, r5
   d4b68:	f7ff ff0a 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4b6c:	4628      	mov	r0, r5
   d4b6e:	f7ff ff27 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
   d4b72:	4605      	mov	r5, r0

	int retval = rp->IntFromParameter();
   d4b74:	f7ff fdd6 	bl	d4724 <_ZN15Response_Packet16IntFromParameterEv>
	delete rp;
   d4b78:	2116      	movs	r1, #22
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();

	int retval = rp->IntFromParameter();
   d4b7a:	4604      	mov	r4, r0
	delete rp;
   d4b7c:	4628      	mov	r0, r5
   d4b7e:	f001 fa1a 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4b82:	4630      	mov	r0, r6
   d4b84:	2101      	movs	r1, #1
   d4b86:	f001 fa16 	bl	d5fb6 <_ZdlPvj>
	return retval;
}
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	bd70      	pop	{r4, r5, r6, pc}
   d4b8e:	bf00      	nop
   d4b90:	000d65c3 	.word	0x000d65c3

000d4b94 <_ZN12FPS_GT521F3213CheckEnrolledEi>:
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
   d4b94:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d4b96:	7803      	ldrb	r3, [r0, #0]
// checks to see if the ID number is in use or not
// Parameter: 0-2999, if using GT-521F52
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
   d4b98:	4604      	mov	r4, r0
   d4b9a:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
   d4b9c:	b123      	cbz	r3, d4ba8 <_ZN12FPS_GT521F3213CheckEnrolledEi+0x14>
   d4b9e:	f000 feed 	bl	d597c <_Z16_fetch_usbserialv>
   d4ba2:	4912      	ldr	r1, [pc, #72]	; (d4bec <_ZN12FPS_GT521F3213CheckEnrolledEi+0x58>)
   d4ba4:	f000 fc9b 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4ba8:	2007      	movs	r0, #7
   d4baa:	f7ff fa74 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CheckEnrolled;
   d4bae:	2321      	movs	r3, #33	; 0x21
   d4bb0:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d4bb2:	4631      	mov	r1, r6
//            0-199, if using GT-521F32/GT-511C3
// Return: True if the ID number is enrolled, false if not
bool FPS_GT521F32::CheckEnrolled(int id)
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
   d4bb4:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
   d4bb6:	f7ff fd6f 	bl	d4698 <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d4bba:	f7ff fd83 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4bbe:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - CheckEnrolled");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::CheckEnrolled;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d4bc0:	4606      	mov	r6, r0
	delete cp;
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	f001 f9f7 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4bc8:	220c      	movs	r2, #12
   d4bca:	4631      	mov	r1, r6
   d4bcc:	4620      	mov	r0, r4
   d4bce:	f7ff fed7 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d4bd2:	2101      	movs	r1, #1
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	f001 f9ee 	bl	d5fb6 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff fef0 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = false;
	retval = rp->ACK;
   d4be0:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4be2:	2116      	movs	r1, #22
   d4be4:	f001 f9e7 	bl	d5fb6 <_ZdlPvj>
	return retval;
}
   d4be8:	4620      	mov	r0, r4
   d4bea:	bd70      	pop	{r4, r5, r6, pc}
   d4bec:	000d65da 	.word	0x000d65da

000d4bf0 <_ZN12FPS_GT521F3211EnrollStartEi>:
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
   d4bf0:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d4bf2:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Database is full
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
   d4bf4:	4604      	mov	r4, r0
   d4bf6:	460e      	mov	r6, r1
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
   d4bf8:	b123      	cbz	r3, d4c04 <_ZN12FPS_GT521F3211EnrollStartEi+0x14>
   d4bfa:	f000 febf 	bl	d597c <_Z16_fetch_usbserialv>
   d4bfe:	491d      	ldr	r1, [pc, #116]	; (d4c74 <_ZN12FPS_GT521F3211EnrollStartEi+0x84>)
   d4c00:	f000 fc6d 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4c04:	2007      	movs	r0, #7
   d4c06:	f7ff fa46 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::EnrollStart;
   d4c0a:	2322      	movs	r3, #34	; 0x22
   d4c0c:	7003      	strb	r3, [r0, #0]
	cp->ParameterFromInt(id);
   d4c0e:	4631      	mov	r1, r6
//	2 - Invalid Position
//	3 - Position(ID) is already used
int FPS_GT521F32::EnrollStart(int id)
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
   d4c10:	4605      	mov	r5, r0
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
   d4c12:	f7ff fd41 	bl	d4698 <_ZN14Command_Packet16ParameterFromIntEi>
	byte* packetbytes = cp->GetPacketBytes();
   d4c16:	f7ff fd55 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4c1a:	2107      	movs	r1, #7
{
	if (UseSerialDebug) Serial.println("FPS - EnrollStart");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::EnrollStart;
	cp->ParameterFromInt(id);
	byte* packetbytes = cp->GetPacketBytes();
   d4c1c:	4606      	mov	r6, r0
	delete cp;
   d4c1e:	4628      	mov	r0, r5
   d4c20:	f001 f9c9 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4c24:	220c      	movs	r2, #12
   d4c26:	4631      	mov	r1, r6
   d4c28:	4620      	mov	r0, r4
   d4c2a:	f7ff fea9 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d4c2e:	2101      	movs	r1, #1
   d4c30:	4630      	mov	r0, r6
   d4c32:	f001 f9c0 	bl	d5fb6 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4c36:	4620      	mov	r0, r4
   d4c38:	f7ff fec2 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	int retval = 0;
	if (rp->ACK == false)
   d4c3c:	7d03      	ldrb	r3, [r0, #20]
   d4c3e:	b97b      	cbnz	r3, d4c60 <_ZN12FPS_GT521F3211EnrollStartEi+0x70>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d4c40:	8803      	ldrh	r3, [r0, #0]
   d4c42:	f241 0209 	movw	r2, #4105	; 0x1009
   d4c46:	4293      	cmp	r3, r2
   d4c48:	d00c      	beq.n	d4c64 <_ZN12FPS_GT521F3211EnrollStartEi+0x74>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d4c4a:	f241 0203 	movw	r2, #4099	; 0x1003
   d4c4e:	4293      	cmp	r3, r2
   d4c50:	d00a      	beq.n	d4c68 <_ZN12FPS_GT521F3211EnrollStartEi+0x78>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
   d4c52:	f241 0405 	movw	r4, #4101	; 0x1005
   d4c56:	42a3      	cmp	r3, r4
   d4c58:	bf0c      	ite	eq
   d4c5a:	2403      	moveq	r4, #3
   d4c5c:	2400      	movne	r4, #0
   d4c5e:	e004      	b.n	d4c6a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = 0;
   d4c60:	2400      	movs	r4, #0
   d4c62:	e002      	b.n	d4c6a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_DB_IS_FULL) retval = 1;
   d4c64:	2401      	movs	r4, #1
   d4c66:	e000      	b.n	d4c6a <_ZN12FPS_GT521F3211EnrollStartEi+0x7a>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_INVALID_POS) retval = 2;
   d4c68:	2402      	movs	r4, #2
		if (rp->Error == Response_Packet::ErrorCodes::NACK_IS_ALREADY_USED) retval = 3;
	}
	delete rp;
   d4c6a:	2116      	movs	r1, #22
   d4c6c:	f001 f9a3 	bl	d5fb6 <_ZdlPvj>
	return retval;
}
   d4c70:	4620      	mov	r0, r4
   d4c72:	bd70      	pop	{r4, r5, r6, pc}
   d4c74:	000d65ee 	.word	0x000d65ee

000d4c78 <_ZN12FPS_GT521F327Enroll1Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
   d4c78:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d4c7a:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
   d4c7c:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
   d4c7e:	b123      	cbz	r3, d4c8a <_ZN12FPS_GT521F327Enroll1Ev+0x12>
   d4c80:	f000 fe7c 	bl	d597c <_Z16_fetch_usbserialv>
   d4c84:	491d      	ldr	r1, [pc, #116]	; (d4cfc <_ZN12FPS_GT521F327Enroll1Ev+0x84>)
   d4c86:	f000 fc2a 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4c8a:	2007      	movs	r0, #7
   d4c8c:	f7ff fa03 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll1;
   d4c90:	2323      	movs	r3, #35	; 0x23
   d4c92:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
   d4c94:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d4c96:	f7ff fd15 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4c9a:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll1()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll1");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll1;
	byte* packetbytes = cp->GetPacketBytes();
   d4c9c:	4605      	mov	r5, r0
	delete cp;
   d4c9e:	4630      	mov	r0, r6
   d4ca0:	f001 f989 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4ca4:	220c      	movs	r2, #12
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	4629      	mov	r1, r5
   d4caa:	f7ff fe69 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d4cae:	2101      	movs	r1, #1
   d4cb0:	4628      	mov	r0, r5
   d4cb2:	f001 f980 	bl	d5fb6 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff fe82 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
   d4cbc:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4cbe:	f7ff fd31 	bl	d4724 <_ZN15Response_Packet16IntFromParameterEv>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4cc2:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d4cc4:	28c7      	cmp	r0, #199	; 0xc7
   d4cc6:	bfd4      	ite	le
   d4cc8:	2403      	movle	r4, #3
   d4cca:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4ccc:	b95b      	cbnz	r3, d4ce6 <_ZN12FPS_GT521F327Enroll1Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4cce:	882b      	ldrh	r3, [r5, #0]
   d4cd0:	f241 020d 	movw	r2, #4109	; 0x100d
   d4cd4:	4293      	cmp	r3, r2
   d4cd6:	d005      	beq.n	d4ce4 <_ZN12FPS_GT521F327Enroll1Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4cd8:	f241 020c 	movw	r2, #4108	; 0x100c
   d4cdc:	4293      	cmp	r3, r2
   d4cde:	bf08      	it	eq
   d4ce0:	2402      	moveq	r4, #2
   d4ce2:	e000      	b.n	d4ce6 <_ZN12FPS_GT521F327Enroll1Ev+0x6e>
//Change to  "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4ce4:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4ce6:	4628      	mov	r0, r5
   d4ce8:	2116      	movs	r1, #22
   d4cea:	f001 f964 	bl	d5fb6 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4cee:	7d2b      	ldrb	r3, [r5, #20]
   d4cf0:	2b00      	cmp	r3, #0
}
   d4cf2:	bf0c      	ite	eq
   d4cf4:	4620      	moveq	r0, r4
   d4cf6:	2000      	movne	r0, #0
   d4cf8:	bd70      	pop	{r4, r5, r6, pc}
   d4cfa:	bf00      	nop
   d4cfc:	000d6600 	.word	0x000d6600

000d4d00 <_ZN12FPS_GT521F327Enroll2Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
   d4d00:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d4d02:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
   d4d04:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
   d4d06:	b123      	cbz	r3, d4d12 <_ZN12FPS_GT521F327Enroll2Ev+0x12>
   d4d08:	f000 fe38 	bl	d597c <_Z16_fetch_usbserialv>
   d4d0c:	491d      	ldr	r1, [pc, #116]	; (d4d84 <_ZN12FPS_GT521F327Enroll2Ev+0x84>)
   d4d0e:	f000 fbe6 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4d12:	2007      	movs	r0, #7
   d4d14:	f7ff f9bf 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll2;
   d4d18:	2324      	movs	r3, #36	; 0x24
   d4d1a:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
   d4d1c:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d4d1e:	f7ff fcd1 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4d22:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll2()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll2");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll2;
	byte* packetbytes = cp->GetPacketBytes();
   d4d24:	4605      	mov	r5, r0
	delete cp;
   d4d26:	4630      	mov	r0, r6
   d4d28:	f001 f945 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4d2c:	220c      	movs	r2, #12
   d4d2e:	4620      	mov	r0, r4
   d4d30:	4629      	mov	r1, r5
   d4d32:	f7ff fe25 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d4d36:	2101      	movs	r1, #1
   d4d38:	4628      	mov	r0, r5
   d4d3a:	f001 f93c 	bl	d5fb6 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f7ff fe3e 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
   d4d44:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4d46:	f7ff fced 	bl	d4724 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4d4a:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
   d4d4c:	28c7      	cmp	r0, #199	; 0xc7
   d4d4e:	bfd4      	ite	le
   d4d50:	2403      	movle	r4, #3
   d4d52:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4d54:	b95b      	cbnz	r3, d4d6e <_ZN12FPS_GT521F327Enroll2Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4d56:	882b      	ldrh	r3, [r5, #0]
   d4d58:	f241 020d 	movw	r2, #4109	; 0x100d
   d4d5c:	4293      	cmp	r3, r2
   d4d5e:	d005      	beq.n	d4d6c <_ZN12FPS_GT521F327Enroll2Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4d60:	f241 020c 	movw	r2, #4108	; 0x100c
   d4d64:	4293      	cmp	r3, r2
   d4d66:	bf08      	it	eq
   d4d68:	2402      	moveq	r4, #2
   d4d6a:	e000      	b.n	d4d6e <_ZN12FPS_GT521F327Enroll2Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
	if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4d6c:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4d6e:	4628      	mov	r0, r5
   d4d70:	2116      	movs	r1, #22
   d4d72:	f001 f920 	bl	d5fb6 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4d76:	7d2b      	ldrb	r3, [r5, #20]
   d4d78:	2b00      	cmp	r3, #0
}
   d4d7a:	bf0c      	ite	eq
   d4d7c:	4620      	moveq	r0, r4
   d4d7e:	2000      	movne	r0, #0
   d4d80:	bd70      	pop	{r4, r5, r6, pc}
   d4d82:	bf00      	nop
   d4d84:	000d660e 	.word	0x000d660e

000d4d88 <_ZN12FPS_GT521F327Enroll3Ev>:
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
   d4d88:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d4d8a:	7803      	ldrb	r3, [r0, #0]
//	0 - ACK
//	1 - Enroll Failed
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
   d4d8c:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
   d4d8e:	b123      	cbz	r3, d4d9a <_ZN12FPS_GT521F327Enroll3Ev+0x12>
   d4d90:	f000 fdf4 	bl	d597c <_Z16_fetch_usbserialv>
   d4d94:	491d      	ldr	r1, [pc, #116]	; (d4e0c <_ZN12FPS_GT521F327Enroll3Ev+0x84>)
   d4d96:	f000 fba2 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4d9a:	2007      	movs	r0, #7
   d4d9c:	f7ff f97b 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Enroll3;
   d4da0:	2325      	movs	r3, #37	; 0x25
   d4da2:	7003      	strb	r3, [r0, #0]
//	2 - Bad finger
//	3 - ID in use
int FPS_GT521F32::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
   d4da4:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d4da6:	f7ff fc8d 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4daa:	2107      	movs	r1, #7
int FPS_GT521F32::Enroll3()
{
	if (UseSerialDebug) Serial.println("FPS - Enroll3");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Enroll3;
	byte* packetbytes = cp->GetPacketBytes();
   d4dac:	4605      	mov	r5, r0
	delete cp;
   d4dae:	4630      	mov	r0, r6
   d4db0:	f001 f901 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4db4:	220c      	movs	r2, #12
   d4db6:	4620      	mov	r0, r4
   d4db8:	4629      	mov	r1, r5
   d4dba:	f7ff fde1 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	delete packetbytes;
   d4dbe:	2101      	movs	r1, #1
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	f001 f8f8 	bl	d5fb6 <_ZdlPvj>
	Response_Packet* rp = GetResponse();
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	f7ff fdfa 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
   d4dcc:	4605      	mov	r5, r0
	int retval = rp->IntFromParameter();
   d4dce:	f7ff fca9 	bl	d4724 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
   d4dd2:	7d2b      	ldrb	r3, [r5, #20]
	delete packetbytes;
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
   d4dd4:	28c7      	cmp	r0, #199	; 0xc7
   d4dd6:	bfd4      	ite	le
   d4dd8:	2403      	movle	r4, #3
   d4dda:	2400      	movgt	r4, #0
	if (rp->ACK == false)
   d4ddc:	b95b      	cbnz	r3, d4df6 <_ZN12FPS_GT521F327Enroll3Ev+0x6e>
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4dde:	882b      	ldrh	r3, [r5, #0]
   d4de0:	f241 020d 	movw	r2, #4109	; 0x100d
   d4de4:	4293      	cmp	r3, r2
   d4de6:	d005      	beq.n	d4df4 <_ZN12FPS_GT521F327Enroll3Ev+0x6c>
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
   d4de8:	f241 020c 	movw	r2, #4108	; 0x100c
   d4dec:	4293      	cmp	r3, r2
   d4dee:	bf08      	it	eq
   d4df0:	2402      	moveq	r4, #2
   d4df2:	e000      	b.n	d4df6 <_ZN12FPS_GT521F327Enroll3Ev+0x6e>
//Change to "retval < 3000", if using GT-521F52
//Leave "reval < 200", if using GT-521F32/GT-511C3
        if (retval < 200) retval = 3; else retval = 0;
	if (rp->ACK == false)
	{
		if (rp->Error == Response_Packet::ErrorCodes::NACK_ENROLL_FAILED) retval = 1;
   d4df4:	2401      	movs	r4, #1
		if (rp->Error == Response_Packet::ErrorCodes::NACK_BAD_FINGER) retval = 2;
	}
	delete rp;
   d4df6:	4628      	mov	r0, r5
   d4df8:	2116      	movs	r1, #22
   d4dfa:	f001 f8dc 	bl	d5fb6 <_ZdlPvj>
	if (rp->ACK) return 0; else return retval;
   d4dfe:	7d2b      	ldrb	r3, [r5, #20]
   d4e00:	2b00      	cmp	r3, #0
}
   d4e02:	bf0c      	ite	eq
   d4e04:	4620      	moveq	r0, r4
   d4e06:	2000      	movne	r0, #0
   d4e08:	bd70      	pop	{r4, r5, r6, pc}
   d4e0a:	bf00      	nop
   d4e0c:	000d661c 	.word	0x000d661c

000d4e10 <_ZN12FPS_GT521F3213IsPressFingerEv>:

// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT521F32::IsPressFinger()
{
   d4e10:	b570      	push	{r4, r5, r6, lr}
   d4e12:	4605      	mov	r5, r0
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d4e14:	2007      	movs	r0, #7
   d4e16:	f7ff f93e 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::IsPressFinger;
   d4e1a:	2326      	movs	r3, #38	; 0x26
   d4e1c:	7003      	strb	r3, [r0, #0]
// Checks to see if a finger is pressed on the FPS
// Return: true if finger pressed, false if not
bool FPS_GT521F32::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
   d4e1e:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4e20:	f7ff fc50 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4e24:	2107      	movs	r1, #7
bool FPS_GT521F32::IsPressFinger()
{
	//if (UseSerialDebug) Serial.println("FPS - IsPressFinger");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::IsPressFinger;
	byte* packetbytes = cp->GetPacketBytes();
   d4e26:	4604      	mov	r4, r0
	delete cp;
   d4e28:	4630      	mov	r0, r6
   d4e2a:	f001 f8c4 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4e2e:	4628      	mov	r0, r5
   d4e30:	4621      	mov	r1, r4
   d4e32:	220c      	movs	r2, #12
   d4e34:	f7ff fda4 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4e38:	4628      	mov	r0, r5
   d4e3a:	f7ff fdc1 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d4e3e:	7bc1      	ldrb	r1, [r0, #15]
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
   d4e40:	7b83      	ldrb	r3, [r0, #14]
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4e42:	7c42      	ldrb	r2, [r0, #17]
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
   d4e44:	440b      	add	r3, r1
	pval += rp->ParameterBytes[2];
   d4e46:	7c01      	ldrb	r1, [r0, #16]
   d4e48:	440b      	add	r3, r1
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4e4a:	42da      	cmn	r2, r3
	delete rp;
   d4e4c:	f04f 0116 	mov.w	r1, #22
	bool retval = false;
	int pval = rp->ParameterBytes[0];
	pval += rp->ParameterBytes[1];
	pval += rp->ParameterBytes[2];
	pval += rp->ParameterBytes[3];
	if (pval == 0) retval = true;
   d4e50:	bf0c      	ite	eq
   d4e52:	2501      	moveq	r5, #1
   d4e54:	2500      	movne	r5, #0
	delete rp;
   d4e56:	f001 f8ae 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	2101      	movs	r1, #1
   d4e5e:	f001 f8aa 	bl	d5fb6 <_ZdlPvj>
	return retval;
}
   d4e62:	4628      	mov	r0, r5
   d4e64:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e68 <_ZN12FPS_GT521F3211Identify1_NEv>:
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
   d4e68:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d4e6a:	7803      	ldrb	r3, [r0, #0]
//           0-199, if using GT-521F32/GT-511C3
//      Failed to find the fingerprint in the database
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
   d4e6c:	4604      	mov	r4, r0
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
   d4e6e:	b123      	cbz	r3, d4e7a <_ZN12FPS_GT521F3211Identify1_NEv+0x12>
   d4e70:	f000 fd84 	bl	d597c <_Z16_fetch_usbserialv>
   d4e74:	4914      	ldr	r1, [pc, #80]	; (d4ec8 <_ZN12FPS_GT521F3211Identify1_NEv+0x60>)
   d4e76:	f000 fb32 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4e7a:	2007      	movs	r0, #7
   d4e7c:	f7ff f90b 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::Identify1_N;
   d4e80:	2351      	movs	r3, #81	; 0x51
   d4e82:	7003      	strb	r3, [r0, #0]
// 	     3000, if using GT-521F52
//           200, if using GT-521F32/GT-511C3
int FPS_GT521F32::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
   d4e84:	4606      	mov	r6, r0
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d4e86:	f7ff fc1d 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4e8a:	2107      	movs	r1, #7
int FPS_GT521F32::Identify1_N()
{
	if (UseSerialDebug) Serial.println("FPS - Identify1_N");
	Command_Packet* cp = new Command_Packet();
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
   d4e8c:	4605      	mov	r5, r0
	delete cp;
   d4e8e:	4630      	mov	r0, r6
   d4e90:	f001 f891 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4e94:	220c      	movs	r2, #12
   d4e96:	4629      	mov	r1, r5
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f7ff fd71 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4e9e:	4620      	mov	r0, r4
   d4ea0:	f7ff fd8e 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
   d4ea4:	4606      	mov	r6, r0
	int retval = rp->IntFromParameter();
   d4ea6:	f7ff fc3d 	bl	d4724 <_ZN15Response_Packet16IntFromParameterEv>
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4eaa:	2116      	movs	r1, #22
	cp->Command = Command_Packet::Commands::Identify1_N;
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	int retval = rp->IntFromParameter();
   d4eac:	4604      	mov	r4, r0
//Change to "retval > 3000" and "retval = 3000", if using GT-521F52
//Leave "reval > 200" and "retval = 200", if using GT-521F32/GT-511C3
	if (retval > 200) retval = 200;
	delete rp;
   d4eae:	4630      	mov	r0, r6
   d4eb0:	f001 f881 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4eb4:	4628      	mov	r0, r5
   d4eb6:	2101      	movs	r1, #1
   d4eb8:	f001 f87d 	bl	d5fb6 <_ZdlPvj>
	return retval;
}
   d4ebc:	2cc8      	cmp	r4, #200	; 0xc8
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	bfa8      	it	ge
   d4ec2:	20c8      	movge	r0, #200	; 0xc8
   d4ec4:	bd70      	pop	{r4, r5, r6, pc}
   d4ec6:	bf00      	nop
   d4ec8:	000d6659 	.word	0x000d6659

000d4ecc <_ZN12FPS_GT521F3213CaptureFingerEb>:
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
   d4ecc:	b570      	push	{r4, r5, r6, lr}
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4ece:	7803      	ldrb	r3, [r0, #0]
// Captures the currently pressed finger into onboard ram use this prior to other commands
// Parameter: true for high quality image(slower), false for low quality image (faster)
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
   d4ed0:	4606      	mov	r6, r0
   d4ed2:	460d      	mov	r5, r1
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
   d4ed4:	b123      	cbz	r3, d4ee0 <_ZN12FPS_GT521F3213CaptureFingerEb+0x14>
   d4ed6:	f000 fd51 	bl	d597c <_Z16_fetch_usbserialv>
   d4eda:	4917      	ldr	r1, [pc, #92]	; (d4f38 <_ZN12FPS_GT521F3213CaptureFingerEb+0x6c>)
   d4edc:	f000 faff 	bl	d54de <_ZN5Print7printlnEPKc>
	Command_Packet* cp = new Command_Packet();
   d4ee0:	2007      	movs	r0, #7
   d4ee2:	f7ff f8d8 	bl	d4096 <_Znwj>
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4ee6:	2360      	movs	r3, #96	; 0x60
// Generally, use high quality for enrollment, and low quality for verification/identification
// Returns: True if ok, false if no finger pressed
bool FPS_GT521F32::CaptureFinger(bool highquality)
{
	if (UseSerialDebug) Serial.println("FPS - CaptureFinger");
	Command_Packet* cp = new Command_Packet();
   d4ee8:	4604      	mov	r4, r0
	cp->Command = Command_Packet::Commands::CaptureFinger;
   d4eea:	7003      	strb	r3, [r0, #0]
	if (highquality)
   d4eec:	b135      	cbz	r5, d4efc <_ZN12FPS_GT521F3213CaptureFingerEb+0x30>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4eee:	2301      	movs	r3, #1
   d4ef0:	7043      	strb	r3, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4ef2:	2300      	movs	r3, #0
   d4ef4:	7083      	strb	r3, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4ef6:	70c3      	strb	r3, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4ef8:	7103      	strb	r3, [r0, #4]
   d4efa:	e003      	b.n	d4f04 <_ZN12FPS_GT521F3213CaptureFingerEb+0x38>
}

// Converts the int to bytes and puts them into the paramter array
void Command_Packet::ParameterFromInt(int i)
{
	Parameter[0] = (i & 0x000000ff);
   d4efc:	7045      	strb	r5, [r0, #1]
	Parameter[1] = (i & 0x0000ff00) >> 8;
   d4efe:	7085      	strb	r5, [r0, #2]
	Parameter[2] = (i & 0x00ff0000) >> 16;
   d4f00:	70c5      	strb	r5, [r0, #3]
	Parameter[3] = (i & 0xff000000) >> 24;
   d4f02:	7105      	strb	r5, [r0, #4]
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4f04:	4620      	mov	r0, r4
   d4f06:	f7ff fbdd 	bl	d46c4 <_ZN14Command_Packet14GetPacketBytesEv>
	delete cp;
   d4f0a:	2107      	movs	r1, #7
	}
	else
	{
		cp->ParameterFromInt(0);
	}
	byte* packetbytes = cp->GetPacketBytes();
   d4f0c:	4605      	mov	r5, r0
	delete cp;
   d4f0e:	4620      	mov	r0, r4
   d4f10:	f001 f851 	bl	d5fb6 <_ZdlPvj>
	SendCommand(packetbytes, 12);
   d4f14:	220c      	movs	r2, #12
   d4f16:	4629      	mov	r1, r5
   d4f18:	4630      	mov	r0, r6
   d4f1a:	f7ff fd31 	bl	d4980 <_ZN12FPS_GT521F3211SendCommandEPhi>
	Response_Packet* rp = GetResponse();
   d4f1e:	4630      	mov	r0, r6
   d4f20:	f7ff fd4e 	bl	d49c0 <_ZN12FPS_GT521F3211GetResponseEv>
	bool retval = rp->ACK;
	delete rp;
   d4f24:	2116      	movs	r1, #22
	}
	byte* packetbytes = cp->GetPacketBytes();
	delete cp;
	SendCommand(packetbytes, 12);
	Response_Packet* rp = GetResponse();
	bool retval = rp->ACK;
   d4f26:	7d04      	ldrb	r4, [r0, #20]
	delete rp;
   d4f28:	f001 f845 	bl	d5fb6 <_ZdlPvj>
	delete packetbytes;
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	2101      	movs	r1, #1
   d4f30:	f001 f841 	bl	d5fb6 <_ZdlPvj>
	return retval;

}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd70      	pop	{r4, r5, r6, pc}
   d4f38:	000d666b 	.word	0x000d666b

000d4f3c <_GLOBAL__sub_I__ZN14Command_Packet14GetPacketBytesEv>:
   d4f3c:	f000 b810 	b.w	d4f60 <HAL_Pin_Map>

000d4f40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <netdb_freeaddrinfo+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	689b      	ldr	r3, [r3, #8]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030268 	.word	0x00030268

000d4f50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <netdb_getaddrinfo+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	68db      	ldr	r3, [r3, #12]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030268 	.word	0x00030268

000d4f60 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <HAL_Pin_Map+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	681b      	ldr	r3, [r3, #0]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	0003022c 	.word	0x0003022c

000d4f70 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_Validate_Pin_Function+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	685b      	ldr	r3, [r3, #4]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003022c 	.word	0x0003022c

000d4f80 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_Pin_Mode+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	689b      	ldr	r3, [r3, #8]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003022c 	.word	0x0003022c

000d4f90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_Get_Pin_Mode+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	68db      	ldr	r3, [r3, #12]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003022c 	.word	0x0003022c

000d4fa0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <HAL_GPIO_Write+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	691b      	ldr	r3, [r3, #16]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003022c 	.word	0x0003022c

000d4fb0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_GPIO_Read+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	695b      	ldr	r3, [r3, #20]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003022c 	.word	0x0003022c

000d4fc0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <HAL_SPI_Init+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	69db      	ldr	r3, [r3, #28]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030230 	.word	0x00030230

000d4fd0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <HAL_SPI_Is_Enabled+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6a1b      	ldr	r3, [r3, #32]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030230 	.word	0x00030230

000d4fe0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <HAL_RNG_GetRandomNumber+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	685b      	ldr	r3, [r3, #4]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030218 	.word	0x00030218

000d4ff0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	695b      	ldr	r3, [r3, #20]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030218 	.word	0x00030218

000d5000 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <os_thread_is_current+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030248 	.word	0x00030248

000d5010 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <os_thread_join+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	691b      	ldr	r3, [r3, #16]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030248 	.word	0x00030248

000d5020 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <os_thread_cleanup+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	695b      	ldr	r3, [r3, #20]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030248 	.word	0x00030248

000d5030 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <os_mutex_create+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030248 	.word	0x00030248

000d5040 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <os_mutex_recursive_create+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030248 	.word	0x00030248

000d5050 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <inet_inet_ntop+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	695b      	ldr	r3, [r3, #20]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030264 	.word	0x00030264

000d5060 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_USART_Init+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	681b      	ldr	r3, [r3, #0]
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	0003023c 	.word	0x0003023c

000d5070 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_USART_End+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	689b      	ldr	r3, [r3, #8]
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	0003023c 	.word	0x0003023c

000d5080 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_USART_Write_Data+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	68db      	ldr	r3, [r3, #12]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	0003023c 	.word	0x0003023c

000d5090 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_USART_Available_Data+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	691b      	ldr	r3, [r3, #16]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	0003023c 	.word	0x0003023c

000d50a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <HAL_USART_Read_Data+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	695b      	ldr	r3, [r3, #20]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003023c 	.word	0x0003023c

000d50b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_USART_Peek_Data+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	699b      	ldr	r3, [r3, #24]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003023c 	.word	0x0003023c

000d50c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_USART_Flush_Data+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	69db      	ldr	r3, [r3, #28]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003023c 	.word	0x0003023c

000d50d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_USART_Is_Enabled+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	6a1b      	ldr	r3, [r3, #32]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	0003023c 	.word	0x0003023c

000d50e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_USART_Available_Data_For_Write+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	0003023c 	.word	0x0003023c

000d50f0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_USART_BeginConfig+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	0003023c 	.word	0x0003023c

000d5100 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <HAL_I2C_Write_Data+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	6a1b      	ldr	r3, [r3, #32]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030228 	.word	0x00030228

000d5110 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <HAL_I2C_Available_Data+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030228 	.word	0x00030228

000d5120 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <HAL_I2C_Read_Data+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030228 	.word	0x00030228

000d5130 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <HAL_I2C_Peek_Data+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030228 	.word	0x00030228

000d5140 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <HAL_I2C_Flush_Data+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030228 	.word	0x00030228

000d5150 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <HAL_I2C_Is_Enabled+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030228 	.word	0x00030228

000d5160 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <HAL_I2C_Init+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030228 	.word	0x00030228

000d5170 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <HAL_Tone_Start+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	681b      	ldr	r3, [r3, #0]
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030224 	.word	0x00030224

000d5180 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <HAL_Tone_Stop+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	685b      	ldr	r3, [r3, #4]
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	00030224 	.word	0x00030224

000d5190 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <HAL_USB_USART_Init+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	681b      	ldr	r3, [r3, #0]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	0003024c 	.word	0x0003024c

000d51a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <HAL_USB_USART_Available_Data+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	691b      	ldr	r3, [r3, #16]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003024c 	.word	0x0003024c

000d51b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	695b      	ldr	r3, [r3, #20]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003024c 	.word	0x0003024c

000d51c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <HAL_USB_USART_Receive_Data+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	699b      	ldr	r3, [r3, #24]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003024c 	.word	0x0003024c

000d51d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <HAL_USB_USART_Send_Data+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	69db      	ldr	r3, [r3, #28]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	0003024c 	.word	0x0003024c

000d51e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <HAL_USB_USART_Flush_Data+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	6a1b      	ldr	r3, [r3, #32]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	0003024c 	.word	0x0003024c

000d51f0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <LED_SetSignalingColor+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	685b      	ldr	r3, [r3, #4]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030260 	.word	0x00030260

000d5200 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <LED_Signaling_Start+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	689b      	ldr	r3, [r3, #8]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030260 	.word	0x00030260

000d5210 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <LED_Signaling_Stop+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	68db      	ldr	r3, [r3, #12]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030260 	.word	0x00030260

000d5220 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <LED_SetBrightness+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	691b      	ldr	r3, [r3, #16]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030260 	.word	0x00030260

000d5230 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <LED_RGB_IsOverRidden+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	699b      	ldr	r3, [r3, #24]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030260 	.word	0x00030260

000d5240 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <LED_On+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	69db      	ldr	r3, [r3, #28]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030260 	.word	0x00030260

000d5250 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <set_system_mode+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	685b      	ldr	r3, [r3, #4]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030220 	.word	0x00030220

000d5260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <system_delay_ms+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	695b      	ldr	r3, [r3, #20]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030220 	.word	0x00030220

000d5270 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b03      	ldr	r3, [pc, #12]	; (d5280 <system_ctrl_set_app_request_handler+0x10>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d527a:	9301      	str	r3, [sp, #4]
   d527c:	bd08      	pop	{r3, pc}
   d527e:	0000      	.short	0x0000
   d5280:	00030220 	.word	0x00030220

000d5284 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b03      	ldr	r3, [pc, #12]	; (d5294 <system_ctrl_set_result+0x10>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d528e:	9301      	str	r3, [sp, #4]
   d5290:	bd08      	pop	{r3, pc}
   d5292:	0000      	.short	0x0000
   d5294:	00030220 	.word	0x00030220

000d5298 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <network_connect+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	685b      	ldr	r3, [r3, #4]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030240 	.word	0x00030240

000d52a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <network_connecting+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	689b      	ldr	r3, [r3, #8]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030240 	.word	0x00030240

000d52b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <network_disconnect+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	68db      	ldr	r3, [r3, #12]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030240 	.word	0x00030240

000d52c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <network_ready+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	691b      	ldr	r3, [r3, #16]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030240 	.word	0x00030240

000d52d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <network_on+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	695b      	ldr	r3, [r3, #20]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030240 	.word	0x00030240

000d52e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <network_off+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	699b      	ldr	r3, [r3, #24]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030240 	.word	0x00030240

000d52f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <network_listen+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	69db      	ldr	r3, [r3, #28]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030240 	.word	0x00030240

000d5308 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <network_listening+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6a1b      	ldr	r3, [r3, #32]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030240 	.word	0x00030240

000d5318 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <network_set_listen_timeout+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030240 	.word	0x00030240

000d5328 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <network_get_listen_timeout+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030240 	.word	0x00030240

000d5338 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <spark_set_random_seed_from_cloud_handler+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030244 	.word	0x00030244

000d5348 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <malloc+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	681b      	ldr	r3, [r3, #0]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	0003021c 	.word	0x0003021c

000d5358 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <free+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	685b      	ldr	r3, [r3, #4]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	0003021c 	.word	0x0003021c

000d5368 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <sprintf+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	68db      	ldr	r3, [r3, #12]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003021c 	.word	0x0003021c

000d5378 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <vsnprintf+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003021c 	.word	0x0003021c

000d5388 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5388:	2200      	movs	r2, #0
   d538a:	4611      	mov	r1, r2
   d538c:	6840      	ldr	r0, [r0, #4]
   d538e:	f7ff bfbb 	b.w	d5308 <network_listening>

000d5392 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5392:	2200      	movs	r2, #0
   d5394:	4611      	mov	r1, r2
   d5396:	6840      	ldr	r0, [r0, #4]
   d5398:	f7ff bfc6 	b.w	d5328 <network_get_listen_timeout>

000d539c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d539c:	2200      	movs	r2, #0
   d539e:	6840      	ldr	r0, [r0, #4]
   d53a0:	f7ff bfba 	b.w	d5318 <network_set_listen_timeout>

000d53a4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53a4:	2200      	movs	r2, #0
   d53a6:	f081 0101 	eor.w	r1, r1, #1
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	f7ff bfa4 	b.w	d52f8 <network_listen>

000d53b0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d53b0:	2300      	movs	r3, #0
   d53b2:	461a      	mov	r2, r3
   d53b4:	4619      	mov	r1, r3
   d53b6:	6840      	ldr	r0, [r0, #4]
   d53b8:	f7ff bf96 	b.w	d52e8 <network_off>

000d53bc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d53bc:	2300      	movs	r3, #0
   d53be:	461a      	mov	r2, r3
   d53c0:	4619      	mov	r1, r3
   d53c2:	6840      	ldr	r0, [r0, #4]
   d53c4:	f7ff bf88 	b.w	d52d8 <network_on>

000d53c8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d53c8:	2200      	movs	r2, #0
   d53ca:	4611      	mov	r1, r2
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	f7ff bf7b 	b.w	d52c8 <network_ready>

000d53d2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53d2:	2200      	movs	r2, #0
   d53d4:	4611      	mov	r1, r2
   d53d6:	6840      	ldr	r0, [r0, #4]
   d53d8:	f7ff bf66 	b.w	d52a8 <network_connecting>

000d53dc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53dc:	2200      	movs	r2, #0
   d53de:	2102      	movs	r1, #2
   d53e0:	6840      	ldr	r0, [r0, #4]
   d53e2:	f7ff bf69 	b.w	d52b8 <network_disconnect>

000d53e6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53e6:	2300      	movs	r3, #0
   d53e8:	461a      	mov	r2, r3
   d53ea:	6840      	ldr	r0, [r0, #4]
   d53ec:	f7ff bf54 	b.w	d5298 <network_connect>

000d53f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d53f0:	4b02      	ldr	r3, [pc, #8]	; (d53fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d53f2:	2203      	movs	r2, #3
   d53f4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d53f6:	4a02      	ldr	r2, [pc, #8]	; (d5400 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d53f8:	601a      	str	r2, [r3, #0]
   d53fa:	4770      	bx	lr
   d53fc:	2003e3d0 	.word	0x2003e3d0
   d5400:	000d6688 	.word	0x000d6688

000d5404 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5404:	4770      	bx	lr

000d5406 <_ZN8SPIClassD0Ev>:
   d5406:	b510      	push	{r4, lr}
   d5408:	2110      	movs	r1, #16
   d540a:	4604      	mov	r4, r0
   d540c:	f000 fdd3 	bl	d5fb6 <_ZdlPvj>
   d5410:	4620      	mov	r0, r4
   d5412:	bd10      	pop	{r4, pc}

000d5414 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5414:	b570      	push	{r4, r5, r6, lr}
   d5416:	4b08      	ldr	r3, [pc, #32]	; (d5438 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5418:	6003      	str	r3, [r0, #0]
   d541a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d541c:	2500      	movs	r5, #0
   d541e:	460e      	mov	r6, r1
   d5420:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5424:	f7ff fe04 	bl	d5030 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5428:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d542a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d542c:	f7ff fdc8 	bl	d4fc0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5430:	60a5      	str	r5, [r4, #8]
}
   d5432:	4620      	mov	r0, r4
   d5434:	bd70      	pop	{r4, r5, r6, pc}
   d5436:	bf00      	nop
   d5438:	000d66bc 	.word	0x000d66bc

000d543c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d543c:	7900      	ldrb	r0, [r0, #4]
   d543e:	f7ff bdc7 	b.w	d4fd0 <HAL_SPI_Is_Enabled>
	...

000d5444 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5444:	4b04      	ldr	r3, [pc, #16]	; (d5458 <_GLOBAL__sub_I_System+0x14>)
   d5446:	2000      	movs	r0, #0
   d5448:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d544c:	7018      	strb	r0, [r3, #0]
   d544e:	8058      	strh	r0, [r3, #2]
   d5450:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5452:	f7ff befd 	b.w	d5250 <set_system_mode>
   d5456:	bf00      	nop
   d5458:	2003e3d8 	.word	0x2003e3d8

000d545c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d545c:	4802      	ldr	r0, [pc, #8]	; (d5468 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d545e:	2300      	movs	r3, #0
   d5460:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5462:	f7ff bded 	b.w	d5040 <os_mutex_recursive_create>
   d5466:	bf00      	nop
   d5468:	2003e3e0 	.word	0x2003e3e0

000d546c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546e:	4606      	mov	r6, r0
   d5470:	460d      	mov	r5, r1
   d5472:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5474:	2400      	movs	r4, #0
  while (size--) {
   d5476:	42bd      	cmp	r5, r7
   d5478:	d00c      	beq.n	d5494 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d547a:	6833      	ldr	r3, [r6, #0]
   d547c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5480:	689b      	ldr	r3, [r3, #8]
   d5482:	4630      	mov	r0, r6
   d5484:	4798      	blx	r3
     if (chunk>=0)
   d5486:	2800      	cmp	r0, #0
   d5488:	db01      	blt.n	d548e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d548a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d548c:	e7f3      	b.n	d5476 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d548e:	2c00      	cmp	r4, #0
   d5490:	bf08      	it	eq
   d5492:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5494:	4620      	mov	r0, r4
   d5496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5498 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5498:	b570      	push	{r4, r5, r6, lr}
   d549a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d549c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d549e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d54a0:	b149      	cbz	r1, d54b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d54a2:	f000 ff1d 	bl	d62e0 <strlen>
   d54a6:	682b      	ldr	r3, [r5, #0]
   d54a8:	4602      	mov	r2, r0
   d54aa:	4621      	mov	r1, r4
   d54ac:	4628      	mov	r0, r5
   d54ae:	68db      	ldr	r3, [r3, #12]
    }
   d54b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54b4:	4718      	bx	r3
    }
   d54b6:	bd70      	pop	{r4, r5, r6, pc}

000d54b8 <_ZN5Print5printEPKc>:
   d54b8:	b508      	push	{r3, lr}
   d54ba:	f7ff ffed 	bl	d5498 <_ZN5Print5writeEPKc>
   d54be:	bd08      	pop	{r3, pc}

000d54c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d54c0:	6803      	ldr	r3, [r0, #0]
   d54c2:	689b      	ldr	r3, [r3, #8]
   d54c4:	4718      	bx	r3

000d54c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d54c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d54c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d54ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d54cc:	f7ff fff8 	bl	d54c0 <_ZN5Print5printEc>
  n += print('\n');
   d54d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d54d2:	4604      	mov	r4, r0
  n += print('\n');
   d54d4:	4628      	mov	r0, r5
   d54d6:	f7ff fff3 	bl	d54c0 <_ZN5Print5printEc>
  return n;
}
   d54da:	4420      	add	r0, r4
   d54dc:	bd38      	pop	{r3, r4, r5, pc}

000d54de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d54de:	b538      	push	{r3, r4, r5, lr}
   d54e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54e2:	f7ff ffd9 	bl	d5498 <_ZN5Print5writeEPKc>
   d54e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d54e8:	4628      	mov	r0, r5
   d54ea:	f7ff ffec 	bl	d54c6 <_ZN5Print7printlnEv>
  return n;
}
   d54ee:	4420      	add	r0, r4
   d54f0:	bd38      	pop	{r3, r4, r5, pc}

000d54f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d54f2:	b530      	push	{r4, r5, lr}
   d54f4:	b08b      	sub	sp, #44	; 0x2c
   d54f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d54f8:	2100      	movs	r1, #0
   d54fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d54fe:	2a01      	cmp	r2, #1
   d5500:	bf98      	it	ls
   d5502:	220a      	movls	r2, #10
   d5504:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5508:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d550c:	fb05 3312 	mls	r3, r5, r2, r3
   d5510:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5514:	2b09      	cmp	r3, #9
   d5516:	bf94      	ite	ls
   d5518:	3330      	addls	r3, #48	; 0x30
   d551a:	3337      	addhi	r3, #55	; 0x37
   d551c:	b2db      	uxtb	r3, r3
   d551e:	4621      	mov	r1, r4
   d5520:	f804 3901 	strb.w	r3, [r4], #-1
   d5524:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5526:	2d00      	cmp	r5, #0
   d5528:	d1ee      	bne.n	d5508 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d552a:	f7ff ffb5 	bl	d5498 <_ZN5Print5writeEPKc>
}
   d552e:	b00b      	add	sp, #44	; 0x2c
   d5530:	bd30      	pop	{r4, r5, pc}

000d5532 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5532:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5534:	b92a      	cbnz	r2, d5542 <_ZN5Print5printEmi+0x10>
   d5536:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5538:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d553c:	689b      	ldr	r3, [r3, #8]
   d553e:	b2c9      	uxtb	r1, r1
   d5540:	4718      	bx	r3
  else return printNumber(n, base);
   d5542:	b2d2      	uxtb	r2, r2
}
   d5544:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5548:	f7ff bfd3 	b.w	d54f2 <_ZN5Print11printNumberEmh>

000d554c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d554c:	f7ff bff1 	b.w	d5532 <_ZN5Print5printEmi>

000d5550 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d5550:	b538      	push	{r3, r4, r5, lr}
   d5552:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5554:	f7ff ffed 	bl	d5532 <_ZN5Print5printEmi>
   d5558:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d555a:	4628      	mov	r0, r5
   d555c:	f7ff ffb3 	bl	d54c6 <_ZN5Print7printlnEv>
  return n;
}
   d5560:	4420      	add	r0, r4
   d5562:	bd38      	pop	{r3, r4, r5, pc}

000d5564 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5568:	4607      	mov	r7, r0
   d556a:	460e      	mov	r6, r1
  if (base == 0) {
   d556c:	4615      	mov	r5, r2
   d556e:	b92a      	cbnz	r2, d557c <_ZN5Print5printEli+0x18>
    return write(n);
   d5570:	6803      	ldr	r3, [r0, #0]
   d5572:	b2c9      	uxtb	r1, r1
   d5574:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d557a:	4718      	bx	r3
  } else if (base == 10) {
   d557c:	2a0a      	cmp	r2, #10
   d557e:	d102      	bne.n	d5586 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5580:	2900      	cmp	r1, #0
   d5582:	da01      	bge.n	d5588 <_ZN5Print5printEli+0x24>
   d5584:	e004      	b.n	d5590 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5586:	b2d2      	uxtb	r2, r2
  }
}
   d5588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d558c:	f7ff bfb1 	b.w	d54f2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5590:	212d      	movs	r1, #45	; 0x2d
   d5592:	f7ff ff95 	bl	d54c0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5596:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5598:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d559a:	4271      	negs	r1, r6
   d559c:	4638      	mov	r0, r7
   d559e:	f7ff ffa8 	bl	d54f2 <_ZN5Print11printNumberEmh>
   d55a2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d55a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d55a8 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d55a8:	b538      	push	{r3, r4, r5, lr}
   d55aa:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d55ac:	f7ff ffda 	bl	d5564 <_ZN5Print5printEli>
   d55b0:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d55b2:	4628      	mov	r0, r5
   d55b4:	f7ff ff87 	bl	d54c6 <_ZN5Print7printlnEv>
  return n;
}
   d55b8:	4420      	add	r0, r4
   d55ba:	bd38      	pop	{r3, r4, r5, pc}

000d55bc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55bc:	b40c      	push	{r2, r3}
   d55be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55c2:	b087      	sub	sp, #28
   d55c4:	af00      	add	r7, sp, #0
   d55c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d55ca:	4605      	mov	r5, r0
   d55cc:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d55d0:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55d2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d55d4:	4623      	mov	r3, r4
   d55d6:	464a      	mov	r2, r9
   d55d8:	2114      	movs	r1, #20
   d55da:	1d38      	adds	r0, r7, #4
   d55dc:	f7ff fecc 	bl	d5378 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d55e0:	2813      	cmp	r0, #19
   d55e2:	d805      	bhi.n	d55f0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55e4:	1d39      	adds	r1, r7, #4
   d55e6:	4628      	mov	r0, r5
   d55e8:	f7ff ff56 	bl	d5498 <_ZN5Print5writeEPKc>
   d55ec:	4604      	mov	r4, r0
   d55ee:	e013      	b.n	d5618 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55f0:	f100 0308 	add.w	r3, r0, #8
   d55f4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d55f8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55fa:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d55fe:	1c41      	adds	r1, r0, #1
   d5600:	4623      	mov	r3, r4
   d5602:	464a      	mov	r2, r9
   d5604:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5606:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5608:	f7ff feb6 	bl	d5378 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d560c:	4669      	mov	r1, sp
   d560e:	4628      	mov	r0, r5
   d5610:	f7ff ff42 	bl	d5498 <_ZN5Print5writeEPKc>
   d5614:	4604      	mov	r4, r0
   d5616:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5618:	b11e      	cbz	r6, d5622 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d561a:	4628      	mov	r0, r5
   d561c:	f7ff ff53 	bl	d54c6 <_ZN5Print7printlnEv>
   d5620:	4404      	add	r4, r0
    return n;
}
   d5622:	4620      	mov	r0, r4
   d5624:	371c      	adds	r7, #28
   d5626:	46bd      	mov	sp, r7
   d5628:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d562c:	b002      	add	sp, #8
   d562e:	4770      	bx	lr

000d5630 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5630:	4b01      	ldr	r3, [pc, #4]	; (d5638 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5632:	4a02      	ldr	r2, [pc, #8]	; (d563c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5634:	601a      	str	r2, [r3, #0]
   d5636:	4770      	bx	lr
   d5638:	2003e3e4 	.word	0x2003e3e4
   d563c:	000d6737 	.word	0x000d6737

000d5640 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5640:	4b02      	ldr	r3, [pc, #8]	; (d564c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	4b02      	ldr	r3, [pc, #8]	; (d5650 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5646:	601a      	str	r2, [r3, #0]
   d5648:	4770      	bx	lr
   d564a:	bf00      	nop
   d564c:	2003e350 	.word	0x2003e350
   d5650:	2003e3e8 	.word	0x2003e3e8

000d5654 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5654:	2100      	movs	r1, #0
   d5656:	f7ff be03 	b.w	d5260 <system_delay_ms>

000d565a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d565a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d565c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d565e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5660:	b113      	cbz	r3, d5668 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5662:	2203      	movs	r2, #3
   d5664:	4601      	mov	r1, r0
   d5666:	4798      	blx	r3
    }
   d5668:	4620      	mov	r0, r4
   d566a:	bd10      	pop	{r4, pc}

000d566c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d566c:	b510      	push	{r4, lr}
   d566e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5670:	f7ff fff3 	bl	d565a <_ZNSt14_Function_baseD1Ev>
   d5674:	4620      	mov	r0, r4
   d5676:	bd10      	pop	{r4, pc}

000d5678 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5678:	b510      	push	{r4, lr}
   d567a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d567c:	f7ff fdd8 	bl	d5230 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d5680:	4284      	cmp	r4, r0
   d5682:	d008      	beq.n	d5696 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5684:	b11c      	cbz	r4, d568e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d568a:	f7ff bdb9 	b.w	d5200 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d5692:	f7ff bdbd 	b.w	d5210 <LED_Signaling_Stop>
   d5696:	bd10      	pop	{r4, pc}

000d5698 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5698:	b570      	push	{r4, r5, r6, lr}
   d569a:	4605      	mov	r5, r0
   d569c:	460e      	mov	r6, r1
   d569e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d56a0:	f7ff fdc6 	bl	d5230 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d56a4:	b150      	cbz	r0, d56bc <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d56a6:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d56aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d56ae:	f7ff fd9f 	bl	d51f0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d56b2:	20e7      	movs	r0, #231	; 0xe7
}
   d56b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d56b8:	f7ff bdc2 	b.w	d5240 <LED_On>
   d56bc:	bd70      	pop	{r4, r5, r6, pc}

000d56be <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d56be:	b510      	push	{r4, lr}
   d56c0:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d56c2:	f7ff fdad 	bl	d5220 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d56c6:	f7ff fdb3 	bl	d5230 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d56ca:	b128      	cbz	r0, d56d8 <_ZN8RGBClass10brightnessEhb+0x1a>
   d56cc:	b124      	cbz	r4, d56d8 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d56ce:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d56d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d56d4:	f7ff bdb4 	b.w	d5240 <LED_On>
   d56d8:	bd10      	pop	{r4, pc}
	...

000d56dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56dc:	4803      	ldr	r0, [pc, #12]	; (d56ec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d56de:	4a04      	ldr	r2, [pc, #16]	; (d56f0 <_GLOBAL__sub_I_RGB+0x14>)
   d56e0:	4904      	ldr	r1, [pc, #16]	; (d56f4 <_GLOBAL__sub_I_RGB+0x18>)
   d56e2:	2300      	movs	r3, #0
   d56e4:	6083      	str	r3, [r0, #8]
   d56e6:	f000 bc61 	b.w	d5fac <__aeabi_atexit>
   d56ea:	bf00      	nop
   d56ec:	2003e3ec 	.word	0x2003e3ec
   d56f0:	2003e3b8 	.word	0x2003e3b8
   d56f4:	000d566d 	.word	0x000d566d

000d56f8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d56f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56fa:	4b0f      	ldr	r3, [pc, #60]	; (d5738 <serialEventRun+0x40>)
   d56fc:	b133      	cbz	r3, d570c <serialEventRun+0x14>
   d56fe:	f000 f93d 	bl	d597c <_Z16_fetch_usbserialv>
   d5702:	6803      	ldr	r3, [r0, #0]
   d5704:	691b      	ldr	r3, [r3, #16]
   d5706:	4798      	blx	r3
   d5708:	2800      	cmp	r0, #0
   d570a:	dc0d      	bgt.n	d5728 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d570c:	4b0b      	ldr	r3, [pc, #44]	; (d573c <serialEventRun+0x44>)
   d570e:	b133      	cbz	r3, d571e <serialEventRun+0x26>
   d5710:	f000 f9ea 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d5714:	6803      	ldr	r3, [r0, #0]
   d5716:	691b      	ldr	r3, [r3, #16]
   d5718:	4798      	blx	r3
   d571a:	2800      	cmp	r0, #0
   d571c:	dc07      	bgt.n	d572e <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d571e:	4b08      	ldr	r3, [pc, #32]	; (d5740 <serialEventRun+0x48>)
   d5720:	b143      	cbz	r3, d5734 <serialEventRun+0x3c>
   d5722:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5726:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5728:	f3af 8000 	nop.w
   d572c:	e7ee      	b.n	d570c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d572e:	f3af 8000 	nop.w
   d5732:	e7f4      	b.n	d571e <serialEventRun+0x26>
   d5734:	bd08      	pop	{r3, pc}
   d5736:	bf00      	nop
	...

000d5744 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5744:	b508      	push	{r3, lr}
	serialEventRun();
   d5746:	f7ff ffd7 	bl	d56f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d574a:	f7ff fc51 	bl	d4ff0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d574e:	4b01      	ldr	r3, [pc, #4]	; (d5754 <_post_loop+0x10>)
   d5750:	6018      	str	r0, [r3, #0]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	2003e734 	.word	0x2003e734

000d5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5758:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d575a:	2300      	movs	r3, #0
   d575c:	9300      	str	r3, [sp, #0]
   d575e:	461a      	mov	r2, r3
   d5760:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5764:	f7ff fd8e 	bl	d5284 <system_ctrl_set_result>
}
   d5768:	b003      	add	sp, #12
   d576a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5770 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5770:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5772:	8843      	ldrh	r3, [r0, #2]
   d5774:	2b0a      	cmp	r3, #10
   d5776:	d008      	beq.n	d578a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5778:	2b50      	cmp	r3, #80	; 0x50
   d577a:	d109      	bne.n	d5790 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d577c:	4b09      	ldr	r3, [pc, #36]	; (d57a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d577e:	681b      	ldr	r3, [r3, #0]
   d5780:	b13b      	cbz	r3, d5792 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5782:	b003      	add	sp, #12
   d5784:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5788:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d578a:	f7ff ffe5 	bl	d5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d578e:	e006      	b.n	d579e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5790:	2300      	movs	r3, #0
   d5792:	9300      	str	r3, [sp, #0]
   d5794:	461a      	mov	r2, r3
   d5796:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d579a:	f7ff fd73 	bl	d5284 <system_ctrl_set_result>
        break;
    }
}
   d579e:	b003      	add	sp, #12
   d57a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d57a4:	2003e3fc 	.word	0x2003e3fc

000d57a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d57a8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57aa:	f7ff fc19 	bl	d4fe0 <HAL_RNG_GetRandomNumber>
   d57ae:	4604      	mov	r4, r0
    srand(seed);
   d57b0:	f000 fd6e 	bl	d6290 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57b4:	4b07      	ldr	r3, [pc, #28]	; (d57d4 <module_user_init_hook+0x2c>)
   d57b6:	b113      	cbz	r3, d57be <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d57b8:	4620      	mov	r0, r4
   d57ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57be:	2100      	movs	r1, #0
   d57c0:	4804      	ldr	r0, [pc, #16]	; (d57d4 <module_user_init_hook+0x2c>)
   d57c2:	f7ff fdb9 	bl	d5338 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57c6:	2100      	movs	r1, #0
   d57c8:	4803      	ldr	r0, [pc, #12]	; (d57d8 <module_user_init_hook+0x30>)
}
   d57ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57ce:	f7ff bd4f 	b.w	d5270 <system_ctrl_set_app_request_handler>
   d57d2:	bf00      	nop
   d57d4:	00000000 	.word	0x00000000
   d57d8:	000d5771 	.word	0x000d5771

000d57dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d57dc:	4770      	bx	lr

000d57de <_ZN9IPAddressD0Ev>:
   d57de:	b510      	push	{r4, lr}
   d57e0:	2118      	movs	r1, #24
   d57e2:	4604      	mov	r4, r0
   d57e4:	f000 fbe7 	bl	d5fb6 <_ZdlPvj>
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57ee:	7d03      	ldrb	r3, [r0, #20]
   d57f0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57f2:	b08d      	sub	sp, #52	; 0x34
   d57f4:	460e      	mov	r6, r1
   d57f6:	f100 0704 	add.w	r7, r0, #4
   d57fa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57fe:	d002      	beq.n	d5806 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5800:	f100 0508 	add.w	r5, r0, #8
   d5804:	e018      	b.n	d5838 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5806:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5808:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d580a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d580e:	232f      	movs	r3, #47	; 0x2f
   d5810:	462a      	mov	r2, r5
   d5812:	200a      	movs	r0, #10
   d5814:	f7ff fc1c 	bl	d5050 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5818:	4628      	mov	r0, r5
   d581a:	f000 fd61 	bl	d62e0 <strlen>
   d581e:	6833      	ldr	r3, [r6, #0]
   d5820:	4602      	mov	r2, r0
   d5822:	68db      	ldr	r3, [r3, #12]
   d5824:	4629      	mov	r1, r5
   d5826:	4630      	mov	r0, r6
   d5828:	4798      	blx	r3
   d582a:	e00f      	b.n	d584c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d582c:	b124      	cbz	r4, d5838 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d582e:	212e      	movs	r1, #46	; 0x2e
   d5830:	4630      	mov	r0, r6
   d5832:	f7ff fe45 	bl	d54c0 <_ZN5Print5printEc>
   d5836:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5838:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d583c:	220a      	movs	r2, #10
   d583e:	4630      	mov	r0, r6
   d5840:	f7ff fe84 	bl	d554c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5844:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5846:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5848:	d1f0      	bne.n	d582c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d584a:	4620      	mov	r0, r4
    }
    return n;
}
   d584c:	b00d      	add	sp, #52	; 0x34
   d584e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5850 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5850:	b510      	push	{r4, lr}
   d5852:	4b05      	ldr	r3, [pc, #20]	; (d5868 <_ZN9IPAddressC1Ev+0x18>)
   d5854:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5856:	2211      	movs	r2, #17
   d5858:	f840 3b04 	str.w	r3, [r0], #4
   d585c:	2100      	movs	r1, #0
   d585e:	f000 fd0e 	bl	d627e <memset>
{
    clear();
}
   d5862:	4620      	mov	r0, r4
   d5864:	bd10      	pop	{r4, pc}
   d5866:	bf00      	nop
   d5868:	000d67d4 	.word	0x000d67d4

000d586c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d586c:	4603      	mov	r3, r0
   d586e:	4a07      	ldr	r2, [pc, #28]	; (d588c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5870:	b510      	push	{r4, lr}
   d5872:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5876:	f101 0210 	add.w	r2, r1, #16
   d587a:	f851 4b04 	ldr.w	r4, [r1], #4
   d587e:	f843 4b04 	str.w	r4, [r3], #4
   d5882:	4291      	cmp	r1, r2
   d5884:	d1f9      	bne.n	d587a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5886:	780a      	ldrb	r2, [r1, #0]
   d5888:	701a      	strb	r2, [r3, #0]
}
   d588a:	bd10      	pop	{r4, pc}
   d588c:	000d67d4 	.word	0x000d67d4

000d5890 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5890:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5892:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5896:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d589a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d589e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d58a2:	2304      	movs	r3, #4
   d58a4:	6041      	str	r1, [r0, #4]
   d58a6:	7503      	strb	r3, [r0, #20]
   d58a8:	bd10      	pop	{r4, pc}

000d58aa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d58aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d58ac:	780d      	ldrb	r5, [r1, #0]
   d58ae:	788b      	ldrb	r3, [r1, #2]
   d58b0:	784a      	ldrb	r2, [r1, #1]
   d58b2:	78c9      	ldrb	r1, [r1, #3]
   d58b4:	9100      	str	r1, [sp, #0]
   d58b6:	4629      	mov	r1, r5
   d58b8:	f7ff ffea 	bl	d5890 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d58bc:	b003      	add	sp, #12
   d58be:	bd30      	pop	{r4, r5, pc}

000d58c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58c0:	7441      	strb	r1, [r0, #17]
   d58c2:	4770      	bx	lr

000d58c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d58c4:	4770      	bx	lr

000d58c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d58c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d58c8:	2100      	movs	r1, #0
   d58ca:	7c00      	ldrb	r0, [r0, #16]
   d58cc:	f7ff fc78 	bl	d51c0 <HAL_USB_USART_Receive_Data>
}
   d58d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58d4:	bf28      	it	cs
   d58d6:	f04f 30ff 	movcs.w	r0, #4294967295
   d58da:	bd08      	pop	{r3, pc}

000d58dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d58dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d58de:	2101      	movs	r1, #1
   d58e0:	7c00      	ldrb	r0, [r0, #16]
   d58e2:	f7ff fc6d 	bl	d51c0 <HAL_USB_USART_Receive_Data>
}
   d58e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58ea:	bf28      	it	cs
   d58ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d58f0:	bd08      	pop	{r3, pc}

000d58f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d58f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d58f4:	7c00      	ldrb	r0, [r0, #16]
   d58f6:	f7ff fc5b 	bl	d51b0 <HAL_USB_USART_Available_Data_For_Write>
}
   d58fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58fe:	bd08      	pop	{r3, pc}

000d5900 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5900:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5902:	7c00      	ldrb	r0, [r0, #16]
   d5904:	f7ff fc4c 	bl	d51a0 <HAL_USB_USART_Available_Data>
}
   d5908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d590c:	bd08      	pop	{r3, pc}

000d590e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d590e:	7c00      	ldrb	r0, [r0, #16]
   d5910:	f7ff bc66 	b.w	d51e0 <HAL_USB_USART_Flush_Data>

000d5914 <_ZN9USBSerialD0Ev>:
   d5914:	b510      	push	{r4, lr}
   d5916:	2114      	movs	r1, #20
   d5918:	4604      	mov	r4, r0
   d591a:	f000 fb4c 	bl	d5fb6 <_ZdlPvj>
   d591e:	4620      	mov	r0, r4
   d5920:	bd10      	pop	{r4, pc}

000d5922 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5922:	b538      	push	{r3, r4, r5, lr}
   d5924:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5926:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5928:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d592a:	f7ff fc41 	bl	d51b0 <HAL_USB_USART_Available_Data_For_Write>
   d592e:	2800      	cmp	r0, #0
   d5930:	dc01      	bgt.n	d5936 <_ZN9USBSerial5writeEh+0x14>
   d5932:	7c60      	ldrb	r0, [r4, #17]
   d5934:	b128      	cbz	r0, d5942 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5936:	4629      	mov	r1, r5
   d5938:	7c20      	ldrb	r0, [r4, #16]
   d593a:	f7ff fc49 	bl	d51d0 <HAL_USB_USART_Send_Data>
   d593e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5942:	bd38      	pop	{r3, r4, r5, pc}

000d5944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5944:	b510      	push	{r4, lr}
   d5946:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5948:	2300      	movs	r3, #0
   d594a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d594c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5950:	60a3      	str	r3, [r4, #8]
   d5952:	4b05      	ldr	r3, [pc, #20]	; (d5968 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5954:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5956:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5958:	4608      	mov	r0, r1
{
  _serial = serial;
   d595a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d595c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d595e:	4611      	mov	r1, r2
   d5960:	f7ff fc16 	bl	d5190 <HAL_USB_USART_Init>
}
   d5964:	4620      	mov	r0, r4
   d5966:	bd10      	pop	{r4, pc}
   d5968:	000d67e8 	.word	0x000d67e8

000d596c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d596c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d596e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5970:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5972:	2100      	movs	r1, #0
   d5974:	f000 fc83 	bl	d627e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5978:	4620      	mov	r0, r4
   d597a:	bd10      	pop	{r4, pc}

000d597c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d597c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d597e:	4d0e      	ldr	r5, [pc, #56]	; (d59b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5980:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5982:	a801      	add	r0, sp, #4
   d5984:	f7ff fff2 	bl	d596c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5988:	6829      	ldr	r1, [r5, #0]
   d598a:	f011 0401 	ands.w	r4, r1, #1
   d598e:	d110      	bne.n	d59b2 <_Z16_fetch_usbserialv+0x36>
   d5990:	4628      	mov	r0, r5
   d5992:	f7fe fb88 	bl	d40a6 <__cxa_guard_acquire>
   d5996:	b160      	cbz	r0, d59b2 <_Z16_fetch_usbserialv+0x36>
   d5998:	aa01      	add	r2, sp, #4
   d599a:	4621      	mov	r1, r4
   d599c:	4807      	ldr	r0, [pc, #28]	; (d59bc <_Z16_fetch_usbserialv+0x40>)
   d599e:	f7ff ffd1 	bl	d5944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d59a2:	4628      	mov	r0, r5
   d59a4:	f7fe fb84 	bl	d40b0 <__cxa_guard_release>
   d59a8:	4a05      	ldr	r2, [pc, #20]	; (d59c0 <_Z16_fetch_usbserialv+0x44>)
   d59aa:	4906      	ldr	r1, [pc, #24]	; (d59c4 <_Z16_fetch_usbserialv+0x48>)
   d59ac:	4803      	ldr	r0, [pc, #12]	; (d59bc <_Z16_fetch_usbserialv+0x40>)
   d59ae:	f000 fafd 	bl	d5fac <__aeabi_atexit>
	return _usbserial;
}
   d59b2:	4802      	ldr	r0, [pc, #8]	; (d59bc <_Z16_fetch_usbserialv+0x40>)
   d59b4:	b007      	add	sp, #28
   d59b6:	bd30      	pop	{r4, r5, pc}
   d59b8:	2003e400 	.word	0x2003e400
   d59bc:	2003e404 	.word	0x2003e404
   d59c0:	2003e3b8 	.word	0x2003e3b8
   d59c4:	000d58c5 	.word	0x000d58c5

000d59c8 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d59c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d59ca:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d59cc:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d59ce:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d59d0:	460e      	mov	r6, r1
   d59d2:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d59d4:	f000 fa46 	bl	d5e64 <pinAvailable>
   d59d8:	b160      	cbz	r0, d59f4 <tone+0x2c>
   d59da:	2102      	movs	r1, #2
   d59dc:	4628      	mov	r0, r5
   d59de:	f7ff fac7 	bl	d4f70 <HAL_Validate_Pin_Function>
   d59e2:	2802      	cmp	r0, #2
   d59e4:	d106      	bne.n	d59f4 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d59e6:	463a      	mov	r2, r7
   d59e8:	4631      	mov	r1, r6
   d59ea:	4620      	mov	r0, r4
    }
}
   d59ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   d59f0:	f7ff bbbe 	b.w	d5170 <HAL_Tone_Start>
   d59f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59f6 <noTone>:
    }
}

void noTone(uint8_t pin)
{
   d59f6:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d59f8:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
   d59fa:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d59fc:	4628      	mov	r0, r5
   d59fe:	f000 fa31 	bl	d5e64 <pinAvailable>
   d5a02:	b150      	cbz	r0, d5a1a <noTone+0x24>
   d5a04:	2102      	movs	r1, #2
   d5a06:	4628      	mov	r0, r5
   d5a08:	f7ff fab2 	bl	d4f70 <HAL_Validate_Pin_Function>
   d5a0c:	2802      	cmp	r0, #2
   d5a0e:	d104      	bne.n	d5a1a <noTone+0x24>
        HAL_Tone_Stop(pin);
   d5a10:	4620      	mov	r0, r4
    }
}
   d5a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
   d5a16:	f7ff bbb3 	b.w	d5180 <HAL_Tone_Stop>
   d5a1a:	bd38      	pop	{r3, r4, r5, pc}

000d5a1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a1c:	4770      	bx	lr

000d5a1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a1e:	7441      	strb	r1, [r0, #17]
   d5a20:	4770      	bx	lr

000d5a22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a24:	7c00      	ldrb	r0, [r0, #16]
   d5a26:	f7ff fb5b 	bl	d50e0 <HAL_USART_Available_Data_For_Write>
}
   d5a2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a2e:	bd08      	pop	{r3, pc}

000d5a30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5a32:	7c00      	ldrb	r0, [r0, #16]
   d5a34:	f7ff fb2c 	bl	d5090 <HAL_USART_Available_Data>
}
   d5a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a3c:	bd08      	pop	{r3, pc}

000d5a3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5a40:	7c00      	ldrb	r0, [r0, #16]
   d5a42:	f7ff fb35 	bl	d50b0 <HAL_USART_Peek_Data>
}
   d5a46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a4a:	bf28      	it	cs
   d5a4c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a50:	bd08      	pop	{r3, pc}

000d5a52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5a54:	7c00      	ldrb	r0, [r0, #16]
   d5a56:	f7ff fb23 	bl	d50a0 <HAL_USART_Read_Data>
}
   d5a5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a5e:	bf28      	it	cs
   d5a60:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a66:	7c00      	ldrb	r0, [r0, #16]
   d5a68:	f7ff bb2a 	b.w	d50c0 <HAL_USART_Flush_Data>

000d5a6c <_ZN11USARTSerialD0Ev>:
   d5a6c:	b510      	push	{r4, lr}
   d5a6e:	2114      	movs	r1, #20
   d5a70:	4604      	mov	r4, r0
   d5a72:	f000 faa0 	bl	d5fb6 <_ZdlPvj>
   d5a76:	4620      	mov	r0, r4
   d5a78:	bd10      	pop	{r4, pc}

000d5a7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5a7e:	4604      	mov	r4, r0
   d5a80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a82:	b925      	cbnz	r5, d5a8e <_ZN11USARTSerial5writeEh+0x14>
   d5a84:	7c00      	ldrb	r0, [r0, #16]
   d5a86:	f7ff fb2b 	bl	d50e0 <HAL_USART_Available_Data_For_Write>
   d5a8a:	2800      	cmp	r0, #0
   d5a8c:	dd05      	ble.n	d5a9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a8e:	4631      	mov	r1, r6
   d5a90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a96:	f7ff baf3 	b.w	d5080 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a9a:	4628      	mov	r0, r5
   d5a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	4608      	mov	r0, r1
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	2200      	movs	r2, #0
   d5aaa:	6062      	str	r2, [r4, #4]
   d5aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ab0:	60a2      	str	r2, [r4, #8]
   d5ab2:	4a05      	ldr	r2, [pc, #20]	; (d5ac8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5ab4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5ab6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ab8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5aba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5abc:	461a      	mov	r2, r3
   d5abe:	f7ff facf 	bl	d5060 <HAL_USART_Init>
}
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	bd10      	pop	{r4, pc}
   d5ac6:	bf00      	nop
   d5ac8:	000d6818 	.word	0x000d6818

000d5acc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5acc:	2300      	movs	r3, #0
   d5ace:	7c00      	ldrb	r0, [r0, #16]
   d5ad0:	f7ff bb0e 	b.w	d50f0 <HAL_USART_BeginConfig>

000d5ad4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5ad4:	2200      	movs	r2, #0
   d5ad6:	f7ff bff9 	b.w	d5acc <_ZN11USARTSerial5beginEmm>

000d5ada <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d5ada:	7c00      	ldrb	r0, [r0, #16]
   d5adc:	f7ff bac8 	b.w	d5070 <HAL_USART_End>

000d5ae0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5ae0:	7c00      	ldrb	r0, [r0, #16]
   d5ae2:	f7ff baf5 	b.w	d50d0 <HAL_USART_Is_Enabled>
	...

000d5ae8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ae8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5aea:	4d0c      	ldr	r5, [pc, #48]	; (d5b1c <_Z22__fetch_global_Serial1v+0x34>)
   d5aec:	6829      	ldr	r1, [r5, #0]
   d5aee:	f011 0401 	ands.w	r4, r1, #1
   d5af2:	d111      	bne.n	d5b18 <_Z22__fetch_global_Serial1v+0x30>
   d5af4:	4628      	mov	r0, r5
   d5af6:	f7fe fad6 	bl	d40a6 <__cxa_guard_acquire>
   d5afa:	b168      	cbz	r0, d5b18 <_Z22__fetch_global_Serial1v+0x30>
   d5afc:	4a08      	ldr	r2, [pc, #32]	; (d5b20 <_Z22__fetch_global_Serial1v+0x38>)
   d5afe:	4b09      	ldr	r3, [pc, #36]	; (d5b24 <_Z22__fetch_global_Serial1v+0x3c>)
   d5b00:	4809      	ldr	r0, [pc, #36]	; (d5b28 <_Z22__fetch_global_Serial1v+0x40>)
   d5b02:	4621      	mov	r1, r4
   d5b04:	f7ff ffcc 	bl	d5aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b08:	4628      	mov	r0, r5
   d5b0a:	f7fe fad1 	bl	d40b0 <__cxa_guard_release>
   d5b0e:	4a07      	ldr	r2, [pc, #28]	; (d5b2c <_Z22__fetch_global_Serial1v+0x44>)
   d5b10:	4907      	ldr	r1, [pc, #28]	; (d5b30 <_Z22__fetch_global_Serial1v+0x48>)
   d5b12:	4805      	ldr	r0, [pc, #20]	; (d5b28 <_Z22__fetch_global_Serial1v+0x40>)
   d5b14:	f000 fa4a 	bl	d5fac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b18:	4803      	ldr	r0, [pc, #12]	; (d5b28 <_Z22__fetch_global_Serial1v+0x40>)
   d5b1a:	bd38      	pop	{r3, r4, r5, pc}
   d5b1c:	2003e4b0 	.word	0x2003e4b0
   d5b20:	2003e4b4 	.word	0x2003e4b4
   d5b24:	2003e42c 	.word	0x2003e42c
   d5b28:	2003e418 	.word	0x2003e418
   d5b2c:	2003e3b8 	.word	0x2003e3b8
   d5b30:	000d5a1d 	.word	0x000d5a1d

000d5b34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5b34:	4770      	bx	lr

000d5b36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b38:	4606      	mov	r6, r0
   d5b3a:	4615      	mov	r5, r2
   d5b3c:	460c      	mov	r4, r1
   d5b3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b40:	42bc      	cmp	r4, r7
   d5b42:	d006      	beq.n	d5b52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b44:	6833      	ldr	r3, [r6, #0]
   d5b46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b4a:	689b      	ldr	r3, [r3, #8]
   d5b4c:	4630      	mov	r0, r6
   d5b4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b50:	e7f6      	b.n	d5b40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5b52:	4628      	mov	r0, r5
   d5b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5b56:	2200      	movs	r2, #0
   d5b58:	7c00      	ldrb	r0, [r0, #16]
   d5b5a:	f7ff bad1 	b.w	d5100 <HAL_I2C_Write_Data>

000d5b5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5b5e:	2100      	movs	r1, #0
   d5b60:	7c00      	ldrb	r0, [r0, #16]
   d5b62:	f7ff bad5 	b.w	d5110 <HAL_I2C_Available_Data>

000d5b66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5b66:	2100      	movs	r1, #0
   d5b68:	7c00      	ldrb	r0, [r0, #16]
   d5b6a:	f7ff bad9 	b.w	d5120 <HAL_I2C_Read_Data>

000d5b6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5b6e:	2100      	movs	r1, #0
   d5b70:	7c00      	ldrb	r0, [r0, #16]
   d5b72:	f7ff badd 	b.w	d5130 <HAL_I2C_Peek_Data>

000d5b76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b76:	2100      	movs	r1, #0
   d5b78:	7c00      	ldrb	r0, [r0, #16]
   d5b7a:	f7ff bae1 	b.w	d5140 <HAL_I2C_Flush_Data>

000d5b7e <_ZN7TwoWireD0Ev>:
   d5b7e:	b510      	push	{r4, lr}
   d5b80:	2114      	movs	r1, #20
   d5b82:	4604      	mov	r4, r0
   d5b84:	f000 fa17 	bl	d5fb6 <_ZdlPvj>
   d5b88:	4620      	mov	r0, r4
   d5b8a:	bd10      	pop	{r4, pc}

000d5b8c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	4604      	mov	r4, r0
   d5b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b94:	4608      	mov	r0, r1
   d5b96:	60a3      	str	r3, [r4, #8]
   d5b98:	2100      	movs	r1, #0
   d5b9a:	4b04      	ldr	r3, [pc, #16]	; (d5bac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5b9c:	7420      	strb	r0, [r4, #16]
   d5b9e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ba0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5ba2:	f7ff fadd 	bl	d5160 <HAL_I2C_Init>

}
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	bd10      	pop	{r4, pc}
   d5baa:	bf00      	nop
   d5bac:	000d6848 	.word	0x000d6848

000d5bb0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5bb0:	2100      	movs	r1, #0
   d5bb2:	7c00      	ldrb	r0, [r0, #16]
   d5bb4:	f7ff bacc 	b.w	d5150 <HAL_I2C_Is_Enabled>

000d5bb8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bb8:	2200      	movs	r2, #0
   d5bba:	4611      	mov	r1, r2
   d5bbc:	6840      	ldr	r0, [r0, #4]
   d5bbe:	f7ff bba3 	b.w	d5308 <network_listening>

000d5bc2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	4611      	mov	r1, r2
   d5bc6:	6840      	ldr	r0, [r0, #4]
   d5bc8:	f7ff bbae 	b.w	d5328 <network_get_listen_timeout>

000d5bcc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bcc:	2200      	movs	r2, #0
   d5bce:	6840      	ldr	r0, [r0, #4]
   d5bd0:	f7ff bba2 	b.w	d5318 <network_set_listen_timeout>

000d5bd4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bd4:	2200      	movs	r2, #0
   d5bd6:	f081 0101 	eor.w	r1, r1, #1
   d5bda:	6840      	ldr	r0, [r0, #4]
   d5bdc:	f7ff bb8c 	b.w	d52f8 <network_listen>

000d5be0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5be0:	2300      	movs	r3, #0
   d5be2:	461a      	mov	r2, r3
   d5be4:	2101      	movs	r1, #1
   d5be6:	6840      	ldr	r0, [r0, #4]
   d5be8:	f7ff bb7e 	b.w	d52e8 <network_off>

000d5bec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5bec:	2300      	movs	r3, #0
   d5bee:	461a      	mov	r2, r3
   d5bf0:	4619      	mov	r1, r3
   d5bf2:	6840      	ldr	r0, [r0, #4]
   d5bf4:	f7ff bb70 	b.w	d52d8 <network_on>

000d5bf8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	4611      	mov	r1, r2
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f7ff bb63 	b.w	d52c8 <network_ready>

000d5c02 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c02:	2200      	movs	r2, #0
   d5c04:	4611      	mov	r1, r2
   d5c06:	6840      	ldr	r0, [r0, #4]
   d5c08:	f7ff bb4e 	b.w	d52a8 <network_connecting>

000d5c0c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c0c:	2200      	movs	r2, #0
   d5c0e:	2102      	movs	r1, #2
   d5c10:	6840      	ldr	r0, [r0, #4]
   d5c12:	f7ff bb51 	b.w	d52b8 <network_disconnect>

000d5c16 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c16:	2300      	movs	r3, #0
   d5c18:	461a      	mov	r2, r3
   d5c1a:	6840      	ldr	r0, [r0, #4]
   d5c1c:	f7ff bb3c 	b.w	d5298 <network_connect>

000d5c20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5c20:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c22:	4605      	mov	r5, r0
   d5c24:	b188      	cbz	r0, d5c4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c26:	6804      	ldr	r4, [r0, #0]
   d5c28:	b14c      	cbz	r4, d5c3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5c2a:	68a3      	ldr	r3, [r4, #8]
   d5c2c:	b11b      	cbz	r3, d5c36 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c2e:	2203      	movs	r2, #3
   d5c30:	4621      	mov	r1, r4
   d5c32:	4620      	mov	r0, r4
   d5c34:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c36:	2110      	movs	r1, #16
   d5c38:	4620      	mov	r0, r4
   d5c3a:	f000 f9bc 	bl	d5fb6 <_ZdlPvj>
   d5c3e:	4628      	mov	r0, r5
   d5c40:	2114      	movs	r1, #20
      }
   d5c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c46:	f000 b9b6 	b.w	d5fb6 <_ZdlPvj>
   d5c4a:	bd38      	pop	{r3, r4, r5, pc}

000d5c4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5c4c:	b110      	cbz	r0, d5c54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5c4e:	6803      	ldr	r3, [r0, #0]
   d5c50:	685b      	ldr	r3, [r3, #4]
   d5c52:	4718      	bx	r3
   d5c54:	4770      	bx	lr

000d5c56 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5c56:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5c58:	6803      	ldr	r3, [r0, #0]
   d5c5a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5c5c:	b1bb      	cbz	r3, d5c8e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5c5e:	6858      	ldr	r0, [r3, #4]
   d5c60:	f7ff f9ce 	bl	d5000 <os_thread_is_current>
   d5c64:	b978      	cbnz	r0, d5c86 <_ZN6ThreadD1Ev+0x30>
   d5c66:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5c68:	7c5a      	ldrb	r2, [r3, #17]
   d5c6a:	b912      	cbnz	r2, d5c72 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5c6c:	6858      	ldr	r0, [r3, #4]
   d5c6e:	f7ff f9cf 	bl	d5010 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5c72:	6823      	ldr	r3, [r4, #0]
   d5c74:	6858      	ldr	r0, [r3, #4]
   d5c76:	f7ff f9d3 	bl	d5020 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c7a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c7c:	2300      	movs	r3, #0
   d5c7e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5c80:	b128      	cbz	r0, d5c8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5c82:	f7ff ffcd 	bl	d5c20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c86:	6820      	ldr	r0, [r4, #0]
   d5c88:	b108      	cbz	r0, d5c8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5c8a:	f7ff ffc9 	bl	d5c20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5c8e:	4620      	mov	r0, r4
   d5c90:	bd10      	pop	{r4, pc}
	...

000d5c94 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5c94:	b538      	push	{r3, r4, r5, lr}
   d5c96:	4b0c      	ldr	r3, [pc, #48]	; (d5cc8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5c98:	6003      	str	r3, [r0, #0]
   d5c9a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c9c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5ca0:	b108      	cbz	r0, d5ca6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5ca2:	f7fe f9fe 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ca6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5caa:	b135      	cbz	r5, d5cba <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cac:	4628      	mov	r0, r5
   d5cae:	f7ff ffd2 	bl	d5c56 <_ZN6ThreadD1Ev>
   d5cb2:	2104      	movs	r1, #4
   d5cb4:	4628      	mov	r0, r5
   d5cb6:	f000 f97e 	bl	d5fb6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cba:	68a0      	ldr	r0, [r4, #8]
   d5cbc:	b108      	cbz	r0, d5cc2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5cbe:	f7ff ffc5 	bl	d5c4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	bd38      	pop	{r3, r4, r5, pc}
   d5cc6:	bf00      	nop
   d5cc8:	000d6870 	.word	0x000d6870

000d5ccc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5ccc:	b538      	push	{r3, r4, r5, lr}
   d5cce:	4c0e      	ldr	r4, [pc, #56]	; (d5d08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5cd0:	4b0e      	ldr	r3, [pc, #56]	; (d5d0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5cd2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5cd4:	2500      	movs	r5, #0
   d5cd6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5cd8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5cdc:	6063      	str	r3, [r4, #4]
   d5cde:	60a5      	str	r5, [r4, #8]
   d5ce0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ce4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ce8:	f7ff f9aa 	bl	d5040 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5cec:	4b08      	ldr	r3, [pc, #32]	; (d5d10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5cee:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5cf2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5cf6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	4a06      	ldr	r2, [pc, #24]	; (d5d14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5cfc:	4906      	ldr	r1, [pc, #24]	; (d5d18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5d02:	f000 b953 	b.w	d5fac <__aeabi_atexit>
   d5d06:	bf00      	nop
   d5d08:	2003e538 	.word	0x2003e538
   d5d0c:	000d68a4 	.word	0x000d68a4
   d5d10:	000d6870 	.word	0x000d6870
   d5d14:	2003e3b8 	.word	0x2003e3b8
   d5d18:	000d5c95 	.word	0x000d5c95

000d5d1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d1c:	2300      	movs	r3, #0
   d5d1e:	461a      	mov	r2, r3
   d5d20:	6840      	ldr	r0, [r0, #4]
   d5d22:	f7ff bab9 	b.w	d5298 <network_connect>

000d5d26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d26:	2200      	movs	r2, #0
   d5d28:	2102      	movs	r1, #2
   d5d2a:	6840      	ldr	r0, [r0, #4]
   d5d2c:	f7ff bac4 	b.w	d52b8 <network_disconnect>

000d5d30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d30:	2200      	movs	r2, #0
   d5d32:	4611      	mov	r1, r2
   d5d34:	6840      	ldr	r0, [r0, #4]
   d5d36:	f7ff bab7 	b.w	d52a8 <network_connecting>

000d5d3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d3a:	2200      	movs	r2, #0
   d5d3c:	4611      	mov	r1, r2
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	f7ff bac2 	b.w	d52c8 <network_ready>

000d5d44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d44:	2300      	movs	r3, #0
   d5d46:	461a      	mov	r2, r3
   d5d48:	4619      	mov	r1, r3
   d5d4a:	6840      	ldr	r0, [r0, #4]
   d5d4c:	f7ff bac4 	b.w	d52d8 <network_on>

000d5d50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d50:	2300      	movs	r3, #0
   d5d52:	461a      	mov	r2, r3
   d5d54:	4619      	mov	r1, r3
   d5d56:	6840      	ldr	r0, [r0, #4]
   d5d58:	f7ff bac6 	b.w	d52e8 <network_off>

000d5d5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d5c:	2200      	movs	r2, #0
   d5d5e:	f081 0101 	eor.w	r1, r1, #1
   d5d62:	6840      	ldr	r0, [r0, #4]
   d5d64:	f7ff bac8 	b.w	d52f8 <network_listen>

000d5d68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d68:	2200      	movs	r2, #0
   d5d6a:	6840      	ldr	r0, [r0, #4]
   d5d6c:	f7ff bad4 	b.w	d5318 <network_set_listen_timeout>

000d5d70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d70:	2200      	movs	r2, #0
   d5d72:	4611      	mov	r1, r2
   d5d74:	6840      	ldr	r0, [r0, #4]
   d5d76:	f7ff bad7 	b.w	d5328 <network_get_listen_timeout>

000d5d7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	4611      	mov	r1, r2
   d5d7e:	6840      	ldr	r0, [r0, #4]
   d5d80:	f7ff bac2 	b.w	d5308 <network_listening>

000d5d84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d88:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d8a:	b095      	sub	sp, #84	; 0x54
   d5d8c:	4616      	mov	r6, r2
   d5d8e:	460d      	mov	r5, r1
   d5d90:	4607      	mov	r7, r0
    IPAddress addr;
   d5d92:	f7ff fd5d 	bl	d5850 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5d96:	4621      	mov	r1, r4
   d5d98:	2220      	movs	r2, #32
   d5d9a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d9c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5d9e:	f000 fa6e 	bl	d627e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5da2:	2340      	movs	r3, #64	; 0x40
   d5da4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5da6:	4621      	mov	r1, r4
   d5da8:	466b      	mov	r3, sp
   d5daa:	aa0c      	add	r2, sp, #48	; 0x30
   d5dac:	4630      	mov	r0, r6
   d5dae:	f7ff f8cf 	bl	d4f50 <netdb_getaddrinfo>
    if (!r) {
   d5db2:	4604      	mov	r4, r0
   d5db4:	2800      	cmp	r0, #0
   d5db6:	d144      	bne.n	d5e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5db8:	4602      	mov	r2, r0
   d5dba:	2101      	movs	r1, #1
   d5dbc:	6868      	ldr	r0, [r5, #4]
   d5dbe:	f7ff fa83 	bl	d52c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dc2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5dc4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dc6:	4622      	mov	r2, r4
   d5dc8:	6868      	ldr	r0, [r5, #4]
   d5dca:	f7ff fa7d 	bl	d52c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dce:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dd0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5dd2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dd4:	2e00      	cmp	r6, #0
   d5dd6:	d034      	beq.n	d5e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5dd8:	2900      	cmp	r1, #0
   d5dda:	d132      	bne.n	d5e42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ddc:	6873      	ldr	r3, [r6, #4]
   d5dde:	2b02      	cmp	r3, #2
   d5de0:	d002      	beq.n	d5de8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5de2:	2b0a      	cmp	r3, #10
   d5de4:	d009      	beq.n	d5dfa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5de6:	e02a      	b.n	d5e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5de8:	f1b8 0f00 	cmp.w	r8, #0
   d5dec:	d027      	beq.n	d5e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5dee:	6971      	ldr	r1, [r6, #20]
   d5df0:	4638      	mov	r0, r7
   d5df2:	3104      	adds	r1, #4
   d5df4:	f7ff fd59 	bl	d58aa <_ZN9IPAddressaSEPKh>
   d5df8:	e020      	b.n	d5e3c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5dfa:	f1b9 0f00 	cmp.w	r9, #0
   d5dfe:	d01e      	beq.n	d5e3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e00:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e02:	2211      	movs	r2, #17
   d5e04:	a801      	add	r0, sp, #4
   d5e06:	f000 fa3a 	bl	d627e <memset>
                    a.v = 6;
   d5e0a:	2306      	movs	r3, #6
   d5e0c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e10:	ad01      	add	r5, sp, #4
   d5e12:	f104 0308 	add.w	r3, r4, #8
   d5e16:	3418      	adds	r4, #24
   d5e18:	6818      	ldr	r0, [r3, #0]
   d5e1a:	6859      	ldr	r1, [r3, #4]
   d5e1c:	462a      	mov	r2, r5
   d5e1e:	c203      	stmia	r2!, {r0, r1}
   d5e20:	3308      	adds	r3, #8
   d5e22:	42a3      	cmp	r3, r4
   d5e24:	4615      	mov	r5, r2
   d5e26:	d1f7      	bne.n	d5e18 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5e28:	a901      	add	r1, sp, #4
   d5e2a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e2c:	ad07      	add	r5, sp, #28
   d5e2e:	f7ff fd1d 	bl	d586c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e34:	1d3c      	adds	r4, r7, #4
   d5e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e38:	682b      	ldr	r3, [r5, #0]
   d5e3a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5e3c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e3e:	69f6      	ldr	r6, [r6, #28]
   d5e40:	e7c8      	b.n	d5dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e42:	9800      	ldr	r0, [sp, #0]
   d5e44:	f7ff f87c 	bl	d4f40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e48:	4638      	mov	r0, r7
   d5e4a:	b015      	add	sp, #84	; 0x54
   d5e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e50:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e52:	4a03      	ldr	r2, [pc, #12]	; (d5e60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e54:	601a      	str	r2, [r3, #0]
   d5e56:	2200      	movs	r2, #0
   d5e58:	605a      	str	r2, [r3, #4]
   d5e5a:	4770      	bx	lr
   d5e5c:	2003e70c 	.word	0x2003e70c
   d5e60:	000d68a4 	.word	0x000d68a4

000d5e64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5e64:	b510      	push	{r4, lr}
   d5e66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5e68:	480f      	ldr	r0, [pc, #60]	; (d5ea8 <pinAvailable+0x44>)
   d5e6a:	f7ff fae7 	bl	d543c <_ZN8SPIClass9isEnabledEv>
   d5e6e:	b128      	cbz	r0, d5e7c <pinAvailable+0x18>
   d5e70:	f1a4 030b 	sub.w	r3, r4, #11
   d5e74:	2b02      	cmp	r3, #2
   d5e76:	d801      	bhi.n	d5e7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5e78:	2000      	movs	r0, #0
   d5e7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5e7c:	f000 f876 	bl	d5f6c <_Z19__fetch_global_Wirev>
   d5e80:	f7ff fe96 	bl	d5bb0 <_ZN7TwoWire9isEnabledEv>
   d5e84:	b108      	cbz	r0, d5e8a <pinAvailable+0x26>
   d5e86:	2c01      	cmp	r4, #1
   d5e88:	d9f6      	bls.n	d5e78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5e8a:	f7ff fe2d 	bl	d5ae8 <_Z22__fetch_global_Serial1v>
   d5e8e:	f7ff fe27 	bl	d5ae0 <_ZN11USARTSerial9isEnabledEv>
   d5e92:	b118      	cbz	r0, d5e9c <pinAvailable+0x38>
   d5e94:	f1a4 0309 	sub.w	r3, r4, #9
   d5e98:	2b01      	cmp	r3, #1
   d5e9a:	d9ed      	bls.n	d5e78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5e9c:	2c1e      	cmp	r4, #30
   d5e9e:	bf8c      	ite	hi
   d5ea0:	2000      	movhi	r0, #0
   d5ea2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5ea4:	bd10      	pop	{r4, pc}
   d5ea6:	bf00      	nop
   d5ea8:	2003e714 	.word	0x2003e714

000d5eac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5eac:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5eae:	b538      	push	{r3, r4, r5, lr}
   d5eb0:	4604      	mov	r4, r0
   d5eb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5eb4:	d80a      	bhi.n	d5ecc <pinMode+0x20>
   d5eb6:	29ff      	cmp	r1, #255	; 0xff
   d5eb8:	d008      	beq.n	d5ecc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5eba:	f7ff ffd3 	bl	d5e64 <pinAvailable>
   d5ebe:	b128      	cbz	r0, d5ecc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ec0:	4629      	mov	r1, r5
   d5ec2:	4620      	mov	r0, r4
}
   d5ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ec8:	f7ff b85a 	b.w	d4f80 <HAL_Pin_Mode>
   d5ecc:	bd38      	pop	{r3, r4, r5, pc}

000d5ece <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5ece:	b538      	push	{r3, r4, r5, lr}
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ed4:	f7ff f85c 	bl	d4f90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ed8:	28ff      	cmp	r0, #255	; 0xff
   d5eda:	d010      	beq.n	d5efe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5edc:	2806      	cmp	r0, #6
   d5ede:	d804      	bhi.n	d5eea <digitalWrite+0x1c>
   d5ee0:	234d      	movs	r3, #77	; 0x4d
   d5ee2:	fa23 f000 	lsr.w	r0, r3, r0
   d5ee6:	07c3      	lsls	r3, r0, #31
   d5ee8:	d409      	bmi.n	d5efe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5eea:	4620      	mov	r0, r4
   d5eec:	f7ff ffba 	bl	d5e64 <pinAvailable>
   d5ef0:	b128      	cbz	r0, d5efe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5ef2:	4629      	mov	r1, r5
   d5ef4:	4620      	mov	r0, r4
}
   d5ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5efa:	f7ff b851 	b.w	d4fa0 <HAL_GPIO_Write>
   d5efe:	bd38      	pop	{r3, r4, r5, pc}

000d5f00 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5f00:	b510      	push	{r4, lr}
   d5f02:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f04:	f7ff f844 	bl	d4f90 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5f08:	3804      	subs	r0, #4
   d5f0a:	b2c0      	uxtb	r0, r0
   d5f0c:	2801      	cmp	r0, #1
   d5f0e:	d908      	bls.n	d5f22 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5f10:	4620      	mov	r0, r4
   d5f12:	f7ff ffa7 	bl	d5e64 <pinAvailable>
   d5f16:	b120      	cbz	r0, d5f22 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f18:	4620      	mov	r0, r4
}
   d5f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f1e:	f7ff b847 	b.w	d4fb0 <HAL_GPIO_Read>
}
   d5f22:	2000      	movs	r0, #0
   d5f24:	bd10      	pop	{r4, pc}
	...

000d5f28 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f28:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f2a:	4c0c      	ldr	r4, [pc, #48]	; (d5f5c <_GLOBAL__sub_I_SPI+0x34>)
   d5f2c:	4e0c      	ldr	r6, [pc, #48]	; (d5f60 <_GLOBAL__sub_I_SPI+0x38>)
   d5f2e:	4d0d      	ldr	r5, [pc, #52]	; (d5f64 <_GLOBAL__sub_I_SPI+0x3c>)
   d5f30:	2100      	movs	r1, #0
   d5f32:	4620      	mov	r0, r4
   d5f34:	f7ff fa6e 	bl	d5414 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f38:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f3a:	4c0b      	ldr	r4, [pc, #44]	; (d5f68 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f3c:	4632      	mov	r2, r6
   d5f3e:	4629      	mov	r1, r5
   d5f40:	f000 f834 	bl	d5fac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f44:	2101      	movs	r1, #1
   d5f46:	4620      	mov	r0, r4
   d5f48:	f7ff fa64 	bl	d5414 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f4c:	4632      	mov	r2, r6
   d5f4e:	4629      	mov	r1, r5
   d5f50:	4620      	mov	r0, r4
   d5f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f56:	f000 b829 	b.w	d5fac <__aeabi_atexit>
   d5f5a:	bf00      	nop
   d5f5c:	2003e714 	.word	0x2003e714
   d5f60:	2003e3b8 	.word	0x2003e3b8
   d5f64:	000d5405 	.word	0x000d5405
   d5f68:	2003e724 	.word	0x2003e724

000d5f6c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5f6c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5f6e:	4d0b      	ldr	r5, [pc, #44]	; (d5f9c <_Z19__fetch_global_Wirev+0x30>)
   d5f70:	6829      	ldr	r1, [r5, #0]
   d5f72:	f011 0401 	ands.w	r4, r1, #1
   d5f76:	d10f      	bne.n	d5f98 <_Z19__fetch_global_Wirev+0x2c>
   d5f78:	4628      	mov	r0, r5
   d5f7a:	f7fe f894 	bl	d40a6 <__cxa_guard_acquire>
   d5f7e:	b158      	cbz	r0, d5f98 <_Z19__fetch_global_Wirev+0x2c>
   d5f80:	4621      	mov	r1, r4
   d5f82:	4807      	ldr	r0, [pc, #28]	; (d5fa0 <_Z19__fetch_global_Wirev+0x34>)
   d5f84:	f7ff fe02 	bl	d5b8c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5f88:	4628      	mov	r0, r5
   d5f8a:	f7fe f891 	bl	d40b0 <__cxa_guard_release>
   d5f8e:	4a05      	ldr	r2, [pc, #20]	; (d5fa4 <_Z19__fetch_global_Wirev+0x38>)
   d5f90:	4905      	ldr	r1, [pc, #20]	; (d5fa8 <_Z19__fetch_global_Wirev+0x3c>)
   d5f92:	4803      	ldr	r0, [pc, #12]	; (d5fa0 <_Z19__fetch_global_Wirev+0x34>)
   d5f94:	f000 f80a 	bl	d5fac <__aeabi_atexit>
	return wire;
}
   d5f98:	4801      	ldr	r0, [pc, #4]	; (d5fa0 <_Z19__fetch_global_Wirev+0x34>)
   d5f9a:	bd38      	pop	{r3, r4, r5, pc}
   d5f9c:	2003e738 	.word	0x2003e738
   d5fa0:	2003e73c 	.word	0x2003e73c
   d5fa4:	2003e3b8 	.word	0x2003e3b8
   d5fa8:	000d5b35 	.word	0x000d5b35

000d5fac <__aeabi_atexit>:
   d5fac:	460b      	mov	r3, r1
   d5fae:	4601      	mov	r1, r0
   d5fb0:	4618      	mov	r0, r3
   d5fb2:	f000 b94b 	b.w	d624c <__cxa_atexit>

000d5fb6 <_ZdlPvj>:
   d5fb6:	f7fe b872 	b.w	d409e <_ZdlPv>
	...

000d5fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5fbc:	4b18      	ldr	r3, [pc, #96]	; (d6020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d1      	lsls	r1, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b16      	ldr	r3, [pc, #88]	; (d6024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d2      	lsls	r2, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b14      	ldr	r3, [pc, #80]	; (d6028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d0      	lsls	r0, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b12      	ldr	r3, [pc, #72]	; (d602c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d1      	lsls	r1, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b10      	ldr	r3, [pc, #64]	; (d6030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d2      	lsls	r2, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b0e      	ldr	r3, [pc, #56]	; (d6034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d0      	lsls	r0, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b0c      	ldr	r3, [pc, #48]	; (d6038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d1      	lsls	r1, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b0a      	ldr	r3, [pc, #40]	; (d603c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d2      	lsls	r2, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4770      	bx	lr
   d601e:	bf00      	nop
   d6020:	2003e76c 	.word	0x2003e76c
   d6024:	2003e768 	.word	0x2003e768
   d6028:	2003e764 	.word	0x2003e764
   d602c:	2003e760 	.word	0x2003e760
   d6030:	2003e75c 	.word	0x2003e75c
   d6034:	2003e758 	.word	0x2003e758
   d6038:	2003e754 	.word	0x2003e754
   d603c:	2003e750 	.word	0x2003e750

000d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6040:	4b24      	ldr	r3, [pc, #144]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d0      	lsls	r0, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b22      	ldr	r3, [pc, #136]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d1      	lsls	r1, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b20      	ldr	r3, [pc, #128]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d2      	lsls	r2, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b1e      	ldr	r3, [pc, #120]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d0      	lsls	r0, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b1c      	ldr	r3, [pc, #112]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d1      	lsls	r1, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b1a      	ldr	r3, [pc, #104]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d2      	lsls	r2, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b18      	ldr	r3, [pc, #96]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d0      	lsls	r0, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4b16      	ldr	r3, [pc, #88]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d1      	lsls	r1, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b14      	ldr	r3, [pc, #80]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d2      	lsls	r2, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b12      	ldr	r3, [pc, #72]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d0      	lsls	r0, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b10      	ldr	r3, [pc, #64]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d1      	lsls	r1, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b0e      	ldr	r3, [pc, #56]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d2      	lsls	r2, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4770      	bx	lr
   d60d2:	bf00      	nop
   d60d4:	2003e79c 	.word	0x2003e79c
   d60d8:	2003e798 	.word	0x2003e798
   d60dc:	2003e794 	.word	0x2003e794
   d60e0:	2003e790 	.word	0x2003e790
   d60e4:	2003e78c 	.word	0x2003e78c
   d60e8:	2003e788 	.word	0x2003e788
   d60ec:	2003e784 	.word	0x2003e784
   d60f0:	2003e780 	.word	0x2003e780
   d60f4:	2003e77c 	.word	0x2003e77c
   d60f8:	2003e778 	.word	0x2003e778
   d60fc:	2003e774 	.word	0x2003e774
   d6100:	2003e770 	.word	0x2003e770

000d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6104:	4b24      	ldr	r3, [pc, #144]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d0      	lsls	r0, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b22      	ldr	r3, [pc, #136]	; (d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d1      	lsls	r1, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b20      	ldr	r3, [pc, #128]	; (d61a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d2      	lsls	r2, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b1e      	ldr	r3, [pc, #120]	; (d61a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d0      	lsls	r0, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b1c      	ldr	r3, [pc, #112]	; (d61a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d1      	lsls	r1, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b1a      	ldr	r3, [pc, #104]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d2      	lsls	r2, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4b18      	ldr	r3, [pc, #96]	; (d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d614e:	681a      	ldr	r2, [r3, #0]
   d6150:	07d0      	lsls	r0, r2, #31
   d6152:	bf5c      	itt	pl
   d6154:	2201      	movpl	r2, #1
   d6156:	601a      	strpl	r2, [r3, #0]
   d6158:	4b16      	ldr	r3, [pc, #88]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d1      	lsls	r1, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b14      	ldr	r3, [pc, #80]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d2      	lsls	r2, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b12      	ldr	r3, [pc, #72]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d0      	lsls	r0, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b10      	ldr	r3, [pc, #64]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d1      	lsls	r1, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b0e      	ldr	r3, [pc, #56]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d2      	lsls	r2, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4770      	bx	lr
   d6196:	bf00      	nop
   d6198:	2003e7cc 	.word	0x2003e7cc
   d619c:	2003e7c8 	.word	0x2003e7c8
   d61a0:	2003e7c4 	.word	0x2003e7c4
   d61a4:	2003e7c0 	.word	0x2003e7c0
   d61a8:	2003e7bc 	.word	0x2003e7bc
   d61ac:	2003e7b8 	.word	0x2003e7b8
   d61b0:	2003e7b4 	.word	0x2003e7b4
   d61b4:	2003e7b0 	.word	0x2003e7b0
   d61b8:	2003e7ac 	.word	0x2003e7ac
   d61bc:	2003e7a8 	.word	0x2003e7a8
   d61c0:	2003e7a4 	.word	0x2003e7a4
   d61c4:	2003e7a0 	.word	0x2003e7a0

000d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61c8:	4b18      	ldr	r3, [pc, #96]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d1      	lsls	r1, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b16      	ldr	r3, [pc, #88]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d2      	lsls	r2, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b14      	ldr	r3, [pc, #80]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d0      	lsls	r0, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b12      	ldr	r3, [pc, #72]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d1      	lsls	r1, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b10      	ldr	r3, [pc, #64]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d2      	lsls	r2, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b0e      	ldr	r3, [pc, #56]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d0      	lsls	r0, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b0c      	ldr	r3, [pc, #48]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d1      	lsls	r1, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b0a      	ldr	r3, [pc, #40]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d2      	lsls	r2, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4770      	bx	lr
   d622a:	bf00      	nop
   d622c:	2003e7ec 	.word	0x2003e7ec
   d6230:	2003e7e8 	.word	0x2003e7e8
   d6234:	2003e7e4 	.word	0x2003e7e4
   d6238:	2003e7e0 	.word	0x2003e7e0
   d623c:	2003e7dc 	.word	0x2003e7dc
   d6240:	2003e7d8 	.word	0x2003e7d8
   d6244:	2003e7d4 	.word	0x2003e7d4
   d6248:	2003e7d0 	.word	0x2003e7d0

000d624c <__cxa_atexit>:
   d624c:	b510      	push	{r4, lr}
   d624e:	4c05      	ldr	r4, [pc, #20]	; (d6264 <__cxa_atexit+0x18>)
   d6250:	4613      	mov	r3, r2
   d6252:	b12c      	cbz	r4, d6260 <__cxa_atexit+0x14>
   d6254:	460a      	mov	r2, r1
   d6256:	4601      	mov	r1, r0
   d6258:	2002      	movs	r0, #2
   d625a:	f3af 8000 	nop.w
   d625e:	bd10      	pop	{r4, pc}
   d6260:	4620      	mov	r0, r4
   d6262:	bd10      	pop	{r4, pc}
   d6264:	00000000 	.word	0x00000000

000d6268 <memcpy>:
   d6268:	b510      	push	{r4, lr}
   d626a:	1e43      	subs	r3, r0, #1
   d626c:	440a      	add	r2, r1
   d626e:	4291      	cmp	r1, r2
   d6270:	d004      	beq.n	d627c <memcpy+0x14>
   d6272:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6276:	f803 4f01 	strb.w	r4, [r3, #1]!
   d627a:	e7f8      	b.n	d626e <memcpy+0x6>
   d627c:	bd10      	pop	{r4, pc}

000d627e <memset>:
   d627e:	4402      	add	r2, r0
   d6280:	4603      	mov	r3, r0
   d6282:	4293      	cmp	r3, r2
   d6284:	d002      	beq.n	d628c <memset+0xe>
   d6286:	f803 1b01 	strb.w	r1, [r3], #1
   d628a:	e7fa      	b.n	d6282 <memset+0x4>
   d628c:	4770      	bx	lr
	...

000d6290 <srand>:
   d6290:	b538      	push	{r3, r4, r5, lr}
   d6292:	4b12      	ldr	r3, [pc, #72]	; (d62dc <srand+0x4c>)
   d6294:	681c      	ldr	r4, [r3, #0]
   d6296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6298:	4605      	mov	r5, r0
   d629a:	b9d3      	cbnz	r3, d62d2 <srand+0x42>
   d629c:	2018      	movs	r0, #24
   d629e:	f7ff f853 	bl	d5348 <malloc>
   d62a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d62a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d62a8:	8003      	strh	r3, [r0, #0]
   d62aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d62ae:	8043      	strh	r3, [r0, #2]
   d62b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d62b4:	8083      	strh	r3, [r0, #4]
   d62b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d62ba:	80c3      	strh	r3, [r0, #6]
   d62bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d62c0:	8103      	strh	r3, [r0, #8]
   d62c2:	2305      	movs	r3, #5
   d62c4:	8143      	strh	r3, [r0, #10]
   d62c6:	230b      	movs	r3, #11
   d62c8:	8183      	strh	r3, [r0, #12]
   d62ca:	2201      	movs	r2, #1
   d62cc:	2300      	movs	r3, #0
   d62ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d62d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d62d4:	2200      	movs	r2, #0
   d62d6:	611d      	str	r5, [r3, #16]
   d62d8:	615a      	str	r2, [r3, #20]
   d62da:	bd38      	pop	{r3, r4, r5, pc}
   d62dc:	2003e3b4 	.word	0x2003e3b4

000d62e0 <strlen>:
   d62e0:	4603      	mov	r3, r0
   d62e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d62e6:	2a00      	cmp	r2, #0
   d62e8:	d1fb      	bne.n	d62e2 <strlen+0x2>
   d62ea:	1a18      	subs	r0, r3, r0
   d62ec:	3801      	subs	r0, #1
   d62ee:	4770      	bx	lr

000d62f0 <dynalib_user>:
   d62f0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6300:	0000 0000 0ee9 0000 0bd6 0000 0002 0000     ................
   d6310:	0002 0000 6556 6972 6966 6465 4920 3a44     ....Verified ID:
   d6320:	4600 6e69 6567 2072 6f6e 2074 6f66 6e75     .Finger not foun
   d6330:	0064 7245 6f72 3a72 6e20 206f 6f6d 6572     d.Error: no more
   d6340:	6520 726e 6c6f 6d6c 6e65 2074 4449 2073      enrollment IDs 
   d6350:	7661 6961 616c 6c62 2e65 5200 6d65 766f     available..Remov
   d6360:	2065 6966 676e 7265 5000 6572 7373 7320     e finger.Press s
   d6370:	6d61 2065 6966 676e 7265 6120 6167 6e69     ame finger again
   d6380:	5000 6572 7373 7320 6d61 2065 6966 676e     .Press same fing
   d6390:	7265 7920 7465 6120 6167 6e69 4500 726e     er yet again.Enr
   d63a0:	6c6f 696c 676e 5320 6375 6563 7373 7566     olling Successfu
   d63b0:	006c 6e45 6f72 6c6c 6e69 2067 6146 6c69     l.Enrolling Fail
   d63c0:	6465 7720 7469 2068 7265 6f72 2072 6f63     ed with error co
   d63d0:	6564 003a 6146 6c69 6465 7420 206f 6163     de:.Failed to ca
   d63e0:	7470 7275 2065 6874 7269 2064 6966 676e     pture third fing
   d63f0:	7265 4600 6961 656c 2064 6f74 6320 7061     er.Failed to cap
   d6400:	7574 6572 7320 6365 6e6f 2064 6966 676e     ture second fing
   d6410:	7265 4600 6961 656c 2064 6f74 6320 7061     er.Failed to cap
   d6420:	7574 6572 6620 7269 7473 6620 6e69 6567     ture first finge
   d6430:	0072 4449 2320 6425 6920 2073 656e 7478     r.ID #%d is next
   d6440:	6120 6176 6c69 6261 656c 6f20 206e 5046      available on FP
   d6450:	2e53 7300 6174 7472 4520 726e 6c6f 006c     S..start Enroll.
   d6460:	6e45 6f72 6c6c 7320 6174 7472 6465 5000     Enroll started.P
   d6470:	6572 7373 6620 6e69 6567 2072 6f74 4520     ress finger to E
   d6480:	726e 6c6f 206c 0023                         nroll #.

000d6488 <CSWTCH.51>:
   d6488:	0000 1001 1002 1003 1004 1005 1006 1007     ................
   d6498:	1008 1009 100a 100b 100c 100d 100e 100f     ................
   d64a8:	1010 1011 1012 6552 7073 6e6f 6573 505f     ......Response_P
   d64b8:	6361 656b 2074 6170 7372 6e69 2067 7265     acket parsing er
   d64c8:	6f72 2072 2000 7c7c 0020 2120 203d 4300     ror . || . != .C
   d64d8:	4d4f 414d 444e 535f 4154 5452 435f 444f     OMMAND_START_COD
   d64e8:	5f45 0031 4f43 4d4d 4e41 5f44 5453 5241     E_1.COMMAND_STAR
   d64f8:	5f54 4f43 4544 325f 4300 4d4f 414d 444e     T_CODE_2.COMMAND
   d6508:	445f 5645 4349 5f45 4449 315f 4300 4d4f     _DEVICE_ID_1.COM
   d6518:	414d 444e 445f 5645 4349 5f45 4449 325f     MAND_DEVICE_ID_2
   d6528:	4100 6b63 614e 5f6b 4f4c 0057 6341 4e6b     .AckNak_LOW.AckN
   d6538:	6b61 485f 4749 0048 6843 6365 736b 6d75     ak_HIGH.Checksum
   d6548:	4c5f 574f 4300 6568 6b63 7573 5f6d 4948     _LOW.Checksum_HI
   d6558:	4847 2500 322e 0058 0022 5046 2053 202d     GH.%.2X.".FPS - 
   d6568:	4553 444e 203a 4600 5350 2d20 5220 4345     SEND: .FPS - REC
   d6578:	3a56 0020 5046 2053 202d 704f 6e65 4600     V: .FPS - Open.F
   d6588:	5350 2d20 4320 6f6c 6573 4600 5350 2d20     PS - Close.FPS -
   d6598:	4c20 4445 6f20 006e 5046 2053 202d 454c      LED on.FPS - LE
   d65a8:	2044 666f 0066 5046 2053 202d 6843 6e61     D off.FPS - Chan
   d65b8:	6567 6142 6475 6152 6574 4600 5350 2d20     geBaudRate.FPS -
   d65c8:	4720 7465 6e45 6f72 6c6c 6465 6f43 6e75      GetEnrolledCoun
   d65d8:	0074 5046 2053 202d 6843 6365 456b 726e     t.FPS - CheckEnr
   d65e8:	6c6f 656c 0064 5046 2053 202d 6e45 6f72     olled.FPS - Enro
   d65f8:	6c6c 7453 7261 0074 5046 2053 202d 6e45     llStart.FPS - En
   d6608:	6f72 6c6c 0031 5046 2053 202d 6e45 6f72     roll1.FPS - Enro
   d6618:	6c6c 0032 5046 2053 202d 6e45 6f72 6c6c     ll2.FPS - Enroll
   d6628:	0033 5046 2053 202d 6544 656c 6574 4449     3.FPS - DeleteID
   d6638:	4600 5350 2d20 4420 6c65 7465 4165 6c6c     .FPS - DeleteAll
   d6648:	4600 5350 2d20 5620 7265 6669 3179 315f     .FPS - Verify1_1
   d6658:	4600 5350 2d20 4920 6564 746e 6669 3179     .FPS - Identify1
   d6668:	4e5f 4600 5350 2d20 4320 7061 7574 6572     _N.FPS - Capture
   d6678:	6946 676e 7265 0000                         Finger..

000d6680 <_ZTVN5spark13EthernetClassE>:
	...
   d6688:	53e7 000d 53dd 000d 53d3 000d 53c9 000d     .S...S...S...S..
   d6698:	53bd 000d 53b1 000d 53a5 000d 539d 000d     .S...S...S...S..
   d66a8:	5393 000d 5389 000d 5d85 000d               .S...S...]..

000d66b4 <_ZTV8SPIClass>:
	...
   d66bc:	5405 000d 5407 000d 6162 6475 5300 7265     .T...T..baud.Ser
   d66cc:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d66dc:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d66ec:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d66fc:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d670c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d671c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d672c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d673c:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d674c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d675c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d676c:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d677c:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d678c:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d679c:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d67ac:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d67bc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d67cc <_ZTV9IPAddress>:
	...
   d67d4:	57ed 000d 57dd 000d 57df 000d               .W...W...W..

000d67e0 <_ZTV9USBSerial>:
	...
   d67e8:	58c5 000d 5915 000d 5923 000d 546d 000d     .X...Y..#Y..mT..
   d67f8:	5901 000d 58c7 000d 58dd 000d 590f 000d     .Y...X...X...Y..
   d6808:	58f3 000d 58c1 000d                         .X...X..

000d6810 <_ZTV11USARTSerial>:
	...
   d6818:	5a1d 000d 5a6d 000d 5a7b 000d 546d 000d     .Z..mZ..{Z..mT..
   d6828:	5a31 000d 5a53 000d 5a3f 000d 5a67 000d     1Z..SZ..?Z..gZ..
   d6838:	5a1f 000d 5a23 000d                         .Z..#Z..

000d6840 <_ZTV7TwoWire>:
	...
   d6848:	5b35 000d 5b7f 000d 5b57 000d 5b37 000d     5[...[..W[..7[..
   d6858:	5b5f 000d 5b67 000d 5b6f 000d 5b77 000d     _[..g[..o[..w[..

000d6868 <_ZTVN5spark9MeshClassE>:
	...
   d6870:	5c17 000d 5c0d 000d 5c03 000d 5bf9 000d     .\...\...\...[..
   d6880:	5bed 000d 5be1 000d 5bd5 000d 5bcd 000d     .[...[...[...[..
   d6890:	5bc3 000d 5bb9 000d 5d85 000d               .[...[...]..

000d689c <_ZTVN5spark12NetworkClassE>:
	...
   d68a4:	5d1d 000d 5d27 000d 5d31 000d 5d3b 000d     .]..']..1]..;]..
   d68b4:	5d45 000d 5d51 000d 5d5d 000d 5d69 000d     E]..Q]..]]..i]..
   d68c4:	5d71 000d 5d7b 000d 5d85 000d               q]..{]...]..

000d68d0 <__sf_fake_stdin>:
	...

000d68f0 <__sf_fake_stdout>:
	...

000d6910 <__sf_fake_stderr>:
	...
   d6930:	0043                                        C.

000d6932 <link_const_variable_data_end>:
	...

000d6934 <link_constructors_location>:
   d6934:	000d410d 	.word	0x000d410d
   d6938:	000d4659 	.word	0x000d4659
   d693c:	000d4f3d 	.word	0x000d4f3d
   d6940:	000d53f1 	.word	0x000d53f1
   d6944:	000d5445 	.word	0x000d5445
   d6948:	000d545d 	.word	0x000d545d
   d694c:	000d5631 	.word	0x000d5631
   d6950:	000d5641 	.word	0x000d5641
   d6954:	000d56dd 	.word	0x000d56dd
   d6958:	000d5ccd 	.word	0x000d5ccd
   d695c:	000d5e51 	.word	0x000d5e51
   d6960:	000d5f29 	.word	0x000d5f29
   d6964:	000d5fbd 	.word	0x000d5fbd
   d6968:	000d6041 	.word	0x000d6041
   d696c:	000d6105 	.word	0x000d6105
   d6970:	000d61c9 	.word	0x000d61c9

000d6974 <link_constructors_end>:
	...
