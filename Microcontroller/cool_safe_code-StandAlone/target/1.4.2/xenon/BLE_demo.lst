
a:/Documents/Programming/Particle/BLE_demo/target/1.4.2/xenon/BLE_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f94  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017048  2**0
                  CONTENTS
  4 .data         0000006c  2003e300  000d6fb0  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000484  2003e36c  2003e36c  0001e36c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d701c  000d701c  0001701c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7044  000d7044  00017044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000badfd  00000000  00000000  00017048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e9c3  00000000  00000000  000d1e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ba91  00000000  00000000  000e0808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002638  00000000  00000000  000fc299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004498  00000000  00000000  000fe8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000327b1  00000000  00000000  00102d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022cf1  00000000  00000000  0013551a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fbf6a  00000000  00000000  0015820b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ccd0  00000000  00000000  00254178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc3a 	bl	d68a6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc5a 	bl	d68f2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e300 	.word	0x2003e300
   d4048:	000d6fb0 	.word	0x000d6fb0
   d404c:	2003e36c 	.word	0x2003e36c
   d4050:	2003e36c 	.word	0x2003e36c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fef9 	bl	d5e50 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6fac 	.word	0x000d6fac
   d4080:	000d6f74 	.word	0x000d6f74

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81a 	b.w	d40bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f899 	bl	d41c0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 beab 	b.w	d5dec <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc63 	b.w	d4960 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc69 	b.w	d4970 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc67 	b.w	d4970 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
  connectionFlag = false;
} */

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
  // when data for myCharacteristic is recieved
  RGB.color(100, 50, 100);
   d40b2:	2264      	movs	r2, #100	; 0x64
   d40b4:	2132      	movs	r1, #50	; 0x32
   d40b6:	4610      	mov	r0, r2
   d40b8:	f001 be43 	b.w	d5d42 <_ZN8RGBClass5colorEiii>

000d40bc <setup>:
}

void setup() {
   d40bc:	b510      	push	{r4, lr}
   d40be:	b096      	sub	sp, #88	; 0x58
  
  // BLE ///////////////////////////////////
  // Attach characteristics
  BLE.addCharacteristic(characteristicAccess);
   d40c0:	f001 f834 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40c4:	4a38      	ldr	r2, [pc, #224]	; (d41a8 <setup+0xec>)
   d40c6:	4601      	mov	r1, r0
   d40c8:	a80d      	add	r0, sp, #52	; 0x34
   d40ca:	f001 fc77 	bl	d59bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d40ce:	a80d      	add	r0, sp, #52	; 0x34
   d40d0:	f001 f8e8 	bl	d52a4 <_ZN8particle17BleCharacteristicD1Ev>
	BLE.addCharacteristic(characteristicB);
   d40d4:	f001 f82a 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40d8:	4a34      	ldr	r2, [pc, #208]	; (d41ac <setup+0xf0>)
   d40da:	4601      	mov	r1, r0
   d40dc:	a80d      	add	r0, sp, #52	; 0x34
   d40de:	f001 fc6d 	bl	d59bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d40e2:	a80d      	add	r0, sp, #52	; 0x34
   d40e4:	f001 f8de 	bl	d52a4 <_ZN8particle17BleCharacteristicD1Ev>
	BLE.addCharacteristic(characteristicC);
   d40e8:	f001 f820 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40ec:	4a30      	ldr	r2, [pc, #192]	; (d41b0 <setup+0xf4>)
   d40ee:	4601      	mov	r1, r0
   d40f0:	a80d      	add	r0, sp, #52	; 0x34
   d40f2:	f001 fc63 	bl	d59bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d40f6:	a80d      	add	r0, sp, #52	; 0x34
   d40f8:	f001 f8d4 	bl	d52a4 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(myCharacteristic);
   d40fc:	f001 f816 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4100:	4a2c      	ldr	r2, [pc, #176]	; (d41b4 <setup+0xf8>)
   d4102:	4601      	mov	r1, r0
   d4104:	a80d      	add	r0, sp, #52	; 0x34
   d4106:	f001 fc59 	bl	d59bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d410a:	a80d      	add	r0, sp, #52	; 0x34
   d410c:	f001 f8ca 	bl	d52a4 <_ZN8particle17BleCharacteristicD1Ev>
  myCharacteristic.onDataReceived(onDataReceived, NULL);
   d4110:	2200      	movs	r2, #0
   d4112:	4929      	ldr	r1, [pc, #164]	; (d41b8 <setup+0xfc>)
   d4114:	4827      	ldr	r0, [pc, #156]	; (d41b4 <setup+0xf8>)
   d4116:	f000 ffb5 	bl	d5084 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

  // Start advertising service
  BleAdvertisingData adverData;
   d411a:	a80d      	add	r0, sp, #52	; 0x34
   d411c:	f000 fee7 	bl	d4eee <_ZN8particle18BleAdvertisingDataC1Ev>
  adverData.appendServiceUUID(serviceUuid);
   d4120:	4926      	ldr	r1, [pc, #152]	; (d41bc <setup+0x100>)
   d4122:	a803      	add	r0, sp, #12
   d4124:	f000 fd8e 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4128:	a903      	add	r1, sp, #12
   d412a:	a808      	add	r0, sp, #32
   d412c:	f000 fd8a 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4130:	a808      	add	r0, sp, #32
   d4132:	f000 fdc5 	bl	d4cc0 <_ZNK8particle7BleUuid4typeEv>
   d4136:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4138:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d413a:	b944      	cbnz	r4, d414e <setup+0x92>
            uint16_t uuid16 = tempUUID.shorted();
   d413c:	f000 fddd 	bl	d4cfa <_ZNK8particle7BleUuid7shortedEv>
   d4140:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4142:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4144:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4148:	2103      	movs	r1, #3
   d414a:	9400      	str	r4, [sp, #0]
   d414c:	e006      	b.n	d415c <setup+0xa0>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d414e:	f000 fdd6 	bl	d4cfe <_ZNK8particle7BleUuid8rawBytesEv>
   d4152:	2300      	movs	r3, #0
   d4154:	9300      	str	r3, [sp, #0]
   d4156:	4602      	mov	r2, r0
   d4158:	2310      	movs	r3, #16
   d415a:	2107      	movs	r1, #7
   d415c:	a80d      	add	r0, sp, #52	; 0x34
   d415e:	f000 fe7f 	bl	d4e60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&adverData);
   d4162:	f000 ffe3 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4166:	2200      	movs	r2, #0
   d4168:	a90d      	add	r1, sp, #52	; 0x34
   d416a:	f001 f84c 	bl	d5206 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  //////////////////////////////////////////

  // Setup USB Serial port
  Serial.begin(); // defaults to 9600 baud rate
   d416e:	f001 ff5d 	bl	d602c <_Z16_fetch_usbserialv>
   d4172:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4176:	f001 ff4d 	bl	d6014 <_ZN9USBSerial5beginEl>

  // take control of the On-Board RGB LED
  RGB.control(true);
   d417a:	2001      	movs	r0, #1
   d417c:	f001 fdd1 	bl	d5d22 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 0); // Format red, green, blue, from 0 to 255
   d4180:	21ff      	movs	r1, #255	; 0xff
   d4182:	2200      	movs	r2, #0
   d4184:	4608      	mov	r0, r1
   d4186:	f001 fddc 	bl	d5d42 <_ZN8RGBClass5colorEiii>
  RGB.brightness(64); // scales brightness of all three colors, 0-255
   d418a:	2101      	movs	r1, #1
   d418c:	2040      	movs	r0, #64	; 0x40
   d418e:	f001 fdeb 	bl	d5d68 <_ZN8RGBClass10brightnessEhb>

  // On-board LED
  pinMode(smdLED, OUTPUT);
   d4192:	2101      	movs	r1, #1
   d4194:	2007      	movs	r0, #7
   d4196:	f002 f9ad 	bl	d64f4 <pinMode>
  digitalWrite(smdLED, HIGH);
   d419a:	2101      	movs	r1, #1
   d419c:	2007      	movs	r0, #7
   d419e:	f002 f9ba 	bl	d6516 <digitalWrite>

}
   d41a2:	b016      	add	sp, #88	; 0x58
   d41a4:	bd10      	pop	{r4, pc}
   d41a6:	bf00      	nop
   d41a8:	2003e3a4 	.word	0x2003e3a4
   d41ac:	2003e3ac 	.word	0x2003e3ac
   d41b0:	2003e3b4 	.word	0x2003e3b4
   d41b4:	2003e394 	.word	0x2003e394
   d41b8:	000d40b3 	.word	0x000d40b3
   d41bc:	2003e380 	.word	0x2003e380

000d41c0 <loop>:

void loop() {
   d41c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
   d41c2:	4c20      	ldr	r4, [pc, #128]	; (d4244 <loop+0x84>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41c4:	f000 f9a6 	bl	d4514 <HAL_Timer_Get_Milli_Seconds>
   d41c8:	6823      	ldr	r3, [r4, #0]
   d41ca:	1ac0      	subs	r0, r0, r3
   d41cc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d41d0:	d335      	bcc.n	d423e <loop+0x7e>
   d41d2:	f000 f99f 	bl	d4514 <HAL_Timer_Get_Milli_Seconds>
		lastUpdate = millis();
   d41d6:	6020      	str	r0, [r4, #0]

    if (BLE.connected()) {
   d41d8:	f000 ffa8 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41dc:	f001 f830 	bl	d5240 <_ZNK8particle14BleLocalDevice9connectedEv>
   d41e0:	4c19      	ldr	r4, [pc, #100]	; (d4248 <loop+0x88>)
   d41e2:	4605      	mov	r5, r0
        if (connectionFlag == false) {
   d41e4:	7823      	ldrb	r3, [r4, #0]
void loop() {
  
  if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
		lastUpdate = millis();

    if (BLE.connected()) {
   d41e6:	b318      	cbz	r0, d4230 <loop+0x70>
        if (connectionFlag == false) {
   d41e8:	b933      	cbnz	r3, d41f8 <loop+0x38>
          Serial.println("Bluetooth Connected!");
   d41ea:	f001 ff1f 	bl	d602c <_Z16_fetch_usbserialv>
   d41ee:	4917      	ldr	r1, [pc, #92]	; (d424c <loop+0x8c>)
   d41f0:	f001 fd3d 	bl	d5c6e <_ZN5Print7printlnEPKc>
          connectionFlag = true;
   d41f4:	2301      	movs	r3, #1
   d41f6:	7023      	strb	r3, [r4, #0]
        }

        uint8_t a = (uint8_t) 1;
   d41f8:	a902      	add	r1, sp, #8
   d41fa:	2401      	movs	r4, #1
   d41fc:	f801 4d03 	strb.w	r4, [r1, #-3]!
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4200:	4622      	mov	r2, r4
   d4202:	2300      	movs	r3, #0
   d4204:	4812      	ldr	r0, [pc, #72]	; (d4250 <loop+0x90>)
   d4206:	f000 fedb 	bl	d4fc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        characteristicAccess.setValue(a);

        uint8_t b = (uint8_t) 2;
   d420a:	a902      	add	r1, sp, #8
   d420c:	2302      	movs	r3, #2
   d420e:	f801 3d02 	strb.w	r3, [r1, #-2]!
   d4212:	4622      	mov	r2, r4
   d4214:	2300      	movs	r3, #0
   d4216:	480f      	ldr	r0, [pc, #60]	; (d4254 <loop+0x94>)
   d4218:	f000 fed2 	bl	d4fc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        characteristicB.setValue(b);

        uint8_t c = (uint8_t) 3;
   d421c:	a902      	add	r1, sp, #8
   d421e:	2303      	movs	r3, #3
   d4220:	f801 3d01 	strb.w	r3, [r1, #-1]!
   d4224:	4622      	mov	r2, r4
   d4226:	2300      	movs	r3, #0
   d4228:	480b      	ldr	r0, [pc, #44]	; (d4258 <loop+0x98>)
   d422a:	f000 fec9 	bl	d4fc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d422e:	e006      	b.n	d423e <loop+0x7e>
        characteristicC.setValue(c);
    }
    else {  // No Bluetooth connection
      if (connectionFlag == true) {
   d4230:	b12b      	cbz	r3, d423e <loop+0x7e>
        Serial.println("Bluetooth Disconnected.");
   d4232:	f001 fefb 	bl	d602c <_Z16_fetch_usbserialv>
   d4236:	4909      	ldr	r1, [pc, #36]	; (d425c <loop+0x9c>)
   d4238:	f001 fd19 	bl	d5c6e <_ZN5Print7printlnEPKc>
        connectionFlag = false;
   d423c:	7025      	strb	r5, [r4, #0]
      }
    }
  }

   d423e:	b003      	add	sp, #12
   d4240:	bd30      	pop	{r4, r5, pc}
   d4242:	bf00      	nop
   d4244:	2003e3bc 	.word	0x2003e3bc
   d4248:	2003e3c0 	.word	0x2003e3c0
   d424c:	000d6990 	.word	0x000d6990
   d4250:	2003e3a4 	.word	0x2003e3a4
   d4254:	2003e3ac 	.word	0x2003e3ac
   d4258:	2003e3b4 	.word	0x2003e3b4
   d425c:	000d69a5 	.word	0x000d69a5

000d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4260:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4262:	460e      	mov	r6, r1
   d4264:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4266:	2100      	movs	r1, #0
   d4268:	4604      	mov	r4, r0
   d426a:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d426c:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d426e:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4270:	4619      	mov	r1, r3
   d4272:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4274:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4276:	f000 fce5 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d427a:	9914      	ldr	r1, [sp, #80]	; 0x50
   d427c:	4628      	mov	r0, r5
   d427e:	f000 fce1 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4282:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d4284:	9302      	str	r3, [sp, #8]
   d4286:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	4620      	mov	r0, r4
   d428c:	9500      	str	r5, [sp, #0]
   d428e:	ab04      	add	r3, sp, #16
   d4290:	463a      	mov	r2, r7
   d4292:	4631      	mov	r1, r6
   d4294:	f001 fae0 	bl	d5858 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d4298:	4620      	mov	r0, r4
   d429a:	b00f      	add	sp, #60	; 0x3c
   d429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d42a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   d42a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d42a4:	b094      	sub	sp, #80	; 0x50

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42a6:	f000 f8f5 	bl	d4494 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d42aa:	4b59      	ldr	r3, [pc, #356]	; (d4410 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x170>)
// Set update timing
const unsigned long UPDATE_INTERVAL_MS = 2000;
unsigned long lastUpdate = 0;

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d42ac:	4f59      	ldr	r7, [pc, #356]	; (d4414 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x174>)
// BLE Characteristics UUIDs
//BleCharacteristic characteristicFirstName("First Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A8A"), serviceUuid);
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
BleCharacteristic characteristicString("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
   d42ae:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d4454 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1b4>
   d42b2:	f8df 91a4 	ldr.w	r9, [pc, #420]	; d4458 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1b8>
   d42b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; d445c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1bc>
   d42ba:	2400      	movs	r4, #0
   d42bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d42c0:	701c      	strb	r4, [r3, #0]
   d42c2:	805c      	strh	r4, [r3, #2]
   d42c4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42c6:	2003      	movs	r0, #3
   d42c8:	ae0f      	add	r6, sp, #60	; 0x3c
   d42ca:	f000 fad5 	bl	d4878 <set_system_mode>
// Set update timing
const unsigned long UPDATE_INTERVAL_MS = 2000;
unsigned long lastUpdate = 0;

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d42ce:	4952      	ldr	r1, [pc, #328]	; (d4418 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x178>)
   d42d0:	4638      	mov	r0, r7
// BLE Characteristics UUIDs
//BleCharacteristic characteristicFirstName("First Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A8A"), serviceUuid);
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
BleCharacteristic characteristicString("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
   d42d2:	ad0a      	add	r5, sp, #40	; 0x28
// Set update timing
const unsigned long UPDATE_INTERVAL_MS = 2000;
unsigned long lastUpdate = 0;

// BLE Service UUID
const BleUuid serviceUuid("6E400000-B5A3-F393-E0A9-E50E24DCCA9E");
   d42d4:	f000 fda1 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
// BLE Characteristics UUIDs
//BleCharacteristic characteristicFirstName("First Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A8A"), serviceUuid);
//BleCharacteristic characteristicLastName("Last Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A90"), serviceUuid);
BleCharacteristic characteristicString("Name", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A3D"), serviceUuid);
   d42d8:	4950      	ldr	r1, [pc, #320]	; (d441c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x17c>)
   d42da:	4630      	mov	r0, r6
   d42dc:	f000 fd9d 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
   d42e0:	4639      	mov	r1, r7
   d42e2:	4628      	mov	r0, r5
   d42e4:	f000 fcae 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d42e8:	4633      	mov	r3, r6
   d42ea:	9402      	str	r4, [sp, #8]
   d42ec:	9401      	str	r4, [sp, #4]
   d42ee:	9500      	str	r5, [sp, #0]
   d42f0:	2210      	movs	r2, #16
   d42f2:	494b      	ldr	r1, [pc, #300]	; (d4420 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x180>)
   d42f4:	4650      	mov	r0, sl
   d42f6:	f7ff ffb3 	bl	d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d42fa:	464a      	mov	r2, r9
   d42fc:	4641      	mov	r1, r8
   d42fe:	4650      	mov	r0, sl
   d4300:	f002 f964 	bl	d65cc <__aeabi_atexit>
BleCharacteristic characteristicID("User Index", BleCharacteristicProperty::NOTIFY, BleUuid("0x2A9A"), serviceUuid);  // 0xFF for "Unknown User"
   d4304:	f8df a158 	ldr.w	sl, [pc, #344]	; d4460 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1c0>
   d4308:	4946      	ldr	r1, [pc, #280]	; (d4424 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x184>)
   d430a:	4630      	mov	r0, r6
   d430c:	f000 fd85 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
   d4310:	4639      	mov	r1, r7
   d4312:	4628      	mov	r0, r5
   d4314:	f000 fc96 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d4318:	4633      	mov	r3, r6
   d431a:	9402      	str	r4, [sp, #8]
   d431c:	9401      	str	r4, [sp, #4]
   d431e:	9500      	str	r5, [sp, #0]
   d4320:	2210      	movs	r2, #16
   d4322:	4941      	ldr	r1, [pc, #260]	; (d4428 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x188>)
   d4324:	4650      	mov	r0, sl
   d4326:	f7ff ff9b 	bl	d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d432a:	464a      	mov	r2, r9
   d432c:	4641      	mov	r1, r8
   d432e:	4650      	mov	r0, sl
   d4330:	f002 f94c 	bl	d65cc <__aeabi_atexit>
BleCharacteristic characteristicAccess("Access Enabled", BleCharacteristicProperty::NOTIFY, BleUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d4334:	f8df a12c 	ldr.w	sl, [pc, #300]	; d4464 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1c4>
   d4338:	493c      	ldr	r1, [pc, #240]	; (d442c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x18c>)
   d433a:	4630      	mov	r0, r6
   d433c:	f000 fd6d 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
   d4340:	4639      	mov	r1, r7
   d4342:	4628      	mov	r0, r5
   d4344:	f000 fc7e 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d4348:	4633      	mov	r3, r6
   d434a:	9402      	str	r4, [sp, #8]
   d434c:	9401      	str	r4, [sp, #4]
   d434e:	9500      	str	r5, [sp, #0]
   d4350:	2210      	movs	r2, #16
   d4352:	4937      	ldr	r1, [pc, #220]	; (d4430 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x190>)
   d4354:	4650      	mov	r0, sl
   d4356:	f7ff ff83 	bl	d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d435a:	464a      	mov	r2, r9
   d435c:	4641      	mov	r1, r8
   d435e:	4650      	mov	r0, sl
   d4360:	f002 f934 	bl	d65cc <__aeabi_atexit>
BleCharacteristic characteristicB("b", BleCharacteristicProperty::NOTIFY, BleUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d4364:	f8df a100 	ldr.w	sl, [pc, #256]	; d4468 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1c8>
   d4368:	4932      	ldr	r1, [pc, #200]	; (d4434 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x194>)
   d436a:	4630      	mov	r0, r6
   d436c:	f000 fd55 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
   d4370:	4639      	mov	r1, r7
   d4372:	4628      	mov	r0, r5
   d4374:	f000 fc66 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d4378:	4633      	mov	r3, r6
   d437a:	9402      	str	r4, [sp, #8]
   d437c:	9401      	str	r4, [sp, #4]
   d437e:	9500      	str	r5, [sp, #0]
   d4380:	2210      	movs	r2, #16
   d4382:	492d      	ldr	r1, [pc, #180]	; (d4438 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x198>)
   d4384:	4650      	mov	r0, sl
   d4386:	f7ff ff6b 	bl	d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d438a:	464a      	mov	r2, r9
   d438c:	4641      	mov	r1, r8
   d438e:	4650      	mov	r0, sl
   d4390:	f002 f91c 	bl	d65cc <__aeabi_atexit>
BleCharacteristic characteristicC("c", BleCharacteristicProperty::NOTIFY, BleUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E"), serviceUuid);
   d4394:	f8df a0d4 	ldr.w	sl, [pc, #212]	; d446c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1cc>
   d4398:	4928      	ldr	r1, [pc, #160]	; (d443c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x19c>)
   d439a:	4630      	mov	r0, r6
   d439c:	f000 fd3d 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
   d43a0:	4639      	mov	r1, r7
   d43a2:	4628      	mov	r0, r5
   d43a4:	f000 fc4e 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d43a8:	4633      	mov	r3, r6
   d43aa:	9402      	str	r4, [sp, #8]
   d43ac:	9401      	str	r4, [sp, #4]
   d43ae:	9500      	str	r5, [sp, #0]
   d43b0:	2210      	movs	r2, #16
   d43b2:	4923      	ldr	r1, [pc, #140]	; (d4440 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1a0>)
   d43b4:	4650      	mov	r0, sl
   d43b6:	f7ff ff53 	bl	d4260 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   d43ba:	464a      	mov	r2, r9
   d43bc:	4641      	mov	r1, r8
   d43be:	4650      	mov	r0, sl
   d43c0:	f002 f904 	bl	d65cc <__aeabi_atexit>
const char* myWriteUUID = "6E400004-B5A3-F393-E0A9-E50E24DCCA9E";
BleCharacteristic myCharacteristic("myCharacteristic", BleCharacteristicProperty::WRITE_WO_RSP, myWriteUUID, serviceUuid, onDataReceived, (void*)myWriteUUID);
   d43c4:	4639      	mov	r1, r7
   d43c6:	a805      	add	r0, sp, #20
   d43c8:	f000 fc3c 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
   d43cc:	4b1d      	ldr	r3, [pc, #116]	; (d4444 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1a4>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43ce:	4f1e      	ldr	r7, [pc, #120]	; (d4448 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1a8>)
   d43d0:	f8d3 a000 	ldr.w	sl, [r3]
   d43d4:	603c      	str	r4, [r7, #0]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d43d6:	4651      	mov	r1, sl

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d43d8:	607c      	str	r4, [r7, #4]
   d43da:	4628      	mov	r0, r5
   d43dc:	f000 fd1d 	bl	d4e1a <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d43e0:	a905      	add	r1, sp, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f000 fc2e 	bl	d4c44 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43e8:	4b18      	ldr	r3, [pc, #96]	; (d444c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1ac>)
   d43ea:	9301      	str	r3, [sp, #4]
   d43ec:	4638      	mov	r0, r7
   d43ee:	462b      	mov	r3, r5
   d43f0:	f8cd a008 	str.w	sl, [sp, #8]
   d43f4:	9600      	str	r6, [sp, #0]
   d43f6:	2204      	movs	r2, #4
   d43f8:	4915      	ldr	r1, [pc, #84]	; (d4450 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1b0>)
   d43fa:	f001 fa2d 	bl	d5858 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d43fe:	464a      	mov	r2, r9
   d4400:	4641      	mov	r1, r8
   d4402:	4638      	mov	r0, r7
   d4404:	f002 f8e2 	bl	d65cc <__aeabi_atexit>
        connectionFlag = false;
      }
    }
  }

   d4408:	b014      	add	sp, #80	; 0x50
   d440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d440e:	bf00      	nop
   d4410:	2003e370 	.word	0x2003e370
   d4414:	2003e380 	.word	0x2003e380
   d4418:	000d69bd 	.word	0x000d69bd
   d441c:	000d69e2 	.word	0x000d69e2
   d4420:	000d69e9 	.word	0x000d69e9
   d4424:	000d69ee 	.word	0x000d69ee
   d4428:	000d69f5 	.word	0x000d69f5
   d442c:	000d6a00 	.word	0x000d6a00
   d4430:	000d6a25 	.word	0x000d6a25
   d4434:	000d6a34 	.word	0x000d6a34
   d4438:	000d6a59 	.word	0x000d6a59
   d443c:	000d6a5b 	.word	0x000d6a5b
   d4440:	000d6ddb 	.word	0x000d6ddb
   d4444:	2003e300 	.word	0x2003e300
   d4448:	2003e394 	.word	0x2003e394
   d444c:	000d40b3 	.word	0x000d40b3
   d4450:	000d6a80 	.word	0x000d6a80
   d4454:	2003e39c 	.word	0x2003e39c
   d4458:	2003e36c 	.word	0x2003e36c
   d445c:	000d52a5 	.word	0x000d52a5
   d4460:	2003e378 	.word	0x2003e378
   d4464:	2003e3a4 	.word	0x2003e3a4
   d4468:	2003e3ac 	.word	0x2003e3ac
   d446c:	2003e3b4 	.word	0x2003e3b4

000d4470 <_GLOBAL__sub_I_SystemMode>:
   d4470:	f7ff bf16 	b.w	d42a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

000d4474 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <netdb_freeaddrinfo+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	689b      	ldr	r3, [r3, #8]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030268 	.word	0x00030268

000d4484 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <netdb_getaddrinfo+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	68db      	ldr	r3, [r3, #12]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030268 	.word	0x00030268

000d4494 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_Pin_Map+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003022c 	.word	0x0003022c

000d44a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_Pin_Mode+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003022c 	.word	0x0003022c

000d44b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_Get_Pin_Mode+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003022c 	.word	0x0003022c

000d44c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_GPIO_Write+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	691b      	ldr	r3, [r3, #16]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003022c 	.word	0x0003022c

000d44d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_SPI_Init+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	69db      	ldr	r3, [r3, #28]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030230 	.word	0x00030230

000d44e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_SPI_Is_Enabled+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6a1b      	ldr	r3, [r3, #32]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030230 	.word	0x00030230

000d44f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_RNG_GetRandomNumber+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	685b      	ldr	r3, [r3, #4]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030218 	.word	0x00030218

000d4504 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_Delay_Microseconds+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	68db      	ldr	r3, [r3, #12]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030218 	.word	0x00030218

000d4514 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030218 	.word	0x00030218

000d4524 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <hal_ble_stack_init+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	689b      	ldr	r3, [r3, #8]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030274 	.word	0x00030274

000d4534 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <hal_ble_gap_set_advertising_data+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030274 	.word	0x00030274

000d4544 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <hal_ble_gap_set_scan_response_data+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030274 	.word	0x00030274

000d4554 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <hal_ble_gap_start_advertising+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030274 	.word	0x00030274

000d4564 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b03      	ldr	r3, [pc, #12]	; (d4574 <hal_ble_gap_disconnect+0x10>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d456e:	9301      	str	r3, [sp, #4]
   d4570:	bd08      	pop	{r3, pc}
   d4572:	0000      	.short	0x0000
   d4574:	00030274 	.word	0x00030274

000d4578 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b03      	ldr	r3, [pc, #12]	; (d4588 <hal_ble_gatt_server_add_service+0x10>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4582:	9301      	str	r3, [sp, #4]
   d4584:	bd08      	pop	{r3, pc}
   d4586:	0000      	.short	0x0000
   d4588:	00030274 	.word	0x00030274

000d458c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b03      	ldr	r3, [pc, #12]	; (d459c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4596:	9301      	str	r3, [sp, #4]
   d4598:	bd08      	pop	{r3, pc}
   d459a:	0000      	.short	0x0000
   d459c:	00030274 	.word	0x00030274

000d45a0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b03      	ldr	r3, [pc, #12]	; (d45b0 <hal_ble_gatt_client_write_with_response+0x10>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d45aa:	9301      	str	r3, [sp, #4]
   d45ac:	bd08      	pop	{r3, pc}
   d45ae:	0000      	.short	0x0000
   d45b0:	00030274 	.word	0x00030274

000d45b4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b03      	ldr	r3, [pc, #12]	; (d45c4 <hal_ble_gatt_client_write_without_response+0x10>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d45be:	9301      	str	r3, [sp, #4]
   d45c0:	bd08      	pop	{r3, pc}
   d45c2:	0000      	.short	0x0000
   d45c4:	00030274 	.word	0x00030274

000d45c8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b03      	ldr	r3, [pc, #12]	; (d45d8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d45d2:	9301      	str	r3, [sp, #4]
   d45d4:	bd08      	pop	{r3, pc}
   d45d6:	0000      	.short	0x0000
   d45d8:	00030274 	.word	0x00030274

000d45dc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b03      	ldr	r3, [pc, #12]	; (d45ec <hal_ble_set_callback_on_periph_link_events+0x10>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d45e6:	9301      	str	r3, [sp, #4]
   d45e8:	bd08      	pop	{r3, pc}
   d45ea:	0000      	.short	0x0000
   d45ec:	00030274 	.word	0x00030274

000d45f0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b03      	ldr	r3, [pc, #12]	; (d4600 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d45fa:	9301      	str	r3, [sp, #4]
   d45fc:	bd08      	pop	{r3, pc}
   d45fe:	0000      	.short	0x0000
   d4600:	00030274 	.word	0x00030274

000d4604 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b03      	ldr	r3, [pc, #12]	; (d4614 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d460e:	9301      	str	r3, [sp, #4]
   d4610:	bd08      	pop	{r3, pc}
   d4612:	0000      	.short	0x0000
   d4614:	00030274 	.word	0x00030274

000d4618 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <os_thread_is_current+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	689b      	ldr	r3, [r3, #8]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030248 	.word	0x00030248

000d4628 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <os_thread_join+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	691b      	ldr	r3, [r3, #16]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030248 	.word	0x00030248

000d4638 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <os_thread_cleanup+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030248 	.word	0x00030248

000d4648 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <os_mutex_create+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030248 	.word	0x00030248

000d4658 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <os_mutex_recursive_create+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030248 	.word	0x00030248

000d4668 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <os_mutex_recursive_lock+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030248 	.word	0x00030248

000d4678 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <os_mutex_recursive_unlock+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030248 	.word	0x00030248

000d4688 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <inet_inet_ntop+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	695b      	ldr	r3, [r3, #20]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030264 	.word	0x00030264

000d4698 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_USART_Init+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	681b      	ldr	r3, [r3, #0]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003023c 	.word	0x0003023c

000d46a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USART_Write_Data+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	68db      	ldr	r3, [r3, #12]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003023c 	.word	0x0003023c

000d46b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USART_Available_Data+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	691b      	ldr	r3, [r3, #16]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003023c 	.word	0x0003023c

000d46c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USART_Read_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003023c 	.word	0x0003023c

000d46d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_USART_Peek_Data+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	699b      	ldr	r3, [r3, #24]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003023c 	.word	0x0003023c

000d46e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USART_Flush_Data+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	69db      	ldr	r3, [r3, #28]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003023c 	.word	0x0003023c

000d46f8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USART_Is_Enabled+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a1b      	ldr	r3, [r3, #32]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003023c 	.word	0x0003023c

000d4708 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_USART_Available_Data_For_Write+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003023c 	.word	0x0003023c

000d4718 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_I2C_Write_Data+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6a1b      	ldr	r3, [r3, #32]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030228 	.word	0x00030228

000d4728 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_I2C_Available_Data+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030228 	.word	0x00030228

000d4738 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_I2C_Read_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030228 	.word	0x00030228

000d4748 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_I2C_Peek_Data+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030228 	.word	0x00030228

000d4758 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_I2C_Flush_Data+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030228 	.word	0x00030228

000d4768 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_I2C_Is_Enabled+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030228 	.word	0x00030228

000d4778 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_I2C_Init+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030228 	.word	0x00030228

000d4788 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_USB_USART_Init+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	681b      	ldr	r3, [r3, #0]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003024c 	.word	0x0003024c

000d4798 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_USB_USART_Begin+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	685b      	ldr	r3, [r3, #4]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003024c 	.word	0x0003024c

000d47a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_USB_USART_Available_Data+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	691b      	ldr	r3, [r3, #16]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003024c 	.word	0x0003024c

000d47b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	695b      	ldr	r3, [r3, #20]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003024c 	.word	0x0003024c

000d47c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_USB_USART_Receive_Data+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	699b      	ldr	r3, [r3, #24]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003024c 	.word	0x0003024c

000d47d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_USB_USART_Send_Data+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	69db      	ldr	r3, [r3, #28]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003024c 	.word	0x0003024c

000d47e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_USB_USART_Flush_Data+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a1b      	ldr	r3, [r3, #32]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003024c 	.word	0x0003024c

000d47f8 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <LED_SetSignalingColor+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	685b      	ldr	r3, [r3, #4]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030260 	.word	0x00030260

000d4808 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <LED_Signaling_Start+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	689b      	ldr	r3, [r3, #8]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030260 	.word	0x00030260

000d4818 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <LED_Signaling_Stop+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	68db      	ldr	r3, [r3, #12]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030260 	.word	0x00030260

000d4828 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <LED_SetBrightness+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	691b      	ldr	r3, [r3, #16]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030260 	.word	0x00030260

000d4838 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <LED_RGB_IsOverRidden+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	699b      	ldr	r3, [r3, #24]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030260 	.word	0x00030260

000d4848 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <LED_On+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	69db      	ldr	r3, [r3, #28]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030260 	.word	0x00030260

000d4858 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <panic_+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030260 	.word	0x00030260

000d4868 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <log_message+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030260 	.word	0x00030260

000d4878 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <set_system_mode+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	685b      	ldr	r3, [r3, #4]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030220 	.word	0x00030220

000d4888 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b03      	ldr	r3, [pc, #12]	; (d4898 <system_ctrl_set_app_request_handler+0x10>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4892:	9301      	str	r3, [sp, #4]
   d4894:	bd08      	pop	{r3, pc}
   d4896:	0000      	.short	0x0000
   d4898:	00030220 	.word	0x00030220

000d489c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b03      	ldr	r3, [pc, #12]	; (d48ac <system_ctrl_set_result+0x10>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48a6:	9301      	str	r3, [sp, #4]
   d48a8:	bd08      	pop	{r3, pc}
   d48aa:	0000      	.short	0x0000
   d48ac:	00030220 	.word	0x00030220

000d48b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <network_connect+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	685b      	ldr	r3, [r3, #4]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030240 	.word	0x00030240

000d48c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <network_connecting+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	689b      	ldr	r3, [r3, #8]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030240 	.word	0x00030240

000d48d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <network_disconnect+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	68db      	ldr	r3, [r3, #12]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030240 	.word	0x00030240

000d48e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <network_ready+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	691b      	ldr	r3, [r3, #16]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030240 	.word	0x00030240

000d48f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <network_on+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	695b      	ldr	r3, [r3, #20]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030240 	.word	0x00030240

000d4900 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <network_off+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	699b      	ldr	r3, [r3, #24]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030240 	.word	0x00030240

000d4910 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <network_listen+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	69db      	ldr	r3, [r3, #28]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030240 	.word	0x00030240

000d4920 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <network_listening+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6a1b      	ldr	r3, [r3, #32]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030240 	.word	0x00030240

000d4930 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <network_set_listen_timeout+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030240 	.word	0x00030240

000d4940 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <network_get_listen_timeout+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030240 	.word	0x00030240

000d4950 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030244 	.word	0x00030244

000d4960 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <malloc+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	681b      	ldr	r3, [r3, #0]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003021c 	.word	0x0003021c

000d4970 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <free+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	685b      	ldr	r3, [r3, #4]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	0003021c 	.word	0x0003021c

000d4980 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <realloc+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	689b      	ldr	r3, [r3, #8]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	0003021c 	.word	0x0003021c

000d4990 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4990:	2200      	movs	r2, #0
   d4992:	4611      	mov	r1, r2
   d4994:	6840      	ldr	r0, [r0, #4]
   d4996:	f7ff bfc3 	b.w	d4920 <network_listening>

000d499a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d499a:	2200      	movs	r2, #0
   d499c:	4611      	mov	r1, r2
   d499e:	6840      	ldr	r0, [r0, #4]
   d49a0:	f7ff bfce 	b.w	d4940 <network_get_listen_timeout>

000d49a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d49a4:	2200      	movs	r2, #0
   d49a6:	6840      	ldr	r0, [r0, #4]
   d49a8:	f7ff bfc2 	b.w	d4930 <network_set_listen_timeout>

000d49ac <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d49ac:	2200      	movs	r2, #0
   d49ae:	f081 0101 	eor.w	r1, r1, #1
   d49b2:	6840      	ldr	r0, [r0, #4]
   d49b4:	f7ff bfac 	b.w	d4910 <network_listen>

000d49b8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d49b8:	2300      	movs	r3, #0
   d49ba:	461a      	mov	r2, r3
   d49bc:	4619      	mov	r1, r3
   d49be:	6840      	ldr	r0, [r0, #4]
   d49c0:	f7ff bf9e 	b.w	d4900 <network_off>

000d49c4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d49c4:	2300      	movs	r3, #0
   d49c6:	461a      	mov	r2, r3
   d49c8:	4619      	mov	r1, r3
   d49ca:	6840      	ldr	r0, [r0, #4]
   d49cc:	f7ff bf90 	b.w	d48f0 <network_on>

000d49d0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d49d0:	2200      	movs	r2, #0
   d49d2:	4611      	mov	r1, r2
   d49d4:	6840      	ldr	r0, [r0, #4]
   d49d6:	f7ff bf83 	b.w	d48e0 <network_ready>

000d49da <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d49da:	2200      	movs	r2, #0
   d49dc:	4611      	mov	r1, r2
   d49de:	6840      	ldr	r0, [r0, #4]
   d49e0:	f7ff bf6e 	b.w	d48c0 <network_connecting>

000d49e4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49e4:	2200      	movs	r2, #0
   d49e6:	2102      	movs	r1, #2
   d49e8:	6840      	ldr	r0, [r0, #4]
   d49ea:	f7ff bf71 	b.w	d48d0 <network_disconnect>

000d49ee <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49ee:	2300      	movs	r3, #0
   d49f0:	461a      	mov	r2, r3
   d49f2:	6840      	ldr	r0, [r0, #4]
   d49f4:	f7ff bf5c 	b.w	d48b0 <network_connect>

000d49f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49f8:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d49fa:	2203      	movs	r2, #3
   d49fc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d49fe:	4a02      	ldr	r2, [pc, #8]	; (d4a08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a00:	601a      	str	r2, [r3, #0]
   d4a02:	4770      	bx	lr
   d4a04:	2003e3c4 	.word	0x2003e3c4
   d4a08:	000d6ac0 	.word	0x000d6ac0

000d4a0c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4a0c:	4770      	bx	lr

000d4a0e <_ZN8SPIClassD0Ev>:
   d4a0e:	b510      	push	{r4, lr}
   d4a10:	2110      	movs	r1, #16
   d4a12:	4604      	mov	r4, r0
   d4a14:	f001 fddf 	bl	d65d6 <_ZdlPvj>
   d4a18:	4620      	mov	r0, r4
   d4a1a:	bd10      	pop	{r4, pc}

000d4a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4a1c:	b570      	push	{r4, r5, r6, lr}
   d4a1e:	4b08      	ldr	r3, [pc, #32]	; (d4a40 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4a20:	6003      	str	r3, [r0, #0]
   d4a22:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4a24:	2500      	movs	r5, #0
   d4a26:	460e      	mov	r6, r1
   d4a28:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4a2c:	f7ff fe0c 	bl	d4648 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4a30:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4a32:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4a34:	f7ff fd4e 	bl	d44d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4a38:	60a5      	str	r5, [r4, #8]
}
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	bd70      	pop	{r4, r5, r6, pc}
   d4a3e:	bf00      	nop
   d4a40:	000d6af4 	.word	0x000d6af4

000d4a44 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4a44:	7900      	ldrb	r0, [r0, #4]
   d4a46:	f7ff bd4d 	b.w	d44e4 <HAL_SPI_Is_Enabled>
	...

000d4a4c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4a4c:	4b04      	ldr	r3, [pc, #16]	; (d4a60 <_GLOBAL__sub_I_System+0x14>)
   d4a4e:	2000      	movs	r0, #0
   d4a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4a54:	7018      	strb	r0, [r3, #0]
   d4a56:	8058      	strh	r0, [r3, #2]
   d4a58:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a5a:	f7ff bf0d 	b.w	d4878 <set_system_mode>
   d4a5e:	bf00      	nop
   d4a60:	2003e3cc 	.word	0x2003e3cc

000d4a64 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a64:	b510      	push	{r4, lr}
   d4a66:	4604      	mov	r4, r0
{
	free(buffer);
   d4a68:	6800      	ldr	r0, [r0, #0]
   d4a6a:	f7ff ff81 	bl	d4970 <free>
}
   d4a6e:	4620      	mov	r0, r4
   d4a70:	bd10      	pop	{r4, pc}

000d4a72 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a72:	b510      	push	{r4, lr}
   d4a74:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a76:	6800      	ldr	r0, [r0, #0]
   d4a78:	b108      	cbz	r0, d4a7e <_ZN6String10invalidateEv+0xc>
   d4a7a:	f7ff ff79 	bl	d4970 <free>
	buffer = NULL;
   d4a7e:	2300      	movs	r3, #0
   d4a80:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a82:	60a3      	str	r3, [r4, #8]
   d4a84:	6063      	str	r3, [r4, #4]
   d4a86:	bd10      	pop	{r4, pc}

000d4a88 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a88:	b538      	push	{r3, r4, r5, lr}
   d4a8a:	4604      	mov	r4, r0
   d4a8c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a8e:	6800      	ldr	r0, [r0, #0]
   d4a90:	3101      	adds	r1, #1
   d4a92:	f7ff ff75 	bl	d4980 <realloc>
	if (newbuffer) {
   d4a96:	b110      	cbz	r0, d4a9e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a98:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4a9c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a9e:	bd38      	pop	{r3, r4, r5, pc}

000d4aa0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4aa0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4aa2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4aa4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4aa6:	b113      	cbz	r3, d4aae <_ZN6String7reserveEj+0xe>
   d4aa8:	6843      	ldr	r3, [r0, #4]
   d4aaa:	428b      	cmp	r3, r1
   d4aac:	d207      	bcs.n	d4abe <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f7ff ffea 	bl	d4a88 <_ZN6String12changeBufferEj>
   d4ab4:	b120      	cbz	r0, d4ac0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4ab6:	68a3      	ldr	r3, [r4, #8]
   d4ab8:	b90b      	cbnz	r3, d4abe <_ZN6String7reserveEj+0x1e>
   d4aba:	6822      	ldr	r2, [r4, #0]
   d4abc:	7013      	strb	r3, [r2, #0]
   d4abe:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4ac0:	bd10      	pop	{r4, pc}

000d4ac2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ac2:	b570      	push	{r4, r5, r6, lr}
   d4ac4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4ac6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ac8:	4604      	mov	r4, r0
   d4aca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4acc:	f7ff ffe8 	bl	d4aa0 <_ZN6String7reserveEj>
   d4ad0:	b918      	cbnz	r0, d4ada <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	f7ff ffcd 	bl	d4a72 <_ZN6String10invalidateEv>
		return *this;
   d4ad8:	e009      	b.n	d4aee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4ada:	462a      	mov	r2, r5
   d4adc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4ade:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4ae0:	6820      	ldr	r0, [r4, #0]
   d4ae2:	f001 fee0 	bl	d68a6 <memcpy>
	buffer[len] = 0;
   d4ae6:	6822      	ldr	r2, [r4, #0]
   d4ae8:	68a3      	ldr	r3, [r4, #8]
   d4aea:	2100      	movs	r1, #0
   d4aec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4aee:	4620      	mov	r0, r4
   d4af0:	bd70      	pop	{r4, r5, r6, pc}

000d4af2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4af2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4af4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4af6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4af8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4afa:	6043      	str	r3, [r0, #4]
	len = 0;
   d4afc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4afe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4b00:	460d      	mov	r5, r1
   d4b02:	b139      	cbz	r1, d4b14 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4b04:	4608      	mov	r0, r1
   d4b06:	f001 ff25 	bl	d6954 <strlen>
   d4b0a:	4629      	mov	r1, r5
   d4b0c:	4602      	mov	r2, r0
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f7ff ffd7 	bl	d4ac2 <_ZN6String4copyEPKcj>
}
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd38      	pop	{r3, r4, r5, pc}

000d4b18 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4b18:	b538      	push	{r3, r4, r5, lr}
   d4b1a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b1c:	460c      	mov	r4, r1
   d4b1e:	b141      	cbz	r1, d4b32 <_ZN6StringaSEPKc+0x1a>
   d4b20:	4608      	mov	r0, r1
   d4b22:	f001 ff17 	bl	d6954 <strlen>
   d4b26:	4621      	mov	r1, r4
   d4b28:	4602      	mov	r2, r0
   d4b2a:	4628      	mov	r0, r5
   d4b2c:	f7ff ffc9 	bl	d4ac2 <_ZN6String4copyEPKcj>
   d4b30:	e001      	b.n	d4b36 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4b32:	f7ff ff9e 	bl	d4a72 <_ZN6String10invalidateEv>

	return *this;
}
   d4b36:	4628      	mov	r0, r5
   d4b38:	bd38      	pop	{r3, r4, r5, pc}

000d4b3a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b3a:	4770      	bx	lr

000d4b3c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b3c:	2000      	movs	r0, #0
   d4b3e:	4770      	bx	lr

000d4b40 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b40:	4770      	bx	lr

000d4b42 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b42:	2000      	movs	r0, #0
   d4b44:	4770      	bx	lr

000d4b46 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b46:	4770      	bx	lr

000d4b48 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b48:	2000      	movs	r0, #0
   d4b4a:	4770      	bx	lr

000d4b4c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b4c:	b510      	push	{r4, lr}
   d4b4e:	2114      	movs	r1, #20
   d4b50:	4604      	mov	r4, r0
   d4b52:	f001 fd40 	bl	d65d6 <_ZdlPvj>
   d4b56:	4620      	mov	r0, r4
   d4b58:	bd10      	pop	{r4, pc}

000d4b5a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4b5a:	b510      	push	{r4, lr}
   d4b5c:	2114      	movs	r1, #20
   d4b5e:	4604      	mov	r4, r0
   d4b60:	f001 fd39 	bl	d65d6 <_ZdlPvj>
   d4b64:	4620      	mov	r0, r4
   d4b66:	bd10      	pop	{r4, pc}

000d4b68 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4b68:	b510      	push	{r4, lr}
   d4b6a:	2114      	movs	r1, #20
   d4b6c:	4604      	mov	r4, r0
   d4b6e:	f001 fd32 	bl	d65d6 <_ZdlPvj>
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd10      	pop	{r4, pc}

000d4b76 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4b76:	f7ff ba90 	b.w	d409a <_ZdlPv>

000d4b7a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4b7a:	f7ff ba8e 	b.w	d409a <_ZdlPv>

000d4b7e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4b7e:	f7ff ba8c 	b.w	d409a <_ZdlPv>
	...

000d4b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4b84:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4b86:	200a      	movs	r0, #10
   d4b88:	4a02      	ldr	r2, [pc, #8]	; (d4b94 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d4b8a:	2100      	movs	r1, #0
   d4b8c:	f7ff fe64 	bl	d4858 <panic_>
    }
}
   d4b90:	bd08      	pop	{r3, pc}
   d4b92:	bf00      	nop
   d4b94:	000d4505 	.word	0x000d4505

000d4b98 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b98:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4b9a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b9c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4b9e:	689b      	ldr	r3, [r3, #8]
   d4ba0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ba2:	68a3      	ldr	r3, [r4, #8]
   d4ba4:	3b01      	subs	r3, #1
   d4ba6:	60a3      	str	r3, [r4, #8]
   d4ba8:	b92b      	cbnz	r3, d4bb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4baa:	6823      	ldr	r3, [r4, #0]
   d4bac:	4620      	mov	r0, r4
   d4bae:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4bb4:	4718      	bx	r3
   d4bb6:	bd10      	pop	{r4, pc}

000d4bb8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4bb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4bbc:	b2da      	uxtb	r2, r3
   d4bbe:	2a09      	cmp	r2, #9
   d4bc0:	d801      	bhi.n	d4bc6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4bc2:	4618      	mov	r0, r3
   d4bc4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4bc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4bca:	2b05      	cmp	r3, #5
   d4bcc:	d801      	bhi.n	d4bd2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4bce:	3857      	subs	r0, #87	; 0x57
   d4bd0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4bd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4bd6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4bd8:	bf94      	ite	ls
   d4bda:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4bdc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4be0:	4770      	bx	lr
	...

000d4be4 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4be4:	b510      	push	{r4, lr}
            locked_(false) {
   d4be6:	2300      	movs	r3, #0
   d4be8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4bea:	4b04      	ldr	r3, [pc, #16]	; (d4bfc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4bec:	4604      	mov	r4, r0
   d4bee:	6818      	ldr	r0, [r3, #0]
   d4bf0:	f7ff fd3a 	bl	d4668 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4bf4:	2301      	movs	r3, #1
   d4bf6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}
   d4bfc:	2003e3e0 	.word	0x2003e3e0

000d4c00 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4c00:	b510      	push	{r4, lr}
        if (locked_) {
   d4c02:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4c04:	4604      	mov	r4, r0
        if (locked_) {
   d4c06:	b11b      	cbz	r3, d4c10 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4c08:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4c0a:	6818      	ldr	r0, [r3, #0]
   d4c0c:	f7ff fd34 	bl	d4678 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4c10:	4620      	mov	r0, r4
   d4c12:	bd10      	pop	{r4, pc}
   d4c14:	2003e3e0 	.word	0x2003e3e0

000d4c18 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4c18:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4c1a:	7982      	ldrb	r2, [r0, #6]
   d4c1c:	798b      	ldrb	r3, [r1, #6]
   d4c1e:	429a      	cmp	r2, r3
   d4c20:	d106      	bne.n	d4c30 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4c22:	2206      	movs	r2, #6
   d4c24:	f001 fe30 	bl	d6888 <memcmp>
   d4c28:	fab0 f080 	clz	r0, r0
   d4c2c:	0940      	lsrs	r0, r0, #5
   d4c2e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4c30:	2000      	movs	r0, #0
}
   d4c32:	bd08      	pop	{r3, pc}

000d4c34 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4c34:	b510      	push	{r4, lr}
        : uuid_() {
   d4c36:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4c38:	4604      	mov	r4, r0
        : uuid_() {
   d4c3a:	2100      	movs	r1, #0
   d4c3c:	f001 fe59 	bl	d68f2 <memset>
}
   d4c40:	4620      	mov	r0, r4
   d4c42:	bd10      	pop	{r4, pc}

000d4c44 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4c44:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d4c46:	4603      	mov	r3, r0
   d4c48:	f101 0214 	add.w	r2, r1, #20
   d4c4c:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c50:	f843 4b04 	str.w	r4, [r3], #4
   d4c54:	4291      	cmp	r1, r2
   d4c56:	d1f9      	bne.n	d4c4c <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d4c5a:	b570      	push	{r4, r5, r6, lr}
   d4c5c:	460c      	mov	r4, r1
   d4c5e:	4605      	mov	r5, r0
   d4c60:	4616      	mov	r6, r2
        : BleUuid() {
   d4c62:	f7ff ffe7 	bl	d4c34 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d4c66:	b92c      	cbnz	r4, d4c74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4c68:	2210      	movs	r2, #16
   d4c6a:	4621      	mov	r1, r4
   d4c6c:	4628      	mov	r0, r5
   d4c6e:	f001 fe40 	bl	d68f2 <memset>
   d4c72:	e016      	b.n	d4ca2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d4c74:	2e01      	cmp	r6, #1
   d4c76:	d109      	bne.n	d4c8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4c78:	462b      	mov	r3, r5
   d4c7a:	f104 0210 	add.w	r2, r4, #16
   d4c7e:	f854 1b04 	ldr.w	r1, [r4], #4
   d4c82:	f843 1b04 	str.w	r1, [r3], #4
   d4c86:	4294      	cmp	r4, r2
   d4c88:	d1f9      	bne.n	d4c7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4c8a:	e008      	b.n	d4c9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4c8c:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4c8e:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4c90:	5ce1      	ldrb	r1, [r4, r3]
   d4c92:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4c96:	3b01      	subs	r3, #1
   d4c98:	b2db      	uxtb	r3, r3
   d4c9a:	2bff      	cmp	r3, #255	; 0xff
   d4c9c:	d1f8      	bne.n	d4c90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4c9e:	2301      	movs	r3, #1
   d4ca0:	742b      	strb	r3, [r5, #16]
    }
}
   d4ca2:	4628      	mov	r0, r5
   d4ca4:	bd70      	pop	{r4, r5, r6, pc}

000d4ca6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4ca6:	b538      	push	{r3, r4, r5, lr}
   d4ca8:	4604      	mov	r4, r0
   d4caa:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4cac:	461a      	mov	r2, r3
   d4cae:	f7ff ffd4 	bl	d4c5a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d4cb2:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4cb4:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4cb6:	0a2d      	lsrs	r5, r5, #8
   d4cb8:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4cba:	7423      	strb	r3, [r4, #16]
}
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	bd38      	pop	{r3, r4, r5, pc}

000d4cc0 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d4cc0:	7c03      	ldrb	r3, [r0, #16]
   d4cc2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d4cc6:	bf14      	ite	ne
   d4cc8:	2001      	movne	r0, #1
   d4cca:	2000      	moveq	r0, #0
   d4ccc:	4770      	bx	lr

000d4cce <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4cce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4cd0:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4cd2:	f7ff fff5 	bl	d4cc0 <_ZNK8particle7BleUuid4typeEv>
   d4cd6:	b908      	cbnz	r0, d4cdc <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d4cd8:	8820      	ldrh	r0, [r4, #0]
   d4cda:	e009      	b.n	d4cf0 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4cdc:	2210      	movs	r2, #16
   d4cde:	2100      	movs	r1, #0
   d4ce0:	4668      	mov	r0, sp
   d4ce2:	f001 fe06 	bl	d68f2 <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4ce6:	2210      	movs	r2, #16
   d4ce8:	4669      	mov	r1, sp
   d4cea:	4620      	mov	r0, r4
   d4cec:	f001 fdcc 	bl	d6888 <memcmp>
   d4cf0:	3000      	adds	r0, #0
   d4cf2:	bf18      	it	ne
   d4cf4:	2001      	movne	r0, #1
    }
}
   d4cf6:	b004      	add	sp, #16
   d4cf8:	bd10      	pop	{r4, pc}

000d4cfa <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d4cfa:	8800      	ldrh	r0, [r0, #0]
   d4cfc:	4770      	bx	lr

000d4cfe <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d4cfe:	4770      	bx	lr

000d4d00 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4d00:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d4d02:	4603      	mov	r3, r0
   d4d04:	f101 0214 	add.w	r2, r1, #20
   d4d08:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d0c:	f843 4b04 	str.w	r4, [r3], #4
   d4d10:	4291      	cmp	r1, r2
   d4d12:	d1f9      	bne.n	d4d08 <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d4d14:	bd10      	pop	{r4, pc}

000d4d16 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4d16:	b510      	push	{r4, lr}
    if (uuid128) {
   d4d18:	b151      	cbz	r1, d4d30 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d1a:	4603      	mov	r3, r0
   d4d1c:	f101 0210 	add.w	r2, r1, #16
   d4d20:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d24:	f843 4b04 	str.w	r4, [r3], #4
   d4d28:	4291      	cmp	r1, r2
   d4d2a:	d1f9      	bne.n	d4d20 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4d2c:	2301      	movs	r3, #1
   d4d2e:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d4d30:	bd10      	pop	{r4, pc}

000d4d32 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4d32:	b510      	push	{r4, lr}
   d4d34:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4d36:	f7ff ffc3 	bl	d4cc0 <_ZNK8particle7BleUuid4typeEv>
   d4d3a:	b928      	cbnz	r0, d4d48 <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4d3c:	8808      	ldrh	r0, [r1, #0]
   d4d3e:	8823      	ldrh	r3, [r4, #0]
   d4d40:	1a1b      	subs	r3, r3, r0
   d4d42:	4258      	negs	r0, r3
   d4d44:	4158      	adcs	r0, r3
   d4d46:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d48:	2210      	movs	r2, #16
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f001 fd9c 	bl	d6888 <memcmp>
   d4d50:	fab0 f080 	clz	r0, r0
   d4d54:	0940      	lsrs	r0, r0, #5
    }
}
   d4d56:	bd10      	pop	{r4, pc}

000d4d58 <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d4d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4d5a:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d4d5c:	460e      	mov	r6, r1
   d4d5e:	b919      	cbnz	r1, d4d68 <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4d60:	2210      	movs	r2, #16
   d4d62:	f001 fdc6 	bl	d68f2 <memset>
   d4d66:	e051      	b.n	d4e0c <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4d68:	2124      	movs	r1, #36	; 0x24
   d4d6a:	4630      	mov	r0, r6
   d4d6c:	f001 fdfa 	bl	d6964 <strnlen>
   d4d70:	2804      	cmp	r0, #4
   d4d72:	d002      	beq.n	d4d7a <_ZN8particle7BleUuid9constructEPKc+0x22>
   d4d74:	2700      	movs	r7, #0
   d4d76:	2410      	movs	r4, #16
   d4d78:	e03b      	b.n	d4df2 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4d7a:	7830      	ldrb	r0, [r6, #0]
   d4d7c:	f7ff ff1c 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4d80:	1e04      	subs	r4, r0, #0
   d4d82:	db47      	blt.n	d4e14 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4d84:	7870      	ldrb	r0, [r6, #1]
   d4d86:	f7ff ff17 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4d8a:	2800      	cmp	r0, #0
   d4d8c:	db42      	blt.n	d4e14 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4d8e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4d92:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4d96:	78b0      	ldrb	r0, [r6, #2]
   d4d98:	f7ff ff0e 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4d9c:	1e04      	subs	r4, r0, #0
   d4d9e:	db39      	blt.n	d4e14 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4da0:	78f0      	ldrb	r0, [r6, #3]
   d4da2:	f7ff ff09 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4da6:	2800      	cmp	r0, #0
   d4da8:	db34      	blt.n	d4e14 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4daa:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d4dae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4db2:	b2c0      	uxtb	r0, r0
   d4db4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d4db8:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d4dba:	2300      	movs	r3, #0
   d4dbc:	e027      	b.n	d4e0e <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4dbe:	b32c      	cbz	r4, d4e0c <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d4dc0:	5df0      	ldrb	r0, [r6, r7]
   d4dc2:	f7ff fef9 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4dc6:	0603      	lsls	r3, r0, #24
   d4dc8:	d412      	bmi.n	d4df0 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d4dca:	3c01      	subs	r4, #1
   d4dcc:	0100      	lsls	r0, r0, #4
   d4dce:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4dd0:	2124      	movs	r1, #36	; 0x24
   d4dd2:	4630      	mov	r0, r6
   d4dd4:	f001 fdc6 	bl	d6964 <strnlen>
   d4dd8:	3701      	adds	r7, #1
   d4dda:	4287      	cmp	r7, r0
   d4ddc:	d208      	bcs.n	d4df0 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d4dde:	5df0      	ldrb	r0, [r6, r7]
   d4de0:	f7ff feea 	bl	d4bb8 <_ZN8particle11hexToNibbleEc>
   d4de4:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4de6:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d4de8:	bfa2      	ittt	ge
   d4dea:	5d2b      	ldrbge	r3, [r5, r4]
   d4dec:	4318      	orrge	r0, r3
   d4dee:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4df0:	3701      	adds	r7, #1
   d4df2:	2124      	movs	r1, #36	; 0x24
   d4df4:	4630      	mov	r0, r6
   d4df6:	f001 fdb5 	bl	d6964 <strnlen>
   d4dfa:	4287      	cmp	r7, r0
   d4dfc:	d3df      	bcc.n	d4dbe <_ZN8particle7BleUuid9constructEPKc+0x66>
   d4dfe:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d4e00:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4e02:	42a5      	cmp	r5, r4
   d4e04:	d002      	beq.n	d4e0c <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d4e06:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4e0a:	e7fa      	b.n	d4e02 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4e0c:	2301      	movs	r3, #1
   d4e0e:	742b      	strb	r3, [r5, #16]
}
   d4e10:	b003      	add	sp, #12
   d4e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d4e14:	2300      	movs	r3, #0
   d4e16:	802b      	strh	r3, [r5, #0]
   d4e18:	e7cf      	b.n	d4dba <_ZN8particle7BleUuid9constructEPKc+0x62>

000d4e1a <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d4e1a:	b538      	push	{r3, r4, r5, lr}
   d4e1c:	4604      	mov	r4, r0
   d4e1e:	460d      	mov	r5, r1
        : BleUuid() {
   d4e20:	f7ff ff08 	bl	d4c34 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4e24:	4620      	mov	r0, r4
   d4e26:	4629      	mov	r1, r5
   d4e28:	f7ff ff96 	bl	d4d58 <_ZN8particle7BleUuid9constructEPKc>
}
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	bd38      	pop	{r3, r4, r5, pc}

000d4e30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4e32:	b18b      	cbz	r3, d4e58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4e34:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4e36:	1ce5      	adds	r5, r4, #3
   d4e38:	428d      	cmp	r5, r1
   d4e3a:	d80f      	bhi.n	d4e5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4e3c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4e3e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4e40:	5d87      	ldrb	r7, [r0, r6]
   d4e42:	4297      	cmp	r7, r2
   d4e44:	d105      	bne.n	d4e52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4e46:	442e      	add	r6, r5
   d4e48:	42b1      	cmp	r1, r6
   d4e4a:	d307      	bcc.n	d4e5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4e4c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4e4e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4e52:	3501      	adds	r5, #1
   d4e54:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4e56:	e7ee      	b.n	d4e36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4e58:	4618      	mov	r0, r3
   d4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e5c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4e64:	4604      	mov	r4, r0
   d4e66:	460e      	mov	r6, r1
   d4e68:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4e6a:	4617      	mov	r7, r2
   d4e6c:	2a00      	cmp	r2, #0
   d4e6e:	d03a      	beq.n	d4ee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4e70:	460a      	mov	r2, r1
   d4e72:	ab01      	add	r3, sp, #4
   d4e74:	6a01      	ldr	r1, [r0, #32]
   d4e76:	f7ff ffdb 	bl	d4e30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4e7a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4e7e:	6a22      	ldr	r2, [r4, #32]
   d4e80:	bb03      	cbnz	r3, d4ec4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4e82:	b1f8      	cbz	r0, d4ec4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4e84:	1c96      	adds	r6, r2, #2
   d4e86:	442e      	add	r6, r5
   d4e88:	1a36      	subs	r6, r6, r0
   d4e8a:	2e1f      	cmp	r6, #31
   d4e8c:	d82b      	bhi.n	d4ee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4e8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4e92:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4e96:	ebc8 0202 	rsb	r2, r8, r2
   d4e9a:	1a12      	subs	r2, r2, r0
   d4e9c:	eb00 0108 	add.w	r1, r0, r8
   d4ea0:	eb05 0009 	add.w	r0, r5, r9
   d4ea4:	b292      	uxth	r2, r2
   d4ea6:	4421      	add	r1, r4
   d4ea8:	4420      	add	r0, r4
   d4eaa:	f001 fd07 	bl	d68bc <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4eae:	1c6b      	adds	r3, r5, #1
   d4eb0:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4eb4:	462a      	mov	r2, r5
   d4eb6:	4639      	mov	r1, r7
   d4eb8:	eb04 0009 	add.w	r0, r4, r9
   d4ebc:	f001 fcf3 	bl	d68a6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4ec0:	6226      	str	r6, [r4, #32]
   d4ec2:	e010      	b.n	d4ee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4ec4:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4ec6:	182b      	adds	r3, r5, r0
   d4ec8:	2b1f      	cmp	r3, #31
   d4eca:	d80c      	bhi.n	d4ee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4ecc:	1c6b      	adds	r3, r5, #1
   d4ece:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4ed0:	4422      	add	r2, r4
   d4ed2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4ed4:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4ed6:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4ed8:	4420      	add	r0, r4
   d4eda:	462a      	mov	r2, r5
   d4edc:	f001 fce3 	bl	d68a6 <memcpy>
        selfLen_ += len;
   d4ee0:	6a22      	ldr	r2, [r4, #32]
   d4ee2:	442a      	add	r2, r5
   d4ee4:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4ee6:	6a20      	ldr	r0, [r4, #32]
}
   d4ee8:	b003      	add	sp, #12
   d4eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4eee <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4eee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4ef0:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4ef2:	4603      	mov	r3, r0
   d4ef4:	f100 021f 	add.w	r2, r0, #31
   d4ef8:	2000      	movs	r0, #0
   d4efa:	f803 0b01 	strb.w	r0, [r3], #1
   d4efe:	4293      	cmp	r3, r2
   d4f00:	f04f 0100 	mov.w	r1, #0
   d4f04:	d1f9      	bne.n	d4efa <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4f06:	aa04      	add	r2, sp, #16
   d4f08:	2306      	movs	r3, #6
   d4f0a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4f0e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4f10:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4f12:	9100      	str	r1, [sp, #0]
   d4f14:	4620      	mov	r0, r4
   d4f16:	4619      	mov	r1, r3
   d4f18:	f7ff ffa2 	bl	d4e60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	b004      	add	sp, #16
   d4f20:	bd10      	pop	{r4, pc}

000d4f22 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f24:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f26:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f28:	ab01      	add	r3, sp, #4
   d4f2a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4f2c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4f2e:	f7ff ff7f 	bl	d4e30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4f32:	4605      	mov	r5, r0
   d4f34:	b178      	cbz	r0, d4f56 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4f36:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4f38:	6a22      	ldr	r2, [r4, #32]
   d4f3a:	1829      	adds	r1, r5, r0
   d4f3c:	1a12      	subs	r2, r2, r0
   d4f3e:	1b52      	subs	r2, r2, r5
   d4f40:	4421      	add	r1, r4
   d4f42:	4420      	add	r0, r4
   d4f44:	f001 fcaf 	bl	d68a6 <memcpy>
        selfLen_ -= len;
   d4f48:	6a23      	ldr	r3, [r4, #32]
   d4f4a:	1b5d      	subs	r5, r3, r5
   d4f4c:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4f4e:	4631      	mov	r1, r6
   d4f50:	4620      	mov	r0, r4
   d4f52:	f7ff ffe6 	bl	d4f22 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4f56:	b002      	add	sp, #8
   d4f58:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f5c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4f5c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4f5e:	2500      	movs	r5, #0
   d4f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4f64:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4f66:	8043      	strh	r3, [r0, #2]
   d4f68:	220e      	movs	r2, #14
   d4f6a:	4629      	mov	r1, r5
   d4f6c:	7005      	strb	r5, [r0, #0]
   d4f6e:	7105      	strb	r5, [r0, #4]
   d4f70:	3006      	adds	r0, #6
   d4f72:	f001 fcbe 	bl	d68f2 <memset>
   d4f76:	f104 0014 	add.w	r0, r4, #20
   d4f7a:	f7ff fe5b 	bl	d4c34 <_ZN8particle7BleUuidC1Ev>
   d4f7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4f82:	f7ff fe57 	bl	d4c34 <_ZN8particle7BleUuidC1Ev>
   d4f86:	4904      	ldr	r1, [pc, #16]	; (d4f98 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4f88:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4f8c:	f7ff fdb1 	bl	d4af2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f90:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4f92:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d4f94:	4620      	mov	r0, r4
   d4f96:	bd38      	pop	{r3, r4, r5, pc}
   d4f98:	000d6da7 	.word	0x000d6da7

000d4f9c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4f9c:	b510      	push	{r4, lr}
   d4f9e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4fa0:	69c2      	ldr	r2, [r0, #28]
   d4fa2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4fa6:	4293      	cmp	r3, r2
   d4fa8:	4618      	mov	r0, r3
   d4faa:	d006      	beq.n	d4fba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4fac:	6804      	ldr	r4, [r0, #0]
   d4fae:	8824      	ldrh	r4, [r4, #0]
   d4fb0:	428c      	cmp	r4, r1
   d4fb2:	f103 0308 	add.w	r3, r3, #8
   d4fb6:	d1f6      	bne.n	d4fa6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4fb8:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4fba:	2000      	movs	r0, #0
    }
   d4fbc:	bd10      	pop	{r4, pc}
	...

000d4fc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d4fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4fc4:	4680      	mov	r8, r0
   d4fc6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d4fc8:	460e      	mov	r6, r1
   d4fca:	b369      	cbz	r1, d5028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4fcc:	b362      	cbz	r2, d5028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4fce:	2af4      	cmp	r2, #244	; 0xf4
   d4fd0:	6805      	ldr	r5, [r0, #0]
   d4fd2:	bf28      	it	cs
   d4fd4:	22f4      	movcs	r2, #244	; 0xf4
   d4fd6:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d4fd8:	782a      	ldrb	r2, [r5, #0]
   d4fda:	b1a2      	cbz	r2, d5006 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d4fdc:	792b      	ldrb	r3, [r5, #4]
   d4fde:	0798      	lsls	r0, r3, #30
   d4fe0:	d507      	bpl.n	d4ff2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d4fe2:	2300      	movs	r3, #0
   d4fe4:	4622      	mov	r2, r4
   d4fe6:	89a8      	ldrh	r0, [r5, #12]
   d4fe8:	f7ff fad0 	bl	d458c <hal_ble_gatt_server_set_characteristic_value>
   d4fec:	2800      	cmp	r0, #0
   d4fee:	da02      	bge.n	d4ff6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d4ff0:	e043      	b.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d4ff2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d4ff6:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d4ffa:	792b      	ldrb	r3, [r5, #4]
   d4ffc:	06da      	lsls	r2, r3, #27
   d4ffe:	d518      	bpl.n	d5032 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5000:	2f01      	cmp	r7, #1
   d5002:	d123      	bne.n	d504c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5004:	e015      	b.n	d5032 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5006:	8868      	ldrh	r0, [r5, #2]
   d5008:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d500c:	4298      	cmp	r0, r3
   d500e:	d00d      	beq.n	d502c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d5010:	792b      	ldrb	r3, [r5, #4]
   d5012:	0759      	lsls	r1, r3, #29
   d5014:	d523      	bpl.n	d505e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5016:	2f01      	cmp	r7, #1
   d5018:	d021      	beq.n	d505e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d501a:	89a9      	ldrh	r1, [r5, #12]
   d501c:	9200      	str	r2, [sp, #0]
   d501e:	4623      	mov	r3, r4
   d5020:	4632      	mov	r2, r6
   d5022:	f7ff fac7 	bl	d45b4 <hal_ble_gatt_client_write_without_response>
   d5026:	e028      	b.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5028:	4815      	ldr	r0, [pc, #84]	; (d5080 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d502a:	e026      	b.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d502c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5030:	e023      	b.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d5032:	069a      	lsls	r2, r3, #26
   d5034:	d521      	bpl.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5036:	2f02      	cmp	r7, #2
   d5038:	d01f      	beq.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d503a:	89a8      	ldrh	r0, [r5, #12]
   d503c:	2300      	movs	r3, #0
   d503e:	4622      	mov	r2, r4
   d5040:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5042:	b002      	add	sp, #8
   d5044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5048:	f7ff badc 	b.w	d4604 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d504c:	89a8      	ldrh	r0, [r5, #12]
   d504e:	2300      	movs	r3, #0
   d5050:	4622      	mov	r2, r4
   d5052:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5054:	b002      	add	sp, #8
   d5056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d505a:	f7ff bac9 	b.w	d45f0 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d505e:	071b      	lsls	r3, r3, #28
   d5060:	d501      	bpl.n	d5066 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5062:	2f02      	cmp	r7, #2
   d5064:	d102      	bne.n	d506c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5066:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d506a:	e006      	b.n	d507a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d506c:	2300      	movs	r3, #0
   d506e:	89a9      	ldrh	r1, [r5, #12]
   d5070:	9300      	str	r3, [sp, #0]
   d5072:	4632      	mov	r2, r6
   d5074:	4623      	mov	r3, r4
   d5076:	f7ff fa93 	bl	d45a0 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d507a:	b002      	add	sp, #8
   d507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5080:	fffffef2 	.word	0xfffffef2

000d5084 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5084:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d5086:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d5088:	651a      	str	r2, [r3, #80]	; 0x50
   d508a:	4770      	bx	lr

000d508c <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d508c:	b510      	push	{r4, lr}
    return impl()->address();
   d508e:	680a      	ldr	r2, [r1, #0]
   d5090:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5094:	6003      	str	r3, [r0, #0]
   d5096:	6853      	ldr	r3, [r2, #4]
   d5098:	6043      	str	r3, [r0, #4]
}
   d509a:	bd10      	pop	{r4, pc}

000d509c <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d509c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d509e:	6802      	ldr	r2, [r0, #0]
   d50a0:	680b      	ldr	r3, [r1, #0]
   d50a2:	8812      	ldrh	r2, [r2, #0]
   d50a4:	881b      	ldrh	r3, [r3, #0]
   d50a6:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d50a8:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d50aa:	d10c      	bne.n	d50c6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d50ac:	4601      	mov	r1, r0
   d50ae:	4668      	mov	r0, sp
   d50b0:	f7ff ffec 	bl	d508c <_ZNK8particle13BlePeerDevice7addressEv>
   d50b4:	4621      	mov	r1, r4
   d50b6:	a802      	add	r0, sp, #8
   d50b8:	f7ff ffe8 	bl	d508c <_ZNK8particle13BlePeerDevice7addressEv>
   d50bc:	a902      	add	r1, sp, #8
   d50be:	4668      	mov	r0, sp
   d50c0:	f7ff fdaa 	bl	d4c18 <_ZNK8particle10BleAddresseqERKS0_>
   d50c4:	b900      	cbnz	r0, d50c8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d50c6:	2000      	movs	r0, #0
}
   d50c8:	b004      	add	sp, #16
   d50ca:	bd10      	pop	{r4, pc}

000d50cc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d50cc:	b510      	push	{r4, lr}
   d50ce:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d50d0:	2034      	movs	r0, #52	; 0x34
   d50d2:	f7fe ffe0 	bl	d4096 <_Znwj>
   d50d6:	4601      	mov	r1, r0
   d50d8:	b168      	cbz	r0, d50f6 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d50da:	2300      	movs	r3, #0
   d50dc:	6003      	str	r3, [r0, #0]
   d50de:	6043      	str	r3, [r0, #4]
   d50e0:	6083      	str	r3, [r0, #8]
   d50e2:	60c3      	str	r3, [r0, #12]
   d50e4:	6103      	str	r3, [r0, #16]
   d50e6:	6143      	str	r3, [r0, #20]
   d50e8:	6183      	str	r3, [r0, #24]
   d50ea:	61c3      	str	r3, [r0, #28]
   d50ec:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d50ee:	6243      	str	r3, [r0, #36]	; 0x24
   d50f0:	6283      	str	r3, [r0, #40]	; 0x28
   d50f2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d50f4:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50f6:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d50f8:	b919      	cbnz	r1, d5102 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d50fa:	4a0a      	ldr	r2, [pc, #40]	; (d5124 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d50fc:	200a      	movs	r0, #10
   d50fe:	f7ff fbab 	bl	d4858 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5102:	2000      	movs	r0, #0
   d5104:	f7ff fa0e 	bl	d4524 <hal_ble_stack_init>
   d5108:	b120      	cbz	r0, d5114 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d510a:	4a06      	ldr	r2, [pc, #24]	; (d5124 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d510c:	2100      	movs	r1, #0
   d510e:	200a      	movs	r0, #10
   d5110:	f7ff fba2 	bl	d4858 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5114:	2200      	movs	r2, #0
   d5116:	6821      	ldr	r1, [r4, #0]
   d5118:	4803      	ldr	r0, [pc, #12]	; (d5128 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d511a:	f7ff fa5f 	bl	d45dc <hal_ble_set_callback_on_periph_link_events>
}
   d511e:	4620      	mov	r0, r4
   d5120:	bd10      	pop	{r4, pc}
   d5122:	bf00      	nop
   d5124:	000d4505 	.word	0x000d4505
   d5128:	000d5505 	.word	0x000d5505

000d512c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d512c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d512e:	4c0a      	ldr	r4, [pc, #40]	; (d5158 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5130:	6823      	ldr	r3, [r4, #0]
   d5132:	07db      	lsls	r3, r3, #31
   d5134:	d40e      	bmi.n	d5154 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5136:	4620      	mov	r0, r4
   d5138:	f7fe ffb3 	bl	d40a2 <__cxa_guard_acquire>
   d513c:	b150      	cbz	r0, d5154 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d513e:	4807      	ldr	r0, [pc, #28]	; (d515c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5140:	f7ff ffc4 	bl	d50cc <_ZN8particle14BleLocalDeviceC1Ev>
   d5144:	4620      	mov	r0, r4
   d5146:	f7fe ffb1 	bl	d40ac <__cxa_guard_release>
   d514a:	4a05      	ldr	r2, [pc, #20]	; (d5160 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d514c:	4905      	ldr	r1, [pc, #20]	; (d5164 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d514e:	4803      	ldr	r0, [pc, #12]	; (d515c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5150:	f001 fa3c 	bl	d65cc <__aeabi_atexit>
    return instance;
}
   d5154:	4801      	ldr	r0, [pc, #4]	; (d515c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5156:	bd10      	pop	{r4, pc}
   d5158:	2003e3d8 	.word	0x2003e3d8
   d515c:	2003e3d4 	.word	0x2003e3d4
   d5160:	2003e36c 	.word	0x2003e36c
   d5164:	000d5319 	.word	0x000d5319

000d5168 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5168:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d516a:	6803      	ldr	r3, [r0, #0]
   d516c:	3b09      	subs	r3, #9
   d516e:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5170:	b08a      	sub	sp, #40	; 0x28
   d5172:	4604      	mov	r4, r0
   d5174:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5176:	d819      	bhi.n	d51ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5178:	f7ff ffd8 	bl	d512c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d517c:	88a1      	ldrh	r1, [r4, #4]
   d517e:	6800      	ldr	r0, [r0, #0]
   d5180:	f7ff ff0c 	bl	d4f9c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5184:	4602      	mov	r2, r0
   d5186:	b958      	cbnz	r0, d51a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5188:	2320      	movs	r3, #32
   d518a:	9302      	str	r3, [sp, #8]
   d518c:	4b08      	ldr	r3, [pc, #32]	; (d51b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d518e:	9003      	str	r0, [sp, #12]
   d5190:	9300      	str	r3, [sp, #0]
   d5192:	aa02      	add	r2, sp, #8
   d5194:	4603      	mov	r3, r0
   d5196:	4907      	ldr	r1, [pc, #28]	; (d51b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5198:	2032      	movs	r0, #50	; 0x32
   d519a:	f7ff fb65 	bl	d4868 <log_message>
   d519e:	e005      	b.n	d51ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d51a0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d51a2:	b11d      	cbz	r5, d51ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d51a4:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d51a6:	68e1      	ldr	r1, [r4, #12]
   d51a8:	6920      	ldr	r0, [r4, #16]
   d51aa:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d51ac:	b00a      	add	sp, #40	; 0x28
   d51ae:	bd70      	pop	{r4, r5, r6, pc}
   d51b0:	000d6baa 	.word	0x000d6baa
   d51b4:	000d6b60 	.word	0x000d6b60

000d51b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d51b8:	4608      	mov	r0, r1
   d51ba:	b909      	cbnz	r1, d51c0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d51bc:	460a      	mov	r2, r1
   d51be:	e001      	b.n	d51c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d51c0:	6a09      	ldr	r1, [r1, #32]
   d51c2:	2200      	movs	r2, #0
   d51c4:	f7ff b9b6 	b.w	d4534 <hal_ble_gap_set_advertising_data>

000d51c8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d51c8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d51ca:	460c      	mov	r4, r1
   d51cc:	b911      	cbnz	r1, d51d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d51ce:	460a      	mov	r2, r1
   d51d0:	4608      	mov	r0, r1
   d51d2:	e006      	b.n	d51e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d51d4:	2101      	movs	r1, #1
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7ff fea3 	bl	d4f22 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d51dc:	6a21      	ldr	r1, [r4, #32]
   d51de:	2200      	movs	r2, #0
   d51e0:	4620      	mov	r0, r4
    }
}
   d51e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d51e6:	f7ff b9ad 	b.w	d4544 <hal_ble_gap_set_scan_response_data>

000d51ea <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d51ea:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d51ec:	a801      	add	r0, sp, #4
   d51ee:	f7ff fcf9 	bl	d4be4 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d51f2:	2000      	movs	r0, #0
   d51f4:	f7ff f9ae 	bl	d4554 <hal_ble_gap_start_advertising>
   d51f8:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d51fa:	a801      	add	r0, sp, #4
   d51fc:	f7ff fd00 	bl	d4c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5200:	4620      	mov	r0, r4
   d5202:	b002      	add	sp, #8
   d5204:	bd10      	pop	{r4, pc}

000d5206 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5206:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5208:	4605      	mov	r5, r0
   d520a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d520c:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d520e:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5210:	f7ff fce8 	bl	d4be4 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5214:	4621      	mov	r1, r4
   d5216:	4628      	mov	r0, r5
   d5218:	f7ff ffce 	bl	d51b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d521c:	2800      	cmp	r0, #0
   d521e:	db08      	blt.n	d5232 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5220:	4631      	mov	r1, r6
   d5222:	4628      	mov	r0, r5
   d5224:	f7ff ffd0 	bl	d51c8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5228:	2800      	cmp	r0, #0
   d522a:	db02      	blt.n	d5232 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d522c:	4628      	mov	r0, r5
   d522e:	f7ff ffdc 	bl	d51ea <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5232:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5234:	a801      	add	r0, sp, #4
   d5236:	f7ff fce3 	bl	d4c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d523a:	4620      	mov	r0, r4
   d523c:	b002      	add	sp, #8
   d523e:	bd70      	pop	{r4, r5, r6, pc}

000d5240 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5240:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5242:	69d8      	ldr	r0, [r3, #28]
}
   d5244:	2800      	cmp	r0, #0
   d5246:	bfd4      	ite	le
   d5248:	2000      	movle	r0, #0
   d524a:	2001      	movgt	r0, #1
   d524c:	4770      	bx	lr

000d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d524e:	680b      	ldr	r3, [r1, #0]
   d5250:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5252:	b113      	cbz	r3, d525a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5254:	685a      	ldr	r2, [r3, #4]
   d5256:	3201      	adds	r2, #1
   d5258:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d525a:	4770      	bx	lr

000d525c <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d525c:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d525e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5262:	4604      	mov	r4, r0
   d5264:	f840 3b04 	str.w	r3, [r0], #4
   d5268:	f7ff fff1 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d526c:	6823      	ldr	r3, [r4, #0]
   d526e:	b90b      	cbnz	r3, d5274 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5270:	f7ff fc88 	bl	d4b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5274:	4620      	mov	r0, r4
   d5276:	bd10      	pop	{r4, pc}

000d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5278:	b510      	push	{r4, lr}
   d527a:	f851 3b04 	ldr.w	r3, [r1], #4
   d527e:	4604      	mov	r4, r0
   d5280:	f840 3b04 	str.w	r3, [r0], #4
   d5284:	f7ff ffe3 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5288:	4620      	mov	r0, r4
   d528a:	bd10      	pop	{r4, pc}

000d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d528c:	b510      	push	{r4, lr}
   d528e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5290:	6800      	ldr	r0, [r0, #0]
   d5292:	b128      	cbz	r0, d52a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5294:	6843      	ldr	r3, [r0, #4]
   d5296:	3b01      	subs	r3, #1
   d5298:	6043      	str	r3, [r0, #4]
   d529a:	b90b      	cbnz	r3, d52a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d529c:	f7ff fc7c 	bl	d4b98 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d52a0:	4620      	mov	r0, r4
   d52a2:	bd10      	pop	{r4, pc}

000d52a4 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d52a4:	b510      	push	{r4, lr}
   d52a6:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52a8:	3004      	adds	r0, #4
   d52aa:	f7ff ffef 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d52ae:	4620      	mov	r0, r4
   d52b0:	bd10      	pop	{r4, pc}

000d52b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52b2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52b4:	6804      	ldr	r4, [r0, #0]
   d52b6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52b8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52ba:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52be:	42a6      	cmp	r6, r4
   d52c0:	d004      	beq.n	d52cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d52c2:	1d20      	adds	r0, r4, #4
   d52c4:	f7ff ffe2 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52c8:	3408      	adds	r4, #8
   d52ca:	e7f8      	b.n	d52be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d52cc:	6828      	ldr	r0, [r5, #0]
   d52ce:	f7ff fb4f 	bl	d4970 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d52d2:	4628      	mov	r0, r5
   d52d4:	bd70      	pop	{r4, r5, r6, pc}

000d52d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52d6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52d8:	6804      	ldr	r4, [r0, #0]
   d52da:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52dc:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52de:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52e2:	42a6      	cmp	r6, r4
   d52e4:	d004      	beq.n	d52f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d52e6:	1d20      	adds	r0, r4, #4
   d52e8:	f7ff ffd0 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52ec:	3408      	adds	r4, #8
   d52ee:	e7f8      	b.n	d52e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d52f0:	6828      	ldr	r0, [r5, #0]
   d52f2:	f7ff fb3d 	bl	d4970 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d52f6:	4628      	mov	r0, r5
   d52f8:	bd70      	pop	{r4, r5, r6, pc}

000d52fa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d52fa:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d52fc:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d52fe:	f104 0018 	add.w	r0, r4, #24
   d5302:	f7ff ffe8 	bl	d52d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5306:	f104 000c 	add.w	r0, r4, #12
   d530a:	f7ff ffd2 	bl	d52b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d530e:	4620      	mov	r0, r4
   d5310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5314:	f7fe bec1 	b.w	d409a <_ZdlPv>

000d5318 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d531a:	6804      	ldr	r4, [r0, #0]
   d531c:	4607      	mov	r7, r0
   d531e:	b1c4      	cbz	r4, d5352 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5320:	69a5      	ldr	r5, [r4, #24]
   d5322:	69e3      	ldr	r3, [r4, #28]
   d5324:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5328:	42ae      	cmp	r6, r5
   d532a:	d004      	beq.n	d5336 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d532c:	1d28      	adds	r0, r5, #4
   d532e:	f7ff ffad 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5332:	3508      	adds	r5, #8
   d5334:	e7f8      	b.n	d5328 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5336:	69a0      	ldr	r0, [r4, #24]
   d5338:	f7ff fb1a 	bl	d4970 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d533c:	f104 000c 	add.w	r0, r4, #12
   d5340:	f7ff ffc9 	bl	d52d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5344:	4620      	mov	r0, r4
   d5346:	f7ff ffb4 	bl	d52b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d534a:	2134      	movs	r1, #52	; 0x34
   d534c:	4620      	mov	r0, r4
   d534e:	f001 f942 	bl	d65d6 <_ZdlPvj>
   d5352:	4638      	mov	r0, r7
   d5354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5358 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5358:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d535a:	2500      	movs	r5, #0
   d535c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d535e:	6045      	str	r5, [r0, #4]
   d5360:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5362:	2024      	movs	r0, #36	; 0x24
   d5364:	f7fe fe97 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5368:	4604      	mov	r4, r0
   d536a:	b178      	cbz	r0, d538c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d536c:	4603      	mov	r3, r0
   d536e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5372:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5376:	f8c0 5002 	str.w	r5, [r0, #2]
   d537a:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d537c:	7285      	strb	r5, [r0, #10]
   d537e:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5380:	60c5      	str	r5, [r0, #12]
   d5382:	6105      	str	r5, [r0, #16]
   d5384:	6145      	str	r5, [r0, #20]
   d5386:	6185      	str	r5, [r0, #24]
   d5388:	61c5      	str	r5, [r0, #28]
   d538a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d538c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d538e:	2014      	movs	r0, #20
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	f7fe fe80 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5396:	4603      	mov	r3, r0
   d5398:	b128      	cbz	r0, d53a6 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d539a:	2201      	movs	r2, #1
   d539c:	6042      	str	r2, [r0, #4]
   d539e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d53a0:	4a08      	ldr	r2, [pc, #32]	; (d53c4 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d53a2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d53a4:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d53a6:	a802      	add	r0, sp, #8
   d53a8:	6872      	ldr	r2, [r6, #4]
   d53aa:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d53ae:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d53b0:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d53b2:	f7ff ff6b 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d53b6:	6833      	ldr	r3, [r6, #0]
   d53b8:	b90b      	cbnz	r3, d53be <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d53ba:	f7ff fbe3 	bl	d4b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d53be:	4630      	mov	r0, r6
   d53c0:	b002      	add	sp, #8
   d53c2:	bd70      	pop	{r4, r5, r6, pc}
   d53c4:	000d6b3c 	.word	0x000d6b3c

000d53c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d53c8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d53ca:	b570      	push	{r4, r5, r6, lr}
   d53cc:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d53ce:	d91a      	bls.n	d5406 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d53d0:	4290      	cmp	r0, r2
   d53d2:	d219      	bcs.n	d5408 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d53d4:	f1a1 0608 	sub.w	r6, r1, #8
   d53d8:	1a51      	subs	r1, r2, r1
   d53da:	3904      	subs	r1, #4
   d53dc:	1f15      	subs	r5, r2, #4
   d53de:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d53e0:	1f2b      	subs	r3, r5, #4
   d53e2:	429e      	cmp	r6, r3
   d53e4:	d025      	beq.n	d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d53e6:	2c04      	cmp	r4, #4
   d53e8:	d007      	beq.n	d53fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d53ee:	f844 3c04 	str.w	r3, [r4, #-4]
   d53f2:	4629      	mov	r1, r5
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff ff2a 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53fa:	4628      	mov	r0, r5
   d53fc:	f7ff ff46 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5400:	3d08      	subs	r5, #8
   d5402:	3c08      	subs	r4, #8
   d5404:	e7ec      	b.n	d53e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5406:	d014      	beq.n	d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5408:	1d0c      	adds	r4, r1, #4
   d540a:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d540c:	1f23      	subs	r3, r4, #4
   d540e:	429d      	cmp	r5, r3
   d5410:	d00f      	beq.n	d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5412:	2e04      	cmp	r6, #4
   d5414:	d007      	beq.n	d5426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5416:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d541a:	f846 3c04 	str.w	r3, [r6, #-4]
   d541e:	4621      	mov	r1, r4
   d5420:	4630      	mov	r0, r6
   d5422:	f7ff ff14 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5426:	4620      	mov	r0, r4
   d5428:	f7ff ff30 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d542c:	3408      	adds	r4, #8
   d542e:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5430:	e7ec      	b.n	d540c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5432:	bd70      	pop	{r4, r5, r6, pc}

000d5434 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5438:	6804      	ldr	r4, [r0, #0]
   d543a:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d543c:	4605      	mov	r5, r0
   d543e:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5440:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5444:	42a7      	cmp	r7, r4
   d5446:	d018      	beq.n	d547a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5448:	4641      	mov	r1, r8
   d544a:	4620      	mov	r0, r4
   d544c:	f7ff fe26 	bl	d509c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5450:	4606      	mov	r6, r0
   d5452:	b908      	cbnz	r0, d5458 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5454:	3408      	adds	r4, #8
   d5456:	e7f5      	b.n	d5444 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5458:	b18c      	cbz	r4, d547e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d545a:	1d20      	adds	r0, r4, #4
   d545c:	f7ff ff16 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5460:	682b      	ldr	r3, [r5, #0]
   d5462:	686a      	ldr	r2, [r5, #4]
   d5464:	f104 0108 	add.w	r1, r4, #8
   d5468:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d546c:	4620      	mov	r0, r4
   d546e:	f7ff ffab 	bl	d53c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5472:	686b      	ldr	r3, [r5, #4]
   d5474:	3b01      	subs	r3, #1
   d5476:	606b      	str	r3, [r5, #4]
    return true;
   d5478:	e002      	b.n	d5480 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d547a:	2600      	movs	r6, #0
   d547c:	e000      	b.n	d5480 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d547e:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5480:	4630      	mov	r0, r6
   d5482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5486 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5488:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d548a:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d548e:	6847      	ldr	r7, [r0, #4]
   d5490:	9300      	str	r3, [sp, #0]
   d5492:	a801      	add	r0, sp, #4
   d5494:	f7ff fedb 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5498:	6866      	ldr	r6, [r4, #4]
   d549a:	68a3      	ldr	r3, [r4, #8]
   d549c:	429e      	cmp	r6, r3
   d549e:	db14      	blt.n	d54ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d54a0:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d54a2:	2e00      	cmp	r6, #0
   d54a4:	dd0b      	ble.n	d54be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d54a6:	00f0      	lsls	r0, r6, #3
   d54a8:	f7ff fa5a 	bl	d4960 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d54ac:	4605      	mov	r5, r0
   d54ae:	b318      	cbz	r0, d54f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d54b0:	e894 0006 	ldmia.w	r4, {r1, r2}
   d54b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d54b8:	f7ff ff86 	bl	d53c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d54bc:	e000      	b.n	d54c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d54be:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54c0:	6820      	ldr	r0, [r4, #0]
   d54c2:	f7ff fa55 	bl	d4970 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d54c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d54c8:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d54ca:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d54cc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d54ce:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d54d2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d54d6:	4629      	mov	r1, r5
   d54d8:	f105 0008 	add.w	r0, r5, #8
   d54dc:	f7ff ff74 	bl	d53c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d54e0:	b135      	cbz	r5, d54f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d54e2:	9b00      	ldr	r3, [sp, #0]
   d54e4:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d54e8:	a901      	add	r1, sp, #4
   d54ea:	1d28      	adds	r0, r5, #4
   d54ec:	f7ff feaf 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d54f0:	6863      	ldr	r3, [r4, #4]
   d54f2:	3301      	adds	r3, #1
   d54f4:	6063      	str	r3, [r4, #4]
   d54f6:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54f8:	a801      	add	r0, sp, #4
   d54fa:	f7ff fec7 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d54fe:	4628      	mov	r0, r5
   d5500:	b003      	add	sp, #12
   d5502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5504 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5508:	4604      	mov	r4, r0
   d550a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d550c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d550e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5510:	f7ff fb68 	bl	d4be4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5514:	6823      	ldr	r3, [r4, #0]
   d5516:	2b03      	cmp	r3, #3
   d5518:	d002      	beq.n	d5520 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d551a:	2b04      	cmp	r3, #4
   d551c:	d042      	beq.n	d55a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d551e:	e087      	b.n	d5630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5520:	a804      	add	r0, sp, #16
   d5522:	f7ff ff19 	bl	d5358 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5526:	9b04      	ldr	r3, [sp, #16]
   d5528:	8922      	ldrh	r2, [r4, #8]
   d552a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d552c:	6862      	ldr	r2, [r4, #4]
   d552e:	9904      	ldr	r1, [sp, #16]
   d5530:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5534:	f8c1 3002 	str.w	r3, [r1, #2]
   d5538:	6853      	ldr	r3, [r2, #4]
   d553a:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d553e:	a807      	add	r0, sp, #28
   d5540:	9b04      	ldr	r3, [sp, #16]
   d5542:	9306      	str	r3, [sp, #24]
   d5544:	a905      	add	r1, sp, #20
   d5546:	f7ff fe82 	bl	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d554a:	a906      	add	r1, sp, #24
   d554c:	f105 0018 	add.w	r0, r5, #24
   d5550:	f7ff ff99 	bl	d5486 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5554:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5556:	a807      	add	r0, sp, #28
   d5558:	f7ff fe98 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d555c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d555e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5560:	b974      	cbnz	r4, d5580 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5562:	4b36      	ldr	r3, [pc, #216]	; (d563c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5564:	9300      	str	r3, [sp, #0]
   d5566:	aa06      	add	r2, sp, #24
   d5568:	4623      	mov	r3, r4
   d556a:	4935      	ldr	r1, [pc, #212]	; (d5640 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d556c:	9407      	str	r4, [sp, #28]
   d556e:	2032      	movs	r0, #50	; 0x32
   d5570:	f7ff f97a 	bl	d4868 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5574:	9b04      	ldr	r3, [sp, #16]
   d5576:	4621      	mov	r1, r4
   d5578:	8818      	ldrh	r0, [r3, #0]
   d557a:	f7fe fff3 	bl	d4564 <hal_ble_gap_disconnect>
   d557e:	e00d      	b.n	d559c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5580:	4a30      	ldr	r2, [pc, #192]	; (d5644 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5582:	9200      	str	r2, [sp, #0]
   d5584:	2300      	movs	r3, #0
   d5586:	aa06      	add	r2, sp, #24
   d5588:	492d      	ldr	r1, [pc, #180]	; (d5640 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d558a:	9307      	str	r3, [sp, #28]
   d558c:	2001      	movs	r0, #1
   d558e:	f7ff f96b 	bl	d4868 <log_message>
                if (impl->connectedCb_) {
   d5592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5594:	b113      	cbz	r3, d559c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5596:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5598:	a804      	add	r0, sp, #16
   d559a:	4798      	blx	r3
   d559c:	a805      	add	r0, sp, #20
   d559e:	f7ff fe75 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55a2:	e045      	b.n	d5630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d55a4:	8921      	ldrh	r1, [r4, #8]
   d55a6:	4628      	mov	r0, r5
   d55a8:	f7ff fcf8 	bl	d4f9c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d55ac:	4607      	mov	r7, r0
   d55ae:	2800      	cmp	r0, #0
   d55b0:	d03e      	beq.n	d5630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d55b2:	6804      	ldr	r4, [r0, #0]
   d55b4:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d55b6:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d55b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55bc:	8022      	strh	r2, [r4, #0]
   d55be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d55c2:	4299      	cmp	r1, r3
   d55c4:	d003      	beq.n	d55ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d55c6:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d55ca:	8042      	strh	r2, [r0, #2]
   d55cc:	e7f9      	b.n	d55c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d55ce:	68e6      	ldr	r6, [r4, #12]
   d55d0:	6923      	ldr	r3, [r4, #16]
   d55d2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d55d6:	45b0      	cmp	r8, r6
   d55d8:	d004      	beq.n	d55e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d55da:	1d30      	adds	r0, r6, #4
   d55dc:	f7ff fe56 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55e0:	3608      	adds	r6, #8
   d55e2:	e7f8      	b.n	d55d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d55e4:	2300      	movs	r3, #0
   d55e6:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d55e8:	69a6      	ldr	r6, [r4, #24]
   d55ea:	69e3      	ldr	r3, [r4, #28]
   d55ec:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d55f0:	45b0      	cmp	r8, r6
   d55f2:	d004      	beq.n	d55fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d55f4:	1d30      	adds	r0, r6, #4
   d55f6:	f7ff fe49 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55fa:	3608      	adds	r6, #8
   d55fc:	e7f8      	b.n	d55f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d55fe:	2300      	movs	r3, #0
   d5600:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5602:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5604:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5606:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5608:	b113      	cbz	r3, d5610 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d560a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d560c:	4638      	mov	r0, r7
   d560e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5610:	2320      	movs	r3, #32
   d5612:	4a0d      	ldr	r2, [pc, #52]	; (d5648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5614:	9306      	str	r3, [sp, #24]
   d5616:	9200      	str	r2, [sp, #0]
   d5618:	2300      	movs	r3, #0
   d561a:	4909      	ldr	r1, [pc, #36]	; (d5640 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d561c:	9307      	str	r3, [sp, #28]
   d561e:	2001      	movs	r0, #1
   d5620:	aa06      	add	r2, sp, #24
   d5622:	f7ff f921 	bl	d4868 <log_message>
                    impl->peers_.removeOne(*peer);
   d5626:	4639      	mov	r1, r7
   d5628:	f105 0018 	add.w	r0, r5, #24
   d562c:	f7ff ff02 	bl	d5434 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5630:	a803      	add	r0, sp, #12
   d5632:	f7ff fae5 	bl	d4c00 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5636:	b00e      	add	sp, #56	; 0x38
   d5638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d563c:	000d6bc2 	.word	0x000d6bc2
   d5640:	000d6b60 	.word	0x000d6b60
   d5644:	000d6be8 	.word	0x000d6be8
   d5648:	000d6c05 	.word	0x000d6c05

000d564c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d564c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d564e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5650:	4606      	mov	r6, r0
   d5652:	460c      	mov	r4, r1
   d5654:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5656:	d914      	bls.n	d5682 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5658:	4290      	cmp	r0, r2
   d565a:	d213      	bcs.n	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d565c:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5660:	1a6c      	subs	r4, r5, r1
   d5662:	f1a1 0708 	sub.w	r7, r1, #8
   d5666:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5668:	42af      	cmp	r7, r5
   d566a:	d018      	beq.n	d569e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d566c:	b11c      	cbz	r4, d5676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d566e:	4629      	mov	r1, r5
   d5670:	4620      	mov	r0, r4
   d5672:	f7ff fe01 	bl	d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5676:	1d28      	adds	r0, r5, #4
   d5678:	f7ff fe08 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d567c:	3d08      	subs	r5, #8
   d567e:	3c08      	subs	r4, #8
   d5680:	e7f2      	b.n	d5668 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5682:	d00c      	beq.n	d569e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5684:	42ac      	cmp	r4, r5
   d5686:	d00a      	beq.n	d569e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5688:	b11e      	cbz	r6, d5692 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d568a:	4621      	mov	r1, r4
   d568c:	4630      	mov	r0, r6
   d568e:	f7ff fdf3 	bl	d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5692:	1d20      	adds	r0, r4, #4
   d5694:	f7ff fdfa 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5698:	3408      	adds	r4, #8
   d569a:	3608      	adds	r6, #8
   d569c:	e7f2      	b.n	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56a0:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d56a2:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56a4:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d56a6:	dd0b      	ble.n	d56c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d56a8:	00f0      	lsls	r0, r6, #3
   d56aa:	f7ff f959 	bl	d4960 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d56ae:	4604      	mov	r4, r0
   d56b0:	b170      	cbz	r0, d56d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d56b2:	e895 0006 	ldmia.w	r5, {r1, r2}
   d56b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d56ba:	f7ff ffc7 	bl	d564c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d56be:	e000      	b.n	d56c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d56c0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d56c2:	6828      	ldr	r0, [r5, #0]
   d56c4:	f7ff f954 	bl	d4970 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d56c8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d56ca:	60ae      	str	r6, [r5, #8]
        return true;
   d56cc:	2001      	movs	r0, #1
   d56ce:	bd70      	pop	{r4, r5, r6, pc}
    }
   d56d0:	bd70      	pop	{r4, r5, r6, pc}

000d56d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d56d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d56d4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d56d6:	6845      	ldr	r5, [r0, #4]
   d56d8:	4668      	mov	r0, sp
   d56da:	f7ff fdcd 	bl	d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56de:	6861      	ldr	r1, [r4, #4]
   d56e0:	68a3      	ldr	r3, [r4, #8]
   d56e2:	4299      	cmp	r1, r3
   d56e4:	db05      	blt.n	d56f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d56e6:	3101      	adds	r1, #1
   d56e8:	4620      	mov	r0, r4
   d56ea:	f7ff ffd9 	bl	d56a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d56ee:	4606      	mov	r6, r0
   d56f0:	b198      	cbz	r0, d571a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d56f2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d56f4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d56f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d56fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d56fe:	4629      	mov	r1, r5
   d5700:	f105 0008 	add.w	r0, r5, #8
   d5704:	f7ff ffa2 	bl	d564c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5708:	b11d      	cbz	r5, d5712 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d570a:	4669      	mov	r1, sp
   d570c:	4628      	mov	r0, r5
   d570e:	f7ff fdb3 	bl	d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5712:	6863      	ldr	r3, [r4, #4]
   d5714:	3301      	adds	r3, #1
   d5716:	6063      	str	r3, [r4, #4]
   d5718:	2601      	movs	r6, #1
   d571a:	a801      	add	r0, sp, #4
   d571c:	f7ff fdb6 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5720:	4630      	mov	r0, r6
   d5722:	b002      	add	sp, #8
   d5724:	bd70      	pop	{r4, r5, r6, pc}

000d5726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5726:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d572a:	4606      	mov	r6, r0
   d572c:	460c      	mov	r4, r1
   d572e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5730:	d914      	bls.n	d575c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5732:	4290      	cmp	r0, r2
   d5734:	d213      	bcs.n	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5736:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d573a:	1a6c      	subs	r4, r5, r1
   d573c:	f1a1 0708 	sub.w	r7, r1, #8
   d5740:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5742:	42af      	cmp	r7, r5
   d5744:	d018      	beq.n	d5778 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5746:	b11c      	cbz	r4, d5750 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5748:	4629      	mov	r1, r5
   d574a:	4620      	mov	r0, r4
   d574c:	f7ff fd86 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5750:	1d28      	adds	r0, r5, #4
   d5752:	f7ff fd9b 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5756:	3d08      	subs	r5, #8
   d5758:	3c08      	subs	r4, #8
   d575a:	e7f2      	b.n	d5742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d575c:	d00c      	beq.n	d5778 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d575e:	42ac      	cmp	r4, r5
   d5760:	d00a      	beq.n	d5778 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5762:	b11e      	cbz	r6, d576c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5764:	4621      	mov	r1, r4
   d5766:	4630      	mov	r0, r6
   d5768:	f7ff fd78 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d576c:	1d20      	adds	r0, r4, #4
   d576e:	f7ff fd8d 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5772:	3408      	adds	r4, #8
   d5774:	3608      	adds	r6, #8
   d5776:	e7f2      	b.n	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d577a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d577a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d577c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d577e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5780:	dd0b      	ble.n	d579a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5782:	00f0      	lsls	r0, r6, #3
   d5784:	f7ff f8ec 	bl	d4960 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5788:	4604      	mov	r4, r0
   d578a:	b170      	cbz	r0, d57aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d578c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5790:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5794:	f7ff ffc7 	bl	d5726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5798:	e000      	b.n	d579c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d579a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d579c:	6828      	ldr	r0, [r5, #0]
   d579e:	f7ff f8e7 	bl	d4970 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d57a2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d57a4:	60ae      	str	r6, [r5, #8]
        return true;
   d57a6:	2001      	movs	r0, #1
   d57a8:	bd70      	pop	{r4, r5, r6, pc}
    }
   d57aa:	bd70      	pop	{r4, r5, r6, pc}

000d57ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d57ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57ae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d57b0:	6845      	ldr	r5, [r0, #4]
   d57b2:	4668      	mov	r0, sp
   d57b4:	f7ff fd52 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57b8:	6861      	ldr	r1, [r4, #4]
   d57ba:	68a3      	ldr	r3, [r4, #8]
   d57bc:	4299      	cmp	r1, r3
   d57be:	db05      	blt.n	d57cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d57c0:	3101      	adds	r1, #1
   d57c2:	4620      	mov	r0, r4
   d57c4:	f7ff ffd9 	bl	d577a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d57c8:	4606      	mov	r6, r0
   d57ca:	b198      	cbz	r0, d57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d57cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d57ce:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d57d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d57d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d57d8:	4629      	mov	r1, r5
   d57da:	f105 0008 	add.w	r0, r5, #8
   d57de:	f7ff ffa2 	bl	d5726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d57e2:	b11d      	cbz	r5, d57ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d57e4:	4669      	mov	r1, sp
   d57e6:	4628      	mov	r0, r5
   d57e8:	f7ff fd38 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d57ec:	6863      	ldr	r3, [r4, #4]
   d57ee:	3301      	adds	r3, #1
   d57f0:	6063      	str	r3, [r4, #4]
   d57f2:	2601      	movs	r6, #1
   d57f4:	a801      	add	r0, sp, #4
   d57f6:	f7ff fd49 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d57fa:	4630      	mov	r0, r6
   d57fc:	b002      	add	sp, #8
   d57fe:	bd70      	pop	{r4, r5, r6, pc}

000d5800 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5800:	b510      	push	{r4, lr}
   d5802:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5804:	6840      	ldr	r0, [r0, #4]
   d5806:	b108      	cbz	r0, d580c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5808:	f7fe fc47 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d580c:	4620      	mov	r0, r4
   d580e:	bd10      	pop	{r4, pc}

000d5810 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5810:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5812:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5814:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5816:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d581a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d581e:	f7ff f921 	bl	d4a64 <_ZN6StringD1Ev>
   d5822:	4668      	mov	r0, sp
   d5824:	f7ff ffec 	bl	d5800 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5828:	b003      	add	sp, #12
   d582a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5830:	b538      	push	{r3, r4, r5, lr}
   d5832:	2300      	movs	r3, #0
   d5834:	4604      	mov	r4, r0
   d5836:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5838:	2014      	movs	r0, #20
   d583a:	460d      	mov	r5, r1
   d583c:	f7fe fc2b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5840:	b128      	cbz	r0, d584e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5842:	2301      	movs	r3, #1
   d5844:	6043      	str	r3, [r0, #4]
   d5846:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5848:	4b02      	ldr	r3, [pc, #8]	; (d5854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d584a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d584c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d584e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5850:	4620      	mov	r0, r4
   d5852:	bd38      	pop	{r3, r4, r5, pc}
   d5854:	000d6b04 	.word	0x000d6b04

000d5858 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d585c:	b088      	sub	sp, #32
   d585e:	4605      	mov	r5, r0
   d5860:	461e      	mov	r6, r3
   d5862:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5864:	2300      	movs	r3, #0
   d5866:	460f      	mov	r7, r1
   d5868:	4690      	mov	r8, r2
   d586a:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d586c:	9305      	str	r3, [sp, #20]
   d586e:	f7fe fc12 	bl	d4096 <_Znwj>
   d5872:	f8cd d018 	str.w	sp, [sp, #24]
   d5876:	4604      	mov	r4, r0
   d5878:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d587a:	b1b0      	cbz	r0, d58aa <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d587c:	f7ff fb6e 	bl	d4f5c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5880:	4639      	mov	r1, r7
   d5882:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5886:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d588a:	f7ff f945 	bl	d4b18 <_ZN6StringaSEPKc>
        callback_ = callback;
   d588e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5890:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5892:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5894:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5896:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5898:	f104 0014 	add.w	r0, r4, #20
   d589c:	f7ff fa30 	bl	d4d00 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d58a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   d58a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d58a6:	f7ff fa2b 	bl	d4d00 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58aa:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d58ac:	2600      	movs	r6, #0
   d58ae:	ab01      	add	r3, sp, #4
   d58b0:	aa02      	add	r2, sp, #8
   d58b2:	a803      	add	r0, sp, #12
   d58b4:	9607      	str	r6, [sp, #28]
   d58b6:	f7ff ffbb 	bl	d5830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58ba:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d58bc:	9a05      	ldr	r2, [sp, #20]
   d58be:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58c0:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58c2:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d58c4:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58c6:	f7ff fce1 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d58ca:	a806      	add	r0, sp, #24
   d58cc:	f7ff ff98 	bl	d5800 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d58d0:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d58d2:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58d4:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d58d6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58d8:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58da:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d58dc:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d58de:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d58e0:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58e4:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58e6:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e8:	f7ff fcd0 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ec:	a805      	add	r0, sp, #20
   d58ee:	f7ff fccd 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d58f2:	6829      	ldr	r1, [r5, #0]
   d58f4:	b919      	cbnz	r1, d58fe <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d58f6:	4a03      	ldr	r2, [pc, #12]	; (d5904 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d58f8:	200a      	movs	r0, #10
   d58fa:	f7fe ffad 	bl	d4858 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d58fe:	b008      	add	sp, #32
   d5900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5904:	000d4505 	.word	0x000d4505

000d5908 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5908:	b510      	push	{r4, lr}
   d590a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d590c:	6840      	ldr	r0, [r0, #4]
   d590e:	b108      	cbz	r0, d5914 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5910:	f7fe fbc3 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5914:	4620      	mov	r0, r4
   d5916:	bd10      	pop	{r4, pc}

000d5918 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5918:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d591a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d591c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d591e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5922:	4668      	mov	r0, sp
   d5924:	f7ff fff0 	bl	d5908 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5928:	b003      	add	sp, #12
   d592a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5930 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5930:	b538      	push	{r3, r4, r5, lr}
   d5932:	2300      	movs	r3, #0
   d5934:	4604      	mov	r4, r0
   d5936:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5938:	2014      	movs	r0, #20
   d593a:	460d      	mov	r5, r1
   d593c:	f7fe fbab 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5940:	b128      	cbz	r0, d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5942:	2301      	movs	r3, #1
   d5944:	6043      	str	r3, [r0, #4]
   d5946:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5948:	4b02      	ldr	r3, [pc, #8]	; (d5954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d594a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d594c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d594e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5950:	4620      	mov	r0, r4
   d5952:	bd38      	pop	{r3, r4, r5, pc}
   d5954:	000d6b20 	.word	0x000d6b20

000d5958 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5958:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d595a:	2600      	movs	r6, #0
   d595c:	b087      	sub	sp, #28
   d595e:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5960:	6046      	str	r6, [r0, #4]
   d5962:	4604      	mov	r4, r0
   d5964:	2018      	movs	r0, #24
   d5966:	460f      	mov	r7, r1
   d5968:	f7fe fb95 	bl	d4096 <_Znwj>
   d596c:	f8cd d010 	str.w	sp, [sp, #16]
   d5970:	4605      	mov	r5, r0
   d5972:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5974:	b138      	cbz	r0, d5986 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5976:	f7ff f95d 	bl	d4c34 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d597a:	4639      	mov	r1, r7
   d597c:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d597e:	82ae      	strh	r6, [r5, #20]
   d5980:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5982:	f7ff f9bd 	bl	d4d00 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5986:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5988:	4629      	mov	r1, r5
   d598a:	9305      	str	r3, [sp, #20]
   d598c:	aa02      	add	r2, sp, #8
   d598e:	ab01      	add	r3, sp, #4
   d5990:	a803      	add	r0, sp, #12
   d5992:	f7ff ffcd 	bl	d5930 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5996:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5998:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d599a:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d599c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d599e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d59a0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59a2:	f7ff fc73 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d59a6:	a804      	add	r0, sp, #16
   d59a8:	f7ff ffae 	bl	d5908 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d59ac:	6823      	ldr	r3, [r4, #0]
   d59ae:	b90b      	cbnz	r3, d59b4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d59b0:	f7ff f8e8 	bl	d4b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d59b4:	4620      	mov	r0, r4
   d59b6:	b007      	add	sp, #28
   d59b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d59bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59c0:	4617      	mov	r7, r2
   d59c2:	b09f      	sub	sp, #124	; 0x7c
   d59c4:	4680      	mov	r8, r0
    WiringBleLock lk;
   d59c6:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59c8:	460e      	mov	r6, r1
    WiringBleLock lk;
   d59ca:	f7ff f90b 	bl	d4be4 <_ZN8particle3ble13WiringBleLockC1Ev>
   d59ce:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d59d0:	7923      	ldrb	r3, [r4, #4]
   d59d2:	2b00      	cmp	r3, #0
   d59d4:	f000 80f3 	beq.w	d5bbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d59d8:	6833      	ldr	r3, [r6, #0]
   d59da:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d59dc:	691b      	ldr	r3, [r3, #16]
   d59de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d59e2:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d59e4:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d59e8:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d59ec:	9b03      	ldr	r3, [sp, #12]
   d59ee:	42ab      	cmp	r3, r5
   d59f0:	d023      	beq.n	d5a3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d59f2:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d59f6:	4650      	mov	r0, sl
   d59f8:	f109 0114 	add.w	r1, r9, #20
   d59fc:	f7ff f999 	bl	d4d32 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a00:	2800      	cmp	r0, #0
   d5a02:	f000 80e1 	beq.w	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5a06:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5a0a:	4658      	mov	r0, fp
   d5a0c:	f7ff f991 	bl	d4d32 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a10:	2800      	cmp	r0, #0
   d5a12:	f000 80d9 	beq.w	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a16:	6823      	ldr	r3, [r4, #0]
   d5a18:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5a1c:	f8d9 3000 	ldr.w	r3, [r9]
   d5a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5a24:	4299      	cmp	r1, r3
   d5a26:	f040 80cf 	bne.w	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5a2a:	2320      	movs	r3, #32
   d5a2c:	4a6b      	ldr	r2, [pc, #428]	; (d5bdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d5a2e:	9313      	str	r3, [sp, #76]	; 0x4c
   d5a30:	2300      	movs	r3, #0
   d5a32:	9200      	str	r2, [sp, #0]
   d5a34:	9314      	str	r3, [sp, #80]	; 0x50
   d5a36:	aa13      	add	r2, sp, #76	; 0x4c
   d5a38:	e0bd      	b.n	d5bb6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5a3a:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5a3e:	4628      	mov	r0, r5
   d5a40:	f7ff f945 	bl	d4cce <_ZNK8particle7BleUuid7isValidEv>
   d5a44:	b918      	cbnz	r0, d5a4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5a46:	4966      	ldr	r1, [pc, #408]	; (d5be0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d5a48:	4628      	mov	r0, r5
   d5a4a:	f7ff f964 	bl	d4d16 <_ZN8particle7BleUuidaSEPKh>
   d5a4e:	6833      	ldr	r3, [r6, #0]
   d5a50:	f8d3 9000 	ldr.w	r9, [r3]
   d5a54:	685b      	ldr	r3, [r3, #4]
   d5a56:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a5a:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5a5c:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a5e:	d008      	beq.n	d5a72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5a60:	f8d9 0000 	ldr.w	r0, [r9]
   d5a64:	f7ff f965 	bl	d4d32 <_ZNK8particle7BleUuideqERKS0_>
   d5a68:	2800      	cmp	r0, #0
   d5a6a:	d137      	bne.n	d5adc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a6c:	f109 0908 	add.w	r9, r9, #8
   d5a70:	e7f3      	b.n	d5a5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5a72:	a806      	add	r0, sp, #24
   d5a74:	f7ff ff70 	bl	d5958 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5a78:	aa13      	add	r2, sp, #76	; 0x4c
   d5a7a:	462b      	mov	r3, r5
   d5a7c:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d5a80:	4696      	mov	lr, r2
   d5a82:	6818      	ldr	r0, [r3, #0]
   d5a84:	6859      	ldr	r1, [r3, #4]
   d5a86:	4615      	mov	r5, r2
   d5a88:	c503      	stmia	r5!, {r0, r1}
   d5a8a:	3308      	adds	r3, #8
   d5a8c:	4563      	cmp	r3, ip
   d5a8e:	462a      	mov	r2, r5
   d5a90:	d1f7      	bne.n	d5a82 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d5a92:	6818      	ldr	r0, [r3, #0]
   d5a94:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5a96:	9a06      	ldr	r2, [sp, #24]
   d5a98:	2300      	movs	r3, #0
   d5a9a:	3214      	adds	r2, #20
   d5a9c:	4671      	mov	r1, lr
   d5a9e:	2001      	movs	r0, #1
   d5aa0:	f7fe fd6a 	bl	d4578 <hal_ble_gatt_server_add_service>
   d5aa4:	2800      	cmp	r0, #0
   d5aa6:	d17e      	bne.n	d5ba6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5aa8:	6835      	ldr	r5, [r6, #0]
   d5aaa:	a906      	add	r1, sp, #24
   d5aac:	a80b      	add	r0, sp, #44	; 0x2c
   d5aae:	f7ff fbe3 	bl	d5278 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5ab2:	4628      	mov	r0, r5
   d5ab4:	a90b      	add	r1, sp, #44	; 0x2c
   d5ab6:	f7ff fe0c 	bl	d56d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5aba:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5abc:	a80c      	add	r0, sp, #48	; 0x30
   d5abe:	f7ff fbe5 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ac2:	2d00      	cmp	r5, #0
   d5ac4:	d06f      	beq.n	d5ba6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d5ac6:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5ac8:	6853      	ldr	r3, [r2, #4]
   d5aca:	6812      	ldr	r2, [r2, #0]
   d5acc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5ad0:	3b01      	subs	r3, #1
   d5ad2:	a807      	add	r0, sp, #28
   d5ad4:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d5ad8:	f7ff fbd8 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5adc:	f104 0514 	add.w	r5, r4, #20
   d5ae0:	4628      	mov	r0, r5
   d5ae2:	f7ff f8f4 	bl	d4cce <_ZNK8particle7BleUuid7isValidEv>
   d5ae6:	b968      	cbnz	r0, d5b04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5ae8:	4b3e      	ldr	r3, [pc, #248]	; (d5be4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5aea:	493d      	ldr	r1, [pc, #244]	; (d5be0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5aec:	881a      	ldrh	r2, [r3, #0]
   d5aee:	3201      	adds	r2, #1
   d5af0:	b292      	uxth	r2, r2
   d5af2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5af4:	a813      	add	r0, sp, #76	; 0x4c
   d5af6:	2301      	movs	r3, #1
   d5af8:	f7ff f8d5 	bl	d4ca6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5afc:	a913      	add	r1, sp, #76	; 0x4c
   d5afe:	4628      	mov	r0, r5
   d5b00:	f7ff f8fe 	bl	d4d00 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5b04:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5b08:	4652      	mov	r2, sl
   d5b0a:	2100      	movs	r1, #0
   d5b0c:	a813      	add	r0, sp, #76	; 0x4c
   d5b0e:	f000 fef0 	bl	d68f2 <memset>
    charInit.version = BLE_API_VERSION;
   d5b12:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b14:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5b16:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d5b1a:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b1e:	462b      	mov	r3, r5
   d5b20:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d5b24:	4615      	mov	r5, r2
   d5b26:	6818      	ldr	r0, [r3, #0]
   d5b28:	6859      	ldr	r1, [r3, #4]
   d5b2a:	4696      	mov	lr, r2
   d5b2c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5b30:	3308      	adds	r3, #8
   d5b32:	4563      	cmp	r3, ip
   d5b34:	4672      	mov	r2, lr
   d5b36:	d1f6      	bne.n	d5b26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d5b38:	6818      	ldr	r0, [r3, #0]
   d5b3a:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b40:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d5b44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5b48:	682b      	ldr	r3, [r5, #0]
   d5b4a:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d5b4e:	7923      	ldrb	r3, [r4, #4]
   d5b50:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d5b54:	f8d9 3000 	ldr.w	r3, [r9]
   d5b58:	8a9b      	ldrh	r3, [r3, #20]
   d5b5a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d5b5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5b60:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b62:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5b64:	4b20      	ldr	r3, [pc, #128]	; (d5be8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d5b66:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b68:	1da1      	adds	r1, r4, #6
   d5b6a:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5b6c:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b6e:	f7fe fd2b 	bl	d45c8 <hal_ble_gatt_server_add_characteristic>
   d5b72:	bb20      	cbnz	r0, d5bbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d5b74:	2301      	movs	r3, #1
   d5b76:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5b78:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5b7a:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5b7c:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5b7e:	a80b      	add	r0, sp, #44	; 0x2c
   d5b80:	f7ff fb6c 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5b84:	4620      	mov	r0, r4
   d5b86:	a90b      	add	r1, sp, #44	; 0x2c
   d5b88:	f7ff fe10 	bl	d57ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5b8c:	4604      	mov	r4, r0
   d5b8e:	a80c      	add	r0, sp, #48	; 0x30
   d5b90:	f7ff fb7c 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b94:	b99c      	cbnz	r4, d5bbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d5b96:	2320      	movs	r3, #32
   d5b98:	930b      	str	r3, [sp, #44]	; 0x2c
   d5b9a:	4b14      	ldr	r3, [pc, #80]	; (d5bec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d5b9c:	9300      	str	r3, [sp, #0]
   d5b9e:	940c      	str	r4, [sp, #48]	; 0x30
   d5ba0:	4623      	mov	r3, r4
   d5ba2:	aa0b      	add	r2, sp, #44	; 0x2c
   d5ba4:	e007      	b.n	d5bb6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5ba6:	4639      	mov	r1, r7
   d5ba8:	4640      	mov	r0, r8
   d5baa:	f7ff fb57 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bae:	a807      	add	r0, sp, #28
   d5bb0:	f7ff fb6c 	bl	d528c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bb4:	e00a      	b.n	d5bcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5bb6:	490e      	ldr	r1, [pc, #56]	; (d5bf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d5bb8:	2032      	movs	r0, #50	; 0x32
   d5bba:	f7fe fe55 	bl	d4868 <log_message>
            return characteristic;
   d5bbe:	4639      	mov	r1, r7
   d5bc0:	4640      	mov	r0, r8
   d5bc2:	f7ff fb4b 	bl	d525c <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bc6:	e001      	b.n	d5bcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d5bc8:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5bca:	e70f      	b.n	d59ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5bcc:	a805      	add	r0, sp, #20
   d5bce:	f7ff f817 	bl	d4c00 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5bd2:	4640      	mov	r0, r8
   d5bd4:	b01f      	add	sp, #124	; 0x7c
   d5bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bda:	bf00      	nop
   d5bdc:	000d6cd5 	.word	0x000d6cd5
   d5be0:	000d6b50 	.word	0x000d6b50
   d5be4:	2003e3dc 	.word	0x2003e3dc
   d5be8:	000d5169 	.word	0x000d5169
   d5bec:	000d6cae 	.word	0x000d6cae
   d5bf0:	000d6b60 	.word	0x000d6b60

000d5bf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5bf4:	4802      	ldr	r0, [pc, #8]	; (d5c00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5bf6:	2300      	movs	r3, #0
   d5bf8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5bfa:	f7fe bd2d 	b.w	d4658 <os_mutex_recursive_create>
   d5bfe:	bf00      	nop
   d5c00:	2003e3e0 	.word	0x2003e3e0

000d5c04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c06:	4606      	mov	r6, r0
   d5c08:	460d      	mov	r5, r1
   d5c0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c0c:	2400      	movs	r4, #0
  while (size--) {
   d5c0e:	42bd      	cmp	r5, r7
   d5c10:	d00c      	beq.n	d5c2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c12:	6833      	ldr	r3, [r6, #0]
   d5c14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c18:	689b      	ldr	r3, [r3, #8]
   d5c1a:	4630      	mov	r0, r6
   d5c1c:	4798      	blx	r3
     if (chunk>=0)
   d5c1e:	2800      	cmp	r0, #0
   d5c20:	db01      	blt.n	d5c26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c24:	e7f3      	b.n	d5c0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c26:	2c00      	cmp	r4, #0
   d5c28:	bf08      	it	eq
   d5c2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c30:	b570      	push	{r4, r5, r6, lr}
   d5c32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c38:	b149      	cbz	r1, d5c4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c3a:	f000 fe8b 	bl	d6954 <strlen>
   d5c3e:	682b      	ldr	r3, [r5, #0]
   d5c40:	4602      	mov	r2, r0
   d5c42:	4621      	mov	r1, r4
   d5c44:	4628      	mov	r0, r5
   d5c46:	68db      	ldr	r3, [r3, #12]
    }
   d5c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c4c:	4718      	bx	r3
    }
   d5c4e:	bd70      	pop	{r4, r5, r6, pc}

000d5c50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c50:	6803      	ldr	r3, [r0, #0]
   d5c52:	689b      	ldr	r3, [r3, #8]
   d5c54:	4718      	bx	r3

000d5c56 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c56:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c58:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c5a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c5c:	f7ff fff8 	bl	d5c50 <_ZN5Print5printEc>
  n += print('\n');
   d5c60:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c62:	4604      	mov	r4, r0
  n += print('\n');
   d5c64:	4628      	mov	r0, r5
   d5c66:	f7ff fff3 	bl	d5c50 <_ZN5Print5printEc>
  return n;
}
   d5c6a:	4420      	add	r0, r4
   d5c6c:	bd38      	pop	{r3, r4, r5, pc}

000d5c6e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5c6e:	b538      	push	{r3, r4, r5, lr}
   d5c70:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5c72:	f7ff ffdd 	bl	d5c30 <_ZN5Print5writeEPKc>
   d5c76:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5c78:	4628      	mov	r0, r5
   d5c7a:	f7ff ffec 	bl	d5c56 <_ZN5Print7printlnEv>
  return n;
}
   d5c7e:	4420      	add	r0, r4
   d5c80:	bd38      	pop	{r3, r4, r5, pc}

000d5c82 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c82:	b530      	push	{r4, r5, lr}
   d5c84:	b08b      	sub	sp, #44	; 0x2c
   d5c86:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c88:	2100      	movs	r1, #0
   d5c8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c8e:	2a01      	cmp	r2, #1
   d5c90:	bf98      	it	ls
   d5c92:	220a      	movls	r2, #10
   d5c94:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c98:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c9c:	fb05 3312 	mls	r3, r5, r2, r3
   d5ca0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ca4:	2b09      	cmp	r3, #9
   d5ca6:	bf94      	ite	ls
   d5ca8:	3330      	addls	r3, #48	; 0x30
   d5caa:	3337      	addhi	r3, #55	; 0x37
   d5cac:	b2db      	uxtb	r3, r3
   d5cae:	4621      	mov	r1, r4
   d5cb0:	f804 3901 	strb.w	r3, [r4], #-1
   d5cb4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cb6:	2d00      	cmp	r5, #0
   d5cb8:	d1ee      	bne.n	d5c98 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cba:	f7ff ffb9 	bl	d5c30 <_ZN5Print5writeEPKc>
}
   d5cbe:	b00b      	add	sp, #44	; 0x2c
   d5cc0:	bd30      	pop	{r4, r5, pc}

000d5cc2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5cc2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5cc4:	b92a      	cbnz	r2, d5cd2 <_ZN5Print5printEmi+0x10>
   d5cc6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5ccc:	689b      	ldr	r3, [r3, #8]
   d5cce:	b2c9      	uxtb	r1, r1
   d5cd0:	4718      	bx	r3
  else return printNumber(n, base);
   d5cd2:	b2d2      	uxtb	r2, r2
}
   d5cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cd8:	f7ff bfd3 	b.w	d5c82 <_ZN5Print11printNumberEmh>

000d5cdc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5cdc:	f7ff bff1 	b.w	d5cc2 <_ZN5Print5printEmi>

000d5ce0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ce0:	4b01      	ldr	r3, [pc, #4]	; (d5ce8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ce2:	4a02      	ldr	r2, [pc, #8]	; (d5cec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ce4:	601a      	str	r2, [r3, #0]
   d5ce6:	4770      	bx	lr
   d5ce8:	2003e3e4 	.word	0x2003e3e4
   d5cec:	000d6d73 	.word	0x000d6d73

000d5cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5cf0:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5cf2:	681a      	ldr	r2, [r3, #0]
   d5cf4:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5cf6:	601a      	str	r2, [r3, #0]
   d5cf8:	4770      	bx	lr
   d5cfa:	bf00      	nop
   d5cfc:	2003e304 	.word	0x2003e304
   d5d00:	2003e3e8 	.word	0x2003e3e8

000d5d04 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d04:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d06:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d08:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d0a:	b113      	cbz	r3, d5d12 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d0c:	2203      	movs	r2, #3
   d5d0e:	4601      	mov	r1, r0
   d5d10:	4798      	blx	r3
    }
   d5d12:	4620      	mov	r0, r4
   d5d14:	bd10      	pop	{r4, pc}

000d5d16 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d16:	b510      	push	{r4, lr}
   d5d18:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d1a:	f7ff fff3 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
   d5d1e:	4620      	mov	r0, r4
   d5d20:	bd10      	pop	{r4, pc}

000d5d22 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5d22:	b510      	push	{r4, lr}
   d5d24:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5d26:	f7fe fd87 	bl	d4838 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d5d2a:	4284      	cmp	r4, r0
   d5d2c:	d008      	beq.n	d5d40 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5d2e:	b11c      	cbz	r4, d5d38 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d5d34:	f7fe bd68 	b.w	d4808 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d5d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d5d3c:	f7fe bd6c 	b.w	d4818 <LED_Signaling_Stop>
   d5d40:	bd10      	pop	{r4, pc}

000d5d42 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5d42:	b570      	push	{r4, r5, r6, lr}
   d5d44:	4605      	mov	r5, r0
   d5d46:	460e      	mov	r6, r1
   d5d48:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5d4a:	f7fe fd75 	bl	d4838 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d5d4e:	b150      	cbz	r0, d5d66 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5d50:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5d54:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5d58:	f7fe fd4e 	bl	d47f8 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d5d5c:	20e7      	movs	r0, #231	; 0xe7
}
   d5d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d5d62:	f7fe bd71 	b.w	d4848 <LED_On>
   d5d66:	bd70      	pop	{r4, r5, r6, pc}

000d5d68 <_ZN8RGBClass10brightnessEhb>:
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5d6c:	f7fe fd5c 	bl	d4828 <LED_SetBrightness>

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5d70:	f7fe fd62 	bl	d4838 <LED_RGB_IsOverRidden>
}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
   d5d74:	b128      	cbz	r0, d5d82 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5d76:	b124      	cbz	r4, d5d82 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
   d5d78:	20e7      	movs	r0, #231	; 0xe7
    }
}
   d5d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void RGBClass::brightness(uint8_t brightness, bool update)
{
    LED_SetBrightness(brightness);
    if (controlled() && update) {
        LED_On(LED_RGB);
   d5d7e:	f7fe bd63 	b.w	d4848 <LED_On>
   d5d82:	bd10      	pop	{r4, pc}

000d5d84 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d84:	4803      	ldr	r0, [pc, #12]	; (d5d94 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d86:	4a04      	ldr	r2, [pc, #16]	; (d5d98 <_GLOBAL__sub_I_RGB+0x14>)
   d5d88:	4904      	ldr	r1, [pc, #16]	; (d5d9c <_GLOBAL__sub_I_RGB+0x18>)
   d5d8a:	2300      	movs	r3, #0
   d5d8c:	6083      	str	r3, [r0, #8]
   d5d8e:	f000 bc1d 	b.w	d65cc <__aeabi_atexit>
   d5d92:	bf00      	nop
   d5d94:	2003e3ec 	.word	0x2003e3ec
   d5d98:	2003e36c 	.word	0x2003e36c
   d5d9c:	000d5d17 	.word	0x000d5d17

000d5da0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5da0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5da2:	4b0f      	ldr	r3, [pc, #60]	; (d5de0 <serialEventRun+0x40>)
   d5da4:	b133      	cbz	r3, d5db4 <serialEventRun+0x14>
   d5da6:	f000 f941 	bl	d602c <_Z16_fetch_usbserialv>
   d5daa:	6803      	ldr	r3, [r0, #0]
   d5dac:	691b      	ldr	r3, [r3, #16]
   d5dae:	4798      	blx	r3
   d5db0:	2800      	cmp	r0, #0
   d5db2:	dc0d      	bgt.n	d5dd0 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5db4:	4b0b      	ldr	r3, [pc, #44]	; (d5de4 <serialEventRun+0x44>)
   d5db6:	b133      	cbz	r3, d5dc6 <serialEventRun+0x26>
   d5db8:	f000 f9ba 	bl	d6130 <_Z22__fetch_global_Serial1v>
   d5dbc:	6803      	ldr	r3, [r0, #0]
   d5dbe:	691b      	ldr	r3, [r3, #16]
   d5dc0:	4798      	blx	r3
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	dc07      	bgt.n	d5dd6 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d5dc6:	4b08      	ldr	r3, [pc, #32]	; (d5de8 <serialEventRun+0x48>)
   d5dc8:	b143      	cbz	r3, d5ddc <serialEventRun+0x3c>
   d5dca:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5dce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5dd0:	f3af 8000 	nop.w
   d5dd4:	e7ee      	b.n	d5db4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5dd6:	f3af 8000 	nop.w
   d5dda:	e7f4      	b.n	d5dc6 <serialEventRun+0x26>
   d5ddc:	bd08      	pop	{r3, pc}
   d5dde:	bf00      	nop
	...

000d5dec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5dec:	b508      	push	{r3, lr}
	serialEventRun();
   d5dee:	f7ff ffd7 	bl	d5da0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5df2:	f7fe fb8f 	bl	d4514 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5df6:	4b01      	ldr	r3, [pc, #4]	; (d5dfc <_post_loop+0x10>)
   d5df8:	6018      	str	r0, [r3, #0]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	2003e734 	.word	0x2003e734

000d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e02:	2300      	movs	r3, #0
   d5e04:	9300      	str	r3, [sp, #0]
   d5e06:	461a      	mov	r2, r3
   d5e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e0c:	f7fe fd46 	bl	d489c <system_ctrl_set_result>
}
   d5e10:	b003      	add	sp, #12
   d5e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e1a:	8843      	ldrh	r3, [r0, #2]
   d5e1c:	2b0a      	cmp	r3, #10
   d5e1e:	d008      	beq.n	d5e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e20:	2b50      	cmp	r3, #80	; 0x50
   d5e22:	d109      	bne.n	d5e38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e24:	4b09      	ldr	r3, [pc, #36]	; (d5e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e26:	681b      	ldr	r3, [r3, #0]
   d5e28:	b13b      	cbz	r3, d5e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e2a:	b003      	add	sp, #12
   d5e2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e32:	f7ff ffe5 	bl	d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e36:	e006      	b.n	d5e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e38:	2300      	movs	r3, #0
   d5e3a:	9300      	str	r3, [sp, #0]
   d5e3c:	461a      	mov	r2, r3
   d5e3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e42:	f7fe fd2b 	bl	d489c <system_ctrl_set_result>
        break;
    }
}
   d5e46:	b003      	add	sp, #12
   d5e48:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e4c:	2003e3fc 	.word	0x2003e3fc

000d5e50 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e50:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e52:	f7fe fb4f 	bl	d44f4 <HAL_RNG_GetRandomNumber>
   d5e56:	4604      	mov	r4, r0
    srand(seed);
   d5e58:	f000 fd54 	bl	d6904 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e5c:	4b07      	ldr	r3, [pc, #28]	; (d5e7c <module_user_init_hook+0x2c>)
   d5e5e:	b113      	cbz	r3, d5e66 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5e60:	4620      	mov	r0, r4
   d5e62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e66:	2100      	movs	r1, #0
   d5e68:	4804      	ldr	r0, [pc, #16]	; (d5e7c <module_user_init_hook+0x2c>)
   d5e6a:	f7fe fd71 	bl	d4950 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e6e:	2100      	movs	r1, #0
   d5e70:	4803      	ldr	r0, [pc, #12]	; (d5e80 <module_user_init_hook+0x30>)
}
   d5e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e76:	f7fe bd07 	b.w	d4888 <system_ctrl_set_app_request_handler>
   d5e7a:	bf00      	nop
   d5e7c:	00000000 	.word	0x00000000
   d5e80:	000d5e19 	.word	0x000d5e19

000d5e84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e84:	4770      	bx	lr

000d5e86 <_ZN9IPAddressD0Ev>:
   d5e86:	b510      	push	{r4, lr}
   d5e88:	2118      	movs	r1, #24
   d5e8a:	4604      	mov	r4, r0
   d5e8c:	f000 fba3 	bl	d65d6 <_ZdlPvj>
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd10      	pop	{r4, pc}

000d5e94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e96:	7d03      	ldrb	r3, [r0, #20]
   d5e98:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e9a:	b08d      	sub	sp, #52	; 0x34
   d5e9c:	460e      	mov	r6, r1
   d5e9e:	f100 0704 	add.w	r7, r0, #4
   d5ea2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ea6:	d002      	beq.n	d5eae <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ea8:	f100 0508 	add.w	r5, r0, #8
   d5eac:	e018      	b.n	d5ee0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5eae:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5eb0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5eb2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5eb6:	232f      	movs	r3, #47	; 0x2f
   d5eb8:	462a      	mov	r2, r5
   d5eba:	200a      	movs	r0, #10
   d5ebc:	f7fe fbe4 	bl	d4688 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ec0:	4628      	mov	r0, r5
   d5ec2:	f000 fd47 	bl	d6954 <strlen>
   d5ec6:	6833      	ldr	r3, [r6, #0]
   d5ec8:	4602      	mov	r2, r0
   d5eca:	68db      	ldr	r3, [r3, #12]
   d5ecc:	4629      	mov	r1, r5
   d5ece:	4630      	mov	r0, r6
   d5ed0:	4798      	blx	r3
   d5ed2:	e00f      	b.n	d5ef4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5ed4:	b124      	cbz	r4, d5ee0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5ed6:	212e      	movs	r1, #46	; 0x2e
   d5ed8:	4630      	mov	r0, r6
   d5eda:	f7ff feb9 	bl	d5c50 <_ZN5Print5printEc>
   d5ede:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5ee0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5ee4:	220a      	movs	r2, #10
   d5ee6:	4630      	mov	r0, r6
   d5ee8:	f7ff fef8 	bl	d5cdc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5eec:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5eee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ef0:	d1f0      	bne.n	d5ed4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5ef2:	4620      	mov	r0, r4
    }
    return n;
}
   d5ef4:	b00d      	add	sp, #52	; 0x34
   d5ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ef8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4b05      	ldr	r3, [pc, #20]	; (d5f10 <_ZN9IPAddressC1Ev+0x18>)
   d5efc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5efe:	2211      	movs	r2, #17
   d5f00:	f840 3b04 	str.w	r3, [r0], #4
   d5f04:	2100      	movs	r1, #0
   d5f06:	f000 fcf4 	bl	d68f2 <memset>
{
    clear();
}
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	bd10      	pop	{r4, pc}
   d5f0e:	bf00      	nop
   d5f10:	000d6e14 	.word	0x000d6e14

000d5f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f14:	4603      	mov	r3, r0
   d5f16:	4a07      	ldr	r2, [pc, #28]	; (d5f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f18:	b510      	push	{r4, lr}
   d5f1a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5f1e:	f101 0210 	add.w	r2, r1, #16
   d5f22:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f26:	f843 4b04 	str.w	r4, [r3], #4
   d5f2a:	4291      	cmp	r1, r2
   d5f2c:	d1f9      	bne.n	d5f22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f2e:	780a      	ldrb	r2, [r1, #0]
   d5f30:	701a      	strb	r2, [r3, #0]
}
   d5f32:	bd10      	pop	{r4, pc}
   d5f34:	000d6e14 	.word	0x000d6e14

000d5f38 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5f38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5f4a:	2304      	movs	r3, #4
   d5f4c:	6041      	str	r1, [r0, #4]
   d5f4e:	7503      	strb	r3, [r0, #20]
   d5f50:	bd10      	pop	{r4, pc}

000d5f52 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f54:	780d      	ldrb	r5, [r1, #0]
   d5f56:	788b      	ldrb	r3, [r1, #2]
   d5f58:	784a      	ldrb	r2, [r1, #1]
   d5f5a:	78c9      	ldrb	r1, [r1, #3]
   d5f5c:	9100      	str	r1, [sp, #0]
   d5f5e:	4629      	mov	r1, r5
   d5f60:	f7ff ffea 	bl	d5f38 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5f64:	b003      	add	sp, #12
   d5f66:	bd30      	pop	{r4, r5, pc}

000d5f68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f68:	7441      	strb	r1, [r0, #17]
   d5f6a:	4770      	bx	lr

000d5f6c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f6c:	4770      	bx	lr

000d5f6e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5f6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f70:	2100      	movs	r1, #0
   d5f72:	7c00      	ldrb	r0, [r0, #16]
   d5f74:	f7fe fc28 	bl	d47c8 <HAL_USB_USART_Receive_Data>
}
   d5f78:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f7c:	bf28      	it	cs
   d5f7e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f82:	bd08      	pop	{r3, pc}

000d5f84 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5f84:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f86:	2101      	movs	r1, #1
   d5f88:	7c00      	ldrb	r0, [r0, #16]
   d5f8a:	f7fe fc1d 	bl	d47c8 <HAL_USB_USART_Receive_Data>
}
   d5f8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f92:	bf28      	it	cs
   d5f94:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f98:	bd08      	pop	{r3, pc}

000d5f9a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5f9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f9c:	7c00      	ldrb	r0, [r0, #16]
   d5f9e:	f7fe fc0b 	bl	d47b8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5fa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fa6:	bd08      	pop	{r3, pc}

000d5fa8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5fa8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5faa:	7c00      	ldrb	r0, [r0, #16]
   d5fac:	f7fe fbfc 	bl	d47a8 <HAL_USB_USART_Available_Data>
}
   d5fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fb4:	bd08      	pop	{r3, pc}

000d5fb6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5fb6:	7c00      	ldrb	r0, [r0, #16]
   d5fb8:	f7fe bc16 	b.w	d47e8 <HAL_USB_USART_Flush_Data>

000d5fbc <_ZN9USBSerialD0Ev>:
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	2114      	movs	r1, #20
   d5fc0:	4604      	mov	r4, r0
   d5fc2:	f000 fb08 	bl	d65d6 <_ZdlPvj>
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	bd10      	pop	{r4, pc}

000d5fca <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5fca:	b538      	push	{r3, r4, r5, lr}
   d5fcc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fce:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5fd0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fd2:	f7fe fbf1 	bl	d47b8 <HAL_USB_USART_Available_Data_For_Write>
   d5fd6:	2800      	cmp	r0, #0
   d5fd8:	dc01      	bgt.n	d5fde <_ZN9USBSerial5writeEh+0x14>
   d5fda:	7c60      	ldrb	r0, [r4, #17]
   d5fdc:	b128      	cbz	r0, d5fea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5fde:	4629      	mov	r1, r5
   d5fe0:	7c20      	ldrb	r0, [r4, #16]
   d5fe2:	f7fe fbf9 	bl	d47d8 <HAL_USB_USART_Send_Data>
   d5fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5fea:	bd38      	pop	{r3, r4, r5, pc}

000d5fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5fec:	b510      	push	{r4, lr}
   d5fee:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ff0:	2300      	movs	r3, #0
   d5ff2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ff8:	60a3      	str	r3, [r4, #8]
   d5ffa:	4b05      	ldr	r3, [pc, #20]	; (d6010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ffc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5ffe:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6000:	4608      	mov	r0, r1
{
  _serial = serial;
   d6002:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6004:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6006:	4611      	mov	r1, r2
   d6008:	f7fe fbbe 	bl	d4788 <HAL_USB_USART_Init>
}
   d600c:	4620      	mov	r0, r4
   d600e:	bd10      	pop	{r4, pc}
   d6010:	000d6e28 	.word	0x000d6e28

000d6014 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6014:	2200      	movs	r2, #0
   d6016:	7c00      	ldrb	r0, [r0, #16]
   d6018:	f7fe bbbe 	b.w	d4798 <HAL_USB_USART_Begin>

000d601c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d601c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d601e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6020:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6022:	2100      	movs	r1, #0
   d6024:	f000 fc65 	bl	d68f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6028:	4620      	mov	r0, r4
   d602a:	bd10      	pop	{r4, pc}

000d602c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d602c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d602e:	4d0e      	ldr	r5, [pc, #56]	; (d6068 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6030:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6032:	a801      	add	r0, sp, #4
   d6034:	f7ff fff2 	bl	d601c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6038:	6829      	ldr	r1, [r5, #0]
   d603a:	f011 0401 	ands.w	r4, r1, #1
   d603e:	d110      	bne.n	d6062 <_Z16_fetch_usbserialv+0x36>
   d6040:	4628      	mov	r0, r5
   d6042:	f7fe f82e 	bl	d40a2 <__cxa_guard_acquire>
   d6046:	b160      	cbz	r0, d6062 <_Z16_fetch_usbserialv+0x36>
   d6048:	aa01      	add	r2, sp, #4
   d604a:	4621      	mov	r1, r4
   d604c:	4807      	ldr	r0, [pc, #28]	; (d606c <_Z16_fetch_usbserialv+0x40>)
   d604e:	f7ff ffcd 	bl	d5fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6052:	4628      	mov	r0, r5
   d6054:	f7fe f82a 	bl	d40ac <__cxa_guard_release>
   d6058:	4a05      	ldr	r2, [pc, #20]	; (d6070 <_Z16_fetch_usbserialv+0x44>)
   d605a:	4906      	ldr	r1, [pc, #24]	; (d6074 <_Z16_fetch_usbserialv+0x48>)
   d605c:	4803      	ldr	r0, [pc, #12]	; (d606c <_Z16_fetch_usbserialv+0x40>)
   d605e:	f000 fab5 	bl	d65cc <__aeabi_atexit>
	return _usbserial;
}
   d6062:	4802      	ldr	r0, [pc, #8]	; (d606c <_Z16_fetch_usbserialv+0x40>)
   d6064:	b007      	add	sp, #28
   d6066:	bd30      	pop	{r4, r5, pc}
   d6068:	2003e400 	.word	0x2003e400
   d606c:	2003e404 	.word	0x2003e404
   d6070:	2003e36c 	.word	0x2003e36c
   d6074:	000d5f6d 	.word	0x000d5f6d

000d6078 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6078:	4770      	bx	lr

000d607a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d607a:	7441      	strb	r1, [r0, #17]
   d607c:	4770      	bx	lr

000d607e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d607e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6080:	7c00      	ldrb	r0, [r0, #16]
   d6082:	f7fe fb41 	bl	d4708 <HAL_USART_Available_Data_For_Write>
}
   d6086:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d608a:	bd08      	pop	{r3, pc}

000d608c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d608c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d608e:	7c00      	ldrb	r0, [r0, #16]
   d6090:	f7fe fb12 	bl	d46b8 <HAL_USART_Available_Data>
}
   d6094:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6098:	bd08      	pop	{r3, pc}

000d609a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d609a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d609c:	7c00      	ldrb	r0, [r0, #16]
   d609e:	f7fe fb1b 	bl	d46d8 <HAL_USART_Peek_Data>
}
   d60a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60a6:	bf28      	it	cs
   d60a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d60ac:	bd08      	pop	{r3, pc}

000d60ae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60b0:	7c00      	ldrb	r0, [r0, #16]
   d60b2:	f7fe fb09 	bl	d46c8 <HAL_USART_Read_Data>
}
   d60b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60ba:	bf28      	it	cs
   d60bc:	f04f 30ff 	movcs.w	r0, #4294967295
   d60c0:	bd08      	pop	{r3, pc}

000d60c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d60c2:	7c00      	ldrb	r0, [r0, #16]
   d60c4:	f7fe bb10 	b.w	d46e8 <HAL_USART_Flush_Data>

000d60c8 <_ZN11USARTSerialD0Ev>:
   d60c8:	b510      	push	{r4, lr}
   d60ca:	2114      	movs	r1, #20
   d60cc:	4604      	mov	r4, r0
   d60ce:	f000 fa82 	bl	d65d6 <_ZdlPvj>
   d60d2:	4620      	mov	r0, r4
   d60d4:	bd10      	pop	{r4, pc}

000d60d6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d60d6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60d8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d60da:	4604      	mov	r4, r0
   d60dc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60de:	b925      	cbnz	r5, d60ea <_ZN11USARTSerial5writeEh+0x14>
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7fe fb11 	bl	d4708 <HAL_USART_Available_Data_For_Write>
   d60e6:	2800      	cmp	r0, #0
   d60e8:	dd05      	ble.n	d60f6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60ea:	4631      	mov	r1, r6
   d60ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60f2:	f7fe bad9 	b.w	d46a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d60f6:	4628      	mov	r0, r5
   d60f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d60fc:	b510      	push	{r4, lr}
   d60fe:	4604      	mov	r4, r0
   d6100:	4608      	mov	r0, r1
   d6102:	4611      	mov	r1, r2
   d6104:	2200      	movs	r2, #0
   d6106:	6062      	str	r2, [r4, #4]
   d6108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d610c:	60a2      	str	r2, [r4, #8]
   d610e:	4a05      	ldr	r2, [pc, #20]	; (d6124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6110:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6112:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6114:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6116:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6118:	461a      	mov	r2, r3
   d611a:	f7fe fabd 	bl	d4698 <HAL_USART_Init>
}
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}
   d6122:	bf00      	nop
   d6124:	000d6e58 	.word	0x000d6e58

000d6128 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6128:	7c00      	ldrb	r0, [r0, #16]
   d612a:	f7fe bae5 	b.w	d46f8 <HAL_USART_Is_Enabled>
	...

000d6130 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6130:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6132:	4d0c      	ldr	r5, [pc, #48]	; (d6164 <_Z22__fetch_global_Serial1v+0x34>)
   d6134:	6829      	ldr	r1, [r5, #0]
   d6136:	f011 0401 	ands.w	r4, r1, #1
   d613a:	d111      	bne.n	d6160 <_Z22__fetch_global_Serial1v+0x30>
   d613c:	4628      	mov	r0, r5
   d613e:	f7fd ffb0 	bl	d40a2 <__cxa_guard_acquire>
   d6142:	b168      	cbz	r0, d6160 <_Z22__fetch_global_Serial1v+0x30>
   d6144:	4a08      	ldr	r2, [pc, #32]	; (d6168 <_Z22__fetch_global_Serial1v+0x38>)
   d6146:	4b09      	ldr	r3, [pc, #36]	; (d616c <_Z22__fetch_global_Serial1v+0x3c>)
   d6148:	4809      	ldr	r0, [pc, #36]	; (d6170 <_Z22__fetch_global_Serial1v+0x40>)
   d614a:	4621      	mov	r1, r4
   d614c:	f7ff ffd6 	bl	d60fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6150:	4628      	mov	r0, r5
   d6152:	f7fd ffab 	bl	d40ac <__cxa_guard_release>
   d6156:	4a07      	ldr	r2, [pc, #28]	; (d6174 <_Z22__fetch_global_Serial1v+0x44>)
   d6158:	4907      	ldr	r1, [pc, #28]	; (d6178 <_Z22__fetch_global_Serial1v+0x48>)
   d615a:	4805      	ldr	r0, [pc, #20]	; (d6170 <_Z22__fetch_global_Serial1v+0x40>)
   d615c:	f000 fa36 	bl	d65cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6160:	4803      	ldr	r0, [pc, #12]	; (d6170 <_Z22__fetch_global_Serial1v+0x40>)
   d6162:	bd38      	pop	{r3, r4, r5, pc}
   d6164:	2003e4b0 	.word	0x2003e4b0
   d6168:	2003e4b4 	.word	0x2003e4b4
   d616c:	2003e42c 	.word	0x2003e42c
   d6170:	2003e418 	.word	0x2003e418
   d6174:	2003e36c 	.word	0x2003e36c
   d6178:	000d6079 	.word	0x000d6079

000d617c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d617c:	4770      	bx	lr

000d617e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6180:	4606      	mov	r6, r0
   d6182:	4615      	mov	r5, r2
   d6184:	460c      	mov	r4, r1
   d6186:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6188:	42bc      	cmp	r4, r7
   d618a:	d006      	beq.n	d619a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d618c:	6833      	ldr	r3, [r6, #0]
   d618e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6192:	689b      	ldr	r3, [r3, #8]
   d6194:	4630      	mov	r0, r6
   d6196:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6198:	e7f6      	b.n	d6188 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d619a:	4628      	mov	r0, r5
   d619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d619e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d619e:	2200      	movs	r2, #0
   d61a0:	7c00      	ldrb	r0, [r0, #16]
   d61a2:	f7fe bab9 	b.w	d4718 <HAL_I2C_Write_Data>

000d61a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d61a6:	2100      	movs	r1, #0
   d61a8:	7c00      	ldrb	r0, [r0, #16]
   d61aa:	f7fe babd 	b.w	d4728 <HAL_I2C_Available_Data>

000d61ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d61ae:	2100      	movs	r1, #0
   d61b0:	7c00      	ldrb	r0, [r0, #16]
   d61b2:	f7fe bac1 	b.w	d4738 <HAL_I2C_Read_Data>

000d61b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d61b6:	2100      	movs	r1, #0
   d61b8:	7c00      	ldrb	r0, [r0, #16]
   d61ba:	f7fe bac5 	b.w	d4748 <HAL_I2C_Peek_Data>

000d61be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d61be:	2100      	movs	r1, #0
   d61c0:	7c00      	ldrb	r0, [r0, #16]
   d61c2:	f7fe bac9 	b.w	d4758 <HAL_I2C_Flush_Data>

000d61c6 <_ZN7TwoWireD0Ev>:
   d61c6:	b510      	push	{r4, lr}
   d61c8:	2114      	movs	r1, #20
   d61ca:	4604      	mov	r4, r0
   d61cc:	f000 fa03 	bl	d65d6 <_ZdlPvj>
   d61d0:	4620      	mov	r0, r4
   d61d2:	bd10      	pop	{r4, pc}

000d61d4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61d4:	b510      	push	{r4, lr}
   d61d6:	4604      	mov	r4, r0
   d61d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61dc:	4608      	mov	r0, r1
   d61de:	60a3      	str	r3, [r4, #8]
   d61e0:	2100      	movs	r1, #0
   d61e2:	4b04      	ldr	r3, [pc, #16]	; (d61f4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d61e4:	7420      	strb	r0, [r4, #16]
   d61e6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61e8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d61ea:	f7fe fac5 	bl	d4778 <HAL_I2C_Init>

}
   d61ee:	4620      	mov	r0, r4
   d61f0:	bd10      	pop	{r4, pc}
   d61f2:	bf00      	nop
   d61f4:	000d6e88 	.word	0x000d6e88

000d61f8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d61f8:	2100      	movs	r1, #0
   d61fa:	7c00      	ldrb	r0, [r0, #16]
   d61fc:	f7fe bab4 	b.w	d4768 <HAL_I2C_Is_Enabled>

000d6200 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6200:	2200      	movs	r2, #0
   d6202:	4611      	mov	r1, r2
   d6204:	6840      	ldr	r0, [r0, #4]
   d6206:	f7fe bb8b 	b.w	d4920 <network_listening>

000d620a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d620a:	2200      	movs	r2, #0
   d620c:	4611      	mov	r1, r2
   d620e:	6840      	ldr	r0, [r0, #4]
   d6210:	f7fe bb96 	b.w	d4940 <network_get_listen_timeout>

000d6214 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6214:	2200      	movs	r2, #0
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	f7fe bb8a 	b.w	d4930 <network_set_listen_timeout>

000d621c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d621c:	2200      	movs	r2, #0
   d621e:	f081 0101 	eor.w	r1, r1, #1
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	f7fe bb74 	b.w	d4910 <network_listen>

000d6228 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6228:	2300      	movs	r3, #0
   d622a:	461a      	mov	r2, r3
   d622c:	2101      	movs	r1, #1
   d622e:	6840      	ldr	r0, [r0, #4]
   d6230:	f7fe bb66 	b.w	d4900 <network_off>

000d6234 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6234:	2300      	movs	r3, #0
   d6236:	461a      	mov	r2, r3
   d6238:	4619      	mov	r1, r3
   d623a:	6840      	ldr	r0, [r0, #4]
   d623c:	f7fe bb58 	b.w	d48f0 <network_on>

000d6240 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6240:	2200      	movs	r2, #0
   d6242:	4611      	mov	r1, r2
   d6244:	6840      	ldr	r0, [r0, #4]
   d6246:	f7fe bb4b 	b.w	d48e0 <network_ready>

000d624a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d624a:	2200      	movs	r2, #0
   d624c:	4611      	mov	r1, r2
   d624e:	6840      	ldr	r0, [r0, #4]
   d6250:	f7fe bb36 	b.w	d48c0 <network_connecting>

000d6254 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6254:	2200      	movs	r2, #0
   d6256:	2102      	movs	r1, #2
   d6258:	6840      	ldr	r0, [r0, #4]
   d625a:	f7fe bb39 	b.w	d48d0 <network_disconnect>

000d625e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d625e:	2300      	movs	r3, #0
   d6260:	461a      	mov	r2, r3
   d6262:	6840      	ldr	r0, [r0, #4]
   d6264:	f7fe bb24 	b.w	d48b0 <network_connect>

000d6268 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6268:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d626a:	4605      	mov	r5, r0
   d626c:	b188      	cbz	r0, d6292 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d626e:	6804      	ldr	r4, [r0, #0]
   d6270:	b14c      	cbz	r4, d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6272:	68a3      	ldr	r3, [r4, #8]
   d6274:	b11b      	cbz	r3, d627e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6276:	2203      	movs	r2, #3
   d6278:	4621      	mov	r1, r4
   d627a:	4620      	mov	r0, r4
   d627c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d627e:	2110      	movs	r1, #16
   d6280:	4620      	mov	r0, r4
   d6282:	f000 f9a8 	bl	d65d6 <_ZdlPvj>
   d6286:	4628      	mov	r0, r5
   d6288:	2114      	movs	r1, #20
      }
   d628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d628e:	f000 b9a2 	b.w	d65d6 <_ZdlPvj>
   d6292:	bd38      	pop	{r3, r4, r5, pc}

000d6294 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6294:	b110      	cbz	r0, d629c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6296:	6803      	ldr	r3, [r0, #0]
   d6298:	685b      	ldr	r3, [r3, #4]
   d629a:	4718      	bx	r3
   d629c:	4770      	bx	lr

000d629e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d629e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d62a0:	6803      	ldr	r3, [r0, #0]
   d62a2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d62a4:	b1bb      	cbz	r3, d62d6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d62a6:	6858      	ldr	r0, [r3, #4]
   d62a8:	f7fe f9b6 	bl	d4618 <os_thread_is_current>
   d62ac:	b978      	cbnz	r0, d62ce <_ZN6ThreadD1Ev+0x30>
   d62ae:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d62b0:	7c5a      	ldrb	r2, [r3, #17]
   d62b2:	b912      	cbnz	r2, d62ba <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d62b4:	6858      	ldr	r0, [r3, #4]
   d62b6:	f7fe f9b7 	bl	d4628 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62ba:	6823      	ldr	r3, [r4, #0]
   d62bc:	6858      	ldr	r0, [r3, #4]
   d62be:	f7fe f9bb 	bl	d4638 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62c2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62c4:	2300      	movs	r3, #0
   d62c6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62c8:	b128      	cbz	r0, d62d6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62ca:	f7ff ffcd 	bl	d6268 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62ce:	6820      	ldr	r0, [r4, #0]
   d62d0:	b108      	cbz	r0, d62d6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62d2:	f7ff ffc9 	bl	d6268 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62d6:	4620      	mov	r0, r4
   d62d8:	bd10      	pop	{r4, pc}
	...

000d62dc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62dc:	b538      	push	{r3, r4, r5, lr}
   d62de:	4b0c      	ldr	r3, [pc, #48]	; (d6310 <_ZN5spark9MeshClassD1Ev+0x34>)
   d62e0:	6003      	str	r3, [r0, #0]
   d62e2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62e4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d62e8:	b108      	cbz	r0, d62ee <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d62ea:	f7fd fed8 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62ee:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d62f2:	b135      	cbz	r5, d6302 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62f4:	4628      	mov	r0, r5
   d62f6:	f7ff ffd2 	bl	d629e <_ZN6ThreadD1Ev>
   d62fa:	2104      	movs	r1, #4
   d62fc:	4628      	mov	r0, r5
   d62fe:	f000 f96a 	bl	d65d6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6302:	68a0      	ldr	r0, [r4, #8]
   d6304:	b108      	cbz	r0, d630a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6306:	f7ff ffc5 	bl	d6294 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d630a:	4620      	mov	r0, r4
   d630c:	bd38      	pop	{r3, r4, r5, pc}
   d630e:	bf00      	nop
   d6310:	000d6eb0 	.word	0x000d6eb0

000d6314 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6314:	b538      	push	{r3, r4, r5, lr}
   d6316:	4c0e      	ldr	r4, [pc, #56]	; (d6350 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6318:	4b0e      	ldr	r3, [pc, #56]	; (d6354 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d631a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d631c:	2500      	movs	r5, #0
   d631e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6320:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6324:	6063      	str	r3, [r4, #4]
   d6326:	60a5      	str	r5, [r4, #8]
   d6328:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d632c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6330:	f7fe f992 	bl	d4658 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6334:	4b08      	ldr	r3, [pc, #32]	; (d6358 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6336:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d633a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d633e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6340:	4620      	mov	r0, r4
   d6342:	4a06      	ldr	r2, [pc, #24]	; (d635c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6344:	4906      	ldr	r1, [pc, #24]	; (d6360 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d634a:	f000 b93f 	b.w	d65cc <__aeabi_atexit>
   d634e:	bf00      	nop
   d6350:	2003e538 	.word	0x2003e538
   d6354:	000d6ee4 	.word	0x000d6ee4
   d6358:	000d6eb0 	.word	0x000d6eb0
   d635c:	2003e36c 	.word	0x2003e36c
   d6360:	000d62dd 	.word	0x000d62dd

000d6364 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6364:	2300      	movs	r3, #0
   d6366:	461a      	mov	r2, r3
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	f7fe baa1 	b.w	d48b0 <network_connect>

000d636e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d636e:	2200      	movs	r2, #0
   d6370:	2102      	movs	r1, #2
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	f7fe baac 	b.w	d48d0 <network_disconnect>

000d6378 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6378:	2200      	movs	r2, #0
   d637a:	4611      	mov	r1, r2
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f7fe ba9f 	b.w	d48c0 <network_connecting>

000d6382 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6382:	2200      	movs	r2, #0
   d6384:	4611      	mov	r1, r2
   d6386:	6840      	ldr	r0, [r0, #4]
   d6388:	f7fe baaa 	b.w	d48e0 <network_ready>

000d638c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d638c:	2300      	movs	r3, #0
   d638e:	461a      	mov	r2, r3
   d6390:	4619      	mov	r1, r3
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7fe baac 	b.w	d48f0 <network_on>

000d6398 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6398:	2300      	movs	r3, #0
   d639a:	461a      	mov	r2, r3
   d639c:	4619      	mov	r1, r3
   d639e:	6840      	ldr	r0, [r0, #4]
   d63a0:	f7fe baae 	b.w	d4900 <network_off>

000d63a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63a4:	2200      	movs	r2, #0
   d63a6:	f081 0101 	eor.w	r1, r1, #1
   d63aa:	6840      	ldr	r0, [r0, #4]
   d63ac:	f7fe bab0 	b.w	d4910 <network_listen>

000d63b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63b0:	2200      	movs	r2, #0
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7fe babc 	b.w	d4930 <network_set_listen_timeout>

000d63b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63b8:	2200      	movs	r2, #0
   d63ba:	4611      	mov	r1, r2
   d63bc:	6840      	ldr	r0, [r0, #4]
   d63be:	f7fe babf 	b.w	d4940 <network_get_listen_timeout>

000d63c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63c2:	2200      	movs	r2, #0
   d63c4:	4611      	mov	r1, r2
   d63c6:	6840      	ldr	r0, [r0, #4]
   d63c8:	f7fe baaa 	b.w	d4920 <network_listening>

000d63cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63d2:	b095      	sub	sp, #84	; 0x54
   d63d4:	4616      	mov	r6, r2
   d63d6:	460d      	mov	r5, r1
   d63d8:	4607      	mov	r7, r0
    IPAddress addr;
   d63da:	f7ff fd8d 	bl	d5ef8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63de:	4621      	mov	r1, r4
   d63e0:	2220      	movs	r2, #32
   d63e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63e6:	f000 fa84 	bl	d68f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63ea:	2340      	movs	r3, #64	; 0x40
   d63ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63ee:	4621      	mov	r1, r4
   d63f0:	466b      	mov	r3, sp
   d63f2:	aa0c      	add	r2, sp, #48	; 0x30
   d63f4:	4630      	mov	r0, r6
   d63f6:	f7fe f845 	bl	d4484 <netdb_getaddrinfo>
    if (!r) {
   d63fa:	4604      	mov	r4, r0
   d63fc:	2800      	cmp	r0, #0
   d63fe:	d144      	bne.n	d648a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6400:	4602      	mov	r2, r0
   d6402:	2101      	movs	r1, #1
   d6404:	6868      	ldr	r0, [r5, #4]
   d6406:	f7fe fa6b 	bl	d48e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d640a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d640c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d640e:	4622      	mov	r2, r4
   d6410:	6868      	ldr	r0, [r5, #4]
   d6412:	f7fe fa65 	bl	d48e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6416:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6418:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d641a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d641c:	2e00      	cmp	r6, #0
   d641e:	d034      	beq.n	d648a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6420:	2900      	cmp	r1, #0
   d6422:	d132      	bne.n	d648a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6424:	6873      	ldr	r3, [r6, #4]
   d6426:	2b02      	cmp	r3, #2
   d6428:	d002      	beq.n	d6430 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d642a:	2b0a      	cmp	r3, #10
   d642c:	d009      	beq.n	d6442 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d642e:	e02a      	b.n	d6486 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6430:	f1b8 0f00 	cmp.w	r8, #0
   d6434:	d027      	beq.n	d6486 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6436:	6971      	ldr	r1, [r6, #20]
   d6438:	4638      	mov	r0, r7
   d643a:	3104      	adds	r1, #4
   d643c:	f7ff fd89 	bl	d5f52 <_ZN9IPAddressaSEPKh>
   d6440:	e020      	b.n	d6484 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6442:	f1b9 0f00 	cmp.w	r9, #0
   d6446:	d01e      	beq.n	d6486 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6448:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d644a:	2211      	movs	r2, #17
   d644c:	a801      	add	r0, sp, #4
   d644e:	f000 fa50 	bl	d68f2 <memset>
                    a.v = 6;
   d6452:	2306      	movs	r3, #6
   d6454:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6458:	ad01      	add	r5, sp, #4
   d645a:	f104 0308 	add.w	r3, r4, #8
   d645e:	3418      	adds	r4, #24
   d6460:	6818      	ldr	r0, [r3, #0]
   d6462:	6859      	ldr	r1, [r3, #4]
   d6464:	462a      	mov	r2, r5
   d6466:	c203      	stmia	r2!, {r0, r1}
   d6468:	3308      	adds	r3, #8
   d646a:	42a3      	cmp	r3, r4
   d646c:	4615      	mov	r5, r2
   d646e:	d1f7      	bne.n	d6460 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6470:	a901      	add	r1, sp, #4
   d6472:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6474:	ad07      	add	r5, sp, #28
   d6476:	f7ff fd4d 	bl	d5f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d647a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d647c:	1d3c      	adds	r4, r7, #4
   d647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6480:	682b      	ldr	r3, [r5, #0]
   d6482:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6484:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6486:	69f6      	ldr	r6, [r6, #28]
   d6488:	e7c8      	b.n	d641c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d648a:	9800      	ldr	r0, [sp, #0]
   d648c:	f7fd fff2 	bl	d4474 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6490:	4638      	mov	r0, r7
   d6492:	b015      	add	sp, #84	; 0x54
   d6494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6498 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6498:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d649a:	4a03      	ldr	r2, [pc, #12]	; (d64a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d649c:	601a      	str	r2, [r3, #0]
   d649e:	2200      	movs	r2, #0
   d64a0:	605a      	str	r2, [r3, #4]
   d64a2:	4770      	bx	lr
   d64a4:	2003e70c 	.word	0x2003e70c
   d64a8:	000d6ee4 	.word	0x000d6ee4

000d64ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d64ac:	b510      	push	{r4, lr}
   d64ae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d64b0:	480f      	ldr	r0, [pc, #60]	; (d64f0 <pinAvailable+0x44>)
   d64b2:	f7fe fac7 	bl	d4a44 <_ZN8SPIClass9isEnabledEv>
   d64b6:	b128      	cbz	r0, d64c4 <pinAvailable+0x18>
   d64b8:	f1a4 030b 	sub.w	r3, r4, #11
   d64bc:	2b02      	cmp	r3, #2
   d64be:	d801      	bhi.n	d64c4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d64c0:	2000      	movs	r0, #0
   d64c2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d64c4:	f000 f862 	bl	d658c <_Z19__fetch_global_Wirev>
   d64c8:	f7ff fe96 	bl	d61f8 <_ZN7TwoWire9isEnabledEv>
   d64cc:	b108      	cbz	r0, d64d2 <pinAvailable+0x26>
   d64ce:	2c01      	cmp	r4, #1
   d64d0:	d9f6      	bls.n	d64c0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d64d2:	f7ff fe2d 	bl	d6130 <_Z22__fetch_global_Serial1v>
   d64d6:	f7ff fe27 	bl	d6128 <_ZN11USARTSerial9isEnabledEv>
   d64da:	b118      	cbz	r0, d64e4 <pinAvailable+0x38>
   d64dc:	f1a4 0309 	sub.w	r3, r4, #9
   d64e0:	2b01      	cmp	r3, #1
   d64e2:	d9ed      	bls.n	d64c0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d64e4:	2c1e      	cmp	r4, #30
   d64e6:	bf8c      	ite	hi
   d64e8:	2000      	movhi	r0, #0
   d64ea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d64ec:	bd10      	pop	{r4, pc}
   d64ee:	bf00      	nop
   d64f0:	2003e714 	.word	0x2003e714

000d64f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d64f4:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d64f6:	b538      	push	{r3, r4, r5, lr}
   d64f8:	4604      	mov	r4, r0
   d64fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d64fc:	d80a      	bhi.n	d6514 <pinMode+0x20>
   d64fe:	29ff      	cmp	r1, #255	; 0xff
   d6500:	d008      	beq.n	d6514 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6502:	f7ff ffd3 	bl	d64ac <pinAvailable>
   d6506:	b128      	cbz	r0, d6514 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6508:	4629      	mov	r1, r5
   d650a:	4620      	mov	r0, r4
}
   d650c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6510:	f7fd bfc8 	b.w	d44a4 <HAL_Pin_Mode>
   d6514:	bd38      	pop	{r3, r4, r5, pc}

000d6516 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6516:	b538      	push	{r3, r4, r5, lr}
   d6518:	4604      	mov	r4, r0
   d651a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d651c:	f7fd ffca 	bl	d44b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6520:	28ff      	cmp	r0, #255	; 0xff
   d6522:	d010      	beq.n	d6546 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6524:	2806      	cmp	r0, #6
   d6526:	d804      	bhi.n	d6532 <digitalWrite+0x1c>
   d6528:	234d      	movs	r3, #77	; 0x4d
   d652a:	fa23 f000 	lsr.w	r0, r3, r0
   d652e:	07c3      	lsls	r3, r0, #31
   d6530:	d409      	bmi.n	d6546 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6532:	4620      	mov	r0, r4
   d6534:	f7ff ffba 	bl	d64ac <pinAvailable>
   d6538:	b128      	cbz	r0, d6546 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d653a:	4629      	mov	r1, r5
   d653c:	4620      	mov	r0, r4
}
   d653e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6542:	f7fd bfbf 	b.w	d44c4 <HAL_GPIO_Write>
   d6546:	bd38      	pop	{r3, r4, r5, pc}

000d6548 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6548:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d654a:	4c0c      	ldr	r4, [pc, #48]	; (d657c <_GLOBAL__sub_I_SPI+0x34>)
   d654c:	4e0c      	ldr	r6, [pc, #48]	; (d6580 <_GLOBAL__sub_I_SPI+0x38>)
   d654e:	4d0d      	ldr	r5, [pc, #52]	; (d6584 <_GLOBAL__sub_I_SPI+0x3c>)
   d6550:	2100      	movs	r1, #0
   d6552:	4620      	mov	r0, r4
   d6554:	f7fe fa62 	bl	d4a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6558:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d655a:	4c0b      	ldr	r4, [pc, #44]	; (d6588 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d655c:	4632      	mov	r2, r6
   d655e:	4629      	mov	r1, r5
   d6560:	f000 f834 	bl	d65cc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6564:	2101      	movs	r1, #1
   d6566:	4620      	mov	r0, r4
   d6568:	f7fe fa58 	bl	d4a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d656c:	4632      	mov	r2, r6
   d656e:	4629      	mov	r1, r5
   d6570:	4620      	mov	r0, r4
   d6572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6576:	f000 b829 	b.w	d65cc <__aeabi_atexit>
   d657a:	bf00      	nop
   d657c:	2003e714 	.word	0x2003e714
   d6580:	2003e36c 	.word	0x2003e36c
   d6584:	000d4a0d 	.word	0x000d4a0d
   d6588:	2003e724 	.word	0x2003e724

000d658c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d658c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d658e:	4d0b      	ldr	r5, [pc, #44]	; (d65bc <_Z19__fetch_global_Wirev+0x30>)
   d6590:	6829      	ldr	r1, [r5, #0]
   d6592:	f011 0401 	ands.w	r4, r1, #1
   d6596:	d10f      	bne.n	d65b8 <_Z19__fetch_global_Wirev+0x2c>
   d6598:	4628      	mov	r0, r5
   d659a:	f7fd fd82 	bl	d40a2 <__cxa_guard_acquire>
   d659e:	b158      	cbz	r0, d65b8 <_Z19__fetch_global_Wirev+0x2c>
   d65a0:	4621      	mov	r1, r4
   d65a2:	4807      	ldr	r0, [pc, #28]	; (d65c0 <_Z19__fetch_global_Wirev+0x34>)
   d65a4:	f7ff fe16 	bl	d61d4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d65a8:	4628      	mov	r0, r5
   d65aa:	f7fd fd7f 	bl	d40ac <__cxa_guard_release>
   d65ae:	4a05      	ldr	r2, [pc, #20]	; (d65c4 <_Z19__fetch_global_Wirev+0x38>)
   d65b0:	4905      	ldr	r1, [pc, #20]	; (d65c8 <_Z19__fetch_global_Wirev+0x3c>)
   d65b2:	4803      	ldr	r0, [pc, #12]	; (d65c0 <_Z19__fetch_global_Wirev+0x34>)
   d65b4:	f000 f80a 	bl	d65cc <__aeabi_atexit>
	return wire;
}
   d65b8:	4801      	ldr	r0, [pc, #4]	; (d65c0 <_Z19__fetch_global_Wirev+0x34>)
   d65ba:	bd38      	pop	{r3, r4, r5, pc}
   d65bc:	2003e738 	.word	0x2003e738
   d65c0:	2003e73c 	.word	0x2003e73c
   d65c4:	2003e36c 	.word	0x2003e36c
   d65c8:	000d617d 	.word	0x000d617d

000d65cc <__aeabi_atexit>:
   d65cc:	460b      	mov	r3, r1
   d65ce:	4601      	mov	r1, r0
   d65d0:	4618      	mov	r0, r3
   d65d2:	f000 b94b 	b.w	d686c <__cxa_atexit>

000d65d6 <_ZdlPvj>:
   d65d6:	f7fd bd60 	b.w	d409a <_ZdlPv>
	...

000d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d65dc:	4b18      	ldr	r3, [pc, #96]	; (d6640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d65de:	681a      	ldr	r2, [r3, #0]
   d65e0:	07d1      	lsls	r1, r2, #31
   d65e2:	bf5c      	itt	pl
   d65e4:	2201      	movpl	r2, #1
   d65e6:	601a      	strpl	r2, [r3, #0]
   d65e8:	4b16      	ldr	r3, [pc, #88]	; (d6644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d65ea:	681a      	ldr	r2, [r3, #0]
   d65ec:	07d2      	lsls	r2, r2, #31
   d65ee:	bf5c      	itt	pl
   d65f0:	2201      	movpl	r2, #1
   d65f2:	601a      	strpl	r2, [r3, #0]
   d65f4:	4b14      	ldr	r3, [pc, #80]	; (d6648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d65f6:	681a      	ldr	r2, [r3, #0]
   d65f8:	07d0      	lsls	r0, r2, #31
   d65fa:	bf5c      	itt	pl
   d65fc:	2201      	movpl	r2, #1
   d65fe:	601a      	strpl	r2, [r3, #0]
   d6600:	4b12      	ldr	r3, [pc, #72]	; (d664c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6602:	681a      	ldr	r2, [r3, #0]
   d6604:	07d1      	lsls	r1, r2, #31
   d6606:	bf5c      	itt	pl
   d6608:	2201      	movpl	r2, #1
   d660a:	601a      	strpl	r2, [r3, #0]
   d660c:	4b10      	ldr	r3, [pc, #64]	; (d6650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d660e:	681a      	ldr	r2, [r3, #0]
   d6610:	07d2      	lsls	r2, r2, #31
   d6612:	bf5c      	itt	pl
   d6614:	2201      	movpl	r2, #1
   d6616:	601a      	strpl	r2, [r3, #0]
   d6618:	4b0e      	ldr	r3, [pc, #56]	; (d6654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d661a:	681a      	ldr	r2, [r3, #0]
   d661c:	07d0      	lsls	r0, r2, #31
   d661e:	bf5c      	itt	pl
   d6620:	2201      	movpl	r2, #1
   d6622:	601a      	strpl	r2, [r3, #0]
   d6624:	4b0c      	ldr	r3, [pc, #48]	; (d6658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6626:	681a      	ldr	r2, [r3, #0]
   d6628:	07d1      	lsls	r1, r2, #31
   d662a:	bf5c      	itt	pl
   d662c:	2201      	movpl	r2, #1
   d662e:	601a      	strpl	r2, [r3, #0]
   d6630:	4b0a      	ldr	r3, [pc, #40]	; (d665c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6632:	681a      	ldr	r2, [r3, #0]
   d6634:	07d2      	lsls	r2, r2, #31
   d6636:	bf5c      	itt	pl
   d6638:	2201      	movpl	r2, #1
   d663a:	601a      	strpl	r2, [r3, #0]
   d663c:	4770      	bx	lr
   d663e:	bf00      	nop
   d6640:	2003e76c 	.word	0x2003e76c
   d6644:	2003e768 	.word	0x2003e768
   d6648:	2003e764 	.word	0x2003e764
   d664c:	2003e760 	.word	0x2003e760
   d6650:	2003e75c 	.word	0x2003e75c
   d6654:	2003e758 	.word	0x2003e758
   d6658:	2003e754 	.word	0x2003e754
   d665c:	2003e750 	.word	0x2003e750

000d6660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6660:	4b24      	ldr	r3, [pc, #144]	; (d66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6662:	681a      	ldr	r2, [r3, #0]
   d6664:	07d0      	lsls	r0, r2, #31
   d6666:	bf5c      	itt	pl
   d6668:	2201      	movpl	r2, #1
   d666a:	601a      	strpl	r2, [r3, #0]
   d666c:	4b22      	ldr	r3, [pc, #136]	; (d66f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d666e:	681a      	ldr	r2, [r3, #0]
   d6670:	07d1      	lsls	r1, r2, #31
   d6672:	bf5c      	itt	pl
   d6674:	2201      	movpl	r2, #1
   d6676:	601a      	strpl	r2, [r3, #0]
   d6678:	4b20      	ldr	r3, [pc, #128]	; (d66fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d667a:	681a      	ldr	r2, [r3, #0]
   d667c:	07d2      	lsls	r2, r2, #31
   d667e:	bf5c      	itt	pl
   d6680:	2201      	movpl	r2, #1
   d6682:	601a      	strpl	r2, [r3, #0]
   d6684:	4b1e      	ldr	r3, [pc, #120]	; (d6700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6686:	681a      	ldr	r2, [r3, #0]
   d6688:	07d0      	lsls	r0, r2, #31
   d668a:	bf5c      	itt	pl
   d668c:	2201      	movpl	r2, #1
   d668e:	601a      	strpl	r2, [r3, #0]
   d6690:	4b1c      	ldr	r3, [pc, #112]	; (d6704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6692:	681a      	ldr	r2, [r3, #0]
   d6694:	07d1      	lsls	r1, r2, #31
   d6696:	bf5c      	itt	pl
   d6698:	2201      	movpl	r2, #1
   d669a:	601a      	strpl	r2, [r3, #0]
   d669c:	4b1a      	ldr	r3, [pc, #104]	; (d6708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d669e:	681a      	ldr	r2, [r3, #0]
   d66a0:	07d2      	lsls	r2, r2, #31
   d66a2:	bf5c      	itt	pl
   d66a4:	2201      	movpl	r2, #1
   d66a6:	601a      	strpl	r2, [r3, #0]
   d66a8:	4b18      	ldr	r3, [pc, #96]	; (d670c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d66aa:	681a      	ldr	r2, [r3, #0]
   d66ac:	07d0      	lsls	r0, r2, #31
   d66ae:	bf5c      	itt	pl
   d66b0:	2201      	movpl	r2, #1
   d66b2:	601a      	strpl	r2, [r3, #0]
   d66b4:	4b16      	ldr	r3, [pc, #88]	; (d6710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d66b6:	681a      	ldr	r2, [r3, #0]
   d66b8:	07d1      	lsls	r1, r2, #31
   d66ba:	bf5c      	itt	pl
   d66bc:	2201      	movpl	r2, #1
   d66be:	601a      	strpl	r2, [r3, #0]
   d66c0:	4b14      	ldr	r3, [pc, #80]	; (d6714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d66c2:	681a      	ldr	r2, [r3, #0]
   d66c4:	07d2      	lsls	r2, r2, #31
   d66c6:	bf5c      	itt	pl
   d66c8:	2201      	movpl	r2, #1
   d66ca:	601a      	strpl	r2, [r3, #0]
   d66cc:	4b12      	ldr	r3, [pc, #72]	; (d6718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d66ce:	681a      	ldr	r2, [r3, #0]
   d66d0:	07d0      	lsls	r0, r2, #31
   d66d2:	bf5c      	itt	pl
   d66d4:	2201      	movpl	r2, #1
   d66d6:	601a      	strpl	r2, [r3, #0]
   d66d8:	4b10      	ldr	r3, [pc, #64]	; (d671c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d66da:	681a      	ldr	r2, [r3, #0]
   d66dc:	07d1      	lsls	r1, r2, #31
   d66de:	bf5c      	itt	pl
   d66e0:	2201      	movpl	r2, #1
   d66e2:	601a      	strpl	r2, [r3, #0]
   d66e4:	4b0e      	ldr	r3, [pc, #56]	; (d6720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d66e6:	681a      	ldr	r2, [r3, #0]
   d66e8:	07d2      	lsls	r2, r2, #31
   d66ea:	bf5c      	itt	pl
   d66ec:	2201      	movpl	r2, #1
   d66ee:	601a      	strpl	r2, [r3, #0]
   d66f0:	4770      	bx	lr
   d66f2:	bf00      	nop
   d66f4:	2003e79c 	.word	0x2003e79c
   d66f8:	2003e798 	.word	0x2003e798
   d66fc:	2003e794 	.word	0x2003e794
   d6700:	2003e790 	.word	0x2003e790
   d6704:	2003e78c 	.word	0x2003e78c
   d6708:	2003e788 	.word	0x2003e788
   d670c:	2003e784 	.word	0x2003e784
   d6710:	2003e780 	.word	0x2003e780
   d6714:	2003e77c 	.word	0x2003e77c
   d6718:	2003e778 	.word	0x2003e778
   d671c:	2003e774 	.word	0x2003e774
   d6720:	2003e770 	.word	0x2003e770

000d6724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6724:	4b24      	ldr	r3, [pc, #144]	; (d67b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d0      	lsls	r0, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b22      	ldr	r3, [pc, #136]	; (d67bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d1      	lsls	r1, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b20      	ldr	r3, [pc, #128]	; (d67c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d2      	lsls	r2, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4b1e      	ldr	r3, [pc, #120]	; (d67c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	07d0      	lsls	r0, r2, #31
   d674e:	bf5c      	itt	pl
   d6750:	2201      	movpl	r2, #1
   d6752:	601a      	strpl	r2, [r3, #0]
   d6754:	4b1c      	ldr	r3, [pc, #112]	; (d67c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6756:	681a      	ldr	r2, [r3, #0]
   d6758:	07d1      	lsls	r1, r2, #31
   d675a:	bf5c      	itt	pl
   d675c:	2201      	movpl	r2, #1
   d675e:	601a      	strpl	r2, [r3, #0]
   d6760:	4b1a      	ldr	r3, [pc, #104]	; (d67cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6762:	681a      	ldr	r2, [r3, #0]
   d6764:	07d2      	lsls	r2, r2, #31
   d6766:	bf5c      	itt	pl
   d6768:	2201      	movpl	r2, #1
   d676a:	601a      	strpl	r2, [r3, #0]
   d676c:	4b18      	ldr	r3, [pc, #96]	; (d67d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d676e:	681a      	ldr	r2, [r3, #0]
   d6770:	07d0      	lsls	r0, r2, #31
   d6772:	bf5c      	itt	pl
   d6774:	2201      	movpl	r2, #1
   d6776:	601a      	strpl	r2, [r3, #0]
   d6778:	4b16      	ldr	r3, [pc, #88]	; (d67d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d677a:	681a      	ldr	r2, [r3, #0]
   d677c:	07d1      	lsls	r1, r2, #31
   d677e:	bf5c      	itt	pl
   d6780:	2201      	movpl	r2, #1
   d6782:	601a      	strpl	r2, [r3, #0]
   d6784:	4b14      	ldr	r3, [pc, #80]	; (d67d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6786:	681a      	ldr	r2, [r3, #0]
   d6788:	07d2      	lsls	r2, r2, #31
   d678a:	bf5c      	itt	pl
   d678c:	2201      	movpl	r2, #1
   d678e:	601a      	strpl	r2, [r3, #0]
   d6790:	4b12      	ldr	r3, [pc, #72]	; (d67dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6792:	681a      	ldr	r2, [r3, #0]
   d6794:	07d0      	lsls	r0, r2, #31
   d6796:	bf5c      	itt	pl
   d6798:	2201      	movpl	r2, #1
   d679a:	601a      	strpl	r2, [r3, #0]
   d679c:	4b10      	ldr	r3, [pc, #64]	; (d67e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d679e:	681a      	ldr	r2, [r3, #0]
   d67a0:	07d1      	lsls	r1, r2, #31
   d67a2:	bf5c      	itt	pl
   d67a4:	2201      	movpl	r2, #1
   d67a6:	601a      	strpl	r2, [r3, #0]
   d67a8:	4b0e      	ldr	r3, [pc, #56]	; (d67e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d67aa:	681a      	ldr	r2, [r3, #0]
   d67ac:	07d2      	lsls	r2, r2, #31
   d67ae:	bf5c      	itt	pl
   d67b0:	2201      	movpl	r2, #1
   d67b2:	601a      	strpl	r2, [r3, #0]
   d67b4:	4770      	bx	lr
   d67b6:	bf00      	nop
   d67b8:	2003e7cc 	.word	0x2003e7cc
   d67bc:	2003e7c8 	.word	0x2003e7c8
   d67c0:	2003e7c4 	.word	0x2003e7c4
   d67c4:	2003e7c0 	.word	0x2003e7c0
   d67c8:	2003e7bc 	.word	0x2003e7bc
   d67cc:	2003e7b8 	.word	0x2003e7b8
   d67d0:	2003e7b4 	.word	0x2003e7b4
   d67d4:	2003e7b0 	.word	0x2003e7b0
   d67d8:	2003e7ac 	.word	0x2003e7ac
   d67dc:	2003e7a8 	.word	0x2003e7a8
   d67e0:	2003e7a4 	.word	0x2003e7a4
   d67e4:	2003e7a0 	.word	0x2003e7a0

000d67e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d67e8:	4b18      	ldr	r3, [pc, #96]	; (d684c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d67ea:	681a      	ldr	r2, [r3, #0]
   d67ec:	07d1      	lsls	r1, r2, #31
   d67ee:	bf5c      	itt	pl
   d67f0:	2201      	movpl	r2, #1
   d67f2:	601a      	strpl	r2, [r3, #0]
   d67f4:	4b16      	ldr	r3, [pc, #88]	; (d6850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d67f6:	681a      	ldr	r2, [r3, #0]
   d67f8:	07d2      	lsls	r2, r2, #31
   d67fa:	bf5c      	itt	pl
   d67fc:	2201      	movpl	r2, #1
   d67fe:	601a      	strpl	r2, [r3, #0]
   d6800:	4b14      	ldr	r3, [pc, #80]	; (d6854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6802:	681a      	ldr	r2, [r3, #0]
   d6804:	07d0      	lsls	r0, r2, #31
   d6806:	bf5c      	itt	pl
   d6808:	2201      	movpl	r2, #1
   d680a:	601a      	strpl	r2, [r3, #0]
   d680c:	4b12      	ldr	r3, [pc, #72]	; (d6858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d680e:	681a      	ldr	r2, [r3, #0]
   d6810:	07d1      	lsls	r1, r2, #31
   d6812:	bf5c      	itt	pl
   d6814:	2201      	movpl	r2, #1
   d6816:	601a      	strpl	r2, [r3, #0]
   d6818:	4b10      	ldr	r3, [pc, #64]	; (d685c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d681a:	681a      	ldr	r2, [r3, #0]
   d681c:	07d2      	lsls	r2, r2, #31
   d681e:	bf5c      	itt	pl
   d6820:	2201      	movpl	r2, #1
   d6822:	601a      	strpl	r2, [r3, #0]
   d6824:	4b0e      	ldr	r3, [pc, #56]	; (d6860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6826:	681a      	ldr	r2, [r3, #0]
   d6828:	07d0      	lsls	r0, r2, #31
   d682a:	bf5c      	itt	pl
   d682c:	2201      	movpl	r2, #1
   d682e:	601a      	strpl	r2, [r3, #0]
   d6830:	4b0c      	ldr	r3, [pc, #48]	; (d6864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6832:	681a      	ldr	r2, [r3, #0]
   d6834:	07d1      	lsls	r1, r2, #31
   d6836:	bf5c      	itt	pl
   d6838:	2201      	movpl	r2, #1
   d683a:	601a      	strpl	r2, [r3, #0]
   d683c:	4b0a      	ldr	r3, [pc, #40]	; (d6868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d683e:	681a      	ldr	r2, [r3, #0]
   d6840:	07d2      	lsls	r2, r2, #31
   d6842:	bf5c      	itt	pl
   d6844:	2201      	movpl	r2, #1
   d6846:	601a      	strpl	r2, [r3, #0]
   d6848:	4770      	bx	lr
   d684a:	bf00      	nop
   d684c:	2003e7ec 	.word	0x2003e7ec
   d6850:	2003e7e8 	.word	0x2003e7e8
   d6854:	2003e7e4 	.word	0x2003e7e4
   d6858:	2003e7e0 	.word	0x2003e7e0
   d685c:	2003e7dc 	.word	0x2003e7dc
   d6860:	2003e7d8 	.word	0x2003e7d8
   d6864:	2003e7d4 	.word	0x2003e7d4
   d6868:	2003e7d0 	.word	0x2003e7d0

000d686c <__cxa_atexit>:
   d686c:	b510      	push	{r4, lr}
   d686e:	4c05      	ldr	r4, [pc, #20]	; (d6884 <__cxa_atexit+0x18>)
   d6870:	4613      	mov	r3, r2
   d6872:	b12c      	cbz	r4, d6880 <__cxa_atexit+0x14>
   d6874:	460a      	mov	r2, r1
   d6876:	4601      	mov	r1, r0
   d6878:	2002      	movs	r0, #2
   d687a:	f3af 8000 	nop.w
   d687e:	bd10      	pop	{r4, pc}
   d6880:	4620      	mov	r0, r4
   d6882:	bd10      	pop	{r4, pc}
   d6884:	00000000 	.word	0x00000000

000d6888 <memcmp>:
   d6888:	b510      	push	{r4, lr}
   d688a:	3901      	subs	r1, #1
   d688c:	4402      	add	r2, r0
   d688e:	4290      	cmp	r0, r2
   d6890:	d007      	beq.n	d68a2 <memcmp+0x1a>
   d6892:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6896:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d689a:	42a3      	cmp	r3, r4
   d689c:	d0f7      	beq.n	d688e <memcmp+0x6>
   d689e:	1b18      	subs	r0, r3, r4
   d68a0:	bd10      	pop	{r4, pc}
   d68a2:	2000      	movs	r0, #0
   d68a4:	bd10      	pop	{r4, pc}

000d68a6 <memcpy>:
   d68a6:	b510      	push	{r4, lr}
   d68a8:	1e43      	subs	r3, r0, #1
   d68aa:	440a      	add	r2, r1
   d68ac:	4291      	cmp	r1, r2
   d68ae:	d004      	beq.n	d68ba <memcpy+0x14>
   d68b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d68b8:	e7f8      	b.n	d68ac <memcpy+0x6>
   d68ba:	bd10      	pop	{r4, pc}

000d68bc <memmove>:
   d68bc:	4288      	cmp	r0, r1
   d68be:	b510      	push	{r4, lr}
   d68c0:	eb01 0302 	add.w	r3, r1, r2
   d68c4:	d801      	bhi.n	d68ca <memmove+0xe>
   d68c6:	1e42      	subs	r2, r0, #1
   d68c8:	e00b      	b.n	d68e2 <memmove+0x26>
   d68ca:	4298      	cmp	r0, r3
   d68cc:	d2fb      	bcs.n	d68c6 <memmove+0xa>
   d68ce:	1881      	adds	r1, r0, r2
   d68d0:	1ad2      	subs	r2, r2, r3
   d68d2:	42d3      	cmn	r3, r2
   d68d4:	d004      	beq.n	d68e0 <memmove+0x24>
   d68d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d68da:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d68de:	e7f8      	b.n	d68d2 <memmove+0x16>
   d68e0:	bd10      	pop	{r4, pc}
   d68e2:	4299      	cmp	r1, r3
   d68e4:	d004      	beq.n	d68f0 <memmove+0x34>
   d68e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68ea:	f802 4f01 	strb.w	r4, [r2, #1]!
   d68ee:	e7f8      	b.n	d68e2 <memmove+0x26>
   d68f0:	bd10      	pop	{r4, pc}

000d68f2 <memset>:
   d68f2:	4402      	add	r2, r0
   d68f4:	4603      	mov	r3, r0
   d68f6:	4293      	cmp	r3, r2
   d68f8:	d002      	beq.n	d6900 <memset+0xe>
   d68fa:	f803 1b01 	strb.w	r1, [r3], #1
   d68fe:	e7fa      	b.n	d68f6 <memset+0x4>
   d6900:	4770      	bx	lr
	...

000d6904 <srand>:
   d6904:	b538      	push	{r3, r4, r5, lr}
   d6906:	4b12      	ldr	r3, [pc, #72]	; (d6950 <srand+0x4c>)
   d6908:	681c      	ldr	r4, [r3, #0]
   d690a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d690c:	4605      	mov	r5, r0
   d690e:	b9d3      	cbnz	r3, d6946 <srand+0x42>
   d6910:	2018      	movs	r0, #24
   d6912:	f7fe f825 	bl	d4960 <malloc>
   d6916:	f243 330e 	movw	r3, #13070	; 0x330e
   d691a:	63a0      	str	r0, [r4, #56]	; 0x38
   d691c:	8003      	strh	r3, [r0, #0]
   d691e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6922:	8043      	strh	r3, [r0, #2]
   d6924:	f241 2334 	movw	r3, #4660	; 0x1234
   d6928:	8083      	strh	r3, [r0, #4]
   d692a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d692e:	80c3      	strh	r3, [r0, #6]
   d6930:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6934:	8103      	strh	r3, [r0, #8]
   d6936:	2305      	movs	r3, #5
   d6938:	8143      	strh	r3, [r0, #10]
   d693a:	230b      	movs	r3, #11
   d693c:	8183      	strh	r3, [r0, #12]
   d693e:	2201      	movs	r2, #1
   d6940:	2300      	movs	r3, #0
   d6942:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6948:	2200      	movs	r2, #0
   d694a:	611d      	str	r5, [r3, #16]
   d694c:	615a      	str	r2, [r3, #20]
   d694e:	bd38      	pop	{r3, r4, r5, pc}
   d6950:	2003e368 	.word	0x2003e368

000d6954 <strlen>:
   d6954:	4603      	mov	r3, r0
   d6956:	f813 2b01 	ldrb.w	r2, [r3], #1
   d695a:	2a00      	cmp	r2, #0
   d695c:	d1fb      	bne.n	d6956 <strlen+0x2>
   d695e:	1a18      	subs	r0, r3, r0
   d6960:	3801      	subs	r0, #1
   d6962:	4770      	bx	lr

000d6964 <strnlen>:
   d6964:	b510      	push	{r4, lr}
   d6966:	4603      	mov	r3, r0
   d6968:	4401      	add	r1, r0
   d696a:	428b      	cmp	r3, r1
   d696c:	d004      	beq.n	d6978 <strnlen+0x14>
   d696e:	781a      	ldrb	r2, [r3, #0]
   d6970:	1c5c      	adds	r4, r3, #1
   d6972:	b10a      	cbz	r2, d6978 <strnlen+0x14>
   d6974:	4623      	mov	r3, r4
   d6976:	e7f8      	b.n	d696a <strnlen+0x6>
   d6978:	1a18      	subs	r0, r3, r0
   d697a:	bd10      	pop	{r4, pc}

000d697c <dynalib_user>:
   d697c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d698c:	0000 0000 6c42 6575 6f74 746f 2068 6f43     ....Bluetooth Co
   d699c:	6e6e 6365 6574 2164 4200 756c 7465 6f6f     nnected!.Bluetoo
   d69ac:	6874 4420 7369 6f63 6e6e 6365 6574 2e64     th Disconnected.
   d69bc:	3600 3445 3030 3030 2d30 3542 3341 462d     .6E400000-B5A3-F
   d69cc:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   d69dc:	4343 3941 0045 7830 4132 4433 4e00 6d61     CCA9E.0x2A3D.Nam
   d69ec:	0065 7830 4132 4139 5500 6573 2072 6e49     e.0x2A9A.User In
   d69fc:	6564 0078 4536 3034 3030 3130 422d 4135     dex.6E400001-B5A
   d6a0c:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   d6a1c:	3432 4344 4143 4539 4100 6363 7365 2073     24DCCA9E.Access 
   d6a2c:	6e45 6261 656c 0064 4536 3034 3030 3230     Enabled.6E400002
   d6a3c:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   d6a4c:	3545 4530 3432 4344 4143 4539 6200 3600     E50E24DCCA9E.b.6
   d6a5c:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   d6a6c:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d6a7c:	3941 0045 796d 6843 7261 6361 6574 6972     A9E.myCharacteri
   d6a8c:	7473 6369 3600 3445 3030 3030 2d34 3542     stic.6E400004-B5
   d6a9c:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d6aac:	3245 4434 4343 3941 0045 0000               E24DCCA9E...

000d6ab8 <_ZTVN5spark13EthernetClassE>:
	...
   d6ac0:	49ef 000d 49e5 000d 49db 000d 49d1 000d     .I...I...I...I..
   d6ad0:	49c5 000d 49b9 000d 49ad 000d 49a5 000d     .I...I...I...I..
   d6ae0:	499b 000d 4991 000d 63cd 000d               .I...I...c..

000d6aec <_ZTV8SPIClass>:
	...
   d6af4:	4a0d 000d 4a0f 000d                         .J...J..

000d6afc <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6b04:	4b47 000d 4b4d 000d 5811 000d 4b77 000d     GK..MK...X..wK..
   d6b14:	4b49 000d                                   IK..

000d6b18 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6b20:	4b41 000d 4b5b 000d 5919 000d 4b7b 000d     AK..[K...Y..{K..
   d6b30:	4b43 000d                                   CK..

000d6b34 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6b3c:	4b3b 000d 4b69 000d 52fb 000d 4b7f 000d     ;K..iK...R...K..
   d6b4c:	4b3d 000d                                   =K..

000d6b50 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d6b50:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d6b60:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d6b70:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d6b80:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d6b90:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d6ba0:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d6bb0:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d6bc0:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d6bd0:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d6be0:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d6bf0:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d6c00:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d6c10:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d6c20:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d6c30:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d6c40:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d6c50:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d6c60:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d6c70:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d6c80:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d6c90:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d6ca0:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d6cb0:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d6cc0:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d6cd0:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d6ce0:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d6cf0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d6d00:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6d10:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6d20:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6d30:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6d40:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d6d50:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d6d60:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d6d70:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d6d80:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d6d90:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d6da0:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d6db0:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d6dc0:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d6dd0:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d6de0:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d6df0:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d6e00:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d6e0c <_ZTV9IPAddress>:
	...
   d6e14:	5e95 000d 5e85 000d 5e87 000d               .^...^...^..

000d6e20 <_ZTV9USBSerial>:
	...
   d6e28:	5f6d 000d 5fbd 000d 5fcb 000d 5c05 000d     m_..._..._...\..
   d6e38:	5fa9 000d 5f6f 000d 5f85 000d 5fb7 000d     ._..o_..._..._..
   d6e48:	5f9b 000d 5f69 000d                         ._..i_..

000d6e50 <_ZTV11USARTSerial>:
	...
   d6e58:	6079 000d 60c9 000d 60d7 000d 5c05 000d     y`...`...`...\..
   d6e68:	608d 000d 60af 000d 609b 000d 60c3 000d     .`...`...`...`..
   d6e78:	607b 000d 607f 000d                         {`...`..

000d6e80 <_ZTV7TwoWire>:
	...
   d6e88:	617d 000d 61c7 000d 619f 000d 617f 000d     }a...a...a...a..
   d6e98:	61a7 000d 61af 000d 61b7 000d 61bf 000d     .a...a...a...a..

000d6ea8 <_ZTVN5spark9MeshClassE>:
	...
   d6eb0:	625f 000d 6255 000d 624b 000d 6241 000d     _b..Ub..Kb..Ab..
   d6ec0:	6235 000d 6229 000d 621d 000d 6215 000d     5b..)b...b...b..
   d6ed0:	620b 000d 6201 000d 63cd 000d               .b...b...c..

000d6edc <_ZTVN5spark12NetworkClassE>:
	...
   d6ee4:	6365 000d 636f 000d 6379 000d 6383 000d     ec..oc..yc...c..
   d6ef4:	638d 000d 6399 000d 63a5 000d 63b1 000d     .c...c...c...c..
   d6f04:	63b9 000d 63c3 000d 63cd 000d               .c...c...c..

000d6f10 <__sf_fake_stdin>:
	...

000d6f30 <__sf_fake_stdout>:
	...

000d6f50 <__sf_fake_stderr>:
	...
   d6f70:	0043                                        C.

000d6f72 <link_const_variable_data_end>:
	...

000d6f74 <link_constructors_location>:
   d6f74:	000d4471 	.word	0x000d4471
   d6f78:	000d49f9 	.word	0x000d49f9
   d6f7c:	000d4a4d 	.word	0x000d4a4d
   d6f80:	000d5bf5 	.word	0x000d5bf5
   d6f84:	000d5ce1 	.word	0x000d5ce1
   d6f88:	000d5cf1 	.word	0x000d5cf1
   d6f8c:	000d5d85 	.word	0x000d5d85
   d6f90:	000d6315 	.word	0x000d6315
   d6f94:	000d6499 	.word	0x000d6499
   d6f98:	000d6549 	.word	0x000d6549
   d6f9c:	000d65dd 	.word	0x000d65dd
   d6fa0:	000d6661 	.word	0x000d6661
   d6fa4:	000d6725 	.word	0x000d6725
   d6fa8:	000d67e9 	.word	0x000d67e9

000d6fac <link_constructors_end>:
   d6fac:	00000000 	.word	0x00000000
